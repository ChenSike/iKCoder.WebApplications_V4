var IDE = {
    defaultProjectName: "Untitled",
    _layoutFlush: !1,
    _layoutTop: !1,
    _progressStack: 1,
    _ignoreUpdates: !1,
    _importCheckId: null,
    isDirty: 0,
    _lastSaved: Date.now(),
    _enableKeyboardShortcuts: !0,
    clickms: 500,
    lastTouchDown: -1,
    currentProjectId: null,
    currentProjectName: null,
    currentProjectDescription: null,
    editingActor: null
};
$(document).ready(function () {
    $(window).resize(IDE.adjustPanels);
    $(".tabs-container .tab").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        var b = $(this).attr("href");
        $(".tab-content" + b).addClass("active").siblings().removeClass("active");
        console.log(".tab-content" + b)
    });
    document.addEventListener("keyup", IDE._handleKeyUp);
    document.addEventListener("keydown", IDE._handleKeyDown);
    document.addEventListener("keypress", IDE._handleKeyPress);
    document.addEventListener("touchstart",
        IDE._touchHandler, true);
    document.addEventListener("touchmove", IDE._touchHandler, true);
    document.addEventListener("touchend", IDE._touchHandler, true);
    document.addEventListener("touchcancel", IDE._touchHandler, true);
    document.onscroll = function (b) {
        window.scrollTo(0, 0);
        b.preventDefault();
        b.stopPropagation();
        return false
    };
    document.oncontextmenu = function (b) {
        b.preventDefault();
        b.stopPropagation();
        return false
    };
    document.onselectstart = function (b) {
        if ((!window.WinCode || window.WinCode._inputField == null) && b.target.tagName !=
            "INPUT" && b.target.tagName != "TEXTAREA" && $("#win-annotation .jqte").length <= 0) {
            b.preventDefault();
            b.stopPropagation();
            return false
        }
    };
    $(document).dblclick(function (b) {
        b.preventDefault();
        b.stopPropagation();
        return false
    });
    window.onbeforeunload = IDE._onwindowleave;
    IDE.editingActor = null;
    Runtime.init();
    Runtime.blockEvents(true);
    window.WinToolbar && WinToolbar.init();
    Runtime.stage.addListener("selected", function (b) {
        b != null ? IDE.selectAsset(b.sprite) : IDE.editingActor != null && IDE.selectAsset(null)
    });
    Runtime.stage.selectActor(null);
    window.WinMediaLib && WinMediaLib.init();
    window.WinMediaAssets && WinMediaAssets.init();
    WinStage.init();
    window.WinMediaCapture && WinMediaCapture.init();
    window.WinProperties && WinProperties.init();
    $("#win-code .properties li a").click(function () {
        $("#win-code .properties li").removeClass("selected");
        $(this).parent().addClass("selected");
        $("#win-code .tab-container .tab").addClass("hidden");
        $($(this).attr("href")).removeClass("hidden");
        window.WinProperties && WinProperties.adjustWindow();
        WinCode.adjustWindow();
        return false
    });
    window.WinTools && WinTools.init();
    window.WinTools && WinTools.updateVariables();
    WinCode.init();
    WinCode.editBlocksForSprite(null);
    window.WinProperties && WinProperties.showBackground();
    if (window.WinAssets) {
        WinAssets.init();
        WinAssets.addListener(function (b) {
            IDE.selectAsset(b);
            IDE.adjustPanels()
        })
    }
    window.WinBackpack && WinBackpack.init();
    window.WinPreview && WinPreview.init();
    window.WinLessons && WinLessons.init();
    window.WinLessons && WinLessons.Note.init();
    window.WinAnnotation && WinAnnotation.init();
    window.WinQuiz && WinQuiz.init();
    window.WinPuzzle && WinPuzzle.init();
    window.WinSidebar && WinSidebar.init();
    window.WinPaint && WinPaint.init();
    window.Help && Help.init();
    window.WinSpine && WinSpine.init();
    window.WinMediaSidebar && WinMediaSidebar.init();
    window.Avatar && Avatar.initWhenReady();
    Blocks.measureText("", defaultCodeLabelFont);
    Blocks.measureText("", defaultLabelInputFont);
    $("#stage-resize-handle").draggable({
        axis: "x",
        stop: function () {
            var b = window.innerWidth - $("#stage-resize-handle").offset().left - 6 - windowPadding -
                (window.WinSidebar && WinSidebar.isVisible && WinSidebar.isRight ? $("#win-sidebar").outerWidth() : 0);
            b < 120 && (b = 120);
            var c = b,
                d = window.innerHeight - windowPadding * 2 - $(".toolbar-top").outerHeight(),
                b = $("#win-stage"),
                e = b.find("h1").outerHeight(),
                f = b.find("#stage-buttons").outerHeight(),
                g = Runtime.stage.getWidth(),
                h = Runtime.stage.getHeight(),
                c = IDE._proportionalSize(g, h, c, d - e - f),
                g = c.width,
                h = c.height + e + f;
            b.css("width", g).css("height", h);
            $("#win-assets").css("width", g);
            IDE.adjustPanels()
        },
        drag: function () {
            var b = window.innerWidth -
                $("#stage-resize-handle").offset().left - 6 - windowPadding - (window.WinSidebar && WinSidebar.isVisible && WinSidebar.isRight ? $("#win-sidebar").outerWidth() : 0);
            b < 120 && (b = 120);
            var c = b,
                d = window.innerHeight - windowPadding * 2 - $(".toolbar-top").outerHeight(),
                b = $("#win-stage"),
                e = b.find("h1").outerHeight(),
                f = b.find("#stage-buttons").outerHeight(),
                g = Runtime.stage.getWidth(),
                h = Runtime.stage.getHeight(),
                c = IDE._proportionalSize(g, h, c, d - e - f),
                g = c.width,
                h = c.height + e + f;
            b.css("width", g).css("height", h);
            $("#win-assets").css("width",
                g);
            IDE.adjustPanels()
        }
    }).css("margin-top", $("#win-stage").offset().top + $("#win-stage").outerHeight() / 2);
    $(".tools-resize-handle").draggable({
        axis: "y",
        stop: function () {
            IDE.adjustPanels()
        },
        drag: function () {
            $("#win-annotation").hasClass("editmode") ? $(".deletemask").css("top", $("#win-annotation").position().top + $("#win-annotation").outerHeight()) : $(".deletemask").css("top", "");
            IDE.adjustPanels()
        }
    });
    $(window).resize(function () {
        $("#stage-resize-handle").css("margin-top", $("#win-stage").offset().top + $("#win-stage").outerHeight() /
            2);
        if (WinAnnotation.isVisible && $("#win-annotation").hasClass("playmode")) {
            var b = $("#win-annotation .entry.selected").attr("data-size");
            b == "full" ? $(".tools-resize-handle").css("top", window.innerHeight - $(".toolbar-top").outerHeight()) : b == "half" && $(".tools-resize-handle").css("top", (window.innerHeight - $(".toolbar-top").outerHeight()) / 2)
        }
        IDE.adjustPanels();
        $("#win-annotation").hasClass("editmode") ? $(".deletemask").css("top", $("#win-annotation").position().top + $("#win-annotation").outerHeight()) : $(".deletemask").css("top",
            "")
    });
    IDE.Clipboard.init();
    DragLayer.init();
    window.WinToolbar && DragLayer.addDragListener(WinToolbar);
    window.Help && DragLayer.addDragListener(Help);
    window.WinBackpack && DragLayer.addDragListener(WinBackpack);
    window.WinQuiz && DragLayer.addDragListener(WinQuiz);
    window.WinAnnotation && DragLayer.addDragListener(WinAnnotation);
    window.WinTools && DragLayer.addDragListener(WinTools);
    DragLayer.addDragListener(WinCode);
    DragLayer.addDragListener(WinStage);
    window.WinAssets && DragLayer.addDragListener(WinAssets);
    window.WinMediaSidebar &&
        DragLayer.addDragListener(WinMediaSidebar);
    IDE._setupSharing();
    window.innerWidth >= 1200 ? $("#win-stage canvas").css("width", 600).css("height", 400) : $("#win-stage canvas").css("width", 450).css("height", 300);
    IDE.adjustPanels();
    Sprites.addSpriteListener(IDE);
    window.ideReady && window.setTimeout(window.ideReady, 1);
    IDE.showProgress()
});
IDE.spriteEvent = function (b, c) {
    if (b == "delete") {
        var d = IDE.editingActor;
        window.WinAssets && WinAssets.unregisterActor(c);
        window.WinTools && WinTools.unregisterActor(c);
        Runtime.stage.draw();
        if (d == c) {
            for (var d = false, e = 0; e < Runtime.sprites.length; e++)
                if (!Runtime.sprites[e].hidden) {
                    IDE.selectAsset(Runtime.sprites[e]);
                    d = true;
                    break
                }
            d || IDE.selectAsset(null)
        }
    } else if (b == "add") {
        window.WinAssets && WinAssets.trackActor(c);
        window.WinTools && WinTools.trackActor(c);
        Runtime.stage.draw()
    } else if (b.substring(0, 6) == "update" &&
        !IDE._ignoreUpdates) {
        window.WinProperties && WinProperties.update();
        window.WinAssets && WinAssets.update();
        window.WinTools && WinTools.trackActor(c);
        WinCode.editBlocksForSprite(IDE.editingActor);
        Runtime.stage.draw()
    }
};
IDE.setTitle = function (b) {
    IDE.currentProjectName = b;
    if (b == null) {
        window.document.title = "[tynker]";
        $("#ide-header .project-title span").text("New Project");
        $("#ide-header .project-title input").val("New Project")
    } else {
        window.document.title = b;
        $("#ide-header .project-title span").text(b);
        $("#ide-header .project-title input").val(b);
        $("#ide-header .title.puzzle").text(b)
    }
};
IDE.setSimplified = function (b) {
    if (b) {
        $("#ideHead2").addClass("simplified");
        $("#win-editor a.interfaces").removeClass("interfaces").addClass("disabled-interfaces").addClass("disable-hidden");
        $("#win-editor a.notes").removeClass("notes").addClass("disabled-notes").addClass("disable-hidden");
        $("#win-editor a.advanced").removeClass("advanced").addClass("disabled-advanced").addClass("disable-hidden");
        WinTools._skipCodeSearch = true
    } else {
        $("#ideHead2").removeClass("simplified");
        $("#win-editor a.disabled-interfaces").removeClass("disabled-interfaces").addClass("interfaces").removeClass("disable-hidden");
        $("#win-editor a.disabled-notes").removeClass("disabled-notes").addClass("notes").removeClass("disable-hidden");
        $("#win-editor a.disabled-advanced").removeClass("disabled-advanced").addClass("advanced").removeClass("disable-hidden");
        WinTools._skipCodeSearch = false
    }
};
IDE.selectAsset = function (b) {
    if (!IDE._ignoreUpdates)
        if (b == null || b == Runtime.background) {
            IDE.editingActor = null;
            Runtime.stage.selectActor(null);
            WinCode.editBlocksForSprite(null);
            window.WinTools && WinTools.showCategory();
            window.WinTools && WinTools.updateVariables();
            window.WinTools && WinTools.updateFunctions();
            window.WinProperties && WinProperties.showBackground();
            window.WinProperties && WinProperties.update();
            window.WinAssets && WinAssets.selectAsset(Runtime.background);
            window.WinProperties && WinProperties.showInterfacesFor(null)
        } else {
            IDE.editingActor =
                b;
            Runtime.stage.selectActor(b.spriteObj);
            WinCode.editBlocksForSprite(b);
            window.WinTools && WinTools.showCategory();
            window.WinTools && WinTools.updateVariables();
            window.WinTools && WinTools.updateFunctions();
            b.spriteObj ? window.WinProperties && WinProperties.showSprite(b) : window.WinProperties && WinProperties.showLibrary(b);
            window.WinProperties && WinProperties.update();
            window.WinAssets && WinAssets.selectAsset(b);
            window.WinProperties && WinProperties.showInterfacesFor(b)
        }
};
IDE.computeAll = function () {
    WinCode.computeAll()
};
IDE.reset = function () {
    IDE.Clipboard.clear();
    Runtime.reset();
    window.WinAssets && WinAssets.reset();
    WinCode.reset();
    window.WinTools && WinTools.reset();
    WinStage.showStopped();
    IDE.draw()
};
IDE.draw = function () {
    WinCode.draw();
    WinTools.render()
};
IDE.addResourceTo = function (b, c, d, e) {
    IDE.dirty();
    if (b) {
        var f = getFileExt(b),
            c = getFilename(c),
            g = RegExp(/avatar:\/\/([0-9a-zA-Z]+)\/([0-9a-zA-Z ]+)\/([0-9]+)/).exec(b);
        if (g && g.length) {
            f = ".png";
            c = g[2] + " " + g[3]
        } else b.indexOf("block://") == 0 && (f = ".png");
        if (d)
            if (d == Runtime.background)
                if (f == ".mp3" || f == ".wav") {
                    b = Runtime.background.addSound({
                        name: c,
                        sound: b
                    });
                    IDE.selectAsset(null);
                    window.WinProperties && WinProperties.show("sounds");
                    IDE.Clipboard.undoAddSound(d, b)
                } else {
                    if (f == ".png" || f == ".gif" || f == ".jpg" || f == ".svg") var h =
                        Runtime.background.addCostume({
                            name: c,
                            img: b
                        }, function () {
                            Runtime.background.setCostumeByName(h.name);
                            IDE.Clipboard.undoAddCostume(d, h)
                        })
                }
            else if (f == ".mp3" || f == ".wav") {
                b = d.addSound({
                    name: c,
                    sound: b
                });
                IDE.selectAsset(d);
                window.WinProperties && WinProperties.show("sounds");
                IDE.Clipboard.undoAddSound(d, b)
            } else {
                if (f == ".png" || f == ".gif" || f == ".jpg" || f == ".svg") h = d.addCostume({
                    name: c,
                    img: b
                }, function () {
                    d.setCostumeByName(h.name);
                    IDE.Clipboard.undoAddCostume(d, h)
                })
            } else {
            if (f == ".png" || f == ".gif" || f == ".jpg" || f == ".svg") return d =
                Sprites.addSprite({
                    costumeName: c,
                    img: b,
                    forceNumber: false
                }, function (b) {
                    b.spriteObj.setPosition(Runtime.stage.getWidth() / 2, Runtime.stage.getHeight() / 2);
                    IDE.selectAsset(b);
                    window.WinProperties && WinProperties.show("looks");
                    IDE.Clipboard.undoAddActor(b);
                    e && e(b)
                });
            f == ".actor" && ObjectIO.loadSprite(b, function (b) {
                b.spriteObj.setPosition(Runtime.stage.getWidth() / 2, Runtime.stage.getHeight() / 2);
                Runtime.stage.draw();
                IDE.computeAll();
                IDE.draw();
                IDE.selectAsset(b);
                window.WinProperties && WinProperties.show("interfaces");
                IDE.Clipboard.undoAddActor(b);
                e && e(b)
            })
        }
    } else if (!d) {
        d = Sprites.addSprite({
            costumeName: "blank",
            img: "ide/imgs/blank.png",
            forceNumber: false
        });
        d.spriteObj.setPosition(Runtime.stage.getWidth() / 2, Runtime.stage.getHeight() / 2);
        IDE.selectAsset(d);
        IDE.Clipboard.undoAddActor(d);
        e && e(d)
    }
    return null
};
IDE.cloneActor = function (b) {
    IDE.dirty();
    b = b.cloneActor();
    b.spriteObj.setPosition(b.spriteObj.x + 20, b.spriteObj.y + 20);
    IDE.Clipboard.undoCloneActor(b);
    return b
};
IDE._handleKeyPress = function (b) {
    if ((b.target.tagName != "INPUT" || b.target.getAttribute("id") == "ioskeyboard") && b.target.tagName != "TEXTAREA" && $("#win-annotation .jqte").length <= 0) {
        var c = b.which;
        if (c === void 0) c = b.keyCode;
        var d = b.charCode;
        d === void 0 && (d = c);
        if (d)
            if (window.WinPaint && !$("#win-paint").hasClass("hidden")) {
                if (WinPaint._onKeyPress(c, d)) {
                    b.preventDefault();
                    b.stopPropagation();
                    return true
                }
            } else if (WinCode._onKeyPress(c, d)) {
                b.preventDefault();
                b.stopPropagation();
                return true
            }
    }
    return false
};
IDE._handleKeyUp = function () {
    return false
};
IDE._handleKeyDown = function (b) {
    if ((b.target.tagName != "INPUT" || b.target.getAttribute("id") == "ioskeyboard") && b.target.tagName != "TEXTAREA" && $("#win-annotation .jqte").length <= 0) {
        var c = b.which;
        if (c === void 0) c = b.keyCode;
        var d = b.charCode;
        d === void 0 && (d = c);
        if (window.WinPaint && !$("#win-paint").hasClass("hidden")) {
            if (WinPaint._onKeyPress(c, d)) {
                b.preventDefault();
                b.stopPropagation();
                return true
            }
        } else {
            if (WinCode._onKeyPress(c, d)) {
                b.preventDefault();
                b.stopPropagation();
                return true
            }
            if (c == 8 && WinAssets._enableDelete &&
                WinAssets.getSelection()) {
                if (!window.WinCode || window.WinCode._inputField == null) {
                    WinAssets.deleteActor();
                    b.preventDefault();
                    b.stopPropagation();
                    return true
                }
                return false
            }
        }
        if (IDE._enableKeyboardShortcuts && (b.metaKey || b.ctrlKey)) {
            if (b.which == 83) {
                $("#wincmd-save").hasClass("disabled") || (window.WinPaint && !$("#win-paint").hasClass("hidden") ? WinPaint.save() : IDE.cmdProjectSave());
                b.preventDefault();
                b.stopPropagation();
                return false
            }
            if (b.which == 79) {
                $("#wincmd-open").hasClass("disabled") || IDE.cmdProjectOpen();
                b.preventDefault();
                b.stopPropagation();
                return false
            }
            if (b.which == 78) {
                $("#wincmd-new").hasClass("disabled") || IDE.cmdProjectNew();
                b.preventDefault();
                b.stopPropagation();
                return false
            }
            if (b.which == 90) {
                $("#wincmd-undo").hasClass("disabled") || (window.WinPaint && !$("#win-paint").hasClass("hidden") ? WinPaint.cmdUndo() : IDE.cmdUndo());
                b.preventDefault();
                b.stopPropagation();
                return false
            }
            if (b.which == 89) {
                $("#wincmd-redo").hasClass("disabled") || (window.WinPaint && !$("#win-paint").hasClass("hidden") ? WinPaint.cmdRedo() :
                    IDE.cmdRedo());
                b.preventDefault();
                b.stopPropagation();
                return false
            }
            if (b.which == 88) {
                if (window.WinCode && window.WinCode._inputField) return false;
                $("#wincmd-cut").hasClass("disabled") || (window.WinPaint && !$("#win-paint").hasClass("hidden") ? WinPaint.cmdCut() : WinCode.getSelection().length > 0 ? WinCode.cutSelection() : window.WinAssets && WinAssets.getSelection() && WinAssets.cutActor());
                b.preventDefault();
                b.stopPropagation();
                return false
            }
            if (b.which == 67) {
                if (window.WinCode && window.WinCode._inputField) return false;
                $("#wincmd-copy").hasClass("disabled") || (window.WinPaint && !$("#win-paint").hasClass("hidden") ? WinPaint.cmdCopy() : WinCode.getSelection().length > 0 ? WinCode.copySelection() : window.WinAssets && WinAssets.getSelection() && WinAssets.copyActor());
                b.preventDefault();
                b.stopPropagation();
                return false
            }
            if (b.which == 86) {
                if (window.WinCode && window.WinCode._inputField) return false;
                $(this).hasClass("disabled") || (window.WinPaint && !$("#win-paint").hasClass("hidden") ? WinPaint.cmdPaste() : IDE.Clipboard.get("blocks") ? WinCode.pasteSelection() :
                    window.WinAssets && IDE.Clipboard.get("sprite") && WinAssets.pasteActor());
                b.preventDefault();
                b.stopPropagation();
                return false
            }
            if (b.which == 66) {
                IDE.cmdBackpack();
                b.preventDefault();
                b.stopPropagation();
                return false
            }
            if (b.which == 70) {
                WinTools.showSearch();
                b.preventDefault();
                b.stopPropagation();
                return false
            }
        }
        if (c == 8) {
            b.preventDefault();
            b.stopPropagation();
            return true
        }
    }
    return false
};
IDE._touchHandler = function (b) {
    var c = b.changedTouches[0],
        d = "";
    switch (b.type) {
        case "touchstart":
            d = "mousedown";
            IDE.lastTouchDown = Date.now();
            break;
        case "touchmove":
            d = "mousemove";
            IDE.lastTouchDown = -1;
            break;
        case "touchend":
            if (IDE.lastTouchDown > -1 && Date.now() - IDE.lastTouchDown < IDE.clickms) {
                IDE.lastTouchDown = -1;
                d = "click";
                break
            }
            d = "mouseup";
            break;
        default:
            return
    }
    var e = document.createEvent("MouseEvent");
    e.initMouseEvent(d, true, true, window, 1, c.screenX, c.screenY, c.clientX, c.clientY, false, false, false, false, 0, null);
    c.target.dispatchEvent(e);
    b.preventDefault()
};
IDE.dirty = function () {
    IDE.isDirty++;
    window.onbeforeunload = IDE._onwindowleave;
    var b = $("#wincmd-tbsave").addClass("need-save").find("span");
    b.text(b.attr("data-changed"))
};
IDE._clearDirty = function () {
    IDE.isDirty = 0;
    window.onbeforeunload = null;
    var b = $("#wincmd-tbsave").removeClass("need-save").find("span");
    b.text(b.attr("data-unchanged"))
};
IDE._onwindowleave = function (b) {
    if (!IDE._ignoreDirty && IDE.isDirty && window.location.href.indexOf("l=") < 0) {
        if (b = b || window.event) b.returnValue = "You have unsaved changes. Are you sure you wish to leave the IDE?";
        return "You have unsaved changes. Are you sure you wish to leave the IDE?"
    }
};
IDE.showProgress = function (b) {
    if (b) {
        $("#progress").removeClass("hidden").find(">div").removeClass("hidden");
        IDE._progressStack++
    } else {
        IDE._progressStack--;
        IDE._progressStack <= 0 && $("#progress").addClass("hidden").find(">div").addClass("hidden")
    }
};
IDE.showPopup = function (b, c) {
    $("#popupdialog div.content").empty().html(b);
    $("#popupdialog > .buttons a").unbind().click(function () {
        UIUtil.hideDialog($("#popupdialog"));
        $("#popupdialog div.content").empty();
        c && c();
        return false
    });
    UIUtil.showDialog($("#popupdialog"), function () {
        $("#popupdialog div.content").empty();
        c && c()
    }, true)
};

function showInfoPopup(b, c, d, e, f) {
    IDE.showInfoPopup(b, c, d, e, f)
}
IDE.showInfoPopup = function (b, c, d, e, f) {
    var g = $("#infopopup").empty().css("z-index", "100001");
    if (b) {
        try {
            var h = $(b)
        } catch (j) {
            h = $("<div>" + b + "</div>")
        }
        h.find("code").each(function () {
            var b = $(this).text();
            try {
                if (window.RenderCode) {
                    var c = RenderCode.getCodeType();
                    RenderCode.setCodeType("tynker")
                }
                var d = JSON.parse(b),
                    e = ObjectIO.deserializeScriptStep(d);
                $(this).css("display", "inline-block").empty().append(e.getImage()).append('<q style="display:none">' + b + "</q>");
                window.RenderCode && RenderCode.setCodeType(c)
            } catch (f) { }
        });
        g.append('<div class="messageBody"></div>');
        if (c) {
            g.addClass("wCharacter").find(".messageBody").addClass("cb").append('<div class="characterWrap"></div>').find(".characterWrap").append(c);
            g.find(".messageBody").append('<div class="content"></div>').find(".content").append(h)
        } else {
            g.removeClass("wCharacter");
            g.find(".messageBody").append(h)
        }
        d && g.append('<div class="messageFooter"></div>').find(".messageFooter").append(d);
        e && g.append('<a class="closeBox" href="#"></a>').find("a.closeBox").click(function () {
            $(this).parents(".messageBox").addClass("hidden");
            $(".dialog-modal-bg").detach();
            return false
        });
        g.removeClass("hidden");
        if (f) {
            b = $('<div class="dialog-modal-bg"></div>');
            b.css("z-index", "100000");
            g.after(b)
        } else $(".dialog-modal-bg").detach();
        g.css("top", (window.innerHeight - g.height()) / 2).css("left", (window.innerWidth - g.width()) / 2)
    } else {
        g.addClass("hidden");
        $(".dialog-modal-bg").detach()
    }
};
IDE.showInfoDialog = function (b, c, d) {
    $("#infodialog").empty().append(c).modal({
        escapeClose: false,
        clickClose: false,
        showClose: true
    });
    $("#infodialog").on("modal:close", function () {
        d && d()
    })
};
IDE.promptDialog = function (b, c) {
    $("#prompt div.prompt").text(b);
    $("#prompt").modal({
        escapeClose: false,
        clickClose: false,
        showClose: true
    });
    $("#prompt a.okBtn").unbind().click(function () {
        $.modal.close();
        c && c($("#prompt input").val());
        return false
    })
};
IDE.confirmDialog = function (b, c, d, e, f, g) {
    $("#confirm span").text(b);
    $("#confirm").modal({
        escapeClose: g ? true : false,
        clickClose: g ? true : false,
        showClose: g ? true : false
    });
    $("#confirm .buttonbar").empty();
    b = $('<a href="#" class="btn-right btn-round medium action">' + (d ? d : "Yes") + "</a>");
    b.click(function () {
        $.modal.close();
        c && c();
        return false
    });
    $("#confirm .buttonbar").append(b);
    b = $('<a href="#" class="btn-right btn-round medium secondary">' + (e ? e : "No") + "</a>");
    b.click(function () {
        $.modal.close();
        f && f();
        return false
    });
    $("#confirm .buttonbar").append(b)
};
IDE.alertDialog = function (b, c) {
    $("#alert span").text(b);
    $("#alert").modal({
        escapeClose: false,
        clickClose: false,
        showClose: false
    });
    $("#alert a.okBtn").unbind().click(function () {
        $.modal.close();
        c && c();
        return false
    })
};
IDE._proportionalSize = function (b, c, d, e) {
    return d * c / b < e ? {
        width: d,
        height: parseInt(d * c / b)
    } : {
        width: parseInt(e * b / c),
        height: e
    }
};
IDE.adjustPanels = function () {
    var b, c = 0;
    b = $(".toolbar-top");
    b.hasClass("hidden") || (c = c + b.outerHeight());
    b = $(".notification-top");
    b.hasClass("hidden") || (c = c + b.outerHeight());
    b = $("#puzzle-toolbar");
    if (!b.hasClass("hidden")) {
        b.css("top", c);
        c = c + b.outerHeight()
    }
    b = $("#director-info");
    if (!b.hasClass("hidden")) {
        b.css("top", c);
        c = c + b.outerHeight()
    }
    var d = 0;
    $("#puzzle-navbar").hasClass("hidden") || (d = d + ($("#puzzle-navbar").outerHeight() + windowPadding));
    var e = windowPadding,
        f = windowPadding,
        g = window.innerHeight - c -
        d,
        h = window.innerWidth - e - f,
        j = $("#win-stage");
    j.css("box-shadow", "").draggable({
        disabled: true
    }).resizable({
        disabled: true
    });
    var k = !j.hasClass("hidden"),
        l = $("#win-editor"),
        m = !l.hasClass("hidden"),
        n = $("#win-assets"),
        q = n.find(".actors").scrollTop(),
        p = n.find(".actors").scrollLeft();
    n.css("bottom", "").css("top", "").css("left", "").css("right", "").css("width", "").css("height", "").removeClass("noactions");
    var s = !n.hasClass("hidden");
    b = $("#win-sidebar");
    var r = $("#win-media-sidebar"),
        o = !b.hasClass("hidden"),
        t = !r.hasClass("hidden"),
        u = $("#stage-resize-handle"),
        c = c + windowPadding,
        g = g - windowPadding;
    if (window.WinSidebar && o) {
        b.css("top", c).css("left", e).css("height", g);
        e = e + (b.outerWidth() + windowPadding);
        h = h - (b.outerWidth() + windowPadding)
    }
    if (window.WinMediaSidebar && t) {
        if (WinAnnotation.isVisible) {
            e = 250;
            h = h - e;
            $("#win-annotation").css("height", "")
        }
        r.css("top", c).css("left", e).css("height", g);
        e = e + (r.outerWidth() + windowPadding);
        h = h - (r.outerWidth() + windowPadding)
    }
    b = $("#win-levels");
    if (!b.hasClass("hidden")) {
        b.css("bottom",
            0).css("left", e);
        g = g - (b.outerHeight() + b.find(".leveltoggle").outerHeight())
    }
    if (m && l.hasClass("docked") && !n.hasClass("strip")) {
        if (s) {
            n.css("top", c).css("bottom", "").css("left", e).css("right", 0).css("width", "auto").css("height", n.find("li:first").outerHeight()).addClass("noactions").find(".actors").scrollTop(q).scrollLeft(p);
            c = c + n.outerHeight();
            g = g - n.outerHeight()
        }
        s = j.find("h1:visible").outerHeight() + 0;
        b = j.find("#stage-buttons:visible").outerHeight() + 0;
        m = Runtime.stage.getWidth();
        r = Runtime.stage.getHeight();
        r = IDE._proportionalSize(m, r, h, g - s - b);
        m = r.width;
        r = r.height + s + b;
        if (j.hasClass("centeredframe")) {
            f = 0;
            l.css("top", c + f + (Runtime.stage.text ? 80 : 0)).css("left", e).css("height", g - f * 2);
            if (l.hasClass("minimized")) {
                l.find("#win-tools").css("top", "");
                n.css("margin-left", "")
            } else {
                l.find("#win-tools").css("top", -n.outerHeight() - 4);
                n.css("margin-left", l.find("#win-tools").outerWidth())
            }
            j.css("top", (g - r) / 2 + c).css("left", (h - m) / 2 + e).css("height", r).css("width", m);
            l.css("width", window.innerWidth - 100)
        } else {
            f = 10;
            l.css("top",
                c + f + (Runtime.stage.text ? 80 : 0)).css("left", (h - m) / 2 + e).css("height", r - f * 2 - (Runtime.stage.text ? 80 : 0));
            j.css("top", c).css("left", (h - m) / 2 + e).css("height", r).css("width", m);
            l.css("width", j.outerWidth() - 100)
        }
        WinStage.adjustWindow();
        u.addClass("hidden");
        l.hasClass("minimized") ? l.css("width", 30) : l.hasClass("maximized") && l.css("width", window.innerWidth - f);
        window.WinCode && WinCode.adjustWindow();
        window.WinTools && WinTools.adjustWindow()
    } else if (m && l.hasClass("docked") && n.hasClass("strip")) {
        f = 10;
        n.css("width",
            "").find(".actors").scrollTop(q).scrollLeft(p);
        s = j.find("h1:visible").outerHeight() + 0;
        b = j.find("#stage-buttons:visible").outerHeight() + 0;
        m = Runtime.stage.getWidth();
        r = Runtime.stage.getHeight();
        k = $("#win-assets").outerWidth();
        if (j.hasClass("centeredframe")) {
            h = h - 20;
            g = g - 20
        }
        r = IDE._proportionalSize(m, r, h, g - s - b);
        m = r.width;
        r = r.height + s + b;
        if (j.hasClass("centeredframe")) {
            h = h + 20;
            g = g + 20;
            n.css("top", c + f + (Runtime.stage.text ? 80 : 0)).css("left", e).css("height", g - f * 2).find(".actors").scrollTop(q).scrollLeft(p);
            l.css("top",
                c + f + (Runtime.stage.text ? 80 : 0)).css("left", e + k).css("height", g - f * 2);
            j.css("top", (g - r) / 2 + c).css("left", (h - m) / 2 + e).css("height", r).css("width", m)
        } else {
            n.css("top", c + f + (Runtime.stage.text ? 80 : 0)).css("left", (h - m) / 2 + e).css("height", r - f * 2 - (Runtime.stage.text ? 80 : 0)).find(".actors").scrollTop(q).scrollLeft(p);
            l.css("top", c + f + (Runtime.stage.text ? 80 : 0)).css("left", (h - m) / 2 + e + k).css("height", r - f * 2 - (Runtime.stage.text ? 80 : 0));
            j.css("top", c).css("left", (h - m) / 2 + e).css("height", r).css("width", m)
        }
        WinStage.adjustWindow();
        u.addClass("hidden");
        l.hasClass("minimized") ? l.css("width", 30) : l.hasClass("maximized") ? l.css("width", m - f) : $("#win-code").hasClass("hastools") ? l.css("width", m * 3 / 4) : l.css("width", m / 2);
        window.WinAssets && WinAssets.adjustWindow();
        window.WinCode && WinCode.adjustWindow();
        window.WinTools && WinTools.adjustWindow()
    } else if (k && !m && !s) {
        s = j.find("h1:visible").outerHeight() + 0;
        b = j.find("#stage-buttons:visible").outerHeight() + 0;
        m = Runtime.stage.getWidth();
        r = Runtime.stage.getHeight();
        if (j.hasClass("centeredframe")) {
            h =
                h - 20;
            g = g - 20
        }
        r = IDE._proportionalSize(m, r, h, g - s - b);
        m = r.width;
        r = r.height + s + b;
        if (j.hasClass("centeredframe")) {
            h = h + 20;
            j.css("top", (g + 20 - r) / 2 + c).css("left", (h - m) / 2 + e).css("height", r).css("width", m)
        } else j.css("top", c).css("left", (h - m) / 2 + e).css("height", r).css("width", m);
        WinStage.adjustWindow();
        u.addClass("hidden")
    } else if (!k && m && !s) {
        l.css("top", c).css("left", e).css("width", h).css("height", g);
        window.WinCode && WinCode.adjustWindow();
        window.WinTools && WinTools.adjustWindow();
        u.addClass("hidden")
    } else if (!k &&
        !m && s) {
        n.css("top", c).css("left", e).css("width", h).css("height", g).find(".actors").scrollTop(q).scrollLeft(p);
        window.WinAssets && WinAssets.adjustWindow();
        u.addClass("hidden")
    } else if (m && k && !s) {
        s = j.find("h1:visible").outerHeight() + 0;
        b = j.find("#stage-buttons:visible").outerHeight() + 0;
        m = j.outerWidth();
        m > h - windowPadding - 300 && (m = h - windowPadding - 300);
        r = m * Runtime.stage.getHeight() / Runtime.stage.getWidth();
        r = IDE._proportionalSize(m, r, m, g - s - b);
        m = r.width;
        r = r.height + s + b;
        IDE._layoutFlush && (g = r);
        IDE._layoutTop ?
            j.css("top", c) : j.css("top", (g - r) / 2 + c);
        j.css("left", window.innerWidth - f - m).css("height", r).css("width", m - 100);
        WinStage.adjustWindow();
        l.css("top", c).css("left", e).css("width", h - m - windowPadding).css("height", g);
        window.WinCode && WinCode.adjustWindow();
        window.WinTools && WinTools.adjustWindow();
        u.removeClass("hidden").css("top", 0).css("left", window.innerWidth - f - m - (windowPadding - u.outerWidth() / 2))
    } else if (k && s && !m) {
        s = j.find("h1:visible").outerHeight() + 0;
        b = j.find("#stage-buttons:visible").outerHeight() + 0;
        m = j.outerWidth();
        m > h - windowPadding - 300 && (m = h - windowPadding - 300);
        r = m * Runtime.stage.getHeight() / Runtime.stage.getWidth();
        r = IDE._proportionalSize(m, r, m, g - s - b);
        m = r.width;
        r = r.height + s + b;
        j.css("top", (g - r) / 2 + c).css("left", window.innerWidth - f - m).css("height", r).css("width", m);
        WinStage.adjustWindow();
        n.css("top", c).css("left", e).css("width", h - m - windowPadding).css("height", g).find(".actors").scrollTop(q).scrollLeft(p);
        window.WinAssets && WinAssets.adjustWindow();
        u.removeClass("hidden").css("top", 0).css("left",
            window.innerWidth - f - m - (windowPadding - u.outerWidth() / 2))
    } else if (m && s && !k)
        if ($("#win-editor").hasClass("fullscreen")) {
            n.css("top", c).css("bottom", "").css("left", e).css("right", 0).css("width", "auto").css("height", n.find("li:first").outerHeight()).addClass("noactions");
            g = g - n.outerHeight();
            l.css("top", c + n.outerHeight()).css("left", e).css("width", h).css("height", g);
            window.WinCode && WinCode.adjustWindow();
            window.WinTools && WinTools.adjustWindow();
            n.css("left", e + $("#win-tools").outerWidth()).find(".actors").scrollTop(q).scrollLeft(p);
            u.addClass("hidden")
        } else {
            d = $("#win-assets div.background li").outerWidth() * 3;
            k = n.outerWidth();
            k < d && (k = d);
            n.css("top", c).css("left", window.innerWidth - e - k).css("width", k).css("height", g).find(".actors").scrollTop(q).scrollLeft(p);
            window.WinAssets && WinAssets.adjustWindow();
            h = h - windowPadding - n.outerWidth();
            l.css("top", c).css("left", e).css("width", h).css("height", g);
            window.WinCode && WinCode.adjustWindow();
            window.WinTools && WinTools.adjustWindow();
            u.removeClass("hidden").css("top", 0).css("left", window.innerWidth -
                f - k - (windowPadding - u.outerWidth() / 2))
        }
    else if (m && k && s)
        if ($("#win-editor").hasClass("fullscreen")) {
            n.css("top", c).css("bottom", "").css("left", e).css("right", 0).css("width", "auto").css("height", n.find("li:first").outerHeight()).addClass("noactions").find(".actors").scrollTop(q).scrollLeft(p);
            g = g - n.outerHeight();
            j.css("box-shadow", "8px 8px 8px rgba(0,0,0,0.5)").draggable({
                disabled: false
            }).resizable({
                disabled: false,
                resize: function () {
                    WinStage.adjustWindow()
                }
            });
            l.css("top", c + n.outerHeight()).css("left",
                e).css("width", h).css("height", g);
            window.WinCode && WinCode.adjustWindow();
            window.WinTools && WinTools.adjustWindow();
            u.addClass("hidden")
        } else {
            k = n.find("h1:visible").outerHeight() + 0;
            k = $("#win-assets div.background li").outerHeight() + 4 + 8 + k;
            s = j.find("h1:visible").outerHeight() + 0;
            b = j.find("#stage-buttons:visible").outerHeight() + 0;
            m = j.outerWidth();
            r = m * Runtime.stage.getHeight() / Runtime.stage.getWidth();
            r = IDE._proportionalSize(m, r, m, g - s - b - k - windowPadding);
            m = r.width;
            r = r.height + s + b;
            j.css("top", c).css("left",
                window.innerWidth - f - m).css("width", m).css("height", r);
            WinStage.adjustWindow();
            k = m;
            j = g - r - windowPadding;
            n.css("top", window.innerHeight - d - j).css("left", window.innerWidth - f - k).css("width", k).css("height", j).find(".actors").scrollTop(q).scrollLeft(p);
            window.WinAssets && WinAssets.adjustWindow();
            l.css("left", e).css("top", c).css("width", h - m - windowPadding).css("height", g);
            window.WinCode && WinCode.adjustWindow();
            window.WinTools && WinTools.adjustWindow();
            u.removeClass("hidden").css("top", 0).css("left", window.innerWidth -
                f - m - (windowPadding - u.outerWidth() / 2))
        } !$("#mask-left").hasClass("hidden") && IDE._maskElement && IDE.showMaskElement(IDE._maskElement, IDE._maskDragging);
    $("#stage-resize-handle").css("margin-top", $("#win-stage").offset().top + $("#win-stage").outerHeight() / 2);
    $(".tools-resize-handle").css("margin-left", 121)
};
IDE.showMaskElement = function (b, c, d, e) {
    if (b && b.length > 0) {
        b[0].tagName != "CANVAS" && b.addClass("winhilight");
        var f = b.filter(":visible");
        if (f && f.length > 0) b = f;
        else (f = b.find(":visible")) && f.length > 0 && (b = f);
        var f = b.offset().left,
            g = b.offset().top,
            h = b.outerWidth(),
            j = b.outerHeight();
        IDE._maskElement = b;
        if (IDE._maskDragging = c) {
            c.x = parseInt(c.x);
            c.y = parseInt(c.y);
            c.width = parseInt(c.width);
            c.height = parseInt(c.height)
        }
        $("#mask-left").removeClass("hidden").unbind();
        $("#mask-right").removeClass("hidden").unbind();
        $("#mask-top").removeClass("hidden").unbind();
        $("#mask-bottom").removeClass("hidden").unbind();
        if (!e) {
            $("#mask-left").click(IDE.revealPointer);
            $("#mask-right").click(IDE.revealPointer);
            $("#mask-top").click(IDE.revealPointer);
            $("#mask-bottom").click(IDE.revealPointer)
        }
        var k = 0,
            b = $(".toolbar-top");
        !b.hasClass("hidden") && !$.modal.isActive() && (k = b.outerHeight());
        if (d) {
            $("#mask-overlay").removeClass("hidden").css("top", g).css("bottom", window.innerHeight - (g + j)).css("left", f).css("right", window.innerWidth -
                (f + h));
            $("#mask-left").css("background-color", "rgba(0, 0, 0, 0.6)");
            $("#mask-right").css("background-color", "rgba(0, 0, 0, 0.6)");
            $("#mask-top").css("background-color", "rgba(0, 0, 0, 0.6)");
            $("#mask-bottom").css("background-color", "rgba(0, 0, 0, 0.6)")
        } else {
            $("#mask-left").css("background-color", "rgba(0, 0, 0, 0)");
            $("#mask-right").css("background-color", "rgba(0, 0, 0, 0)");
            $("#mask-top").css("background-color", "rgba(0, 0, 0, 0)");
            $("#mask-bottom").css("background-color", "rgba(0, 0, 0, 0)")
        }
        c ? $("#mask-left").css("left",
            $("#win-code .code canvas").offset().left).css("top", k).css("right", window.innerWidth - f) : $("#mask-left").css("left", c ? $("#win-tools").outerWidth() : 0).css("top", k).css("right", window.innerWidth - f);
        $("#mask-right").css("top", k).css("left", f + h);
        $("#mask-top").css("left", f).css("right", window.innerWidth - (f + h)).css("top", k).css("bottom", window.innerHeight - g);
        $("#mask-bottom").css("left", f).css("right", window.innerWidth - (f + h)).css("top", g + j);
        if (c) {
            $("#toolmask-left").removeClass("hidden").css("background-color",
                "rgba(0, 0, 0, 0)");
            $("#toolmask-right").removeClass("hidden").css("background-color", "rgba(0, 0, 0, 0)");
            $("#toolmask-top").removeClass("hidden").css("background-color", "rgba(0, 0, 0, 0)");
            $("#toolmask-bottom").removeClass("hidden").css("background-color", "rgba(0, 0, 0, 0)");
            $("#toolmask-left").css("top", k).css("right", window.innerWidth - c.x + 4);
            $("#toolmask-right").css("top", k).css("right", window.innerWidth - $("#win-code").offset().left - 200).css("left", c.x + c.width + 4);
            if (c.x + c.width + 4 > $("#win-tools .palette .blocks").offset().left +
                $("#win-tools .palette .blocks").outerWidth()) {
                $("#toolmask-top").css("left", c.x - 4).css("right", window.innerWidth - $("#win-tools .palette .blocks").offset().left - $("#win-tools .palette .blocks").outerWidth()).css("top", k).css("bottom", window.innerHeight - c.y + 4);
                $("#toolmask-bottom").css("left", c.x - 4).css("right", window.innerWidth - $("#win-tools .palette .blocks").offset().left - $("#win-tools .palette .blocks").outerWidth()).css("top", c.y + c.height + 4)
            } else {
                $("#toolmask-top").css("left", c.x - 4).css("right",
                    window.innerWidth - (c.x + c.width) - 4).css("top", k).css("bottom", window.innerHeight - c.y + 4);
                $("#toolmask-bottom").css("left", c.x - 4).css("right", window.innerWidth - (c.x + c.width) - 4).css("top", c.y + c.height + 4)
            }
            e || $("#mask-pointer").css("left", c.x + c.width - 30).css("top", c.y + c.height)
        } else {
            $("#toolmask-left").addClass("hidden");
            $("#toolmask-right").addClass("hidden");
            $("#toolmask-top").addClass("hidden");
            $("#toolmask-bottom").addClass("hidden");
            e || $("#mask-pointer").css("left", f + h - 30).css("top", g + j)
        }
    } else {
        $("#mask-left").removeClass("hidden").css("left",
            0).css("top", k).css("right", 0).css("bottom", 0);
        $("#mask-right").addClass("hidden");
        $("#mask-top").addClass("hidden");
        $("#mask-bottom").addClass("hidden");
        $("#mask-pointer").addClass("hidden");
        $("#toolmask-left").addClass("hidden");
        $("#toolmask-right").addClass("hidden");
        $("#toolmask-top").addClass("hidden");
        $("#toolmask-bottom").addClass("hidden")
    }
    IDE.showAnnotation({
        hasContent: true
    }) && IDE.showAnnotation({
        show: true
    })
};
IDE.bouncePointer = function () {
    IDE._bounceX = $("#mask-box").offset().left;
    IDE._bounceCount = 10;
    window.setTimeout(IDE._bouncePointer, 50)
};
IDE._bouncePointer = function () {
    IDE._bounceCount--;
    $("#mask-box").css("left", IDE._bounceX + (5 - IDE._bounceCount % 2 * 10));
    IDE._bounceCount > 0 ? window.setTimeout(IDE._bouncePointer, 50) : $("#mask-box").css("left", IDE._bounceX)
};
IDE.revealPointer = function () {
    IDE.showAnnotation({
        hasContent: true
    }) && IDE.showAnnotation({
        unhide: true
    })
};
IDE.showAnnotation = function (b) {
    var c = {
        el: IDE._maskElement,
        pos: null,
        bgcolor: null,
        text: null,
        show: true,
        showClose: true,
        preferVertical: false,
        preferInset: false,
        preferOffset: true,
        buttons: []
    };
    $.extend(c, b);
    var d = $("#mask-box");
    if (c.isVisible) return !d.hasClass("hidden");
    if (c.hasContent) return d.find("div.content").text() != "";
    if (c.unhide) $("#mask-box").removeClass("hidden");
    else {
        d.removeClass("pointleft").removeClass("pointright").removeClass("pointup").removeClass("pointdown").removeClass("left").removeClass("center").removeClass("right").removeClass("top").removeClass("middle").removeClass("bottom");
        if (c.text !== null) {
            d.find("div.content").empty().append(c.text);
            c.showClose ? d.find("a.close").removeClass("hidden").click(function () {
                d.addClass("hidden");
                c.closeCallback && c.closeCallback();
                return false
            }) : d.find("a.close").addClass("hidden");
            c.bgcolor ? d.css("background-color", c.bgcolor) : d.css("background-color", "")
        }
        if (c.show) {
            d.removeClass("hidden");
            var b = "pointleft",
                e = "middle",
                f = 0,
                g = 0;
            if (c.el || c.pos) {
                if (c.pos) var f = c.pos.x,
                    g = c.pos.y,
                    h = c.pos.width,
                    j = c.pos.height;
                else {
                    f = c.el.offset().left;
                    g = c.el.offset().top;
                    h = c.el.outerWidth();
                    j = c.el.outerHeight()
                }
                var k = c.preferOffset === true ? 15 : c.preferOffset,
                    l = c.preferInset === true ? 30 : c.preferInset;
                if (c.preferVertical)
                    if (g > window.innerHeight / 2) {
                        b = "pointdown";
                        if (f + (h - d.outerWidth()) / 2 < 0) {
                            e = "left";
                            f = f + h / 2 - d.outerWidth() * 0.125
                        } else if (f + (h + d.outerWidth()) / 2 > window.innerWidth) {
                            e = "right";
                            f = f + h / 2 - d.outerWidth() * 0.875
                        } else {
                            e = "middle";
                            f = f + (h - d.outerWidth()) / 2
                        }
                        g = g - d.outerHeight() - k;
                        c.preferInset && (g = g + l)
                    } else {
                        b = "pointup";
                        if (f + (h - d.outerWidth()) / 2 < 0) {
                            e = "left";
                            f = f + h / 2 - d.outerWidth() *
                                0.125
                        } else if (f + (h + d.outerWidth()) / 2 > window.innerWidth) {
                            e = "right";
                            f = f + h / 2 - d.outerWidth() * 0.875
                        } else {
                            e = "middle";
                            f = f + (h - d.outerWidth()) / 2
                        }
                        g = g + j + k;
                        c.preferInset && (g = g - l)
                    }
                else if (f > window.innerWidth / 2) {
                    b = "pointright";
                    e = "middle";
                    f = f - d.outerWidth() - k;
                    g = g + (j - d.outerHeight()) / 2;
                    c.preferInset && (f = f + l)
                } else {
                    b = "pointleft";
                    e = "middle";
                    f = f + h + k;
                    g = g + (j - d.outerHeight()) / 2;
                    c.preferInset && (f = f - l)
                }
                d.css("left", f).css("top", g).addClass(b).addClass(e)
            } else {
                b = "";
                f = (window.innerWidth - d.outerWidth()) / 2;
                g = (window.innerHeight -
                    d.outerHeight()) / 2;
                d.css("left", f).css("top", g)
            }
        } else d.addClass("hidden");
        if ($(c.el).parents("#win-code").length > 0) {
            d = $("#mask-box");
            h = d.outerWidth();
            j = d.outerHeight();
            d.css("left", $("#win-code").offset().left + $("#win-code").outerWidth() - d.outerWidth() / 8)
        }
    }
};
IDE.hideMask = function () {
    $(".winhilight").removeClass("winhilight");
    $("div.mask").addClass("hidden");
    $("#maskoverlay").addClass("hidden");
    $("#mask-pointer").addClass("hidden");
    IDE._maskElement = null;
    IDE._maskDragging = null
};
IDE.updateLastSaved = function () {
    var b = Date.now() - IDE._lastSaved,
        c = "";
    if (b < 6E4) {
        b = Math.round(b / 1E3);
        c = b == 1 ? b + " " + g_loc.getText("time.second") : b + " " + g_loc.getText("time.seconds")
    } else if (b < 36E5) {
        b = Math.round(b / 6E4);
        c = b == 1 ? b + " " + g_loc.getText("time.minute") : b + " " + g_loc.getText("time.minutes")
    } else if (b < 864E5) {
        b = Math.round(b / 36E5);
        c = b == 1 ? b + " " + g_loc.getText("time.hour") : b + " " + g_loc.getText("time.hours")
    } else if (b < 2592E6) {
        b = Math.round(b / 864E5);
        c = b == 1 ? b + " " + g_loc.getText("time.day") : b + " " + g_loc.getText("time.days")
    } else if (b <
        31536E6) {
        b = Math.round(b / 2592E6);
        c = b == 1 ? b + " " + g_loc.getText("time.month") : b + " " + g_loc.getText("time.months")
    } else {
        b = Math.round(b / 31536E6);
        c = b == 1 ? b + " " + g_loc.getText("time.year") : b + " " + g_loc.getText("time.years")
    }
    $(".toolbar-top .saved-indicator").text(g_loc.formatText("menu.savedindicator", c))
};
IDE.showFlashAnimation = function (b, c, d) {
    $("#baselayer").detach();
    $("#toplayer").detach();
    $("body").append('<div id="baselayer" class="' + b + '"></div>').append('<div id="toplayer" class="' + c + '"></div>');
    $("#baselayer").css("top", window.innerHeight / 2).css("left", window.innerWidth / 2).animate({
        width: 500,
        height: 500,
        top: (window.innerHeight - 500) / 2,
        left: (window.innerWidth - 500) / 2
    }, {
        duration: 1500,
        easing: "easeOutElastic",
        complete: function () {
            $("#baselayer").animate({
                width: 0,
                height: 0,
                top: window.innerHeight / 2,
                left: window.innerWidth /
                    2
            }, 500)
        }
    });
    window.setTimeout(function () {
        $("#toplayer").css("top", window.innerHeight / 2).css("left", window.innerWidth / 2).animate({
            width: 500,
            height: 500,
            top: (window.innerHeight - 500) / 2,
            left: (window.innerWidth - 500) / 2
        }, {
            duration: 1E3,
            easing: "easeOutElastic",
            complete: function () {
                $("#toplayer").animate({
                    width: 0,
                    height: 0,
                    top: window.innerHeight / 2,
                    left: window.innerWidth / 2
                }, 500, d)
            }
        })
    }, 250)
};
IDE.captureScreenshot = function () {
    var b = Runtime.stage.captureScreenshot(true),
        c = 600 / b.width,
        d = 600,
        e = c * b.height;
    if (e < 400) {
        c = 400 / b.height;
        e = 400;
        d = c * b.width
    }
    $("body > canvas.screenshot").detach();
    c = $('<canvas class="screenshot" width="600" height="400"></canvas>')[0].getContext("2d");
    c.drawImage(b, 0, 0, d, e);
    WinCode.relayoutBlocks();
    c.drawImage(WinCode.canvas, 0, 0);
    return c.canvas.toDataURL()
};
IDE._setupSharing = function () { };
IDE.showCategories = function () {
    $.ajax({
        url: "api/templates.aspx",
        success: function (b) {
            $(".projecttemplates-modal").modal();
            $(".projecttemplates-modal .projecttemplates-title a.back").addClass("hidden").unbind().click(IDE.showCategories);
            var c = $(".projecttemplates-container");
            c.empty();
            c.scrollTop(0);
            for (var d = 0; d < b.length; d++)
                if (b[d].img) {
                    var e = $('<div class="projecttemplates-category" data-cat="' + b[d].id + '"></div>');
                    e.append('<img src="ide/imgs/templates/' + b[d].img + '" />');
                    var f = $("<span></span>");
                    f.text(b[d].name);
                    e.append(f);
                    c.append(e);
                    b[d].id == "blank" ? e.click(function () {
                        IDE.cmdExit("ide/");
                        return false
                    }) : e.click(function () {
                        IDE.showCategory($(this).attr("data-cat"));
                        return false
                    })
                }
        }
    });
    return false
};
IDE.showCategory = function (b) {
    $.ajax({
        url: "api/templates.aspx",
        data: {
            id: b ? b : "default"
        },
        success: function (b) {
            $(".projecttemplates-modal").modal();
            $(".projecttemplates-modal .projecttemplates-title a.back").addClass("hidden");
            var d = $(".projecttemplates-container");
            d.empty();
            d.scrollTop(0);
            for (var e = 0; e < b.length; e++)
                if (b[e].img) {
                    var f = $('<div class="projecttemplates-project" data-id="' + b[e].id + '"></div>');
                    f.append('<div class="projecttemplates-screenshot" style="background-image:url(' + b[e].img + ')"></div>');
                    f.append('<div class="projecttemplates-frame"></div>');
                    b[e].difficulty && f.append('<div class="projecttemplates-difficulty ' + b[e].difficulty + '"></div>');
                    var g = $("<span></span>");
                    g.text(b[e].name);
                    f.append(g);
                    d.append(f);
                    f.click(function () {
                        var b = $(this).attr("data-id");
                        b == "blank" ? IDE.cmdExit("ide/") : IDE.cmdExit("ide/?p=" + b);
                        return false
                    })
                }
        }
    });
    return false
};
IDE.cmdProjectNew = function () {
    IDE.showCategory();
    return false
};
IDE.cmdProjectOpen = function () {
    Runtime.stage.selectActor(null);
    var b = Runtime.stage.captureScreenshot();
    IDE._doProjectSave(IDE.currentProjectName, IDE.currentProjectDescription, b, false, true, Runtime.currentLevelIndex, null, function (b) {
        if (b) window.location = "?p=" + IDE.currentProjectId
    });
    b = $("#open-project");
    b.find("iframe").attr("src", "/api/openproject.php");
    b.modal();
    return false
};
IDE.cmdBackpack = function () {
    WinBackpack.show();
    return false
};
IDE.cmdProjectExport = function () {
    var b = $("#importexportdlg");
    b.find("textarea").val(ObjectIO.serialize());
    b.find(".importBtn").addClass("hidden");
    b.find(".cancelBtn").unbind().click(function () {
        $.modal.close();
        return false
    });
    b.modal();
    return false
};
IDE.cmdProjectImport = function () {
    var b = $("#importexportdlg");
    b.find("textarea").val("");
    b.find(".importBtn").removeClass("hidden").unbind().click(function () {
        IDE.Clipboard.clear();
        var c = b.find("textarea").val();
        IDE.setTitle(null);
        IDE.currentProjectId = null;
        ObjectIO.deserialize(c);
        $.modal.close();
        return false
    });
    b.find(".cancelBtn").unbind().click(function () {
        $.modal.close();
        return false
    });
    b.modal();
    return false
};
IDE.createLessonBundle = function () {
    $("#importexportdlg textarea").val("");
    for (var b = ObjectIO.serializeLesson(), c = {
            "default": {
        name: b.name,
        description: b.description,
        instructions: b.instructions
    }
    }, d = 0; d < b.notes.length; d++) {
        var e = b.notes[d];
        e.milestoneType == 1 ? c["default"]["-1-" + e.id] = e.text : e.milestoneType == 2 ? c["default"]["-2-" + e.id] = e.text : e.milestoneType == 3 ? c["default"]["-3-" + e.id] = e.text : e.milestoneType == 4 ? c["default"]["-4-" + e.id] = e.text : !e.block && !e.attached && !e.resource && !e.properties ? c["default"]["-0-" +
            e.id
        ] = e.text : c["default"][e.id] = e.text
    }
    b = $("#importexportdlg");
    b.find("textarea").val(JSON.stringify(c, null, "\t"));
    b.find(".importBtn").addClass("hidden");
    b.find(".cancelBtn").unbind().click(function () {
        $.modal.close();
        return false
    });
    b.modal();
    return false
};
IDE._extractText = function (b, c) {
    if (c.func == "valueControlLanguageWithDefault") {
        var d = c._children[1].label,
            e = c._children[3].label;
        if (d) {
            b[d] && console.log("existing key: " + d + '="' + b[d] + '" being replaced with ' + e);
            b[d] = e
        } else console.log('empty key with value "' + e + '"')
    } else if (c instanceof Block) {
        IDE._extractText(b, c.label);
        for (d = 0; d < c._containers.length; d++) c._containers[d] != null && IDE._extractText(b, c._containers[d]);
        c.next != null && IDE._extractText(b, c.next)
    } else if (c instanceof Label)
        for (d = 0; d < c._children.length; d++) IDE._extractText(b,
            c._children[d]);
    else c instanceof LabelInput && c._child != null && IDE._extractText(b, c._child)
};
IDE.createProjectBundle = function () {
    for (var b = {}, c = 0; c < Runtime.background.scripts.length; c++) IDE._extractText(b, Runtime.background.scripts[c]);
    for (c = 0; c < Runtime.sprites.length; c++)
        for (var d = Runtime.sprites[c], e = 0; e < d.scripts.length; e++) IDE._extractText(b, d.scripts[e]);
    for (c = 0; c < Runtime.libs.length; c++) {
        d = Runtime.libs[c];
        for (e = 0; e < d.scripts.length; e++) IDE._extractText(b, d.scripts[e])
    }
    c = $("#importexportdlg");
    c.find("textarea").val(JSON.stringify({
        "default": b
    }, null, "\t"));
    c.find(".importBtn").addClass("hidden");
    c.find(".cancelBtn").unbind().click(function () {
        $.modal.close();
        return false
    });
    c.modal()
};
IDE.cmdLessonExport = function () {
    var b = $("#importexportdlg");
    b.find("textarea").val("");
    b.find(".importBtn").addClass("hidden");
    b.find(".cancelBtn").unbind().click(function () {
        $.modal.close();
        return false
    });
    b.modal();
    for (var c = ObjectIO.serializeLesson(), d = 0; d < c.notes.length; d++) delete c.notes[d].state;
    b.find("textarea").val(JSON.stringify(c, null, "\t"));
    b.find("li").length == 0 && WinLessons._loadLesson(function () {
        for (var c = ObjectIO.serializeLesson(), d = 0; d < c.notes.length; d++) delete c.notes[d].state;
        b.find("textarea").val(JSON.stringify(c,
            null, "\t"))
    });
    return false
};
IDE.cmdLessonImport = function () {
    var b = $("#importexportdlg");
    b.find("textarea").val("");
    b.find(".importBtn").removeClass("hidden").unbind().click(function () {
        IDE.Clipboard.clear();
        var c = b.find("textarea").val();
        ObjectIO.deserializeLesson(JSON.parse(c));
        $.modal.close();
        return false
    });
    b.find(".cancelBtn").unbind().click(function () {
        $.modal.close();
        return false
    });
    b.modal();
    return false
};
IDE.cmdCreateLesson = function () {
    window.WinLessons && WinLessons.show();
    return true
};
IDE.cmdCreatePuzzle = function () {
    window.WinPuzzle && WinPuzzle.editBegin();
    return true
};
IDE.cmdCreateQuiz = function () {
    window.WinQuiz && WinQuiz.show();
    return true
};
IDE.cmdCreateAnnotation = function () {
    window.WinAnnotation && WinAnnotation.show(true);
    return true
};
IDE.cmdShowAnnotation = function () {
    window.WinAnnotation && (WinAnnotation.isVisible ? WinAnnotation.hide() : WinAnnotation.show(false));
    return true
};
IDE.cmdUndo = function () {
    window.WinStage && WinStage.cmdStop();
    window.WinPaint && !$("#win-paint").hasClass("hidden") ? WinPaint.cmdUndo() : IDE.Clipboard.doUndo();
    return false
};
IDE.cmdRedo = function () {
    window.WinStage && WinStage.cmdStop();
    window.WinPaint && !$("#win-paint").hasClass("hidden") ? WinPaint.cmdRedo() : IDE.Clipboard.doRedo();
    return false
};
IDE.cmdResetActors = function () {
    for (var b = 0; b < Runtime.sprites.length; b++) Runtime.sprites[b].bringIntoView();
    Runtime.stage.draw()
};
IDE.cmdSubmitProject = function (b) {
    if (!$(this).hasClass("disabled")) {
        var c = Runtime.stage.captureScreenshot(),
            d = $($(this).find("input")[0]).val(),
            e = $(this).find("textarea").val();
        IDE._doProjectSave(d, e, c, false, true, Runtime.currentLevelIndex, null, function () {
            IDE._clearDirty();
            $.ajax({
                url: "/api/assignmentsubmit",
                type: "POST",
                data: {
                    id: IDE.currentProjectId
                },
                success: function () {
                    b ? b() : IDE.cmdExit()
                }
            })
        })
    }
    return false
};
IDE.cmdExit = function (b) {
    if (!IDE._ignoreDirty && IDE.isDirty) {
        var c = IDE.isDirty == 1 ? g_loc.getText("confirm.exit_unsaved1") : g_loc.formatText("confirm.exit_unsaved", IDE.isDirty);
        IDE.confirmDialog(c, function () {
            IDE.cmdProjectSave(function () {
                window.location = b ? b : $(".wincmd-home").attr("href")
            })
        }, "Save", "Exit", function () {
            IDE._clearDirty();
            window.location = b ? b : $(".wincmd-home").attr("href")
        }, true)
    } else window.location = b ? b : $(".wincmd-home").attr("href");
    return false
};
IDE.cmdJoinStudent = function () {
    $("#join-view").scope().$parent.state.go("joinStudent")
};
IDE.cmdLogout = function () {
    IDE.confirmDialog(g_loc.getText("dialog.confirmlogout"), function () {
        Runtime.stage.selectActor(null);
        var b = Runtime.stage.captureScreenshot();
        IDE._doProjectSave(IDE.currentProjectName, IDE.currentProjectDescription, b, false, true, Runtime.currentLevelIndex, null, function () {
            logout()
        });
        return false
    }, g_loc.getText("dialog.btnok"), g_loc.getText("dialog.btncancel"), function () { })
};
IDE.cmdMakeWidget = function () {
    Runtime.stage.selectActor(null);
    var b = Runtime.stage.captureScreenshot();
    IDE._doProjectSave(IDE.currentProjectName, IDE.currentProjectDescription, b, false, true, Runtime.currentLevelIndex, null, function () {
        window.location = "/api/getwidget?p=" + IDE.currentProjectId
    });
    return false
};
IDE.cmdMakeCRX = function () {
    Runtime.stage.selectActor(null);
    var b = Runtime.stage.captureScreenshot();
    IDE._doProjectSave(IDE.currentProjectName, IDE.currentProjectDescription, b, false, true, Runtime.currentLevelIndex, null, function () {
        window.location = "/api/getcrx?p=" + IDE.currentProjectId
    });
    return false
};
IDE.cmdLeaveFeedback = function () {
    window.Feedback && window.Feedback.showForm("ide", "Feedback for Studio")
};
IDE.cmdProjectLoad = function () {
    IDE.chooseFile(g_loc.getText("dialog.loadprojtitle"), "/", "*", function (b) {
        window.location = "ide/?p=" + b
    }, "/api/projectlist");
    return false
};
Runtime.loadLevel = function (b, c, d) {
    b || (b = 0);
    if (b != Runtime.currentLevelIndex) {
        Runtime.stopScripts(null, null);
        IDE.showProgress(g_loc.getText("dialog.projectloading"));
        var e = cloneObj(Runtime.background.variables),
            f = cloneObj(Runtime.background.varDefaults),
            g = cloneObj(Runtime.background.lists),
            h = {};
        if (c)
            for (var j = 0; j < Runtime.sprites.length; j++) {
                var k = Runtime.sprites[j];
                c.indexOf(k.label) >= 0 && (h[k.label] = ObjectIO.serializeSprite(k))
            }
        window.setTimeout(function () {
            $.ajax({
                url: "api/projectload.aspx",
                type: "POST",
                data: {
                    p: IDE.currentProjectId,
                    s: b
                },
                success: function (c) {
                    try {
                        c = JSON.parse(c);
                        ObjectIO.deserialize(c, function () {
                            Runtime.currentLevelIndex = b;
                            Runtime.loadVariables(function () {
                                d && d()
                            });
                            for (var c in e) Runtime.background.variables[c] = e[c];
                            for (c in f) Runtime.background.varDefaults[c] = f[c];
                            for (c in g) Runtime.background.lists[c] = g[c];
                            for (var j in h) (c = Sprites.getSpriteByName(j)) && c.deleteActor();
                            ObjectIO.loaded = 1;
                            for (j in h) ObjectIO.deserializeSprite(h[j], function () {
                                $.modal.close();
                                IDE.showProgress(null)
                            });
                            j =
                                null;
                            for (c = 0; c < Runtime.sprites.length; c++)
                                if (Runtime.sprites[c] && !Runtime.sprites[c].hidden && !Runtime.sprites[c].hiddenInSandbox) {
                                    j = Runtime.sprites[c];
                                    break
                                }
                            IDE.selectAsset(j);
                            ObjectIO.doCallback(function () {
                                $.modal.close();
                                IDE.showProgress(null)
                            });
                            WinMediaSidebar.showLevels();
                            IDE.adjustPanels()
                        })
                    } catch (j) {
                        console.log(j.message);
                        console.log(j);
                        console.log(j.stack);
                        IDE.currentProjectId = null;
                        IDE.showProgress(null)
                    }
                },
                error: function () {
                    $.modal.close();
                    IDE.showProgress(null)
                }
            })
        }, 1E3)
    }
};
IDE._projectLoad = function (b, c, d) {
    IDE.showProgress(g_loc.getText("dialog.projectloading"));
    d || (d = 0);
    window.setTimeout(function () {
        $.ajax({
            url: "api/projectload.aspx",
            type: "POST",
            data: {
                n: true,
                p: b,
                s: d
            },
            success: function (e) {
                try {
                    e = JSON.parse(e);
                    IDE.currentOwnerId = e.project.ownerid;
                    if (IDE.currentOwnerId) prefs.owner = e.project.owner;
                    IDE.currentLessonOwnerId = e.project.lessonownerid;
                    if (e.project.lessonowner) prefs.lessonowner = e.project.lessonowner;
                    if (e.tags) {
                        var f = $("#project-save .tags input[type=checkbox]");
                        f.each(function () {
                            var b = $(this).attr("name"),
                                b = e.tags.indexOf(b);
                            if (b >= 0) {
                                this.checked = true;
                                e.tags.splice(b, 1)
                            } else this.checked = false
                        });
                        for (var g = [], h = [], j = 0; j < e.tags.length; j++) e.tags[j].indexOf("system-") === 0 ? g.push(e.tags[j]) : h.push(e.tags[j]);
                        $("#project-save .tags input[type=text]").val(h.join(","));
                        $("#project-save .tags input[type=hidden]").val(g.join(","))
                    } else if (e.metadata && e.metadata.tags) {
                        f = $("#project-save .tags input[type=checkbox]");
                        f.each(function () {
                            var b = $(this).attr("name"),
                                b = e.metadata.tags.indexOf(b);
                            if (b >= 0) {
                                this.checked = true;
                                e.metadata.tags.splice(b, 1)
                            } else this.checked = false
                        });
                        g = [];
                        h = [];
                        for (j = 0; j < e.metadata.tags.length; j++) e.metadata.tags[j].indexOf("system-") === 0 ? g.push(e.metadata.tags[j]) : h.push(e.metadata.tags[j]);
                        $("#project-save .tags input[type=text]").val(h.join(","));
                        $("#project-save .tags input[type=hidden]").val(g.join(","))
                    }
                    ObjectIO.deserialize(e.project, function () {
                        Runtime.currentLevelIndex = d;
                        for (var b = null, f = 0; f < Runtime.sprites.length; f++)
                            if (Runtime.sprites[f] && !Runtime.sprites[f].hidden &&
                                !Runtime.sprites[f].hiddenInSandbox) {
                                b = Runtime.sprites[f];
                                break
                            }
                        IDE.selectAsset(b);
                        Runtime.loadVariables(function () {
                            c && c()
                        });
                        $.modal.close();
                        IDE.showProgress(null);
                        WinAnnotation.hideNotes = e.hideNotes ? true : false;
                        if (e.notes && e.notes.length > 0) {
                            WinAnnotation.deserialize(e.notes);
                            if (!g_hideNotes && !WinAnnotation.hideNotes) {
                                WinAnnotation.show(false, IDE.currentLessonOwnerId == prefs.userid);
                                $("#wincmd-showannotate").text(g_loc.getText("menu.hideannotate"))
                            } else WinTools.minimize(false);
                            $("#wincmd-annotate").text(g_loc.getText("menu.editannotate"))
                        } else {
                            $("#wincmd-annotate").text(g_loc.getText("menu.annotate"));
                            $("#wincmd-showannotate").text(g_loc.getText("menu.showannotate")).addClass("hidden")
                        }
                        window.innerWidth >= 1600 ? $("#win-stage").css("width", 840) : $("#win-stage").css("width", 420);
                        IDE.adjustPanels()
                    });
                    IDE.currentProjectId = b;
                    IDE.currentProjectName == IDE.defaultProjectName && window.setTimeout(function () {
                        var b = Runtime.stage.captureScreenshot(),
                            c = $($(this).find("input[name=name]")[0]).val(),
                            d = $(this).find("textarea").val();
                        IDE._doProjectSave(c, d, b, false, true, Runtime.currentLevelIndex, null, function (b) {
                            IDE.dirty();
                            if (b) window.location = "?p=" + IDE.currentProjectId
                        })
                    }, 1E3)
                } catch (k) {
                    console.log(k.message);
                    console.log(k);
                    console.log(k.stack);
                    IDE.currentProjectId = null;
                    IDE.showProgress(null)
                }
            },
            error: function () {
                $.modal.close();
                IDE.showProgress(null)
            }
        })
    }, 1E3)
};
IDE.cmdLessonLoad = function () {
    IDE.chooseFile(g_loc.getText("dialog.loadlessontitle"), "/", "*", IDE._lessonLoad, "/api/lessonlist");
    return false
};
IDE._lessonLoad = function (b, c, d) {
    IDE.showProgress(g_loc.getText("dialog.lessonloading"));
    window.setTimeout(function () {
        $.ajax({
            url: "/api/lessonload",
            type: "POST",
            data: "p=" + encodeURIComponent(b),
            success: function (d) {
                IDE.Clipboard.clear();
                IDE.reset();
                window.WinLessons && WinLessons.reset();
                WinStage.show();
                d = JSON.parse(d);
                ObjectIO.deserializeLesson(d);
                if (window.WinLessons) WinLessons.lessonId = b;
                IDE.setTitle(d.name);
                WinProperties.showBackground();
                WinProperties.update();
                Runtime.stage.selectActor();
                $.modal.close();
                IDE.showProgress(null);
                c && c()
            },
            error: function () {
                $.modal.close();
                IDE.showProgress(null);
                d && d()
            }
        })
    }, 1E3)
};
IDE.cmdProjectSave = function (b) {
    IDE.currentProjectName || IDE.setTitle(IDE.defaultProjectName);
    if (!IDE.currentProjectName || IDE.currentProjectName == IDE.defaultProjectName || WinAnnotation.hasNotes() && (!IDE.currentProjectDescription || IDE.currentProjectDescription == "Please add a description for your lesson")) {
        if (WinAnnotation.hasNotes() && (!IDE.currentProjectDescription || IDE.currentProjectDescription == "Please add a description for your lesson")) IDE.currentProjectDescription = "Please add a description for your lesson";
        IDE.cmdProjectSaveAs(true, b)
    } else {
        var c = Runtime.stage.captureScreenshot();
        $("#wincmd-tbsave").addClass("saving");
        IDE._doProjectSave(null, null, c, false, true, Runtime.currentLevelIndex, null, function (c) {
            $("#wincmd-tbsave").removeClass("saving");
            IDE._clearDirty();
            b && b();
            if (c) window.location = "?p=" + IDE.currentProjectId
        })
    }
};
IDE.cmdProjectSaveAs = function (b, c, d) {
    Runtime.stage.selectActor(null);
    var e = IDE.currentProjectName;
    e == IDE.defaultProjectName && (e = "");
    $("#project-save input[name=name]").val(e);
    window.setTimeout(function () {
        $("#project-save input[name=name]").focus()
    }, 1E3);
    e = IDE.currentProjectDescription;
    if (!e || e == "Enter your project description here" || e == g_loc.getText("properties.helpdescription") || e == g_loc.getText("savedlg.descdetails")) e = "";
    $("#project-save textarea").val(e);
    var f = Runtime.stage.captureScreenshot(),
        g = $("#project-save");
    g.find(".title").text(d ? d : g_loc.getText("dialog.savetitle"));
    g.find("img").attr("src", f);
    g.find(".error").addClass("hidden").text("");
    g.find("input[name=tutorial]")[0].checked = !WinAnnotation.hideNotes && WinAnnotation.hasNotes();
    g.modal();
    g.find("input[name=screendata]").unbind().change(function (b) {
        b = b.originalEvent.target.files;
        if (b.length > 0) {
            b = b[0];
            getFilename(b.name);
            if (b.type == "image/png" || b.type == "image/jpeg") {
                var c = new FileReader;
                c.onload = function (b) {
                    f = b.target.result;
                    g.find(".screenshot img").attr("src",
                        f)
                };
                c.readAsDataURL(b)
            }
        }
    });
    g.find(".screenshot a.upload").unbind().click(function () {
        g.find("input[name=screendata]").click()
    });
    g.find("a.saveBtn").unbind().click(function () {
        var d = $.trim(g.find("input[name=name]").val());
        if (d == "" || d == IDE.defaultProjectName) g.find(".error").removeClass("hidden").text("Oops! Please enter a name for your project.");
        else {
            var e = g.find("textarea").val();
            if (e == "Enter your project description here" || e == g_loc.getText("properties.helpdescription") || e == g_loc.getText("savedlg.descdetails")) e =
                "";
            WinAnnotation.hideNotes = g.find("input[name=tutorial]")[0].checked ? false : true;
            IDE.currentProjectDescription = e;
            var k = g.find("input.share")[0].checked,
                l = [];
            g.find(".tags input[type=checkbox]").each(function () {
                this.checked && l.push($(this).attr("name"))
            });
            var l = l.join(","),
                m = g.find(".tags input[type=text]").val();
            if (m) {
                l && (l = l + ",");
                l = l + m
            }
            if (m = g.find(".tags input[type=hidden]").val()) {
                l && (l = l + ",");
                l = l + m
            }
            $("#wincmd-tbsave").addClass("saving");
            IDE._doProjectSave(d, e, f, k, b ? true : false, Runtime.currentLevelIndex,
                l,
                function (b) {
                    $("#wincmd-tbsave").removeClass("saving");
                    if (WinLessons.getNotes().notes.length > 0) WinLessons._saveLesson(function () {
                        c && c();
                        if (b) window.location = "?p=" + IDE.currentProjectId
                    });
                    else {
                        c && c();
                        if (b) window.location = "?p=" + IDE.currentProjectId
                    }
                });
            $.modal.close()
        }
        return false
    });
    g.find("a.cancelBtn").unbind().click(function () {
        $.modal.close();
        return false
    });
    return false
};
IDE._doProjectSave = function (b, c, d, e, f, g, h, j) {
    if (g === null || g === void 0) g = Runtime.currentLevelIndex;
    b && IDE.setTitle(b);
    if (c) IDE.currentProjectDescription = c;
    b = "";
    if (f && IDE.currentProjectId) b = IDE.currentProjectId;
    d = {
        n: IDE.currentProjectName,
        h: WinAnnotation.hideNotes,
        d: IDE.currentProjectDescription,
        an: WinAnnotation.hideNotes ? "" : WinAnnotation.serialize(),
        p: ObjectIO.serialize(),
        i: d,
        pb: e ? true : false,
        id: b,
        cid: IDE.currentProjectId,
        s: g
    };
    h !== null && (d.t = h);
    $.ajax({
        url: "api/projectsave.aspx",
        type: "POST",
        data: d,
        success: function (b) {
            IDE._clearDirty();
            b = JSON.parse(b);
            console.log("saved project " + IDE.currentProjectName);
            var c = IDE.currentProjectId != b.id;
            IDE.currentProjectId = b.id;
            if (b.sid && Runtime.levels && g < Runtime.levels.length) {
                Runtime.levels[g].screenshotid = b.sid;
                $("#stagecmd-edit").hasClass("selected") && WinMediaSidebar.showLevels()
            }
            j && (typeof j == "function" && IDE.currentProjectId) && j(c)
        },
        error: function () { }
    })
};
IDE.cmdProjectSubmitEntry = function (b) {
    IDE.currentProjectId ? $.ajax({
        url: "/api/publishproject",
        data: {
            c: "isShared",
            id: IDE.currentProjectId
        },
        success: function (c) {
            c.shared && c.tags && c.tags.indexOf("system-summer-code-a-thon-2017") >= 0 ? IDE._unsubmitEntry(b) : IDE._submitEntry(b)
        }
    }) : IDE._submitEntry(b)
};
IDE._unsubmitEntry = function () {
    Runtime.stage.selectActor(null);
    var b = Runtime.stage.captureScreenshot(),
        c = $("#project-unsubmitentry");
    c.find(".screenshot img").attr("src", b);
    c.modal();
    c.find("a.viewAllBtn").unbind().click(function () {
        window.open("/play/summer/", "_blank");
        $.modal.close();
        return false
    });
    c.find("a.removeEntryBtn").unbind().click(function () {
        $.ajax({
            url: "/api/publishproject",
            data: {
                c: "unpublish",
                id: IDE.currentProjectId
            },
            success: function () { }
        });
        $.modal.close();
        return false
    })
};
IDE._submitEntry = function (b) {
    Runtime.stage.selectActor(null);
    var c = IDE.currentProjectName;
    c == IDE.defaultProjectName && (c = "");
    $("#project-submitentry input[name=name]").val(c);
    window.setTimeout(function () {
        $("#project-submitentry input[name=name]").focus()
    }, 1E3);
    c = IDE.currentProjectDescription;
    if (!c || c == "Enter your project description here" || c == g_loc.getText("properties.helpdescription") || c == g_loc.getText("savedlg.descdetails")) c = "";
    var d = Runtime.stage.captureScreenshot(),
        e = $("#project-submitentry");
    e.find(".title").text("Submit Entry");
    e.find(".screenshot img").attr("src", d);
    e.find(".error").addClass("hidden").text("");
    e.find("input[name=tutorial]")[0].checked = !WinAnnotation.hideNotes && WinAnnotation.hasNotes();
    e.modal();
    e.find("input[name=screendata]").unbind().change(function (b) {
        b = b.originalEvent.target.files;
        if (b.length > 0) {
            b = b[0];
            getFilename(b.name);
            if (b.type == "image/png" || b.type == "image/jpeg") {
                var c = new FileReader;
                c.onload = function (b) {
                    d = b.target.result;
                    e.find(".screenshot img").attr("src",
                        d)
                };
                c.readAsDataURL(b)
            }
        }
    });
    e.find(".screenshot a.upload").unbind().click(function () {
        e.find("input[name=screendata]").click()
    });
    e.find("a.saveBtn").unbind().click(function () {
        var c = $.trim(e.find("input[name=name]").val());
        if (c == "" || c == IDE.defaultProjectName) e.find(".error").removeClass("hidden").text("Oops! Please enter a name for your project.");
        else {
            var g = e.find("textarea").val();
            if (g == "Enter your project description here" || g == g_loc.getText("properties.helpdescription") || g == g_loc.getText("savedlg.descdetails")) g =
                "";
            WinAnnotation.hideNotes = e.find("input[name=tutorial]")[0].checked ? false : true;
            IDE.currentProjectDescription = g;
            var h = e.find("input.share")[0].checked,
                j = [];
            e.find(".tags input[type=checkbox]").each(function () {
                this.checked && j.push($(this).attr("name"))
            });
            var j = j.join(","),
                k = e.find(".tags input[type=text]").val();
            if (k) {
                j && (j = j + ",");
                j = j + k
            }
            if (k = e.find(".tags input[type=hidden]").val()) {
                j && (j = j + ",");
                j = j + k
            }
            j && (j = j + ",");
            j = j + "system-summer-code-a-thon-2017,system-summer-code-a-thon-2017-week-";
            $.ajax({
                url: "/play/summer/data/summer-code-a-thon-2017.json",
                success: function (e) {
                    j = j + e.currentStage;
                    $("#wincmd-tbsave").addClass("saving");
                    IDE._doProjectSave(c, g, d, h, true, Runtime.currentLevelIndex, j, function (c) {
                        $("#wincmd-tbsave").removeClass("saving");
                        $.ajax({
                            url: "/api/publishproject",
                            data: {
                                c: "publish",
                                id: IDE.currentProjectId
                            },
                            success: function () {
                                b && b();
                                if (c) window.location = "?p=" + IDE.currentProjectId
                            }
                        })
                    });
                    $.modal.close()
                }
            })
        }
        return false
    });
    e.find("a.cancelBtn").unbind().click(function () {
        $.modal.close();
        return false
    });
    return false
};
IDE.cmdActorSave = function (b) {
    var c = $("#actor-save");
    $("#actor-name").val(b.label);
    $("#actor-description").val(b.documentation.description).unbind().blur(function () {
        b.documentation.description = $(this).val()
    }).keypress(function (b) {
        b.which == 13 && $(this).blur()
    });
    b.costumes.length > 0 && c.find("img").attr("src", b.captureScreenshot());
    if (b == null) b = Runtime.background;
    WinProperties.makeInterfacesFor(b);
    var d = b.documentation.inboundEvents,
        e = b.documentation.outboundEvents,
        f = b.documentation.properties,
        g = c.find(".inbound ul");
    g.empty();
    for (var h = 0; h < d.length; h++) {
        var j = $('<li idx="' + h + '"><span></span><input class="description" type="text"/><em><input type="checkbox"/> Make Visible</em></li>');
        g.append(j);
        var k;
        if (d[h].name.charAt(0) == "[") {
            var l = d[h].name.substring(1, d[h].name.length - 1),
                m = l.indexOf("|"),
                n;
            if (m > 0) {
                n = l.substring(m + 1);
                l = l.substring(0, m)
            }
            if (l = findStepByFunc(l)) {
                k = new Block(l);
                n && k.label.setValue(0, n)
            }
        } else {
            k = new Block({
                cat: "flow",
                label: "when I receive {events}",
                hasFlap: false,
                func: "registerBroadcastTrigger"
            });
            k.label.setValue(0, d[h].name)
        }
        if (k) {
            j.find("span").append(k.getImage());
            j.find("input[type=text]").val(d[h].description).blur(function () {
                d[parseInt($(this).parent().attr("idx"))].description = $(this).val()
            }).keypress(function (b) {
                b.which == 13 && $(this).blur()
            });
            j.find("input[type=checkbox]")[0].checked = d[h].visible;
            j.find("input[type=checkbox]").click(function () {
                d[parseInt($(this).parent().parent().attr("idx"))].visible = this.checked
            })
        }
    }
    d.length > 0 ? c.find(".inbound").removeClass("hidden") : c.find(".inbound").addClass("hidden");
    g = c.find(".outbound ul");
    g.empty();
    for (h = 0; h < e.length; h++) {
        j = $('<li idx="' + h + '"><span></span><input class="description" type="text"/><em><input type="checkbox"/> Make Visible</em></li>');
        g.append(j);
        k = new Block({
            cat: "flow",
            label: "broadcast {events}",
            func: "blockControlBroadcast"
        });
        k.label.setValue(0, e[h].name);
        j.find("span").append(k.getImage());
        j.find("input[type=text]").val(e[h].description).blur(function () {
            e[parseInt($(this).parent().attr("idx"))].description = $(this).val()
        }).keypress(function (b) {
            b.which ==
                13 && $(this).blur()
        });
        j.find("input[type=checkbox]")[0].checked = e[h].visible;
        j.find("input[type=checkbox]").click(function () {
            e[parseInt($(this).parent().parent().attr("idx"))].visible = this.checked
        })
    }
    e.length > 0 ? c.find(".outbound").removeClass("hidden") : c.find(".outbound").addClass("hidden");
    g = c.find(".objprops ul");
    g.empty();
    for (h = 0; h < f.length; h++) {
        j = $('<li idx="' + h + '"><span></span><input class="smalldescription" type="text"/> = <input class="default" type="text"/><em><input type="checkbox"/> Make Visible</em></li>');
        g.append(j);
        k = new Label({
            cat: "var",
            label: f[h].name
        });
        j.find("span").append(k.getImage());
        j.find("input.smalldescription").val(f[h].description).blur(function () {
            f[parseInt($(this).parent().attr("idx"))].description = $(this).val()
        }).keypress(function (b) {
            b.which == 13 && $(this).blur()
        });
        j.find("input.default").val(b.variables[f[h].name]).blur(function () {
            IDE.dirty();
            var c = valueToNative($(this).val());
            b.variables[f[parseInt($(this).parent().attr("idx"))].name] = c
        }).keypress(function (b) {
            b.which == 13 && $(this).blur()
        });
        j.find("input[type=checkbox]")[0].checked = f[h].visible;
        j.find("input[type=checkbox]").click(function () {
            f[parseInt($(this).parent().parent().attr("idx"))].visible = this.checked
        })
    }
    f.length > 0 ? c.find(".objprops").removeClass("hidden") : c.find(".objprops").addClass("hidden");
    c.modal();
    c.find(".saveBtn").unbind().click(function () {
        var d = false;
        b.documentation.description || (d = true);
        if (!d)
            for (var e = b.documentation.inboundEvents, f = 0; f < e.length; f++)
                if (e[f].visible && !e[f].description) {
                    d = true;
                    break
                }
        if (!d) {
            e = b.documentation.outboundEvents;
            for (f = 0; f < e.length; f++)
                if (e[f].visible && !e[f].description) {
                    d = true;
                    break
                }
        }
        if (!d) {
            e = b.documentation.properties;
            for (f = 0; f < e.length; f++)
                if (e[f].visible && !e[f].description) {
                    d = true;
                    break
                }
        }
        if (d) {
            c.find(".error").removeClass("hidden").text(g_loc.getText("dialog.actormissingerrtext"));
            return false
        }
        IDE._doActorSaveDlg(b, this, false);
        $.modal.close();
        return false
    });
    c.find(".cancelBtn").unbind().click(function () {
        $.modal.close();
        return false
    });
    return false
};
IDE._doActorSaveDlg = function (b, c, d, e) {
    var f = $(c).find("input"),
        c = $(f[0]).val(),
        f = $(f[1]).val();
    IDE._doActorSave(b, c, f, b.documentation.description, false, d, e)
};
IDE._doActorSave = function (b, c, d, e, f, g, h) {
    var j = b.captureScreenshot();
    b.classname = c;
    var k = b.label;
    b.locked = true;
    b.label = c;
    for (var l = 0; l < b.scripts.length; l++) b.scripts[l].hidden = true;
    for (l = 0; l < b.costumes.length; l++) b.costumes[l].hidden = true;
    for (l = 0; l < b.sounds.length; l++) b.sounds[l].hidden = true;
    l = ObjectIO.serializeSprite(b);
    b.label = k;
    c = "n=" + encodeURIComponent(c) + "&d=" + encodeURIComponent(e) + "&c=" + encodeURIComponent(JSON.stringify(l)) + "&i=" + encodeURIComponent(j) + "&t=" + encodeURIComponent(d) + "&pb=" + f;
    g &&
        b.id && (c = c + ("&id=" + b.id));
    $.ajax({
        url: "/api/actorsave",
        type: "POST",
        data: c,
        success: function (c) {
            console.log("saved actor");
            c = JSON.parse(c);
            if (c.id) {
                b.id = c.id;
                IDE.selectAsset(b);
                h && h(b.id)
            }
        },
        error: function () { }
    })
};
IDE.cmdProjectShare = function () {
    var b = $("#sharing").scope();
    if (b) {
        b.show();
        b.$apply()
    }
};

var Director = {
    _fromUrl: "",
    _controlId: "",
    _controlParams: "",
    _instructions: [],
    _stepId: "",
    init: function () {
        $("#director-info a.button-close").click(function () {
            $("#director-info").addClass("hidden");
            IDE.adjustPanels();
            return false
        })
    },
    loadAndExecute: function (b, c) {
        IDE.showProgress(g_loc.getText("dialog.projectloading"));
        Director._fromUrl = b;
        Director._instructions = [];
        Director._controlParams = c;
        $.ajax({
            url: "/api/" + b,
            success: function (b) {
                Director._instructions = JSON.parse(b);
                Director._stepId = null;
                for (b = 0; b < Director._instructions.length; b++) {
                    var c =
                        Director._instructions[b];
                    if (c.id == "init") Director.execute(c);
                    else if (!Director._stepId) Director._stepId = c.id
                }
                Director.execute();
                IDE.showProgress()
            },
            error: function () {
                IDE.showProgress()
            }
        })
    },
    findStepIndex: function (b) {
        if (Director._instructions)
            for (var c = 0; c < Director._instructions.length; c++)
                if (Director._instructions[c].id == b) return c;
        return -1
    },
    execute: function (b) {
        if (!b) {
            var c = Director.findStepIndex(Director._stepId);
            if (c >= 0 && c < Director._instructions.length) {
                b = Director._instructions[c];
                c++;
                Director._stepId =
                    c >= 0 && c < Director._instructions.length ? Director._instructions[c].id : ""
            } else {
                Director._stepId = "";
                b = null
            }
        }
        if (b) (c = Director["instruction_" + b.func]) && c(b.args)
    },
    isRunning: function () {
        return Director._instructions && Director._stepId
    },
    instruction_setProperty: function (b) {
        switch (b[0]) {
            case "url_back":
                $(".wincmd-home").attr("href", b[1])
        }
    },
    instruction_setAssignmentList: function () { },
    instruction_visitUrl: function (b) {
        window.location = b[0]
    },
    instruction_loadLesson: function (b) {
        window.WinLessons && IDE._lessonLoad(b[0],
            function () {
                if (b.length > 1) {
                    WinLessons._startAnnotations();
                    WinLessons.jumpToSnapshot(b[1])
                } else WinLessons.playAnnotations();
                window.Assignments && Assignments.initMessaging()
            })
    },
    instruction_loadLessonProject: function (b) {
        IDE._projectLoad(b[0], function () {
            window.Assignments && Assignments.initMessaging();
            $.ajax({
                url: "/api/projectstarted",
                type: "POST",
                data: "p=" + IDE.currentProjectId
            })
        })
    },
    instruction_loadProject: function (b) {
        b[1] && IDE.showProgress(g_loc.getText("dialog.projectloading"));
        IDE._projectLoad(b[0], function () {
            IDE.adjustPanels();
            window.Assignments && Assignments.initMessaging();
            b[1] && loadJs("director/" + b[1] + ".js")
        })
    },
    instruction_loadAssignment: function (b) {
        IDE._projectLoad(b[0], function () {
            window.Assignments && Assignments.initMessaging()
        });
        var c = "<p>" + b[1] + "</p>";
        $("#wincmd-submit").removeClass("hidden").removeClass("disabled");
        Director.infobarShow(true);
        Director.infobarSetContent(c);
        Director.infobarShowPrev(false);
        Director.infobarShowNext(false);
        var d = $("#director-info");
        switch (b[2]) {
            case "submitted":
                d.find("div.notechoices").append('<div class="choice"><img width="32" src="/imgs/checkmark120.png"/> Submitted for review</div>');
                $("#wincmd-submit").detach();
                break;
            case "accepted":
                d.find("div.notechoices").append('<div class="choice"><img width="32" src="/imgs/checkmark120.png"/> Completed</div>');
                $("#wincmd-submit").detach();
                break;
            default:
                d.find("div.notechoices").append('<div class="choice"><a class="button1 bigbutton" href="#">Submit Project</a></div>').find("a").click(function () {
                    b[3] ? IDE.cmdSubmitProject(function () {
                        Director.instruction_displayPromptChoices(b[3]);
                        d.find("div.notechoices").empty().append('<div class="choice"><img width="32" src="/imgs/checkmark120.png"/> Submitted for review</div>')
                    }) :
                        IDE.cmdSubmitProject();
                    return false
                });
                prefs && prefs.role == "teacher" && d.find("div.notechoices a").addClass("buttondisabled").addClass("disabled").attr("title", "Disabled for teachers (students will have this button enabled)").unbind().click(function () {
                    return false
                })
        }
        d.find(".notecontent").css("right", 32 + d.find(".notechoices").outerWidth());
        d.find(".buttons").css("right", 32 + d.find(".notechoices").outerWidth())
    },
    instruction_displayMessage: function (b) {
        Director.infobarReset();
        Director.infobarSetContent(b[0]);
        Director.infobarShow(true);
        Director.execute()
    },
    instruction_displayProjectChoices: function () {
        IDE.cmdExit()
    },
    instruction_displayProjectChoicesContinue: function () {
        IDE.cmdExit()
    },
    instruction_displayProjectChoicesDone: function () {
        IDE.cmdExit()
    },
    instruction_displayPromptChoices: function () {
        IDE.cmdExit()
    },
    instruction_displayNext: function () { },
    instruction_displayStopAndCreate: function () { },
    showDialog: function () { },
    infobarReset: function () {
        var b = $("#director-info");
        b.find("a.button-close").addClass("hidden");
        b.find(".btnleft").addClass("hidden").addClass("btndisabled");
        b.find(".btnright").addClass("hidden").addClass("btndisabled");
        b.removeClass("hasbuttons");
        b.find(".notecontent").empty()
    },
    infobarShow: function (b) {
        var c = $("#director-info");
        if (b) {
            c.removeClass("hidden");
            c.find(".notecontent").css("right", 32 + c.find(".notechoices").outerWidth());
            c.find(".buttons").css("right", 32 + c.find(".notechoices").outerWidth())
        } else c.addClass("hidden");
        IDE.adjustPanels()
    },
    infobarSetContent: function (b) {
        $("#director-info .notecontent").empty().append(b)
    },
    infobarClearChoices: function () {
        var b =
            $("#director-info"),
            c = b.find(".notechoices");
        c.empty();
        b.find(".notecontent").css("right", 32 + c.outerWidth());
        b.find(".buttons").css("right", 32 + c.outerWidth())
    },
    infobarAddChoice: function (b) {
        var c = $("#director-info"),
            d = c.find(".notechoices");
        d.css("height", c.outerHeight()).css("line-height", c.outerHeight() + "px");
        var e = b.id,
            f = b.img,
            g = b.href ? b.href : "";
        if (b.lid) var h = $('<div href="' + g + '" lid="' + e + '" class="choice" style="background-image:url(' + f + ')" title="' + b.alt + '"></div>');
        else b.pid ? h = $('<div href="' +
            g + '" pid="' + e + '" class="choice" style="background-image:url(' + f + ')" title="' + b.alt + '"></div>') : b.button && (h = $('<a href="#" class="button btnDefaultBlue medium">' + b.button + "</a>"));
        d.append(h);
        b.button ? h.click(b.buttonCallback) : h.click(function () {
            if ($(this).attr("href")) window.location = g;
            return false
        });
        c.find(".notecontent").css("right", 32 + d.outerWidth());
        c.find(".buttons").css("right", 32 + d.outerWidth())
    },
    infobarShowClose: function (b) {
        b ? $("#director-info a.button-close").removeClass("hidden") : $("#director-info a.button-close").addClass("hidden")
    },
    infobarShowPrev: function (b, c) {
        b ? $("#director-info .btnleft").removeClass("hidden").unbind().click(function () {
            c && !$(this).hasClass("btndisabled") && c()
        }) : $("#director-info .btnleft").addClass("hidden");
        !$("#director-info .btnleft").hasClass("hidden") || !$("#director-info .btnright").hasClass("hidden") ? $("#director-info").addClass("hasbuttons") : $("#director-info").removeClass("hasbuttons")
    },
    infobarEnablePrev: function (b) {
        b ? $("#director-info .btnleft").removeClass("btndisabled") : $("#director-info .btnleft").addClass("btndisabled")
    },
    infobarShowNext: function (b, c) {
        b ? $("#director-info .btnright").removeClass("hidden").unbind().click(function () {
            c && !$(this).hasClass("btndisabled") && c()
        }) : $("#director-info .btnright").addClass("hidden");
        !$("#director-info .btnleft").hasClass("hidden") || !$("#director-info .btnright").hasClass("hidden") ? $("#director-info").addClass("hasbuttons") : $("#director-info").removeClass("hasbuttons")
    },
    infobarEnableNext: function (b) {
        b ? $("#director-info .btnright").removeClass("btndisabled") : $("#director-info .btnright").addClass("btndisabled");
        !$("#director-info .btnleft").hasClass("hidden") || !$("#director-info .btnright").hasClass("hidden") ? $("#director-info").addClass("hasbuttons") : $("#director-info").removeClass("hasbuttons")
    },
    infobarResetButtons: function () {
        $("#director-info .buttons").empty()
    },
    infobarAddButton: function (b) {
        var c = $("#director-info");
        $directory.find(".buttons").append(b).css("right", 32 + c.find(".notechoices").outerWidth())
    },
    infobarSetButtons: function (b) {
        var c = $("#director-info"),
            d = c.find(".buttons");
        d.empty();
        if (b) {
            for (var e =
                    0; e < b.length; e++) d.append(b[e]);
            d.css("right", 32 + c.find(".notechoices").outerWidth())
        }
    }
},
    WinToolbar = {
        enable: function (b) {
            b ? $(".toolbar-top").removeClass("hidden") : $(".toolbar-top").addClass("hidden");
            IDE.adjustPanels()
        },
        init: function () {
            $(".toolbar-top").removeClass("hidden");
            $(".ide-menus .menu-link").click(function () {
                return false
            });
            $("#wincmd-edit").mouseenter(function () {
                if (!$(this).hasClass("disabled"))
                    if (IDE.editingActor && window.WinLessons && WinLessons.currentPbIdx < 0) {
                        $("#wincmd-cloneactor").removeClass("disabled");
                        if (IDE.editingActor.locked) {
                            $("#wincmd-savetblock").addClass("disabled");
                            $("#wincmd-unlocktblock").removeClass("disabled")
                        } else {
                            $("#wincmd-savetblock").removeClass("disabled");
                            $("#wincmd-unlocktblock").addClass("disabled")
                        }
                    } else {
                        $("#wincmd-cloneactor").addClass("disabled");
                        $("#wincmd-savetblock").addClass("disabled");
                        $("#wincmd-unlocktblock").addClass("disabled")
                    }
                return false
            });
            $("#wincmd-top").click(function () {
                $(this).hasClass("disabled") || IDE.cmdExit($(this).attr("href"));
                return false
            });
            $("#wincmd-exit").click(function () {
                $(this).hasClass("disabled") ||
                    IDE.cmdExit();
                return false
            });
            $("#wincmd-new").click(function () {
                $(this).hasClass("disabled") || IDE.cmdProjectNew();
                return false
            });
            $("#wincmd-open").click(function () {
                $(this).hasClass("disabled") || IDE.cmdProjectOpen();
                return false
            });
            $("#wincmd-save").click(function () {
                $(this).hasClass("disabled") || IDE.cmdProjectSave();
                return false
            });
            $("#wincmd-tbsave").click(function () {
                $(this).hasClass("disabled") || IDE.cmdProjectSave();
                return false
            });
            $("#wincmd-tbsubmitentry").click(function () {
                $(this).hasClass("disabled") ||
                    IDE.cmdProjectSubmitEntry();
                return false
            });
            $("#wincmd-editproject").click(function () {
                $(this).hasClass("disabled") || IDE.cmdProjectSaveAs(true, null, g_loc.getText("dialog.edittitle"));
                return false
            });
            $("#wincmd-saveas").click(function () {
                $(this).hasClass("disabled") || IDE.cmdProjectSaveAs();
                return false
            });
            $("#wincmd-submit").click(IDE.cmdSubmitProject);
            $("#wincmd-autosave").click(function () {
                if (!$(this).hasClass("disabled"))
                    if ($(this).hasClass("autosave")) {
                        $(this).removeClass("autosave").text(g_loc.getText("menu.autosave_on"));
                        IDE.autosave = false;
                        setPreference("autosave", "off")
                    } else {
                        $(this).addClass("autosave").text(g_loc.getText("menu.autosave_off"));
                        IDE.autosave = true;
                        setPreference("autosave", "on")
                    }
                return false
            });
            IDE.autosave = prefs.autosave == "on";
            IDE.autosave ? $("#wincmd-autosave").addClass("autosave").text(g_loc.getText("menu.autosave_off")) : $("#wincmd-autosave").removeClass("autosave").text(g_loc.getText("menu.autosave_on"));
            $("#wincmd-joinstudent").click(function () {
                $(this).hasClass("disabled") || IDE.cmdJoinStudent();
                return false
            });
            $("#wincmd-logout").click(function () {
                $(this).hasClass("disabled") || IDE.cmdLogout();
                return false
            });
            $(".toolbar-top .menu-link, #wincmd-user").click(function () {
                var b = $(".sub-menu");
                b.removeClass("active");
                $(this).siblings(".sub-menu").addClass("active");
                if (b.hasClass("active")) {
                    $("body").on("click", function () {
                        b.removeClass("active")
                    });
                    $(".sub-menu a").on("click", function () {
                        b.removeClass("active")
                    })
                }
                return false
            });
            $("#wincmd-resetall").click(function () {
                $(this).hasClass("disabled") || IDE.cmdResetActors();
                return false
            });
            $("#wincmd-showgrid").click(function () {
                Runtime.stage.showGrid(!Runtime.stage.isGridVisible());
                return false
            });
            $("#wincmd-search").click(function () {
                $(this).hasClass("disabled") || WinCode.showSearch();
                return false
            });
            $("#wincmd-undo").click(function () {
                $(this).hasClass("disabled") || (window.WinPaint && $("#win-paint").is(":visible") ? WinPaint.cmdUndo() : IDE.cmdUndo());
                return false
            });
            $("#wincmd-redo").click(function () {
                $(this).hasClass("disabled") || (window.WinPaint && $("#win-paint").is(":visible") ?
                    WinPaint.cmdRedo() : IDE.cmdRedo());
                return false
            });
            $("#wincmd-delete").click(function () {
                $(this).hasClass("disabled") || (WinCode.getSelection().length > 0 ? WinCode.deleteSelection() : WinAssets.getSelection() && WinAssets.deleteActor());
                return false
            });
            $("#wincmd-cut").click(function () {
                $(this).hasClass("disabled") || (WinCode.getSelection().length > 0 ? WinCode.cutSelection() : WinAssets.getSelection() && WinAssets.cutActor());
                return false
            });
            $("#wincmd-copy").click(function () {
                $(this).hasClass("disabled") || (WinCode.getSelection().length >
                    0 ? WinCode.copySelection() : WinAssets.getSelection() && WinAssets.copyActor());
                return false
            });
            $("#wincmd-paste").click(function () {
                $(this).hasClass("disabled") || (IDE.Clipboard.get("blocks") ? WinCode.pasteSelection() : IDE.Clipboard.get("sprite") && WinAssets.pasteActor());
                return false
            });
            $("#wincmd-movefront").click(function () {
                $(this).hasClass("disabled") || WinAssets.moveFront()
            });
            $("#wincmd-moveback").click(function () {
                $(this).hasClass("disabled") || WinAssets.moveBack()
            });
            $("#wincmd-backpack").click(function () {
                $(this).hasClass("disabled") ||
                    IDE.cmdBackpack();
                return false
            });
            $("#wincmd-share, .wincmd-share").click(function () {
                $(this).hasClass("disabled") || IDE.cmdProjectShare();
                return false
            });
            $("#wincmd-rearrange").click(function () {
                $(this).hasClass("disabled") || WinCode.relayoutBlocks();
                return false
            });
            $("#wincmd-norearrange").click(function () {
                $(this).hasClass("disabled") || WinCode.setLayoutMethod("none");
                return false
            });
            $("#wincmd-autorearrangebox").click(function () {
                $(this).hasClass("disabled") || WinCode.setLayoutMethod("box");
                return false
            });
            $("#wincmd-autorearrangelinear").click(function () {
                $(this).hasClass("disabled") || WinCode.setLayoutMethod("linear");
                return false
            });
            $("#wincmd-savetblock").click(function () {
                $(this).hasClass("disabled") || WinAssets.saveActor();
                return false
            });
            $("#wincmd-unlocktblock").click(function () {
                $(this).hasClass("disabled") || WinAssets.unlockActor();
                return false
            });
            $("#wincmd-debugger").click(function () {
                $(this).hasClass("disabled") || WinTools.showDebugger();
                return false
            });
            $("#wincmd-canvasview").click(function () {
                $("#stagecmd-edit").click();
                return false
            });
            $("#wincmd-codeview").click(function () {
                $("#codecmd-edit").click();
                return false
            });
            $("#wincmd-stageminmax").click(function () {
                $("#stagecmd-minmax").click();
                return false
            });
            $("#wincmd-blockcodesplit").click(function () {
                if (!$(this).hasClass("disabled")) {
                    if ($("#win-code .blockview").hasClass("hidden") || $("#win-code .codeview").hasClass("hidden")) {
                        $("#win-media-sidebar").addClass("hidden");
                        $("#win-levels").addClass("hidden");
                        $("#codecmd-edit").addClass("selected").siblings().removeClass("selected");
                        WinStage.editTiles();
                        $("#win-code .sprite-position").addClass("hidden");
                        WinCode.enableBlockView(true);
                        WinCode.enableCodeView(true);
                        WinCode.adjustWindow();
                        WinTools.minimize(true)
                    } else {
                        $("#win-code .sprite-position").removeClass("hidden");
                        WinCode.enableBlockView(true);
                        WinCode.enableCodeView(false);
                        WinCode.adjustWindow();
                        WinTools.minimize(false)
                    }
                    IDE.adjustPanels()
                }
                return false
            });
            $("#wincmd-createlib").click(function () {
                $(this).hasClass("disabled") || WinTools.createLibrary();
                return false
            });
            $("#wincmd-loadlib").click(function () {
                $(this).hasClass("disabled") ||
                    WinTools.loadLibrary();
                return false
            });
            $("#wincmd-createblank").click(function () {
                $(this).hasClass("disabled") || WinAssets._addAssetAsActor([{
                    url: "ide/imgs/blank.png",
                    name: "actor",
                    code: '[{"func":"registerDraw","values":[],"containers":[],"next":{"func":"blockPenDrawRectangle","values":[{"type":"number","value":"-40"},{"type":"number","value":"40"},{"type":"number","value":"80"},{"type":"number","value":"80"}],"containers":[],"next":{"func":"blockPenDrawLine","values":[{"type":"number","value":"-40"},{"type":"number","value":"40"},{"type":"number","value":"40"},{"type":"number","value":"-40"}],"containers":[],"next":{"func":"blockPenDrawLine","values":[{"type":"number","value":"-40"},{"type":"number","value":"-40"},{"type":"number","value":"40"},{"type":"number","value":"40"}],"containers":[]}}},"x":40,"y":40}]'
                }]);
                return false
            });
            $("#wincmd-createtext").click(function () {
                $(this).hasClass("disabled") || IDE.promptDialog("Enter actor text", function (b) {
                    var b = b.replace('"', '\\"'),
                        c = WinAssets._addAssetAsActor([{
                            url: "ide/imgs/blank.png",
                            name: "actor",
                            code: '[{"func":"registerFlagTrigger","next":{"func":"blockPenSetFontColor","values":[{"type":"color","value":"#000000"}],"next":{"func":"blockPenSetFont","values":[{"type":"choice","value":"normal"},{"type":"choice","value":"72"},{"type":"choice","value":"Arial,Helvetica,sans-serif"}],"next":{"func":"blockLooksSetLabel","values":[{"type":"string","value":"' +
                                b + '"}]}}},"x":40,"y":40}]'
                        }]);
                    if (c) {
                        c.font = c.spriteObj.font = "normal 72px Arial,Helvetica,sans-serif";
                        c.fontColor = "#000000";
                        c.spriteObj.label = b
                    }
                });
                return false
            });
            $("#wincmd-cloneactor").click(function () {
                $(this).hasClass("disabled") || WinAssets.cloneActor();
                return false
            });
            $("#wincmd-buildexpression").click(function () {
                $(this).hasClass("disabled") || window.WinExpressions && WinExpressions.show();
                return false
            });
            $("#wincmd-legacy").click(function () {
                if (WinStage._isLegacyMode) {
                    WinCode.enableBlockView(true);
                    WinCode.enableCodeView(true)
                } else {
                    WinCode.enableCodeView(false);
                    WinCode.enableBlockView(true);
                    WinCode._generateBlocks()
                }
                WinStage.enableLegacy(!WinStage._isLegacyMode);
                return false
            });
            $("#wincmd-lessonbundle").click(function () {
                IDE.createLessonBundle();
                return false
            });
            $("#wincmd-projectbundle").click(function () {
                IDE.createProjectBundle();
                return false
            });
            $("#wincmd-exportscript").click(function () {
                $(this).hasClass("disabled") || window.WinCode && WinCode.exportScript();
                return false
            });
            $("#wincmd-importscript").click(function () {
                $(this).hasClass("disabled") || window.WinCode &&
                    WinCode.importScript();
                return false
            });
            $("#wincmd-makewidget").click(function () {
                $(this).hasClass("disabled") || IDE.cmdMakeWidget();
                return false
            });
            $("#wincmd-makecrx").click(function () {
                $(this).hasClass("disabled") || IDE.cmdMakeCRX();
                return false
            });
            $("#wincmd-lesson").click(function () {
                $(this).hasClass("disabled") || IDE.cmdCreateLesson();
                return false
            });
            $("#wincmd-runlesson").click(function () {
                if (!$(this).hasClass("disabled") && $("#annotations li").length > 0 && IDE.currentProjectId) window.location = "ide/?l=" +
                    IDE.currentProjectId;
                return false
            });
            $("#wincmd-puzzle").click(function () {
                $(this).hasClass("disabled") || IDE.cmdCreatePuzzle();
                return false
            });
            $("#wincmd-quiz").click(function () {
                $(this).hasClass("disabled") || IDE.cmdCreateQuiz();
                return false
            });
            $("#wincmd-annotate").click(function () {
                $(this).hasClass("disabled") || IDE.cmdCreateAnnotation();
                return false
            });
            $("#wincmd-showannotate").click(function () {
                $(this).hasClass("disabled") || IDE.cmdShowAnnotation();
                return false
            });
            $("#wincmd-annotationhelp").click(function () {
                $(this).hasClass("disabled") ||
                    WinAnnotation.showHelp();
                return false
            });
            $(".wincmd-home").click(function () {
                $(this).hasClass("disabled") || IDE.cmdExit();
                return false
            });
            $(".toolbar-top img.logo").click(function () {
                IDE.cmdExit()
            });
            $("#wincmd-tbbackpack").click(function () {
                $(this).hasClass("disabled") || IDE.cmdBackpack();
                return false
            });
            $("#wincmd-tbundo").click(function () {
                $(this).hasClass("disabled") || (window.WinPaint && $("#win-paint").is(":visible") ? WinPaint.cmdUndo() : IDE.cmdUndo());
                return false
            });
            $("#wincmd-tbredo").click(function () {
                $(this).hasClass("disabled") ||
                    (window.WinPaint && $("#win-paint").is(":visible") ? WinPaint.cmdRedo() : IDE.cmdRedo());
                return false
            });
            $("#ide-header .project-title span").click(function () {
                $("#ide-header .project-title span").addClass("hidden");
                $("#ide-header .project-title input").removeClass("hidden").focus();
                return false
            });
            $("#ide-header .project-title input").blur(function () {
                $("#ide-header .project-title span").removeClass("hidden");
                $("#ide-header .project-title input").addClass("hidden");
                var b = $.trim($(this).val());
                if (b == "") {
                    b =
                        IDE.defaultProjectName;
                    $(this).val(b)
                }
                IDE.setTitle(b);
                IDE.dirty()
            }).keydown(function (b) {
                b.keyCode == 13 && $(this).blur()
            });
            $("#wincmd-project input.label").focus(function () {
                $(this).addClass("active");
                $.trim($(this).val()) == IDE.defaultProjectName && $(this).val("")
            }).blur(function () {
                $(this).removeClass("active");
                var b = $.trim($(this).val());
                if (b == "") {
                    b = IDE.defaultProjectName;
                    $(this).val(b)
                }
                IDE.setTitle(b);
                IDE.dirty()
            }).keydown(function (b) {
                b.keyCode == 13 && $(this).blur()
            });
            $("#wincmd-help").click(function () {
                $("#stagecmd-edit").hasClass("selected") ?
                    Help.cmdHelp(null, "help/level-editor") : Help.cmdHelp();
                return false
            });
            $("li.wincmd-help .launchhelp").click(function () {
                $("li.wincmd-help").removeClass("active");
                Help.cmdHelp();
                return false
            });
            $("li.wincmd-help span input").keydown(function (b) {
                if (b.keyCode == 13) {
                    $("li.wincmd-help").removeClass("active");
                    Help.cmdHelp($("li.wincmd-help span input").val());
                    $("li.wincmd-help span input").val("").blur()
                }
            });
            $("li.wincmd-help span a.ask").click(function () {
                $("li.wincmd-help").removeClass("active");
                Help.cmdHelp($("li.wincmd-help span input").val());
                $("li.wincmd-help span input").val("").blur();
                return false
            });
            $("#wincmd-restoreide").click(function () {
                System.restoreIde();
                return false
            })
        },
        canDrop: function (b, c, d, e) {
            if ($("li.wincmd-help").hasClass("active") && (e instanceof Block || e instanceof Label)) {
                d = $("li.wincmd-help div.popover div.helpbox");
                if (b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight()) return true
            }
            return false
        },
        drop: function (b, c, d, e, f) {
            if (WinToolbar.canDrop(b, c, d, e, f)) {
                f == WinCode &&
                    WinCode.dragCanceled(e);
                $.ajax({
                    url: "ide/help/blockhelp",
                    data: {
                        f: e.func
                    },
                    success: function (b) {
                        if (b != "error") {
                            var b = JSON.parse(b),
                                c = $("li.wincmd-help .blockhelp").empty().removeClass("hidden");
                            c.html(b.question + "<br/>" + b.answer + '<br/><a href="#" class="more">More in Help</a>').find("span.script q").each(function () {
                                var b = $(this).text(),
                                    b = JSON.parse(b),
                                    b = ObjectIO.deserializeScriptStep(b);
                                $(this).css("display", "none").parent().append(b.getImage())
                            });
                            c.find("a.more").click(function () {
                                $("li.wincmd-help").removeClass("active").find(".blockhelp").empty().addClass("hidden");
                                Help.cmdHelp("@question " + e.func);
                                return false
                            })
                        }
                    }
                });
                return true
            }
            return false
        }
    },
    WinBackpack = {
        objects: [],
        enable: function (b) {
            b ? $("#wincmd-tbbackpack").removeClass("hidden") : $("#wincmd-tbbackpack").addClass("hidden")
        },
        init: function () {
            $("#wincmd-tbbackpack").removeClass("hidden");
            $("#win-backpack").resizable(WinBackpack._resize).draggable({
                handle: "h2"
            }).find("a.window-close").click(function () {
                $("#win-backpack").addClass("hidden");
                return false
            });
            WinBackpack._resize()
        },
        hide: function () {
            $("#win-backpack").addClass("hidden")
        },
        showIfAdded: function () {
            $.ajax({
                url: "api/backpacklist.aspx",
                success: function (b) {
                    b = JSON.parse(b);
                    b.length > 0 && WinBackpack._latestTimestamp != b[b.length - 1].timestamp.sec && WinBackpack.show()
                }
            })
        },
        show: function () {
            $("#win-backpack").removeClass("hidden").css("width", 570).css("height", 250).css("left", window.innerWidth - 570).css("top", $(".toolbar-top").outerHeight());
            $("#win-backpack .overlay").detach();
            $("#win-backpack ul").empty();
            $.ajax({
                url: "api/backpacklist.aspx",
                success: function (b) {
                    b = JSON.parse(b);
                    if (!b ||
                        b.length == 0) $("#win-backpack").append('<div class="overlay">' + g_loc.getText("backpack.empty") + "</div>").find("div.overlay").css("top", $("#win-backpack h2").outerHeight(true)).find("a").click(function () {
                            return false
                        });
                    else {
                        WinBackpack._latestTimestamp = b[b.length - 1].timestamp.sec;
                        for (var c = b.length - 1; c >= 0; c--) {
                            var d, e = null;
                            if (b[c].type == "code") d = new WinBackpack.Resource(null, b[c].data, null);
                            else if (b[c].type == "sprite") {
                                d = new WinBackpack.Resource(b[c].img, null, b[c].data);
                                JSON.parse(d.sprite).locked &&
                                    (e = "ide/imgs/tblock_tab.png")
                            }
                            if (d) {
                                d.id = b[c]._id.$id;
                                WinBackpack.objects.push(d);
                                var f = $('<li bid="' + b[c]._id.$id + '"><img class="main" src="' + d.img + '"/><a class="hidden" href="#">X</a></li>');
                                e && f.append('<img class="indicator" src="' + e + '"/>');
                                $("#win-backpack ul").append(f);
                                f.mouseenter(WinBackpack._mouseenter).mouseleave(WinBackpack._mouseleave).find("a").click(WinBackpack._click)
                            }
                        }
                    }
                }
            });
            WinBackpack._resize()
        },
        add: function (b) {
            var c = "",
                d = "",
                e = "",
                f = null;
            if (b.code) {
                c = "code";
                d = b.code;
                e = null
            } else if (b.sprite) {
                c =
                    "sprite";
                d = b.sprite;
                e = b.img;
                JSON.parse(d).locked && (f = "ide/imgs/tblock_tab.png")
            }
            $.ajax({
                url: "api/backpackadd.aspx",
                type: "POST",
                data: {
                    t: c,
                    d: d,
                    i: e
                },
                success: function (c) {
                    $("#win-backpack .overlay").detach();
                    b.id = c;
                    WinBackpack.objects.push(b);
                    if (!$("#win-backpack").hasClass("hidden")) {
                        c = $('<li bid="' + c + '"><img class="main" src="' + b.img + '"/><a class="hidden" href="#">X</a></li>');
                        f && c.append('<img class="indicator" src="' + f + '"/>');
                        $("#win-backpack ul").prepend(c);
                        c.mouseenter(WinBackpack._mouseenter).mouseleave(WinBackpack._mouseleave).find("a").click(WinBackpack._click)
                    }
                }
            })
        },
        _resize: function () {
            $("#win-backpack > div.items").css("top", $("#win-backpack h2").outerHeight(true))
        },
        _mouseenter: function () {
            $(this).find("a").removeClass("hidden")
        },
        _mouseleave: function () {
            $(this).find("a").addClass("hidden")
        },
        _click: function () {
            var b = $(this).parents("li").attr("bid");
            WinBackpack.remove(b);
            $(this).detach();
            return false
        },
        remove: function (b) {
            for (var c = 0; c < WinBackpack.objects.length; c++)
                if (WinBackpack.objects[c].id == b) {
                    WinBackpack.objects.splice(c, 1);
                    $("#win-backpack ul li[bid=" + b + "]").detach();
                    WinBackpack.objects.length == 0 && $("#win-backpack").append('<div class="overlay"><span>' + g_loc.getText("backpack.empty") + "</span></div>").find("div.overlay").css("top", $("#win-backpack h2").outerHeight(true));
                    $.ajax({
                        url: "api/backpackdelete.aspx",
                        type: "POST",
                        data: {
                            i: b
                        }
                    });
                    break
                }
        },
        canDrag: function (b, c) {
            var d = false;
            if (!$("#win-backpack").hasClass("hidden")) {
                var e = $("#win-backpack");
                b >= e.offset().left && (b <= e.offset().left + e.outerWidth() && c >= e.offset().top && c <= e.offset().top + e.outerHeight()) && (d = true)
            }
            return d
        },
        getDragObj: function (b, c) {
            var d = null;
            if (!$("#win-backpack").hasClass("hidden")) {
                var e = $("#win-backpack"),
                    f = $("#win-backpack h2");
                b >= e.offset().left && (b <= e.offset().left + e.outerWidth() && c >= e.offset().top + f.outerHeight() && c <= e.offset().top + e.outerHeight()) && $("#win-backpack li").each(function (e, f) {
                    f = $(f);
                    if (b >= f.offset().left && b <= f.offset().left + f.outerWidth() && c >= f.offset().top && c <= f.offset().top + f.outerHeight()) {
                        var j = f.attr("bid");
                        if (j)
                            for (var k = 0; k < WinBackpack.objects.length; k++)
                                if (WinBackpack.objects[k].id ==
                                    j) {
                                    if (WinBackpack.objects[k].code) d = ObjectIO.deserializeScriptStep(JSON.parse(WinBackpack.objects[k].code));
                                    else if (WinBackpack.objects[k].sprite) {
                                        j = WinBackpack.objects[k];
                                        d = new WinAssets.DragObject(j.img, j.sprite)
                                    }
                                    break
                                }
                        return false
                    }
                })
            }
            return d
        },
        canDrop: function (b, c, d, e, f) {
            var d = false,
                g = $("#wincmd-tbbackpack");
            if (e instanceof Block || e instanceof Label) b + e.x > g.offset().left + g.outerWidth() || (b + e.x + e.width < g.offset().left || c + e.y + e.height < g.offset().top || c + e.y > g.offset().top + g.outerHeight()) || (d = true);
            if (!d && e instanceof WinAssets.DragObject) {
                var h = e.img.width,
                    j = e.img.height;
                if (h > 128) {
                    j = j * 128 / h;
                    h = 128
                }
                if (j > 128) {
                    h = h * 128 / j;
                    j = 128
                }
                b - h / 2 > g.offset().left + g.outerWidth() || (b + h / 2 < g.offset().left || c + j / 2 < g.offset().top || c - j / 2 > g.offset().top + g.outerHeight()) || (d = true)
            }
            if (!d && !$("#win-backpack").hasClass("hidden")) {
                g = $("#win-backpack");
                b >= g.offset().left && (b <= g.offset().left + g.outerWidth() && c >= g.offset().top && c <= g.offset().top + g.outerHeight()) && (d = true)
            }
            if (d) {
                if ($("#win-backpack").hasClass("hidden")) {
                    if ($(".toolbar-top").hasClass("hidden") ||
                        $("#wincmd-tbbackpack").parent().hasClass("hidden")) return false;
                    WinBackpack.show()
                }
                if (f != WinBackpack && (e instanceof Block || e instanceof Label) || f != WinBackpack && e instanceof WinAssets.DragObject) return true
            }
            return false
        },
        dragOver: function (b, c, d, e) {
            var d = false,
                f = $("#wincmd-tbbackpack");
            if (e instanceof Block || e instanceof Label) b + e.x > f.offset().left + f.outerWidth() || (b + e.x + e.width < f.offset().left || c + e.y + e.height < f.offset().top || c + e.y > f.offset().top + f.outerHeight()) || (d = true);
            if (!d && e instanceof WinAssets.DragObject) {
                var g =
                    e.img.width,
                    e = e.img.height;
                if (g > 128) {
                    e = e * 128 / g;
                    g = 128
                }
                if (e > 128) {
                    g = g * 128 / e;
                    e = 128
                }
                b - g / 2 > f.offset().left + f.outerWidth() || (b + g / 2 < f.offset().left || c + e / 2 < f.offset().top || c - e / 2 > f.offset().top + f.outerHeight()) || (d = true)
            }
            if (!d && !$("#win-backpack").hasClass("hidden")) {
                f = $("#win-backpack");
                b >= f.offset().left && (b <= f.offset().left + f.outerWidth() && c >= f.offset().top && c <= f.offset().top + f.outerHeight()) && (d = true)
            }
            if (d && $("#win-backpack").hasClass("hidden")) {
                if ($(".toolbar-top").hasClass("hidden") || $("#wincmd-tbbackpack").parent().hasClass("hidden")) return false;
                WinBackpack.show()
            }
        },
        drop: function (b, c, d, e, f) {
            var d = false,
                g = $("#wincmd-tbbackpack");
            if (e instanceof Block || e instanceof Label) b + e.x > g.offset().left + g.outerWidth() || (b + e.x + e.width < g.offset().left || c + e.y + e.height < g.offset().top || c + e.y > g.offset().top + g.outerHeight()) || (d = true);
            if (!d && e instanceof WinAssets.DragObject) {
                var h = e.img.width,
                    j = e.img.height;
                if (h > 128) {
                    j = j * 128 / h;
                    h = 128
                }
                if (j > 128) {
                    h = h * 128 / j;
                    j = 128
                }
                b - h / 2 > g.offset().left + g.outerWidth() || (b + h / 2 < g.offset().left || c + j / 2 < g.offset().top || c - j / 2 > g.offset().top +
                    g.outerHeight()) || (d = true)
            }
            if (!d && !$("#win-backpack").hasClass("hidden")) {
                g = $("#win-backpack");
                b >= g.offset().left && (b <= g.offset().left + g.outerWidth() && c >= g.offset().top && c <= g.offset().top + g.outerHeight()) && (d = true)
            }
            if (d)
                if (e instanceof Block || e instanceof Label) {
                    b = e.x;
                    c = e.y;
                    e.x = 0;
                    e.y = 0;
                    e.showDragHandle = false;
                    d = new WinBackpack.Resource(null, e, null);
                    WinBackpack.add(d);
                    e.x = b;
                    e.y = c;
                    f == WinCode && IDE.Clipboard.doUndo()
                } else if (e instanceof WinAssets.DragObject && e.sprite) {
                    d = new WinBackpack.Resource(e.img.src,
                        null, e.sprite);
                    WinBackpack.add(d)
                }
        },
        _sanitize: function (b) {
            if (b && typeof b == "object") {
                for (var c in b)
                    if (!b.classname && c == "id") {
                        b[c] = void 0;
                        delete b[c]
                    } else WinBackpack._sanitize(b[c]);
                if (b.length)
                    for (c = 0; c < b.length; c++) WinBackpack._sanitize(b[c])
            }
        },
        Resource: function (b, c, d) {
            if (c) {
                if (c instanceof Block) {
                    b = c.copy();
                    b.x = 0;
                    b.y = 0;
                    b.showDragHandle = false;
                    c = JSON.stringify(ObjectIO.genScriptObj(b))
                } else if (c instanceof Label) {
                    b = c.copy();
                    b.x = 0;
                    b.y = 0;
                    b.showDragHandle = false;
                    b._computeBounds();
                    c = JSON.stringify(ObjectIO.genValueObj(b))
                } else if (typeof c ==
                    "string") {
                    b = ObjectIO.deserializeScriptStep(JSON.parse(c)).copy();
                    c = b instanceof Block ? JSON.stringify(ObjectIO.genScriptObj(b)) : JSON.stringify(ObjectIO.genValueObj(b))
                } else {
                    b = ObjectIO.deserializeScriptStep(c).copy();
                    c = JSON.stringify(ObjectIO.genScriptObj(b))
                }
                this.code = c;
                this.img = b.getImage().src
            } else if (d) {
                c = JSON.parse(d);
                WinBackpack._sanitize(c);
                this.sprite = d = JSON.stringify(c);
                this.img = b
            }
        }
    },
    WinAssets = {
        _forceBackgroundAssets: !1,
        _enableDelete: !0,
        _enableContextMenu: !0,
        _enableHideInSandbox: !1,
        _enableLockInSandbox: !1,
        _enableSandbox: !1,
        _disableCodeDrop: !1,
        _listeners: [],
        enable: function (b) {
            b ? $("#win-assets").removeClass("hidden") : $("#win-assets").addClass("hidden");
            IDE.adjustPanels()
        },
        enableDecorations: function (b) {
            b ? $("#win-assets h1").removeClass("hidden") : $("#win-assets h1").addClass("hidden");
            IDE.adjustPanels()
        },
        enableDelete: function (b) {
            b ? $("#win-assets a.delete").removeClass("hidden") : $("#win-assets a.delete").addClass("hidden");
            WinAssets._enableDelete = b
        },
        enableAddByURL: function (b) {
            var c = $("#addassetsdialog");
            if (b) {
                c.find(".import-options .link").removeClass("hidden");
                $(".import-options .link").click(function () {
                    $(this).toggleClass("selected");
                    $("#image-url").toggleClass("hidden")
                });
                c.find("input[type=text]").unbind().keypress(function (b) {
                    var c = $("#addassetsdialog input[type=text]").val();
                    if (b.which == 13) {
                        WinAssets._callback && generateImageFromUrl(c, function () {
                            WinAssets._callback([{
                                url: c,
                                name: ""
                            }])
                        });
                        $.modal.close()
                    }
                });
                $("#win-properties .looks .url").removeClass("hidden")
            } else {
                c.find("#image-url").addClass("hidden");
                $("#win-properties .looks .url").addClass("hidden")
            }
        },
        enableSandbox: function (b) {
            b ? $("#win-assets > div.actors ul li.stage").removeClass("hidden") : $("#win-assets > div.actors ul li.stage").addClass("hidden");
            b ? $("#win-assets .actors li.stage").addClass("hidden") : $("#win-assets .actors li.stage").removeClass("hidden");
            var c = $("#win-assets > div.actors ul");
            $("li.actor", c).each(function (c, e) {
                var f = $(e),
                    g = f.data("sprite");
                if (g.hiddenInSandbox || g.lockedInSandbox)
                    if (b) {
                        g.hiddenInSandbox && f.addClass("hidden");
                        if (g.lockedInSandbox) {
                            g.spriteObj.selectable = false;
                            g.spriteObj.draggable = false
                        }
                    } else {
                        g.hiddenInSandbox && f.removeClass("hidden");
                        if (g.lockedInSandbox) {
                            g.spriteObj.selectable = true;
                            g.spriteObj.draggable = true
                        }
                    }
            });
            WinAssets._enableSandbox = b
        },
        enableStrip: function (b) {
            if (b) {
                $("#win-assets").addClass("strip");
                $("#win-assets .tab-content").sortable("disable")
            } else {
                $("#win-assets").removeClass("strip");
                $("#win-assets .tab-content").sortable("enable")
            }
        },
        init: function () {
            $("#actors-tab").click(function () {
                $("#win-assets").removeClass("scenes");
                $("#win-assets").addClass("actors");
                Runtime.sprites.length > 0 && IDE.selectAsset(Runtime.sprites[0]);
                return false
            });
            $("#scenes-tab").click(function () {
                $("#win-assets").addClass("scenes");
                $("#win-assets").removeClass("actors");
                IDE.selectAsset(null);
                return false
            });
            $("#win-assets").removeClass("hidden");
            WinAssets.adjustWindow();
            WinAssets.trackActor(null);
            $("#assetcmd-addactor").click(WinAssets._addActorButton);
            $("#assetcmd-addscene").click(WinAssets._addSceneButton);
            window.setInterval(WinAssets.update, 1E3);
            $("#win-assets .assets-toolbar a.delete").click(function () {
                WinAssets.cutActor();
                return false
            });
            $("#win-assets .assets-toolbar a.duplicate").click(function () {
                WinAssets.cloneActor();
                return false
            });
            $("#win-assets .assets-toolbar a.advanced").click(function () {
                IDE.editingActor && IDE.editingActor.locked ? WinProperties.show("interfaces") : WinProperties.show();
                return false
            });
            $("#win-assets .actors").mousedown(function (b) {
                if (b.which == 3 && !$("#win-assets").hasClass("strip")) {
                    WinAssets.showContextMenu(b, null);
                    return false
                }
            });
            $("#win-assets .background").mousedown(function (b) {
                if (b.which == 3 && !$("#win-assets").hasClass("strip")) {
                    WinAssets.showContextBgMenu(b, null);
                    return false
                }
            });
            $("#win-assets > div").css("top", $("#win-assets h1").outerHeight() + "px");
            $("#addassetsdialog .cmd-draw").click(function () {
                if (!$(this).hasClass("disabled")) {
                    WinMediaAssets.reset();
                    $.modal.close();
                    window.WinPaint && WinPaint.edit(g_loc.getText("title.paint_create_actor"), null, null, null, function (b, c, d) {
                        WinAssets._callback && WinAssets._callback([{
                            url: b,
                            cx: c,
                            cy: d
                        }])
                    })
                }
                return false
            });
            $("#addassetsdialog .character").click(function () {
                if (!$(this).hasClass("disabled")) {
                    WinMediaAssets.reset();
                    $.modal.close();
                    window.WinSpine && WinSpine.showCreator(function (b, c) {
                        Sprites.addSprite({
                            cx: 500,
                            cy: 500,
                            scale: b == "Tiny" ? 1 : 0.25,
                            label: "actor",
                            costumeName: "actor",
                            img: "avatar://spine",
                            forceNumber: false,
                            skeletonType: b,
                            skeletonParts: c
                        }, function (b) {
                            b.spriteObj.setPosition(Runtime.stage.getWidth() / 2 - Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.getHeight() / 2 - Runtime.stage.tileLayer.getScrollOffsetY());
                            IDE.selectAsset(b);
                            IDE.Clipboard.undoAddActor(b)
                        })
                    })
                }
                return false
            });
            $("#addassetsdialog .blank").click(function () {
                if (!$(this).hasClass("disabled")) {
                    WinMediaAssets.reset();
                    $.modal.close();
                    WinAssets._callback && WinAssets._callback([{
                        url: "ide/imgs/blank.png"
                    }])
                }
                return false
            });
            $("#addassetsdialog .cmd-vector").click(function () {
                if (!$(this).hasClass("disabled")) {
                    WinMediaAssets.reset();
                    $.modal.close();
                    window.WinSVGPaint && WinSVGPaint.edit(g_loc.getText("title.paint_create_actor"), null, null, null, function (b,
                        c, d) {
                        WinAssets._callback && WinAssets._callback([{
                            url: b,
                            cx: c,
                            cy: d
                        }])
                    })
                }
                return false
            });
            $("#addassetsdialog .import-image").change(function (b) {
                $.each(b.originalEvent.target.files, function (b, d) {
                    var e = getFilename(d.name);
                    if (d.type.match("image.*")) {
                        var f = new FileReader;
                        f.onload = function (b) {
                            $.ajax({
                                url: WinMediaAssets.medialibsave,
                                type: "POST",
                                data: {
                                    d: b.target.result
                                },
                                success: function (b) {
                                    b = JSON.parse(b);
                                    WinAssets._callback && WinAssets._callback([{
                                        url: "assets/user/" + b.id + ".png",
                                        name: e
                                    }])
                                }
                            })
                        };
                        f.readAsDataURL(d)
                    } else if (d.type ==
                        "audio/mp3" || d.type == "audio/mpeg" || d.type == "audio/vnd.wav") {
                        var g = ".mp3";
                        d.type == "audio/vnd.wav" && (g = ".wav");
                        f = new FileReader;
                        f.onload = function (b) {
                            $.ajax({
                                url: WinMediaAssets.medialibsave,
                                type: "POST",
                                data: {
                                    d: b.target.result
                                },
                                success: function (b) {
                                    b = JSON.parse(b);
                                    WinAssets._callback && WinAssets._callback([{
                                        url: "assets/user/" + b.id + g,
                                        name: e
                                    }])
                                }
                            })
                        };
                        f.readAsDataURL(d)
                    }
                })
            });
            $("#addassetsdialog .import").click(function () {
                if (!$(this).hasClass("disabled")) {
                    WinMediaAssets.reset();
                    $.modal.close();
                    $("#addassetsdialog").find(".import-image").click()
                }
                return false
            });
            $("#addassetsdialog .photo").click(function () {
                if (!$(this).hasClass("disabled")) {
                    WinMediaAssets.reset();
                    $.modal.close();
                    MediaCapture.supportsCapture && WinMediaCapture.showPictureTaker(function (b) {
                        WinAssets._callback && WinAssets._callback([{
                            url: b,
                            name: "Photo"
                        }])
                    })
                }
                return false
            });
            $("#win-assets .tab-content").sortable({
                items: "li.actor",
                stop: function () {
                    IDE.dirty();
                    var b = [];
                    $("#win-assets .tab-content li.actor").each(function (c, d) {
                        $(d).hasClass("stacked") || b.push($(d).data("sprite"))
                    });
                    Runtime.sprites = b
                }
            })
        },
        _addActorButton: function () {
            $("#addassetsdialog h2").text("Add an Actor");
            $("#addassetsdialog .character").removeClass("hidden");
            WinAssets._callback = WinAssets._addAssetAsActor;
            $("#addassetsdialog a.library").unbind().click(function () {
                WinMediaAssets.showPicker("Add an Actor", WinAssets._addAssetAsActor, {
                    backgrounds: true,
                    actors: true,
                    images: true,
                    sounds: true,
                    charStudio: true
                })
            })
        },
        _addSceneButton: function () {
            $("#addassetsdialog h2").text("Add a Scene");
            $("#addassetsdialog .character").addClass("hidden");
            WinAssets._callback =
                WinAssets._addAssetAsScene;
            $("#addassetsdialog a.library").unbind().click(function () {
                WinMediaAssets.showPicker("Add an Scene", WinAssets._addAssetAsScene, {
                    backgrounds: true,
                    actors: false,
                    images: false,
                    sounds: true,
                    charStudio: false
                })
            })
        },
        _addAssetAsActor: function (b, c, d) {
            var e = b[0],
                f = getFileExt(e.url);
            if (f == ".mp3" || f == ".wav") {
                if (IDE.editingActor) {
                    IDE.addResourceTo(e.url, e.name, IDE.editingActor);
                    return IDE.editingActor
                }
                IDE.addResourceTo(e.url, e.name, Runtime.background);
                return Runtime.background
            }
            if (f == ".actor") ObjectIO.loadSprite(e.url,
                function (b) {
                    b.spriteObj.setPosition(Runtime.stage.getWidth() / 2 - Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.getHeight() / 2 - Runtime.stage.tileLayer.getScrollOffsetY());
                    Runtime.stage.draw();
                    IDE.computeAll();
                    IDE.draw();
                    IDE.selectAsset(b);
                    IDE.Clipboard.undoAddActor(b)
                });
            else if (WinAssets._forceBackgroundAssets) var g = Runtime.background.addCostume({
                img: e.url,
                name: e.name
            }, function () {
                Runtime.background.setCostumeByName(g.name);
                IDE.Clipboard.undoAddCostume(Runtime.background, g)
            });
            else {
                IDE.dirty();
                f = 1;
                if (e.url.indexOf("avatar://") == 0 && (Runtime.stage.width < 800 || Runtime.stage.height < 800)) f = 0.5;
                var h = Sprites.addSprite({
                    cx: e.cx,
                    cy: e.cy,
                    scale: f,
                    label: d ? d : e.name ? e.name : "actor",
                    costumeName: e.name ? e.name : "actor",
                    img: e.url,
                    forceNumber: false
                }, function () {
                    h.spriteObj.setPosition(Runtime.stage.getWidth() / 2 - Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.getHeight() / 2 - Runtime.stage.tileLayer.getScrollOffsetY());
                    IDE._ignoreUpdates = true;
                    for (var c = 1; c < b.length; c++) h.addCostume({
                        img: b[c].url,
                        name: b[c].name,
                        cx: b[c].cx,
                        cy: b[c].cy
                    });
                    IDE._ignoreUpdates = false;
                    b[0].code && ObjectIO.deserializeScripts(h, JSON.parse(b[0].code));
                    IDE.selectAsset(h);
                    IDE.Clipboard.undoAddActor(h)
                });
                if (c) h.avatarid = c;
                return h
            }
        },
        _addAssetAsScene: function (b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c],
                    e = getFileExt(d.url);
                if (e == ".mp3" || e == ".wav") IDE.addResourceTo(d.url, d.name, Runtime.background);
                else var f = Runtime.background.addCostume({
                    img: d.url,
                    name: d.name
                }, function () {
                    Runtime.background.setCostumeByName(f.name);
                    IDE.Clipboard.undoAddCostume(Runtime.background,
                        f)
                })
            }
        },
        reset: function () {
            $("#win-assets > div ul").empty();
            var b = $('<li class="addactor"><a href="#addassetsdialog" rel="modal:open"><div class="middle"><i class="icon-plus-2"></i></div><div class="edit">Add Actor</div><div class="asset-actions"></div></a></li>');
            b.find("a").click(WinAssets._addActorButton);
            $("#win-assets > div.actors > ul").append(b);
            WinAssets.trackActor(null)
        },
        adjustWindow: function () {
            if ($("#win-assets").hasClass("strip")) {
                var b = $("#win-assets > div.background"),
                    c = $("#win-assets > div.actors"),
                    d = $("#win-assets h1:visible").outerHeight() + 0,
                    e = d + b.outerHeight();
                b.css("top", d);
                c.css("top", e)
            } else $("#win-assets > div").css("top", $("#win-assets h1:visible").outerHeight() + 0)
        },
        broadcastListeners: function (b) {
            for (var c = 0; c < WinAssets._listeners.length; c++) WinAssets._listeners[c](b)
        },
        addListener: function (b) {
            WinAssets._listeners.push(b)
        },
        removeListener: function (b) {
            for (var c = 0; c < WinAssets._listeners.length; c++) WinAssets._listeners[c] == b && WinAssets._listeners.splice(c, 1)
        },
        removeAllListeners: function () {
            WinAssets._listeners = []
        },
        unregisterActor: function (b) {
            $("#win-assets > div > ul > li").each(function () {
                if ($(this).hasClass("stacked")) {
                    $(this).find("li").each(function () {
                        if ($(this).data("sprite") == b) {
                            $(this).detach();
                            b == IDE.editingActor && IDE.selectAsset(null);
                            return false
                        }
                    });
                    var c = $(this).find("li");
                    if (c.length <= 1) {
                        c = $(c[0]);
                        c.detach();
                        c.insertAfter($(this));
                        $(this).detach()
                    } else c.length <= 0 ? $(this).detach() : $(this).parents("li").find("> .edit span").text("(" + c.length + ") " + b.classname)
                } else if ($(this).data("sprite") ==
                    b) {
                    $(this).detach();
                    b == IDE.editingActor && IDE.selectAsset(null);
                    return false
                }
            })
        },
        _addBlankSprite: function () {
            IDE.dirty();
            var b = Sprites.addSprite({
                costumeName: "blank",
                img: "ide/imgs/blank.png",
                forceNumber: false
            });
            b.spriteObj.setPosition(Runtime.stage.getWidth() / 2 - Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.getHeight() / 2 - Runtime.stage.tileLayer.getScrollOffsetY());
            IDE.selectAsset(b);
            IDE.Clipboard.undoAddActor(b)
        },
        deleteActor: function (b) {
            var c = b ? b.data("sprite") : IDE.editingActor;
            IDE.dirty();
            IDE.confirmDialog(g_loc.formatText("winassets.confirmdelete", c.label), function () {
                c.deleteActor();
                IDE.Clipboard.undoDeleteActor(c)
            })
        },
        cutActor: function (b) {
            if (!b) {
                b = $("#win-assets .actors > ul > li.selected");
                b.length > 0 && b.hasClass("stacked") && (b = b.find("li.selected"));
                if (b.length <= 0) return
            }
            var c = b.data("sprite");
            IDE.dirty();
            IDE.confirmDialog(g_loc.formatText("winassets.confirmdelete", c.label), function () {
                IDE.Clipboard.clear();
                IDE.Clipboard.add("sprite", JSON.stringify(ObjectIO.serializeSprite(c)));
                c.deleteActor();
                IDE.Clipboard.undoDeleteActor(c)
            })
        },
        copyActor: function (b) {
            if (!b) {
                b = $("#win-assets .actors li.selected");
                if (b.length <= 0) return
            }
            b = b.data("sprite");
            IDE.Clipboard.clear();
            IDE.Clipboard.add("sprite", JSON.stringify(ObjectIO.serializeSprite(b)))
        },
        pasteActor: function () {
            var b = IDE.Clipboard.get("sprite");
            b && ObjectIO.deserializeSprite(JSON.parse(b))
        },
        saveActor: function (b) {
            if (!b) {
                b = $("#win-assets .actors li.selected");
                if (b.length <= 0) return
            }
            b = b.data("sprite");
            IDE.dirty();
            IDE.cmdActorSave(b)
        },
        unlockActor: function (b) {
            if (!b) {
                b =
                    $("#win-assets .actors li.selected");
                if (b.length <= 0) return
            }
            IDE.confirmDialog(g_loc.getText("winproperties.confirmunlock"), function () {
                var c = b.data("sprite");
                IDE.dirty();
                c.locked = false;
                for (var d = 0; d < c.scripts.length; d++) c.scripts[d].hidden = false;
                for (d = 0; d < c.costumes.length; d++) c.costumes[d].hidden = false;
                for (d = 0; d < c.sounds.length; d++) c.sounds[d].hidden = false;
                WinTools.reset();
                IDE.selectAsset(c)
            });
            return false
        },
        cloneActor: function (b) {
            if (!b) {
                b = $("#win-assets .actors li.selected");
                if (b.length <= 0) return
            }
            b =
                b.data("sprite");
            IDE.dirty();
            IDE.selectAsset(IDE.cloneActor(b))
        },
        detachActor: function (b) {
            if (!b) {
                b = $("#win-assets .actors li.selected");
                if (b.length <= 0) return
            }
            b = b.data("sprite");
            if (b.id && b.classname) {
                IDE.dirty();
                delete b.id;
                delete b.classname;
                Runtime.unregisterScripts(b);
                var c = ObjectIO.serializeScripts(b);
                b.scripts = [];
                ObjectIO.deserializeScripts(b, c);
                Runtime.registerScripts(b);
                WinAssets.refresh();
                IDE.selectAsset(b)
            }
        },
        toggleHideActorInSandbox: function (b) {
            if (!b) {
                b = $("#win-assets .actors li.selected");
                if (b.length <= 0) return
            }
            b = b.data("sprite");
            b.hiddenInSandbox = !b.hiddenInSandbox;
            b.lockedInSandbox = b.hiddenInSandbox;
            IDE.dirty();
            return false
        },
        toggleLockActorInSandbox: function (b) {
            if (!b) {
                b = $("#win-assets .actors li.selected");
                if (b.length <= 0) return
            }
            b = b.data("sprite");
            b.lockedInSandbox = !b.lockedInSandbox;
            IDE.dirty();
            return false
        },
        moveFront: function (b) {
            if (!b) {
                b = $("#win-assets .actors li.selected");
                if (b.length <= 0) return
            }
            b.data("sprite").spriteObj.moveToTop();
            Runtime.stage.draw();
            IDE.dirty()
        },
        moveBack: function (b) {
            if (!b) {
                b =
                    $("#win-assets .actors li.selected");
                if (b.length <= 0) return
            }
            b.data("sprite").spriteObj.moveToBottom();
            Runtime.stage.draw();
            IDE.dirty()
        },
        _mouseEnter: function () {
            var b = $(this).find("a.delete").addClass("hidden");
            b.hasClass("hidden") && b.removeClass("hidden")
        },
        trackActor: function (b) {
            var c = null;
            if (b) {
                c = $('<li class="actor"><div class="middle"><img class="main" src=""/><img class="indicator hidden" src="ide/imgs/tblock_tab.png"/></div><div class="edit"><span></span><input type="text" class="hidden"/></div><div class="asset-actions"><a class="looks-tab icon-cog-2"></a><a class="delete icon-cancel-2"></a></div></li>');
                b.hidden && c.addClass("hidden");
                c.data("sprite", b).find("span").text(b.label);
                if (b.id && b.classname && !b.locked) {
                    c.attr("data-classname", b.classname);
                    var d = null;
                    $("#win-assets > div.actors > ul > li").each(function () {
                        if ($(this).attr("data-classname") == b.classname) {
                            d = $(this).find("ul");
                            if (d.length == 0) {
                                d = $("<ul></ul>");
                                var c = $(this).clone();
                                c.data("sprite", $(this).data("sprite"));
                                c.insertAfter($(this));
                                $(this).detach();
                                d.append($(this));
                                c.append(d).addClass("stacked");
                                $("#win-assets > div.actors > ul").append(c);
                                var e = $('<a href="#" class="expander"></a>');
                                c.append(e);
                                e.click(function () {
                                    $(this).parents("li").toggleClass("expand");
                                    return false
                                });
                                c.dblclick(function () {
                                    $(this).toggleClass("expand");
                                    return false
                                });
                                c.find(".middle").click(WinAssets._handleClick)
                            }
                            return false
                        }
                    });
                    if (d) {
                        d.append(c);
                        var e = d.find("li").length;
                        d.parents("li.stacked").find("> .edit span").text("(" + e + ") " + b.classname)
                    } else {
                        $("#win-assets > div.actors > ul").append(c);
                        c.find("span").text(b.label)
                    }
                } else {
                    $("#win-assets > div.actors > ul").append(c);
                    c.find("span").text(b.label)
                }
                b.costumes[0].imgObj && c.find("img.main").attr("src", b.costumes[0].imgObj.src);
                b.locked && c.find("img:last").removeClass("hidden");
                c.dblclick(function () {
                    IDE.editingActor && (!IDE.editingActor.lockedInSandbox && !$("#win-assets").hasClass("strip") && !$("#win-assets").hasClass("noactions")) && (IDE.editingActor.locked ? WinProperties.show("interfaces") : WinProperties.show("looks"));
                    return false
                });
                c.mousedown(function () {
                    if (event.which == 3 && !$("#win-assets").hasClass("strip")) {
                        WinAssets.showContextMenu(event,
                            $(this));
                        return false
                    }
                });
                c.find("> .asset-actions a.looks-tab").click(function () {
                    IDE.editingActor && IDE.editingActor.locked ? WinProperties.show("interfaces") : WinProperties.show("looks");
                    return false
                });
                c.find("> .asset-actions a.delete").click(function () {
                    WinAssets.cutActor();
                    return false
                });
                c.find("> .edit").click(function () {
                    if (!$("#win-assets").hasClass("hidenames") && !$(this).find("span").hasClass("hidden") && !$("#win-assets").hasClass("strip")) {
                        $("#win-assets .actors-tab li .edit span").removeClass("hidden");
                        $("#win-assets .actors-tab li .edit input").addClass("hidden");
                        WinAssets._selectActor($(this).parents("li"));
                        if (IDE.editingActor) {
                            $(this).find("span").addClass("hidden");
                            $(this).find("input").removeClass("hidden").val(IDE.editingActor.label).focus()
                        }
                    }
                    return false
                });
                c.find("> .edit input").blur(function () {
                    if (IDE.editingActor != null) {
                        IDE.dirty();
                        var b = $(this).val(),
                            b = IDE.editingActor.changeSpriteName(b);
                        $(this).parent(".edit").find("span").text(b)
                    }
                    $("#win-assets .actors-tab li .edit span").removeClass("hidden");
                    $("#win-assets .actors-tab li .edit input").addClass("hidden")
                }).keypress(function (b) {
                    b.which == 13 && $(this)[0].blur()
                });
                c.data("sprite", b)
            } else {
                c = $('<li class="stage"><div class="middle"><img class="main" src="ide/imgs/default-background.png"/></div><div class="edit">Stage</div><div class="asset-actions"><a class="looks-tab icon-cog-2"></a></div></li>');
                $("#win-assets > div.actors > ul").append(c);
                c.find(".looks-tab").click(function () {
                    WinProperties.show("looks");
                    return false
                });
                c.dblclick(function () {
                    !$("#win-assets").hasClass("strip") &&
                        !$("#win-assets").hasClass("noactions") && WinProperties.show("looks");
                    return false
                })
            }
            c.click(WinAssets._handleClick)
        },
        _handleClick: function () {
            var b = $(this).data("sprite");
            if (WinAssets._enableSandbox && b && b.lockedInSandbox) return false;
            $("#win-assets .actors-tab li .edit span").removeClass("hidden");
            $("#win-assets .actors-tab li .edit input").addClass("hidden");
            $(this)[0].tagName == "LI" ? WinAssets._selectActor($(this)) : WinAssets._selectActor($(this).parents("li"));
            return false
        },
        _selectActor: function (b) {
            $("#win-assets > div li").removeClass("selected");
            b.addClass("selected");
            b = b.data("sprite");
            WinAssets.broadcastListeners(b)
        },
        getSelection: function () {
            var b = $("#win-assets .actors li.selected");
            return b.length > 0 ? b : null
        },
        showBackground: function (b) {
            if (b) {
                IDE.selectAsset(null);
                WinProperties.show("looks")
            } else Runtime.sprites.length > 0 && IDE.selectAsset(Runtime.sprites[0])
        },
        selectAsset: function (b) {
            if (b && b != Runtime.background) {
                $("#win-assets .actors li").removeClass("selected");
                $("#win-assets .actors > ul > li").each(function () {
                    var c = false;
                    $(this).hasClass("stacked") ?
                        $(this).find("li").each(function () {
                            if ($(this).data("sprite") == b) {
                                $(this).addClass("selected");
                                c = true;
                                return false
                            }
                        }) : $(this).data("sprite") == b && (c = true);
                    if (c) {
                        $(this).addClass("selected");
                        $("#win-assets").removeClass("scenes");
                        $("#win-assets").addClass("actors");
                        return false
                    }
                })
            } else {
                $("#win-assets .actors li").removeClass("selected");
                $("#win-assets .actors li.stage").addClass("selected")
            }
        },
        showContextBgMenu: function (b) {
            if (WinAssets._enableSandbox) return false;
            if (!WinCode._readOnly && WinAssets._enableContextMenu) {
                $(".choice-chooser").detach();
                var c = window.outerHeight - b.pageY,
                    d = b.pageX,
                    e = b.pageY,
                    f = $('<div class="choice-chooser"><ul></ul></div>');
                f.css("left", d + "px");
                f.css("top", e + "px");
                if (c < 190) {
                    e = b.pageY - 90;
                    f.css("top", e + "px")
                }
                $("body").append(f);
                f = f.find("ul");
                b = $("<li>" + g_loc.getText("menu.addannotation") + "</li>");
                b.click(function () {
                    $(".choice-chooser").detach();
                    WinAnnotation.isVisible || WinAnnotation.show();
                    WinAnnotation.switchEditMode();
                    var b = $('<p><a class="link" href="#" data-stage="Stage"><img src="ide/imgs/blank.png"/></a></p>');
                    Runtime.background.costumes.length > 0 && b.find("img").attr("src", Runtime.background.costumes[Runtime.background.currentCostume - 1].img);
                    WinAnnotation.addNote(b)
                });
                f.append(b)
            }
        },
        showContextMenu: function (b, c) {
            if (WinAssets._enableSandbox && c && c.data("sprite") && c.data("sprite").lockedInSandbox) return false;
            if (!WinCode._readOnly && WinAssets._enableContextMenu) {
                $(".choice-chooser").detach();
                var d = b.pageX,
                    e = b.pageY,
                    f = $('<div class="choice-chooser"><ul></ul></div>');
                f.css("left", d + "px");
                f.css("top", e + "px");
                $("body").append(f);
                d = f.find("ul");
                e = $("<li>" + g_loc.getText("menu.addannotation") + "</li>");
                e.click(function () {
                    $(".choice-chooser").detach();
                    WinAnnotation.isVisible || WinAnnotation.show();
                    WinAnnotation.switchEditMode();
                    var b = $('<p><a class="link" href="#"><img src="ide/imgs/blank.png"/></a></p>'),
                        d = c.data("sprite");
                    b.find("a").attr("data-actor", d.label);
                    d.costumes.length > 0 && (d.costumes[d.currentCostume - 1].imgPreview ? b.find("img").attr("src", d.costumes[d.currentCostume - 1].imgPreview) : b.find("img").attr("src", d.costumes[d.currentCostume -
                        1].img));
                    WinAnnotation.addNote(b)
                });
                d.append(e);
                if (c && window.WinLessons && WinLessons.currentPbIdx < 0) {
                    e = $("<li>" + g_loc.getText("menu.cut") + "</li>");
                    c && $("#win-assets .actors li.selected").length > 0 ? e.click(function () {
                        $(".choice-chooser").detach();
                        WinAssets.cutActor(c)
                    }) : e.addClass("disabled");
                    d.append(e);
                    e = $("<li>" + g_loc.getText("menu.copy") + "</li>");
                    c && $("#win-assets .actors li.selected").length > 0 ? e.click(function () {
                        $(".choice-chooser").detach();
                        WinAssets.copyActor(c)
                    }) : e.addClass("disabled");
                    d.append(e);
                    e = $("<li>" + g_loc.getText("menu.paste") + "</li>");
                    IDE.Clipboard.get("sprite") ? e.click(function () {
                        $(".choice-chooser").detach();
                        WinAssets.pasteActor()
                    }) : e.addClass("disabled");
                    d.append(e);
                    e = $("<li>" + g_loc.getText("menu.cloneactor") + "</li>");
                    c ? e.click(function () {
                        $(".choice-chooser").detach();
                        WinAssets.cloneActor()
                    }) : e.addClass("disabled");
                    d.append(e);
                    if (c.data("sprite").locked) {
                        e = $("<li>" + g_loc.getText("winassets.menuunlockactor") + "</li>");
                        e.click(function () {
                            $(".choice-chooser").detach();
                            WinAssets.unlockActor(c)
                        })
                    } else {
                        e =
                            $("<li>" + g_loc.getText("winassets.menusaveactor") + "</li>");
                        e.click(function () {
                            $(".choice-chooser").detach();
                            WinAssets.saveActor(c)
                        })
                    }
                    d.append(e);
                    e = c.data("sprite");
                    if (e.id && e.classname) {
                        e = $("<li>Detach Actor</li>");
                        e.click(function () {
                            $(".choice-chooser").detach();
                            WinAssets.detachActor(c)
                        });
                        d.append(e)
                    }
                    if (WinAssets._enableHideInSandbox) {
                        e = c.data("sprite").hiddenInSandbox ? g_loc.getText("winassets.showinsandbox") : g_loc.getText("winassets.hideinsandbox");
                        e = $("<li>" + e + "</li>");
                        e.click(function () {
                            $(".choice-chooser").detach();
                            WinAssets.toggleHideActorInSandbox(c)
                        });
                        d.append(e)
                    }
                    if (WinAssets._enableLockInSandbox && !c.data("sprite").hiddenInSandbox) {
                        e = c.data("sprite").lockedInSandbox ? g_loc.getText("winassets.unlockinsandbox") : g_loc.getText("winassets.lockinsandbox");
                        e = $("<li>" + e + "</li>");
                        e.click(function () {
                            $(".choice-chooser").detach();
                            WinAssets.toggleLockActorInSandbox(c)
                        });
                        d.append(e)
                    }
                }
                b.pageY + d.height() > window.innerHeight && f.css("top", window.innerHeight - d.height());
                b.pageX + d.width() > window.innerWidth && f.css("left", window.innerWidth -
                    d.width())
            }
        },
        refresh: function () {
            $("#win-assets > div ul").empty();
            WinAssets.trackActor(null);
            for (var b = 0; b < Runtime.sprites.length; b++) WinAssets.trackActor(Runtime.sprites[b])
        },
        update: function () {
            $("#win-assets > div li").each(function () {
                var b = $(this).data("sprite");
                if (b == null) b = Runtime.background;
                if (b.costumes.length > 0) {
                    var c = $(this).find("img:first"),
                        d = b.getCostumeByName(b.currentCostume);
                    if (d[1].img == "avatar://spine") {
                        if (d[1].imgPreview) {
                            d = d[1].imgPreview;
                            c.attr("src") != d && c.attr("src", d)
                        }
                    } else d[1].imgObj ?
                        c.attr("src") != d[1].imgObj.src && c.attr("src", d[1].imgObj.src) : c.attr("src") != d[1].img && d[1].img.substring(0, 9) != "avatar://" && c.attr("src", d[1].img)
                } else {
                    c = $(this).find("img:first");
                    c.attr("src") != "ide/imgs/blank.png" && c.attr("src", "ide/imgs/blank.png")
                }
                b.locked ? $(this).find("img:last").removeClass("hidden") : b != Runtime.background && $(this).find("img:last").addClass("hidden");
                if (b.id && b.classname) {
                    c = $(this).parents("li.stacked");
                    d = c.find("li").length;
                    c.find("> .edit span").text("(" + d + ") " + b.classname)
                } else $(this).find("span").text(b.label)
            })
        },
        canDrag: function (b, c) {
            if (!$("#win-assets").hasClass("hidden") && !$("#win-assets").hasClass("strip") && !$("#win-assets").hasClass("noactions")) {
                var d = $("#win-assets");
                if (b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight())
                    for (var d = $("#win-assets .actors li.actor"), e = 0; e < d.length; e++) {
                        var f = $(d[e]).find("div.middle");
                        if (b >= f.offset().left && b <= f.offset().left + f.outerWidth() && c >= f.offset().top && c <= f.offset().top + f.outerHeight()) return true
                    }
            }
            return false
        },
        getDragObj: function (b, c) {
            if (!$("#win-assets").hasClass("hidden")) {
                var d = $("#win-assets");
                if (b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight())
                    for (var d = $("#win-assets .actors li.actor"), e = 0; e < d.length; e++) {
                        var f = $(d[e]).find("div.middle");
                        if (b >= f.offset().left && b <= f.offset().left + f.outerWidth() && c >= f.offset().top && c <= f.offset().top + f.outerHeight()) return new WinAssets.DragObject(f.find("img").attr("src"), Runtime.sprites[e])
                    }
            }
            return null
        },
        DragObject: function (b,
            c) {
            this.img = new Image;
            this.img.src = b;
            this.sprite = c instanceof Sprite ? JSON.stringify(ObjectIO.serializeSprite(c)) : c
        }
    };
WinAssets.DragObject.prototype.draw = function (b) {
    var c = this.img.width,
        d = this.img.height;
    if (c > 128) {
        d = d * 128 / c;
        c = 128
    }
    if (d > 128) {
        c = c * 128 / d;
        d = 128
    }
    b.drawImage(this.img, -c / 2, -d / 2, c, d)
};
WinAssets.canDrop = function (b, c, d, e, f) {
    if (!$("#win-assets").hasClass("hidden")) {
        d = $("#win-assets");
        if (b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight()) {
            if (f != WinAssets && e instanceof WinMediaAssets.DragObject && (e.ext == "jpg" || e.ext == "png" || e.ext == "gif" || e.ext == "actor" || e.ext == "jpeg") || f != WinAssets && e instanceof WinAssets.DragObject) return true;
            if (!WinAssets._disableCodeDrop && (e instanceof Block || e instanceof Label)) {
                var g = false;
                $("#win-assets > div li").each(function (d,
                    e) {
                    e = $(e);
                    e.data("sprite");
                    if (b >= e.offset().left && b < e.offset().left + e.outerWidth() && c >= e.offset().top && c < e.offset().top + e.outerHeight()) {
                        g = true;
                        return false
                    }
                });
                return g
            }
        }
    }
    return false
};
WinAssets.drop = function (b, c, d, e, f) {
    if (!$("#win-assets").hasClass("hidden")) {
        d = $("#win-assets");
        if (b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight())
            if (e instanceof WinMediaAssets.DragObject && (e.ext == "jpg" || e.ext == "png" || e.ext == "gif" || e.ext == "actor" || e.ext == "jpeg")) {
                IDE.dirty();
                var g = false,
                    d = $("#win-assets > div li");
                d.each(function (d, f) {
                    var f = $(f),
                        k = f.data("sprite");
                    if (k && !k.locked && b >= f.offset().left && b < f.offset().left + f.outerWidth() && c >=
                        f.offset().top && c < f.offset().top + f.outerHeight()) {
                        var l = e.path;
                        if (l.substring(l.length - 6) == ".actor") ObjectIO.loadSprite(l, function (b) {
                            b.spriteObj.setPosition(Runtime.stage.getWidth() / 2 - Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.getHeight() / 2 - Runtime.stage.tileLayer.getScrollOffsetY());
                            Runtime.stage.draw();
                            IDE.computeAll();
                            IDE.draw();
                            IDE.selectAsset(b);
                            IDE.Clipboard.undoAddActor(b)
                        });
                        else if (e.ext == "mp3" || e.ext == "wav")
                            if (k = f.data("sprite")) {
                                l = k.addSound({
                                    name: e.file,
                                    sound: l
                                });
                                IDE.Clipboard.undoAddSound(k,
                                    l)
                            } else {
                                l = Runtime.background.addSound({
                                    name: e.file,
                                    sound: l
                                });
                                IDE.Clipboard.undoAddSound(Runtime.background, l)
                            }
                        else if (k = f.data("sprite")) {
                            l = k.addCostume({
                                name: e.file,
                                img: l
                            });
                            k.setCostumeByName(l.name);
                            IDE.Clipboard.undoAddCostume(k, l)
                        } else {
                            l = Runtime.background.addCostume({
                                name: e.file,
                                img: l
                            });
                            Runtime.background.setCostumeByName(l.name);
                            IDE.selectAsset(null);
                            IDE.Clipboard.undoAddCostume(Runtime.background, l)
                        }
                        g = true;
                        Runtime.stage.draw();
                        return false
                    }
                });
                if (!g) {
                    d = e.path;
                    if (d.substring(d.length - 6) == ".actor") ObjectIO.loadSprite(d,
                        function (b) {
                            b.spriteObj.setPosition(Runtime.stage.getWidth() / 2 - Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.getHeight() / 2 - Runtime.stage.tileLayer.getScrollOffsetY());
                            Runtime.stage.draw();
                            IDE.computeAll();
                            IDE.draw();
                            IDE.selectAsset(b);
                            IDE.Clipboard.undoAddActor(b)
                        });
                    else if (d.indexOf("/Backgrounds/") >= 0) {
                        d = Runtime.background.addCostume({
                            name: e.file,
                            img: d
                        });
                        Runtime.background.setCostumeByName(d.name);
                        IDE.selectAsset(null);
                        IDE.Clipboard.undoAddCostume(Runtime.background, d)
                    } else {
                        d = Sprites.addSprite({
                            costumeName: e.file,
                            img: d,
                            forceNumber: false
                        });
                        d.spriteObj.x = Runtime.stage.getWidth() / 2;
                        d.spriteObj.y = Runtime.stage.getHeight() / 2;
                        IDE.selectAsset(d);
                        IDE.Clipboard.undoAddActor(d)
                    }
                }
            } else if (f != WinAssets && e instanceof WinAssets.DragObject) {
                IDE.dirty();
                e.sprite instanceof Sprite || ObjectIO.deserializeSprite(JSON.parse(e.sprite))
            } else if (!WinAssets._disableCodeDrop && (e instanceof Block || e instanceof Label)) {
                d = $("#win-assets > div li");
                d.each(function (d, g) {
                    var g = $(g),
                        k = g.data("sprite");
                    if (b >= g.offset().left && b < g.offset().left +
                        g.outerWidth() && c >= g.offset().top && c < g.offset().top + g.outerHeight()) {
                        f == WinCode && IDE.Clipboard.doUndo();
                        IDE.selectAsset(k);
                        var l = WinCode.findBlankSpace();
                        e.x = l.x;
                        e.y = l.y;
                        e._computeBounds();
                        if (!k) k = Runtime.background;
                        k.scripts.push(e);
                        WinCode.draw();
                        if (e.func.substring(0, 8) == "register") {
                            k = new Script({
                                sprite: k,
                                scriptBlock: e
                            });
                            k.currentBlock = k.scriptBlock;
                            k.invokeStep()
                        }
                        return false
                    }
                });
                IDE.dirty()
            }
    }
};
if ("undefined" == typeof window.WinMediaLib) var WinMediaLib = {
    mediasave: "/api/mediasave",
    mediasubcategories: "/api/mediasubcategories2",
    mediafiles: "/api/mediafiles2",
    mediasetsfiles: "/api/mediasetsfiles2",
    mediadelete: "/api/mediadelete",
    _ignoreHidden: !1,
    showSearch: !0,
    fetchTypes: ".png,.gif,.jpg,.jpeg,.svg,.actor,.mp3,.wav",
    currentPath: ""
};
WinMediaLib.init = function () {
    $("#win-medialib-sublevel-content").bind("drop", WinMediaLib.handleDropEvent).on("dragover", function (b) {
        b.preventDefault()
    });
    $("#win-medialib .tabs .tab").click(WinMediaLib._topCategoryClicked);
    $("#win-medialib .import-image").change(function (b) {
        $.each(b.originalEvent.target.files, function (b, d) {
            var e = getFilename(d.name);
            if (d.type.match("image.*")) {
                var f = new FileReader;
                f.onload = function (b) {
                    $.ajax({
                        url: WinMediaLib.mediasave,
                        type: "POST",
                        data: {
                            d: b.target.result
                        },
                        success: function (b) {
                            b =
                                JSON.parse(b);
                            WinMediaLib._callback && WinMediaLib._callback([{
                                url: "assets/user/" + b.id + ".png",
                                name: e
                            }])
                        }
                    })
                };
                f.readAsDataURL(d)
            } else if (d.type == "audio/mp3" || d.type == "audio/mpeg" || d.type == "audio/vnd.wav") {
                var g = ".mp3";
                d.type == "audio/vnd.wav" && (g = ".wav");
                f = new FileReader;
                f.onload = function (b) {
                    $.ajax({
                        url: WinMediaLib.mediasave,
                        type: "POST",
                        data: {
                            d: b.target.result
                        },
                        success: function (b) {
                            b = JSON.parse(b);
                            WinMediaLib._callback && WinMediaLib._callback([{
                                url: "assets/user/" + b.id + g,
                                name: e
                            }])
                        }
                    })
                };
                f.readAsDataURL(d)
            }
        })
    });
    $("#win-medialib ul.content").scroll(WinMediaLib._loadIntoView)
};
WinMediaLib.adjustWindow = function () {
    $("#preview").hasClass("hidden") || WinPreview.adjustWindow()
};
WinMediaLib.setSelectionCallback = function (b) {
    WinMediaLib._selectionCallback = b
};
WinMediaLib.hide = function () {
    $.modal.close()
};
WinMediaLib.showPicker = function (b, c, d, e, f) {
    WinMediaLib._callback = d;
    WinMediaLib._filters = e;
    e = (window.innerWidth - 20) * 0.8;
    d = window.innerHeight - $(".toolbar-top").outerHeight() - 20;
    $("#win-medialib").addClass("hastabs").find(".tabpanel").addClass("hastree").removeClass("haspath");
    $("#win-medialib").css("width", e).css("height", d);
    $("#win-medialib").modal();
    !WinMediaLib.simplifiedResources && $("#win-medialib .tabpanel .content li").length == 0 && $("#win-medialib .tabs .tab.people").click();
    $("#win-medialib .okBtn").unbind().click(function () {
        WinMediaLib._addResources();
        $.modal.close();
        return false
    });
    $("#win-medialib .cancelBtn").unbind().click(function () {
        $.modal.close();
        return false
    });
    $("#win-medialib .cart").empty().append(g_loc.getText("wincontent.emptycart"));
    $("#win-medialib ul.content li").removeClass("selected");
    $("#win-medialib-search").length == 0 && WinMediaLib.showSearch && $("#win-medialib").parents(".ui-dialog").append('<em id="win-medialib-search">Search <input type="text"/></em>');
    if ($("#win-medialib-actions").length == 0) {
        $("#win-medialib").parent().find(".ui-dialog-titlebar").css("height",
            25).append('<div id="win-medialib-actions"><a class="draw" title="Draw" href="#"></a> <a class="import" title="Import" href="#"></a> <a class="photo" title="Photo" href="#"></a> <a class="record" title="Record" href="#"></a></div>');
        $("#win-medialib-actions .draw").click(function () {
            if (!$(this).hasClass("disabled")) {
                $.modal.close();
                window.WinPaint && WinPaint.edit(g_loc.getText("title.paint_create_actor"), null, null, null, function (b, c, d) {
                    WinMediaLib._callback && WinMediaLib._callback([{
                        url: b,
                        name: "drawing",
                        cx: c,
                        cy: d
                    }])
                })
            }
            return false
        });
        $("#win-medialib-actions .import").click(function () {
            if (!$(this).hasClass("disabled")) {
                $("#win-medialib .import-image").click();
                $.modal.close()
            }
            return false
        });
        $("#win-medialib-actions .photo").click(function () {
            if (!$(this).hasClass("disabled") && MediaCapture.supportsCapture) {
                $.modal.close();
                WinMediaCapture.showPictureTaker(function (b) {
                    WinMediaLib._callback && WinMediaLib._callback([{
                        url: b,
                        name: "Photo"
                    }])
                })
            }
            return false
        });
        $("#win-medialib-actions .record").click(function () {
            if (!$(this).hasClass("disabled") &&
                MediaCapture.supportsCapture) {
                $.modal.close();
                WinMediaCapture.showAudioRecorder(function (b) {
                    IDE.editingActor ? IDE.addResourceTo(b, "Recording", IDE.editingActor) : IDE.addResourceTo(b, "Recording", Runtime.background)
                })
            }
            return false
        })
    }
    e = $("#director-info").hasClass("hidden") ? window.innerHeight - $(".toolbar-top").outerHeight() - windowPadding * 4 : window.innerHeight - $(".toolbar-top").outerHeight() - windowPadding * 4 - $("#director-info").outerHeight();
    e > d && (e = d);
    $("#win-medialib").css("height", e).modal();
    if (typeof b ==
        "string") $("#win-medialib").removeClass("hascontext");
    else {
        $("#win-medialib").addClass("hascontext");
        $("#win-medialib .addingto .context").text(b.title);
        b.actor.costumes && b.actor.costumes.length > 0 ? $("#win-medialib .addingto .thumbnail").css("background-image", "url(" + b.actor.costumes[0].imgObj.src + ")") : $("#win-medialib .addingto .thumbnail").css("background-image", "url(ide/imgs/blank.png)");
        $("#win-medialib .addingto .name").text(b.actor.label)
    }
    if (WinMediaLib.simplifiedResources) {
        WinPreview.hide();
        WinMediaLib.switchSimplified();
        f && f()
    } else {
        $("#win-medialib").addClass("hastabs").find(".tabpanel").addClass("hastree");
        $("#win-medialib-actions .draw").removeClass("hidden");
        $("#win-medialib-actions .photo").removeClass("hidden");
        $("#win-medialib-actions .record").addClass("hidden");
        !WinMediaLib._filters || WinMediaLib._filters.sounds ? $("#win-medialib .tab.sounds").removeClass("hidden") : $("#win-medialib .tab.sounds").addClass("hidden");
        !WinMediaLib._filters || WinMediaLib._filters.code ? $("#win-medialib .tab.tynkerblocks").removeClass("hidden") :
            $("#win-medialib .tab.tynkerblocks").addClass("hidden");
        if (c)
            if (c.indexOf("Backgrounds") == 0) $("#win-medialib .tabs .tab.scenes").click();
            else if (c.indexOf("Images/People") == 0) $("#win-medialib .tabs .tab.people").click();
            else if (c.indexOf("Images/Animals") == 0) $("#win-medialib .tabs .tab.animals").click();
            else if (c.indexOf("Images/Things") == 0) $("#win-medialib .tabs .tab.things").click();
            else if (c.indexOf("Images/Animations") == 0) $("#win-medialib .tabs .tab.animations").click();
            else if (c.indexOf("Images/Collections") ==
                0) $("#win-medialib .tabs .tab.collections").click();
            else if (c.indexOf("TynkerBlocks") == 0) $("#win-medialib .tabs .tab.tynkerblocks").click();
            else if (c.indexOf("MyStuff") == 0) $("#win-medialib .tabs .tab.mystuff").click();
            else if (c.indexOf("Sounds") == 0) {
                $("#win-medialib .tabs .tab.sounds").click();
                $("#win-medialib").removeClass("hastabs").find(".tabpanel").removeClass("hastree");
                $("#win-medialib-actions .draw").addClass("hidden");
                $("#win-medialib-actions .photo").addClass("hidden");
                $("#win-medialib-actions .record").removeClass("hidden")
            }
    }
    $("#win-medialib-search input").unbind().focus(function () {
        if ($(this).val() ==
            g_loc.getText("wincontent.search")) {
            $(this).val("");
            $(this).css("color", "#000")
        }
    }).blur(function () {
        if ($(this).val() == "") {
            $(this).val(g_loc.getText("wincontent.search"));
            $(this).css("color", "#aaa")
        }
    }).click(function () {
        $(this).focus()
    }).keyup(function (b) {
        if (b.keyCode == 13 || (b.metaKey || b.ctrlKey) && b.which == 70) {
            WinPreview.hide();
            if (b = $.trim($(this).val())) {
                $("#win-medialib").removeClass("hastabs");
                $("#win-medialib .tabpanel").removeClass("hastree").addClass("haspath").find(".path").html('<span></span> <a href="#">Search</a> &gt; ' +
                    b).unbind().click(function () {
                        $("#win-medialib .tabpanel").addClass("hastree");
                        $("#win-medialib .tabpanel").removeClass("haspath");
                        if (WinMediaLib._filters && WinMediaLib._filters.sounds) {
                            $("#win-medialib .tabs .tab.sounds").click();
                            $("#win-medialib").removeClass("hastabs")
                        } else {
                            $("#win-medialib .tabs .tab:first").click();
                            $("#win-medialib").addClass("hastabs")
                        }
                        return false
                    });
                var c = "";
                if ($("#win-medialib-sublevel").hasClass("hidden")) {
                    $("#win-medialib-sublevel-content-path").html("<h3>All &gt; Search</h3>");
                    $("#win-medialib-toplevel").addClass("hidden");
                    $("#win-medialib-sublevel").removeClass("hidden");
                    $("#win-medialib-sublevel-breadcrumb div").html("Search");
                    $("#win-medialib-sublevel-breadcrumb div").click(WinMediaLib._fetchSubCategories(null, d));
                    $("#win-medialib-sublevel-category ul").empty();
                    WinPreview.hide();
                    c = b
                } else {
                    var d = $("#win-medialib-sublevel-breadcrumb div").text();
                    if (d == "TynkerBlocks") c = "TynkerBlocks/" + b;
                    else if (WinMediaLib._filters) {
                        b = "";
                        if (WinMediaLib._filters.sounds) {
                            $("#win-medialib-sublevel-content-path").html("<h3>Search</h3>");
                            b = '@ftype "audio/vnd.wav" | @ftype "audio/mp3" | @ftype "audio/mpeg"'
                        } else if (WinMediaLib._filters.images)
                            if (d == "Search") b = '@ftype !"audio/vnd.wav" @ftype !"audio/mp3" @ftype !"audio/mpeg"';
                            else {
                                $("#win-medialib-sublevel-content-path").html("<h3>" + d + " &gt; Search</h3>");
                                b = '@ftype !"audio/vnd.wav" @ftype !"audio/mp3" @ftype !"audio/mpeg" @fhierarchy "' + d + '"'
                            }
                        c = b + " @*" + $(this).val() + "*"
                    } else c = "@*" + $(this).val() + "*"
                }
                WinMediaLib._fetchFiles("search/" + c, f)
            } else {
                $("#win-medialib").addClass("hastabs");
                $("#win-medialib .tabpanel").addClass("hastree");
                $("#win-medialib .tab.people").click();
                $(this).blur()
            }
        }
    }).val(g_loc.getText("wincontent.search")).css("color", "#aaa")
};
WinMediaLib.handleDropEvent = function (b, c) {
    b.originalEvent.stopPropagation();
    b.originalEvent.preventDefault();
    for (var d = b.originalEvent.dataTransfer.files, e = 0; e < d.length; e++) {
        var f = d[e];
        if (f.type == "image/jpeg" || f.type == "image/png" || f.type == "image/gif" || f.type == "image/svg+xml" || f.type == "audio/mp3" || f.type == "audio/mpeg" || f.type == "audio/vnd.wav" || f.type == "audio/wav") {
            var g = new FileReader;
            g.onload = function (b) {
                IDE.showProgress(g_loc.getText("wincontent.progressimporting"));
                $.ajax({
                    url: WinMediaLib.mediasave,
                    type: "POST",
                    data: "d=" + encodeURIComponent(b.target.result),
                    success: function (b) {
                        b = JSON.parse(b);
                        IDE.showProgress(null);
                        WinMediaLib._fetchFiles("MyStuff", null, true);
                        c && c(b.id, b.contentType)
                    },
                    error: function () {
                        IDE.showProgress(null)
                    }
                })
            };
            g.onerror = function () {
                IDE.showProgress(null)
            };
            g.readAsDataURL(f)
        }
    }
};
WinMediaLib.scrollIntoView = function (b) {
    $("#win-medialib .tabpanel ul.content").scrollTop($("#win-medialib .tabpanel ul.content").scrollTop() + b.position().top)
};
WinMediaLib.setSimplified = function (b) {
    WinMediaLib.simplifiedResources = b
};
WinMediaLib.getAssetInSimplified = function (b, c) {
    var d = null;
    $("#win-medialib .tabpanel ul.content li img.main").each(function () {
        if ($(this).attr("path") == b && (!c || c == $(this).attr("resname"))) {
            d = $(this).parent().parent();
            return false
        }
    });
    return d
};
WinMediaLib.switchSimplified = function (b) {
    if (WinMediaLib.simplifiedResources) {
        $("#win-medialib .tabpanel").removeClass("hidden");
        $("#win-medialib").removeClass("hastabs");
        $("#win-medialib .tabpanel").removeClass("hastree");
        $("#win-medialib-search").addClass("hidden");
        var c = WinMediaLib.simplifiedResources,
            d = $("#win-medialib .tabpanel ul.content");
        d.empty();
        $.each(c, function (e, f) {
            if (f.sound) {
                if (!b || b.sounds) {
                    var g = f.name;
                    if (!g || g.indexOf(".") < 0) g = "Sound." + ext;
                    var h = f.sound,
                        j = false;
                    $("#win-medialib .cart li img").each(function () {
                        if ($(this).attr("path") ==
                            h) {
                            j = true;
                            return false
                        }
                    });
                    var g = f.name,
                        k = g.lastIndexOf(".");
                    k > 0 && (g = g.substring(0, k));
                    var l = $('<li class="audio' + (j ? " selected" : "") + '"><div class="middle"><img class="main" path="' + h + '" src="' + f.img + '" alt="' + f.name + '" title="' + f.name + '"/></div><em>' + g + "</em></li>");
                    d.append(l);
                    l.click(WinMediaLib._fileClicked)
                }
            } else if (f.actor) {
                if (!b || b.tblocks) {
                    g = f.name;
                    k = g.lastIndexOf(".");
                    k > 0 && (g = g.substring(0, k));
                    h = f.actor;
                    l = $('<li class="image' + (j ? " selected" : "") + '"><div class="check">&#xe087;</div><div class="middle"><img class="main" path="/assets/code/' +
                        h + '.actor" src="' + f.img + '" alt="' + f.name + '" title="' + f.name + '"/></div><img class="indicator" src="ide/imgs/tblock_tab.png"/><em>' + g + "</em></li>");
                    d.append(l);
                    l.click(WinMediaLib._fileClicked)
                }
            } else if (f.img && (!b || b.images)) {
                g = f.name;
                k = g.lastIndexOf(".");
                k > 0 && (g = g.substring(0, k));
                h = f.img;
                if (h.indexOf("avatar://") < 0) l = $('<li class="image' + (j ? " selected" : "") + '"><div class="check">&#xe087;</div><div class="middle"><img class="main" path="' + h + '" src="' + f.img + '" alt="' + f.name + '" title="' + f.name + '"/></div><em>' +
                    g + "</em></li>");
                else {
                    k = "";
                    if (f.skelType) {
                        k = f.name;
                        l = $('<li class="image' + (j ? " selected" : "") + '"><div class="check">&#xe087;</div><div class="middle"><img class="main" path="' + h + '" resname="' + k + '" src="ide/imgs/blank.png" alt="' + f.name + '" title="' + f.name + '"/></div><em>' + g + "</em></li>");
                        WinSpine.generatePreview(f.skelType, f.skelParts, function (b) {
                            l.find("img").attr("src", b)
                        })
                    } else l = $('<li class="image' + (j ? " selected" : "") + '"><div class="check">&#xe087;</div><div class="middle"><img class="main" path="' +
                        h + '" src="/imgs/logo.png" alt="' + c[e].name + '" title="' + c[e].name + '"/></div><em>' + g + "</em></li>")
                }
                d.append(l);
                l.click(WinMediaLib._fileClicked)
            }
        })
    } else {
        $("#win-medialib").addClass("hastabs");
        $("#win-medialib .tabpanel").addClass("hastree")
    }
};
WinMediaLib._fetchSubCategories = function (b, c, d) {
    if (c == void 0 || !c) c = "";
    $.ajax({
        url: WinMediaLib.mediasubcategories,
        data: {
            id: b,
            p: c
        },
        success: function (b) {
            WinMediaLib._receivedSubCategory(b);
            d && d()
        }
    })
};
WinMediaLib._fetchFiles = function (b, c, d) {
    $.ajax({
        url: WinMediaLib.mediafiles,
        data: {
            p: b,
            ih: WinMediaLib._ignoreHidden,
            t: WinMediaLib.fetchTypes
        },
        success: function (e) {
            b.substr(0, 6);
            if (b != WinMediaLib.currentPath || d) {
                WinMediaLib.currentPath = b;
                WinMediaLib._receivedFiles(e)
            }
            c && c(b)
        }
    })
};
WinMediaLib._fetchSetsFiles = function (b, c) {
    $.ajax({
        url: WinMediaLib.mediasetsfiles,
        data: {
            p: b,
            t: WinMediaLib.fetchTypes
        },
        success: function (d) {
            WinMediaLib.currentPath = b;
            WinMediaLib._receivedSetsFiles(d);
            c && c(b)
        }
    })
};
WinMediaLib._receivedFiles = function (b) {
    if (b = JSON.parse(b)) {
        for (var c = $("#win-medialib .tabpanel.media"), c = c.find("ul.content").empty().scrollTop(0), d = 0; d < b.length; d++) {
            var e, f = b[d].path,
                g = f.lastIndexOf(".");
            e = g > 0 && g + 1 < f.length ? f.substring(g + 1) : "";
            var h = false;
            $("#win-medialib .cart li img").each(function () {
                if ($(this).attr("path") == f) {
                    h = true;
                    return false
                }
            });
            if ((!WinMediaLib._filters || WinMediaLib._filters.sounds) && (e == "mp3" || e == "wav")) {
                var j = b[d].name;
                if (!j || j.indexOf(".") < 0) j = "Sound." + e;
                e = $('<li class="border audio' +
                    (h ? " selected" : "") + '"><div class="middle"><img class="main" path="' + f + '" src="' + b[d].img + '" alt="' + b[d].name + '" title="' + b[d].name + '"/></div><div class="info"><em>' + b[d].name + '</em><span><a class="play" href="#">Play</a></span></div><div class="check">&#xe087;</div></li>');
                if (b[d].path.indexOf("assets/user/") == 0) {
                    e.append('<a class="delete" href="#">&#xe086;</a>');
                    e.find("a.delete").click(WinMediaLib._deleteMedia)
                }
                c.append(e);
                e.click(WinMediaLib._fileClicked);
                e.find("a.play").click(function () {
                    soundManager.stopAll();
                    if ($(this).text() == "Play") {
                        $(this).text("Stop");
                        var b = $(this).parents("li"),
                            c = b.data("sound");
                        if (!c) {
                            c = soundManager.createSound({
                                id: "s" + Math.random(),
                                url: b.find("img.main").attr("path")
                            });
                            $(this).parent().data("sound", c)
                        }
                        c.play({
                            onfinish: function () {
                                b.find("a.play").text("Play")
                            }
                        })
                    } else $(this).text("Play");
                    return false
                })
            } else if ((!WinMediaLib._filters || !WinMediaLib._filters.sounds) && !(e == "mp3" || e == "wav")) {
                j = b[d].name;
                g = j.lastIndexOf(".");
                g > 0 && (j = j.substring(0, g));
                g = $("<li" + (h ? ' class="selected"' :
                    "") + '><div class="middle"><img class="main" path="' + b[d].path + '" origSrc="' + b[d].img + '" src="ide/imgs/blank.png" alt="' + b[d].name + '" title="' + b[d].name + '"/></div><div class="check">&#xe087;</div><em>' + j + "</em></li>");
                if (b[d].path.indexOf("assets/user/") == 0) {
                    g.append('<a class="delete" href="#">&#xe086;</a>');
                    g.find("a.delete").click(WinMediaLib._deleteMedia);
                    e == "actor" && g.append('<img class="indicator" src="ide/imgs/tblock_tab.png"/>');
                    g.click(WinMediaLib._fileClicked);
                    c.append(g)
                } else if (b[d].path.indexOf("/assets/code/") ==
                    0) {
                    if (!WinMediaLib.filters || WinMediaLib._filters.code) {
                        g.append('<img class="indicator" src="ide/imgs/tblock_tab.png"/>');
                        g.addClass("border");
                        e = $('<div class="info"><em>' + b[d].name + '</em><span><a class="details" href="#">Details</a> | <a class="add" href="#">Add</a></span></div>');
                        e.find("a.details").click(WinMediaLib._previewActor);
                        g.click(WinMediaLib._fileClicked);
                        g.find("a.add").click(WinMediaLib._fileClicked);
                        g.append(e);
                        c.append(g)
                    }
                } else if (!WinMediaLib.filters || WinMediaLib._filters.images) {
                    g.click(WinMediaLib._fileClicked);
                    c.append(g)
                }
            }
        }
        WinMediaLib._loadIntoView()
    }
};
WinMediaLib._loadIntoView = function () {
    var b = $("#win-medialib ul.content"),
        c = b.outerHeight();
    b.find("li").each(function (b, e) {
        var f = $(e),
            g = f.find("img.main");
        if (f.position().top < c) (f = g.attr("origSrc")) && f != g.attr("src") && g.attr("src", f)
    })
};
WinMediaLib._previewActor = function () {
    var b = $(this).parents("li").find("img.main").attr("path"),
        b = b.substring(b.length - 6 - 24, b.length - 6);
    WinPreview.show(b);
    return false
};
WinMediaLib._mouseenterPlay = function () {
    $(this).find("a").removeClass("hidden")
};
WinMediaLib._mouseleavePlay = function () {
    $(this).find("a").addClass("hidden")
};
WinMediaLib._deleteMedia = function () {
    var b = $(this).parent().find("img").attr("path"),
        b = b.substring(b.lastIndexOf("/") + 1, b.indexOf("."));
    IDE.confirmDialog(g_loc.getText("wincontent.confirmdelete"), function () {
        $.ajax({
            url: WinMediaLib.mediadelete,
            type: "POST",
            data: "i=" + encodeURIComponent(b),
            success: function () {
                WinMediaLib.currentPath = "";
                WinMediaLib._fetchFiles("MyStuff", null, true)
            }
        })
    });
    return false
};
WinMediaLib._addToCart = function (b, c, d, e, f) {
    $("#win-medialib .cart ul").length == 0 && $("#win-medialib .cart").empty().append("<ul></ul>");
    b = e == "group" ? $('<li class="group"><img path="' + b + '" src="' + c + '" type="' + e + '" alt="' + d + '" title="' + d + '"/><a href="#">&#xe086;</a></li>') : $('<li><img path="' + b + '" src="' + c + '" type="' + e + '" alt="' + d + '" title="' + d + '"/><a href="#">&#xe086;</a></li>');
    b.find("img").after(f);
    $("#win-medialib .cart ul").append(b);
    f = $("#win-medialib .cart li").length;
    $("#win-medialib").parent().find(".ui-dialog-buttonset .ui-button-text:eq(0)").text(g_loc.formatText("dialog.btnaddcount",
        f));
    b.find("a").click(function () {
        var b = $(this).parent().find("img").attr("path");
        WinMediaLib._removeFromCart(b);
        return false
    })
};
WinMediaLib._removeFromCart = function (b) {
    $("#win-medialib .tabpanel ul.content li").each(function () {
        if ($(this).find("img").attr("path") == b) {
            $(this).removeClass("selected");
            $(this).find("img.add").attr("src", "ide/imgs/blackplus.png");
            $(this).find("a.preview img").attr("src", "ide/imgs/preview-play.png");
            $(this).find(".inspector img").attr("src", "ide/imgs/blackinspector.png");
            return false
        }
    });
    $("#win-medialib .cart li img").each(function () {
        if ($(this).attr("path") == b) {
            $(this).parent().detach();
            return false
        }
    });
    if ($("#win-medialib .cart li").length == 0) {
        $("#win-medialib .cart").empty().append(g_loc.getText("wincontent.emptycart"));
        $("#win-medialib").parent().find(".ui-dialog-buttonset .ui-button-text:eq(0)").removeClass("button1");
        $("#win-medialib").parent().find(".ui-dialog-buttonset button:eq(0)").css("border", "1px solid lightGrey")
    }
    $("#win-medialib").parent().find(".ui-dialog-buttonset .ui-button-text:eq(0)").text(g_loc.formatText("dialog.btnaddcount", $("#tools-media .cart li").length))
};
WinMediaLib._fileClicked = function () {
    WinMediaLib._addRemoveItem($(this));
    return false
};
WinMediaLib._addRemoveItem = function (b) {
    b[0].tagName != "LI" && (b = b.parents("li"));
    var c = b.find("img.main").attr("path"),
        d = b.find("img.main").attr("src");
    if (b.hasClass("selected")) {
        b.removeClass("selected");
        b.find("img.add").attr("src", "ide/imgs/blackplus.png");
        b.find(".inspector img").attr("src", "ide/imgs/blackinspector.png");
        WinMediaLib._removeFromCart(c);
        WinMediaLib._selectionCallback && WinMediaLib._selectionCallback(c, false)
    } else {
        b.addClass("selected");
        b.find("img.add").attr("src", "ide/imgs/blackcheck.png");
        b.find("a.preview img").attr("src", "ide/imgs/blackcheck.png");
        b.find(".inspector img").attr("src", "ide/imgs/blackcheck.png");
        var e = b.find("img.main").attr("title"),
            f = "single";
        b.hasClass("group") && (f = "group");
        b = b.find("img.set").clone();
        WinMediaLib._addToCart(c, d, e, f, b);
        WinMediaLib._selectionCallback && WinMediaLib._selectionCallback(c, true)
    }
    return false
};
WinMediaLib._addResources = function () {
    if (WinMediaLib._callback) {
        var b = [];
        $("#win-medialib .cart li").each(function () {
            var c = $(this).find("img").not(".set");
            c.attr("type");
            if (c.attr("type") == "group") $(this).find("img.set").each(function () {
                var c = $(this).attr("path"),
                    d = $(this).attr("name");
                d.indexOf(".") > 0 && (d = d.substring(0, d.indexOf(".")));
                b.push({
                    url: c,
                    name: d
                })
            });
            else {
                var d = c.attr("path"),
                    c = c.attr("title");
                c.indexOf(".") > 0 && (c = c.substring(0, c.indexOf(".")));
                b.push({
                    url: d,
                    name: c
                })
            }
        });
        WinMediaLib._callback(b)
    }
};
WinMediaLib._receivedSubCategory = function (b) {
    if (b = JSON.parse(b)) {
        $("#win-medialib .tabpanel").addClass("hidden").addClass("hastree");
        var c = $("#win-medialib .tabpanel.media").removeClass("hidden").find(".treenav ul");
        c.empty();
        c.append("<li><h1>" + $("#win-medialib .tab.selected span").text() + "</h1></li>");
        for (var d = false, e = true, f = 0; f < b.length; f++) {
            var g = b[f];
            if (!(WinMediaLib.fetchTypes.indexOf(".svg") < 0 && g.name.toLowerCase().indexOf("svg") >= 0) && (WinMediaLib.showTynker || !(g.name.toLowerCase().indexOf("tynker") >=
                    0))) {
                var h = g.count;
                if (!g.count) h = g.allcount;
                g.path.indexOf("Sounds") >= 0 && (d = true);
                $el = $('<li><a href="#" name="' + g.name + '" path="' + g.path + '" count="' + g.count + '">' + toUCWord(g.name) + "<em>" + h + "</em></a></li>");
                $el.click(WinMediaLib._subCategoryClicked);
                c.append($el);
                if (g.subdir && g.subdir.length > 0) {
                    for (var h = $("<ul></ul>"), j = 0; j < g.subdir.length; j++) {
                        var k = g.subdir[j],
                            k = $('<li><a href="#" name="' + k.name + '" path="' + k.path + '">' + toUCWord(k.name) + "</a></li>");
                        k.click(WinMediaLib._subCategoryClicked);
                        h.append(k)
                    }
                    $el.append(h)
                }
                if (e) {
                    e =
                        false;
                    $el.addClass("selected")
                }
            }
        }
        if (d) {
            $el = $('<li><a href="#" name="My Sounds" path="MyStuff" count="1">My Sounds</a></li>');
            $el.click(WinMediaLib._subCategoryClicked);
            c.append($el)
        }
        WinMediaLib.currentPath = "";
        b[0].path.substring(b[0].path.indexOf("/") + 1).replace(/\//g, " > ");
        b[0].count > 0 ? WinMediaLib._fetchFiles(b[0].path) : WinMediaLib._fetchSetsFiles(b[0].path)
    }
};
WinMediaLib._receivedSetsFiles = function (b) {
    var b = JSON.parse(b),
        c = $("#win-medialib .tabpanel.media");
    c.scrollTop(0);
    for (var c = c.find("ul.content").empty(), d = 0; d < b.length; d++) {
        var e = b[d];
        if (e.count) {
            var f = e.group,
                g = "";
            if (f)
                for (var h = 0; h < f.length; h++) g = g + ('<img class="hidden set" name="' + f[h].name + '" path="' + f[h].path + '" />');
            var j = false;
            $("#win-medialib .cart li img").each(function () {
                if ($(this).attr("path") == e.path) {
                    j = true;
                    return false
                }
            });
            $el = $('<li class="border group' + (j ? " selected" : "") + '"><div class="count">' +
                e.count + '</div><div class="middle"> <img class="main" name="' + e.name + '" path="' + e.path + '" count="' + e.count + '" src="' + e.img + '" alt="' + e.name + '" title="' + e.name + '" />' + g + '</div><div class="info"> <em>' + e.name + '</em><span><a class="details" href="#">Details</a>' + (e.path.indexOf("Sounds") >= 0 ? "" : ' | <a class="add" href="#">Add</a>') + '</span></div></div><div class="check">&#xe087;</div></li>');
            $el.find("a.details").click(WinMediaLib._groupClicked);
            if (e.path.indexOf("Sounds") >= 0) $el.click(WinMediaLib._groupClicked);
            else {
                $el.click(WinMediaLib._fileClicked);
                $el.find("a.add").click(WinMediaLib._fileClicked)
            }
            c.append($el)
        }
    }
};
WinMediaLib._topCategoryClicked = function () {
    $(this).find("span").text();
    var b = $(this).attr("path");
    $(this).attr("id");
    $("#win-medialib-search input").val(g_loc.getText("wincontent.search")).css("color", "#aaa");
    $("#win-medialib .tabs .tab").removeClass("selected");
    $("#win-medialib .tabpanel").removeClass("haspath");
    $(this).addClass("selected");
    if (b == "TynkerBlocks" || b == "MyStuff") {
        $("#win-medialib .tabpanel").removeClass("hastree");
        WinMediaLib._fetchFiles(b)
    } else {
        $("#win-medialib .tabpanel").addClass("hastree");
        WinMediaLib._fetchSubCategories("", b)
    }
    return false
};
WinMediaLib._subCategoryClicked = function () {
    var b = $(this).find("a").attr("path"),
        c = $(this).find("a").attr("count"),
        d = $(this);
    if (d.hasClass("child")) {
        $("#win-medialib .tabpanel.media .treenav li.selected").find("ul").find("li.selected").removeClass("selected");
        $("#win-medialib .tabpanel.media .treenav li.selected").addClass("skip")
    } else {
        $selected = $("#win-medialib .tabpanel.media .treenav li.selected");
        if ($selected.hasClass("skip")) {
            $selected.removeClass("skip");
            return
        }
        $selected.removeClass("selected")
    }
    d.addClass("selected");
    d = b.substring(b.indexOf("/") + 1).replace(/\//g, " > ");
    $("#win-medialib-sublevel-content-path").html("<h3>" + d + "</h3>");
    c > 0 ? WinMediaLib._fetchFiles(b) : WinMediaLib._fetchSetsFiles(b);
    return false
};
WinMediaLib._groupClicked = function () {
    var b = $(this);
    b.find("img.main").length == 0 && (b = b.parents("li"));
    var c = b.find("img.main").attr("path"),
        b = b.find("img.main").attr("count");
    $("#win-medialib .tabpanel").removeClass("hastree");
    var d = WinMediaLib.currentPath,
        e = d.substring(d.indexOf("/") + 1).replace(/\//g, " &gt; "),
        f = c.substring(d.length + 1);
    $("#win-medialib .tabpanel").addClass("haspath").find(".path").html('<span></span> <a href="#">' + e + "</a> &gt; " + f).unbind().click(function () {
        $("#win-medialib .tabpanel").addClass("hastree");
        $("#win-medialib .tabpanel").removeClass("haspath");
        WinMediaLib._fetchSetsFiles(d);
        return false
    });
    b > 0 ? WinMediaLib._fetchFiles(c) : WinMediaLib._fetchSetsFiles(c);
    return false
};
if ("undefined" == typeof window.WinMediaAssets) var WinMediaAssets = {
    medialibtree: "api/medialibtree.aspx",
    medialibtheme: "api/medialibtheme.aspx",
    medialibsearch: "api/medialibsearch.aspx",
    medialibmy: "api/medialibmy.aspx",
    medialibsave: "api/medialibsave.aspx",
    medialibdelete: "api/medialibdelete.aspx",
    medialibtynkerblocks: "api/medialibtynkerblocks.aspx",
    sound: null,
    displayOrder: "characters creatures props images backgrounds scenes music tracks sounds ".split(" "),
    _ignoreHidden: !1,
    showSearch: !0
};
WinMediaAssets.init = function () {
    var b = $("#win-media-assets");
    b.find(".import-image").change(WinMediaAssets._importImage);
    b.find(".cmd-draw").click(function () {
        WinMediaAssets.selectMyStuff("drawing");
        $(this).addClass("selected").siblings().removeClass("selected")
    });
    b.find(".cmd-upload").click(function () {
        WinMediaAssets.selectMyStuff("upload");
        $(this).addClass("selected").siblings().removeClass("selected")
    });
    b.find(".cmd-uploadsound").click(function () {
        WinMediaAssets.selectMyStuff("upload");
        $(this).addClass("selected").siblings().removeClass("selected")
    });
    b.find(".cmd-camera").click(function () {
        WinMediaAssets.selectMyStuff("photo");
        $(this).addClass("selected").siblings().removeClass("selected")
    });
    b.find(".cmd-record").click(function () {
        WinMediaAssets.selectMyStuff("audio");
        $(this).addClass("selected").siblings().removeClass("selected")
    });
    b.find(".cmd-legacymedia").click(function () {
        $.modal.close();
        WinMediaAssets._showBackgrounds || WinMediaAssets._showImages ? WinMediaLib.showPicker("", "", WinMediaAssets._callback, {
            sounds: false
        }) : WinMediaAssets._showSounds &&
            WinMediaLib.showPicker("", "Sounds", WinMediaAssets._callback, {
                sounds: WinMediaAssets._showSounds
            })
    });
    b.find(".search input").focus(function () {
        $(this).val("")
    }).blur(function () {
        WinMediaAssets.searchAssets($(this).val())
    }).click(function () {
        $(this).focus()
    }).keyup(function (b) {
        b.keyCode == 13 && $(this).blur()
    });
    !window.WinPaint && !window.WinSVGPaint && $("#win-media-assets .cmd-draw").detach();
    window.WinMediaCapture || $("#win-media-assets .cmd-camera").detach();
    window.WinMediaLib || $("#win-media-assets .cmd-legacymedia").detach()
};
WinMediaAssets.adjustWindow = function () { };
WinMediaAssets.setSelectionCallback = function (b) {
    WinMediaAssets._selectionCallback = b
};
WinMediaAssets.hide = function () {
    $.modal.close()
};
WinMediaAssets.getAssetInSimplified = function (b, c) {
    var d = null;
    $("#win-media-assets .tab-content-inner li").each(function () {
        if ($(this).attr("path") == b && (!c || c == $(this).attr("resname"))) {
            d = $(this).parent().parent();
            return false
        }
    });
    return d
};
WinMediaAssets.scrollIntoView = function (b) {
    $("#win-media-assets .tab-content-inner").scrollTop($("#win-media-assets .tab-content-inner").scrollTop() + b.position().top)
};
WinMediaAssets.showSimplePicker = function (b, c, d) {
    WinMediaAssets._callback = c;
    WinMediaAssets._callbackObj = null;
    WinMediaAssets._showBackgrounds = false;
    WinMediaAssets._showImages = false;
    WinMediaAssets._showSounds = false;
    b = $("#win-media-assets");
    b.modal();
    b.find(".search input").val("");
    b.find(".theme-selector .theme").empty();
    b.find(".theme-selector .theme a").removeClass("selected");
    b = b.find(".tab-content .tab-content-inner");
    b.empty();
    var e = $("<ul></ul>");
    b.append(e);
    $(d).each(function (b, c) {
        var d, j = c.name,
            k = j.indexOf(".");
        k > 0 && (j = j.substring(0, k));
        if (c.skelParts) {
            var k = c.skelType,
                l = c.skelParts;
            d = $('<li data-name="' + j + '" data-type="skel" data-path="avatar://spine"><img src="ide/imgs/blank.png"/><span></span></li>');
            d.data("skelType", k);
            d.data("skelParts", l);
            WinSpine.generatePreview(k, l, function (b) {
                d.find("img").attr("src", b)
            })
        } else d = c.sound ? $('<li class="sound-asset" data-name="' + j + '" data-type="sound" data-path="' + c.sound + '"><div class="icon-volume-high"></div><span class="asset-name"></span></li>') :
            c.actor ? $('<li data-name="' + j + '" data-type="actor" data-path="/assets/code/' + c.actor + '.actor"><img src="' + c.img + '"/><span></span></li>') : $('<li data-name="' + j + '" data-type="img" data-path="' + c.img + '"><img src="' + c.img + '"/><span></span></li>');
        d.find("span.asset-name").text(j);
        d.click(WinMediaAssets._pickSimpleAsset);
        e.append(d)
    })
};
WinMediaAssets.reset = function () {
    WinMediaAssets._showBackgrounds = false;
    WinMediaAssets._showImages = false;
    WinMediaAssets._showSounds = false
};
WinMediaAssets.showPicker = function (b, c, d, e, f) {
    b = $("#win-media-assets");
    b.modal();
    WinMediaAssets._callback = c;
    WinMediaAssets._callbackObj = e;
    var c = !d || d.backgrounds,
        e = !d || d.images,
        g = !d || d.sounds,
        d = e && (!d || d.actors);
    if (WinMediaAssets._showBackgrounds == c && WinMediaAssets._showImages == e && WinMediaAssets._showSounds == g) f && f();
    else {
        WinMediaAssets._showBackgrounds = c;
        WinMediaAssets._showImages = e;
        WinMediaAssets._showSounds = g;
        WinMediaAssets._showActors = d;
        if (WinMediaAssets._showSounds)
            if (MediaCapture.supportsCapture) {
                b.find(".cmd-uploadsound").removeClass("hidden");
                b.find(".cmd-record").removeClass("hidden")
            } else {
                b.find(".cmd-uploadsound").addClass("hidden");
                b.find(".cmd-record").addClass("hidden")
            }
        else {
            b.find(".cmd-uploadsound").addClass("hidden");
            b.find(".cmd-record").addClass("hidden")
        }
        if (WinMediaAssets._showBackgrounds || WinMediaAssets.showImages) {
            b.find(".cmd-draw").removeClass("hidden");
            b.find(".cmd-upload").removeClass("hidden");
            b.find(".cmd-uploadsound").addClass("hidden");
            MediaCapture.supportsCapture ? b.find(".cmd-camera").removeClass("hidden") : b.find(".cmd-camera").addClass("hidden")
        } else {
            b.find(".cmd-draw").addClass("hidden");
            b.find(".cmd-upload").addClass("hidden");
            b.find(".cmd-camera").addClass("hidden");
            b.find(".cmd-camera").addClass("hidden")
        }
        var h = $("<ul></ul>");
        b.find(".search input").val("");
        b.find(".theme-selector .theme").empty().append(h);
        $.ajax({
            url: WinMediaAssets.medialibtree,
            dataType: 'json',
            success: function (b) {
                for (var c = "", d = 0; d < b.length; d++) {
                    var e = b[d];
                    if (e.dir == "themes")
                        for (var g = 0; g < e.entries.length; g++) {
                            //var q = $('<li class="tab" data-theme="' + e.entries[g].dir + '" data-path="' + e.entries[g].path + '">' + e.entries[g].dir + "</li>");
                            var q = $('<li class="tab" data-theme="' + e.entries[g].dir + '" data-path="' + e.entries[g].path + '">' + e.entries[g].label + "</li>");
                            q.click(WinMediaAssets._themeClicked);
                            h.append(q);
                            if (!c) c = e.entries[g].path
                        }
                }
                if (WinMediaAssets._showBackgrounds || WinMediaAssets._showImages)
                    for (d = 0; d < b.length; d++) {
                        e = b[d];
                        if (e.dir == "images")
                            for (g = 0; g < e.entries.length; g++) {
                                var p = e.entries[g],
                                    q = $('<li class="tab subitems" data-theme="' + p.dir + '" data-path="' + p.path + '">' + p.dir + '<ul class="hidden"></ul></li>');
                                q.click(WinMediaAssets._categoryClicked);
                                h.append(q);
                                if (p.entries)
                                    for (var q = q.find("ul"), s = 0; s < p.entries.length; s++) {
                                        var r = $('<li class="sub-tab" data-theme="' +
                                            p.entries[s].dir + '" data-path="' + p.entries[s].path + '">' + p.entries[s].dir + "</a></li>");
                                        r.click(WinMediaAssets._themeClicked);
                                        q.append(r)
                                    }
                            }
                    }
                if (WinMediaAssets._showSounds)
                    for (d = 0; d < b.length; d++) {
                        e = b[d];
                        if (e.dir == "sounds" || e.dir == "music")
                            for (g = 0; g < e.entries.length; g++) {
                                p = e.entries[g];
                                q = $('<li class="tab subitems" data-theme="' + p.dir + '" data-path="' + p.path + '">' + p.dir + '<ul class="hidden"></ul></li>');
                                q.click(WinMediaAssets._categoryClicked);
                                h.append(q);
                                if (p.entries) {
                                    q = q.find("ul");
                                    for (s = 0; s < p.entries.length; s++) {
                                        r =
                                            $('<li class="sub-tab" data-theme="' + p.entries[s].dir + '" data-path="' + p.entries[s].path + '">' + p.entries[s].dir + "</a></li>");
                                        r.click(WinMediaAssets._themeClicked);
                                        q.append(r)
                                    }
                                }
                            }
                    }
                if (WinMediaAssets._showBackgrounds && WinMediaAssets._showImages && WinMediaAssets._showSounds && WinMediaAssets._showActors) {
                    q = $('<li class="tab" data-theme="TynkerBlocks" data-path="tynkerblocks">TynkerBlocks</li>');
                    q.click(WinMediaAssets._tynkerblocksClicked);
                    h.append(q)
                }
                c ? f ? WinMediaAssets.showTheme(c, null, f) : WinMediaAssets.showTheme(c) :
                    f && f()
            }
        })
    }
};
WinMediaAssets._themeClicked = function () {
    var b = $("#win-media-assets");
    b.find(".search input").val("");
    b.find(".tab-content").removeClass("mystuff");
    if ($(this).hasClass("sub-tab")) {
        $(this).parents("ul").find("li").removeClass("selected");
        $(this).addClass("selected");
        WinMediaAssets.showTheme($(this).attr("data-path"), $(this).parents("li.tab").attr("data-path"))
    } else {
        b.find(".theme-selector .theme li.tab ul").addClass("hidden");
        WinMediaAssets.showTheme($(this).attr("data-path"))
    }
    return false
};
WinMediaAssets._tynkerblocksClicked = function () {
    var b = $("#win-media-assets");
    b.find(".search input").val("");
    b.find(".tab-content").removeClass("mystuff");
    WinMediaAssets.showTynkerblocks();
    return false
};
WinMediaAssets._categoryClicked = function () {
    var b = $("#win-media-assets");
    b.find(".search input").val("");
    b.find(".theme-selector .theme li.tab ul").addClass("hidden");
    b = $(this).find("ul");
    b.removeClass("hidden");
    b.find("li").removeClass("selected");
    b = b.find("li:first");
    b.addClass("selected");
    WinMediaAssets.showTheme(b.attr("data-path"), $(this).attr("data-path"));
    return false
};
WinMediaAssets.searchAssets = function (b) {
    $("#win-media-assets .theme-selector .theme a.tab").removeClass("selected");
    $.ajax({
        url: WinMediaAssets.medialibsearch,
        data: {
            q: b
        },
        success: function (c) {
            if (c.length > 0) WinMediaAssets._showResults(c);
            else {
                c = $('<div class="no-search-results"></div>');
                c.text('Sorry, no matches were found for "' + b + '". Please try another search term.');
                $("#win-media-assets .tab-content-inner").empty().append(c)
            }
        },
        error: function () {
            var c = $('<div class="no-search-results"></div>');
            c.text('Sorry, no matches were found for "' +
                b + '". Please try another search term.');
            $("#win-media-assets .tab-content-inner").empty().append(c)
        }
    })
};
WinMediaAssets.showTheme = function (b, c, d) {
    $.ajax({
        url: WinMediaAssets.medialibtheme,
        data: {
            t: b
        },
        dataType: 'json',
        success: function (e) {
            c && (b = c);
            $("#win-media-assets .theme-selector .theme li.tab").each(function (c, d) {
                $(d).attr("data-path") == b ? $(d).addClass("selected") : $(d).removeClass("selected")
            });
            WinMediaAssets._showResults(e);
            d && d()
        }
    })
};
WinMediaAssets._showResults = function (b, c) {
    var d = $("#win-media-assets .tab-content .tab-content-inner");
    d.scrollTop(0);
    d.empty();
    for (var e = 0; e < WinMediaAssets.displayOrder.length; e++)
        for (var f = 0; f < b.length; f++) {
            var g = b[f];
            if (!(g.dir == "backgrounds" || g.dir == "scenes") || WinMediaAssets._showBackgrounds)
                if (g.dir && !(g.dir == "sounds" || g.dir == "music") || WinMediaAssets._showSounds)
                    if (!g.dir || !(g.dir != "sounds" && g.dir != "music" && g.dir != "backgrounds" && g.dir != "scenes" && !WinMediaAssets._showImages))
                        if (WinMediaAssets.displayOrder[e] ==
                            g.dir && g.entries.length > 0) {
                            f = $("<h3></h3>");
                            var tmpText = g.dir.charAt(0).toUpperCase() + g.dir.substring(1);
                            if (g.label && g.label != '') {
                                tmpText = g.label;
                            }
                            f.text(tmpText);
                            for (var h = $("<ul></ul>"), j = 0; j < g.entries.length; j++) {
                                var k = null,
                                    l = g.entries[j];
                                if (l.dir) {
                                    if (l.entries.length > 0) {
                                        for (var k = null, m = 0; m < l.entries.length; m++)
                                            if (l.entries[m].type == "actor") {
                                                k = l.entries[m];
                                                l.entries.splice(m, 1);
                                                break
                                            }
                                        WinMediaAssets._showActors || (k = null);
                                        if (k) {
                                            m = k.name;
                                            l = m.indexOf(".");
                                            l > 0 && (m = m.substring(0, l));
                                            k = $('<li class="stack-asset" data-name="' + m + '" data-type="actor" data-id="' + k.id +
                                                '" data-url="' + k.url + '"><img src="' + k.img + '"/><span class="asset-name"></span><span class="costume-count">Actor with code</span></li>')
                                        } else {
                                            m = l.dir;
                                            k = $('<li class="stack-asset" data-section="' + g.dir + '" data-name="' + m + '" data-type="dir"><img src="' + l.entries[0].url + '"/><span class="asset-name"></span><span class="costume-count">' + l.entries.length + " costumes </span></li>");
                                            k.data("entries", l.entries);
                                            k.mouseenter(WinMediaAssets._startAnimation).mouseleave(WinMediaAssets._stopAnimation)
                                        }
                                    }
                                } else {
                                    var m =
                                        l.name,
                                        n = m.indexOf(".");
                                    n > 0 && (m = m.substring(0, n));
                                    if (l.type == "mp3" || l.type == "wav") {
                                        if (c) {
                                            k = $('<li class="sound-asset" data-section="' + g.dir + '" data-name="' + m + '" data-type="' + l.type + '" data-id="' + l.id + '" data-url="assets/user/' + l.id + "." + l.type + '" data-my="true"><div class="icon-volume-high"></div><span class="asset-name"></span><a href="#" class="cmd-play">Play</a><a href="#" class="cmd-delete"></a></li>');
                                            k.find("a.cmd-delete").click(WinMediaAssets._deleteClicked)
                                        } else k = $('<li class="sound-asset" data-section="' +
                                            g.dir + '" data-name="' + m + '" data-type="' + l.type + '" data-id="' + l.id + '" data-url="' + l.url + '"><div class="icon-volume-high"></div><span class="asset-name"></span><a href="#" class="cmd-play">Play</a></li>');
                                        k.find("a.cmd-play").click(WinMediaAssets._playClicked)
                                    } else if (l.type == "actor") WinMediaAssets._showActors && (k = $('<li class="stack-asset" data-name="' + m + '" data-type="actor" data-id="' + l.id + '" data-url="' + l.url + '"><img src="' + l.img + '"/><span class="asset-name"></span><span class="costume-count">Actor with code</span></li>'));
                                    else {
                                        if (c) {
                                            k = $('<li data-section="' + g.dir + '" data-name="' + m + '" data-type="' + l.type + '" data-id="' + l.id + '" data-url="assets/user/' + l.id + "." + l.type + '" data-my="true"><img src="assets/user/' + l.id + "." + l.type + '"/><span class="asset-name"></span><a href="#" class="cmd-delete"></a></li>');
                                            k.find("a.cmd-delete").click(WinMediaAssets._deleteClicked)
                                        } else k = $('<li data-section="' + g.dir + '" data-name="' + m + '" data-type="' + l.type + '" data-id="' + l.id + '" data-url="' + l.url + '"><img src="' + l.url + '"/><span class="asset-name"></span></li>');
                                        (g.dir == "backgrounds" || g.dir == "scenes") && k.addClass("scene-asset")
                                    }
                                }
                                if (k) {
                                    k.find("span.asset-name").text(m);
                                    k.click(WinMediaAssets._pickAsset);
                                    h.append(k)
                                }
                            }
                            if (h.find(">li").length > 0) {
                                d.append(f);
                                d.append(h)
                            }
                            break
                        } else if (WinMediaAssets.displayOrder[e] == "" && !b[f].dir) {
                            h = d.find("ul.data-flat");
                            if (h.length === 0) {
                                h = $('<ul class="data-flat"></ul>');
                                d.append(h)
                            }
                            l = b[f];
                            m = l.name;
                            n = m.indexOf(".");
                            n > 0 && (m = m.substring(0, n));
                            if (l.type == "mp3" || l.type == "wav") {
                                k = $('<li class="sound-asset" data-section="' + g.dir + '" data-name="' +
                                    m + '" data-type="' + l.type + '" data-id="' + l.id + '" data-url="' + l.url + '"><div class="icon-volume-high"></div><span class="asset-name"></span><a href="#" class="cmd-play">Play</a></li>');
                                k.find("a.cmd-play").click(WinMediaAssets._playClicked)
                            } else if (l.type != "actor" || WinMediaAssets._showActors) k = $('<li data-section="' + g.dir + '" data-name="' + m + '" data-type="' + l.type + '" data-id="' + l.id + '" data-url="' + l.url + '"><img src="' + l.url + '"/><span class="asset-name"></span></li>');
                            k.find("span.asset-name").text(m);
                            k.click(WinMediaAssets._pickAsset);
                            h.append(k)
                        }
        }
    if (c) {
        if (!h) {
            h = $("<ul></ul>");
            d.append(h)
        }
        d = $('<a class="asset-action" href="#"></a>');
        if (c == "upload") {
            d.text("上传一个资源");
            d.click(WinMediaAssets._upload)
        } else if (c == "photo") {
            d.text("拍照");
            d.click(WinMediaAssets._camera)
        } else if (c == "drawing") {
            e = $('<a class="asset-action" href="#">矢量图像</a>');
            e.click(WinMediaAssets._drawVector);
            h.prepend(e);
            d.text("绘制一个图像");
            d.click(WinMediaAssets._draw)
        } else if (c == "audio") {
            d.text("录音");
            d.click(WinMediaAssets._record);
            e = $('<a class="asset-action" href="#"></a>');
            e.text("上传一个声音文件");
            e.click(WinMediaAssets._upload);
            h.prepend(e)
        }
        h.prepend(d)
    }
};
WinMediaAssets.showTynkerblocks = function () {
    $.ajax({
        url: WinMediaAssets.medialibtynkerblocks,
        success: function (b) {
            $("#win-media-assets .theme-selector .theme li.tab").each(function (b, d) {
                $(d).attr("data-path") == "tynkerblocks" ? $(d).addClass("selected") : $(d).removeClass("selected")
            });
            WinMediaAssets._showTynkerblocksResults(b)
        }
    })
};
WinMediaAssets._showTynkerblocksResults = function (b) {
    var c = $("#win-media-assets .tab-content .tab-content-inner");
    c.scrollTop(0);
    c.empty();
    for (var d = 0; d < b.length; d++) {
        var e = b[d],
            f = $("<h3></h3>");
        f.text(e.dir.charAt(0).toUpperCase() + e.dir.substring(1));
        c.append(f);
        f = $("<ul></ul>");
        c.append(f);
        for (var g = 0; g < e.entries.length; g++) {
            var h, j = e.entries[g];
            h = $('<li class="stack-asset" data-name="' + j.name + '" data-type="actor" data-id="' + j.id + '" data-url="' + j.url + '"><img src="' + j.img + '"/><span class="asset-name"></span><span class="costume-count">Actor with code</span></li>');
            h.find("span.asset-name").text(j.name);
            h.click(WinMediaAssets._pickAsset);
            f.append(h)
        }
    }
};
WinMediaAssets._playClicked = function () {
    soundManager.stopAll();
    if ($(this).text() == "Play") {
        $(this).text("Stop");
        var b = $(this).parents("li");
        soundManager.createSound({
            id: "s" + Math.random(),
            url: b.attr("data-url")
        }).play({
            onfinish: function () {
                b.find("a.cmd-play").text("Play")
            }
        })
    } else $(this).text("Play");
    return false
};
WinMediaAssets._deleteClicked = function () {
    var b = $(this).parents("li"),
        c = b.attr("data-id");
    $.ajax({
        url: WinMediaAssets.medialibdelete,
        data: {
            i: c
        },
        success: function () {
            b.detach()
        }
    });
    return false
};
WinMediaAssets._pickSimpleAsset = function () {
    var b = $(this);
    b.attr("data-type");
    WinMediaAssets._callback([{
        section: b.attr("data-section"),
        name: b.attr("data-name"),
        url: b.attr("data-path")
    }], null, null, WinMediaAssets._callbackObj);
    $.modal.close();
    return false
};
WinMediaAssets._pickAsset = function () {
    var b = $(this),
        c = b.attr("data-type");
    if (c == "dir") {
        for (var c = b.data("entries"), d = [], e = 0; e < c.length; e++) {
            var f = c[e].name,
                g = f.indexOf(".");
            g > 0 && (f = f.substring(0, g));
            b.attr("data-my");
            d.push({
                name: f,
                url: c[e].url
            })
        }
        WinMediaAssets._callback(d, null, null, WinMediaAssets._callbackObj)
    } else {
        c != "actor" && b.attr("data-my");
        WinMediaAssets._callback([{
            section: b.attr("data-section"),
            name: b.attr("data-name"),
            url: b.attr("data-url")
        }], null, null, WinMediaAssets._callbackObj)
    }
    $.modal.close();
    return false
};
WinMediaAssets._startAnimation = function () {
    var b = $(this),
        c = b.data("timer");
    c > 0 && window.clearInterval(c);
    c = window.setInterval(function () {
        var c = b.data("entries"),
            e = b.data("index");
        e || (e = 0);
        e = (e + 1) % c.length;
        b.data("index", e);
        b.find("img").attr("src", c[e].url)
    }, 500);
    b.data("timer", c)
};
WinMediaAssets._stopAnimation = function () {
    var b = $(this),
        c = b.data("timer");
    c > 0 && window.clearInterval(c);
    b.data("timer", -1)
};
WinMediaAssets.setSimplified = function (b) {
    WinMediaAssets.simplifiedResources = b
};
WinMediaAssets.getAssetInSimplified = function (b, c) {
    var d = null;
    $("#win-media-assets .tab-content-inner li").each(function () {
        if ($(this).attr("data-path") == b && (!c || c == $(this).attr("data-name"))) {
            d = $(this);
            return false
        }
    });
    return d
};
WinMediaAssets._importImage = function (b) {
    $.each(b.originalEvent.target.files, function (b, d) {
        var e = getFilename(d.name);
        if (d.type.match("image.*")) {
            var f = new FileReader;
            f.onload = function (b) {
                $.ajax({
                    url: WinMediaAssets.medialibsave,
                    type: "POST",
                    data: {
                        t: "upload",
                        d: b.target.result
                    },
                    success: function (b) {
                        b = JSON.parse(b);
                        WinMediaAssets._callback && WinMediaAssets._callback([{
                            url: "assets/user/" + b.id + ".png",
                            name: e
                        }], null, null, WinMediaAssets._callbackObj)
                    }
                })
            };
            f.readAsDataURL(d)
        } else if (d.type == "audio/mp3" || d.type ==
            "audio/mpeg" || d.type == "audio/vnd.wav") {
            var g = ".mp3";
            d.type == "audio/vnd.wav" && (g = ".wav");
            f = new FileReader;
            f.onload = function (b) {
                $.ajax({
                    url: WinMediaAssets.medialibsave,
                    type: "POST",
                    data: {
                        d: b.target.result
                    },
                    success: function (b) {
                        b = JSON.parse(b);
                        WinMediaAssets._callback && WinMediaAssets._callback([{
                            url: "assets/user/" + b.id + g,
                            name: e
                        }], null, null, WinMediaAssets._callbackObj)
                    }
                })
            };
            f.readAsDataURL(d)
        }
    })
};
WinMediaAssets.selectMyStuff = function (b) {
    $("#win-media-assets .theme-selector .theme li").removeClass("selected");
    $("#win-media-assets .tab-content").addClass("mystuff");
    $.ajax({
        url: WinMediaAssets.medialibmy,
        dataType: "json",
        success: function (c) {
            for (var d = [{
                dir: "sounds",
                entries: []
            }, {
                dir: "images",
                entries: []
            }], e = 0; e < c.length; e++) {
                var f = c[e];
                if (!f.tags)
                    if (f.type == "png") f.tags = "upload";
                    else if (f.type == "jpg") f.tags = "photo";
                    else if (f.type == "svg") f.tags = "drawing";
                    else if (f.type == "mp3" || f.type == "wav") f.tags = "audio";
                f.tags ==
                    b && (f.tags == "audio" ? d[0].entries.push(f) : d[1].entries.push(f))
            }
            WinMediaAssets._showResults(d, b);
            if (WinMediaAssets._showSounds && d[0].entries.length <= 0 || !WinMediaAssets._showSounds && d[1].entries.length <= 0) b == "drawing" ? WinMediaAssets._draw() : b == "photo" ? WinMediaAssets._camera() : b == "audio" && WinMediaAssets._record()
        },
        error: function () {
            b == "drawing" ? WinMediaAssets._draw() : b == "upload" ? WinMediaAssets._showResults([], b) : b == "photo" ? WinMediaAssets._camera() : b == "audio" && WinMediaAssets._record()
        }
    })
};
WinMediaAssets._draw = function () {
    WinPaint.edit(g_loc.getText("title.paint_create_actor"), null, null, null, function (b, c, d) {
        WinMediaAssets._callback([{
            name: "Drawing",
            url: b,
            cx: c,
            cy: d
        }], null, null, WinMediaAssets._callbackObj)
    });
    $.modal.close();
    return false
};
WinMediaAssets._drawVector = function () {
    WinSVGPaint.edit(g_loc.getText("title.paint_create_actor"), null, null, null, function (b, c, d) {
        WinMediaAssets._callback([{
            name: "Drawing",
            url: b,
            cx: c,
            cy: d
        }], null, null, WinMediaAssets._callbackObj)
    });
    $.modal.close();
    return false
};
WinMediaAssets._upload = function () {
    $("#win-media-assets .import-image").click();
    $.modal.close();
    return false
};
WinMediaAssets._camera = function () {
    if (MediaCapture.supportsCapture) {
        $.modal.close();
        WinMediaCapture.showPictureTaker(function (b) {
            WinMediaAssets._callback && WinMediaAssets._callback([{
                url: b,
                name: "Photo"
            }], null, null, WinMediaAssets._callbackObj)
        })
    }
    return false
};
WinMediaAssets._record = function () {
    if (MediaCapture.supportsCapture) {
        $.modal.close();
        WinMediaCapture.showAudioRecorder(function (b) {
            IDE.editingActor ? IDE.addResourceTo(b, "Recording", IDE.editingActor) : IDE.addResourceTo(b, "Recording", Runtime.background)
        })
    }
    return false
};
if ("undefined" == typeof window.WinMediaSidebar) var WinMediaSidebar = {
    lastSelectedTile: 1,
    tiles: "api/tiles.aspx"
};
WinMediaSidebar.init = function () {
    var b = $("#win-media-sidebar");
    b.find(".global-toolbar");
    b.find("input[name=search]").focus(function () {
        $(this).val("")
    }).blur(function () {
        WinMediaSidebar.searchAssets($(this).val())
    }).click(function () {
        $(this).focus()
    }).keyup(function (b) {
        b.keyCode == 13 && $(this).blur()
    });
    b.find("a.search-clear").click(function () {
        $("#win-media-sidebar input[name=search]").val("");
        $("#win-media-sidebar .container").empty().append('<div class="tiles-wrapper"></div>');
        WinMediaSidebar.showPicker("",
            WinMediaSidebar._callback, {}, WinMediaSidebar._callbackObj);
        return false
    });
    b = b.find(".actionbar");
    b.find(".background").click(function () {
        Runtime.stage.tileLayer.scrollBgOffset = true;
        IDE.dirty();
        Runtime.stage.setStageExpand(false);
        Runtime.stage.tileLayer.enableTiles(true);
        Runtime.stage.draw();
        WinMediaAssets.showPicker("Add a Background", function (b) {
            for (var d = 0; d < b.length; d++) {
                var e = b[d],
                    f = getFileExt(e.url);
                if (f == ".mp3" || f == ".wav") IDE.addResourceTo(e.url, e.name, Runtime.background);
                else {
                    Runtime.background.costumes.pop();
                    var g = Runtime.background.addCostume({
                        img: e.url,
                        name: e.name
                    }, function () {
                        Runtime.background.currentCostume = -1;
                        Runtime.background.setCostumeByName(g.name);
                        IDE.Clipboard.undoAddCostume(Runtime.background, g)
                    });
                    break
                }
            }
        }, {
            backgrounds: true,
            images: false,
            sounds: false,
            charStudio: false
        }, null, function () {
            WinMediaAssets.showTheme("themes/Game Elements")
        });
        return false
    });
    b.find(".media").click(function () {
        WinMediaAssets.showPicker("Add an Actor", WinAssets._addAssetAsActor, {
            backgrounds: false,
            actors: true,
            images: true,
            sounds: true,
            charStudio: true
        });
        return false
    });
    b.find(".draw").click(function () {
        WinMediaAssets.showPicker("Add an Actor", WinAssets._addAssetAsActor, {
            backgrounds: true,
            actors: true,
            images: true,
            sounds: false,
            charStudio: true
        }, null, function () {
            WinMediaAssets.selectMyStuff("drawing")
        });
        return false
    });
    b.find(".import").click(function () {
        WinMediaAssets.showPicker("Add an Actor", WinAssets._addAssetAsActor, {
            backgrounds: true,
            actors: true,
            images: true,
            sounds: true,
            charStudio: true
        }, null, function () {
            WinMediaAssets.selectMyStuff("upload")
        });
        return false
    });
    b.find(".photo").click(function () {
        WinMediaAssets.showPicker("Add an Actor", WinAssets._addAssetAsActor, {
            backgrounds: true,
            actors: true,
            images: true,
            sounds: false,
            charStudio: true
        }, null, function () {
            WinMediaAssets.selectMyStuff("photo")
        });
        return false
    });
    b.find(".voice").click(function () {
        WinMediaAssets.showPicker("Add an Actor", WinAssets._addAssetAsActor, {
            backgrounds: false,
            actors: false,
            images: false,
            sounds: true,
            charStudio: true
        }, null, function () {
            WinMediaAssets.selectMyStuff("audio")
        });
        return false
    });
    b.find(".character").click(function () {
        WinMediaAssets.reset();
        $.modal.close();
        window.WinSpine && WinSpine.showCreator(function (b, d) {
            Sprites.addSprite({
                cx: 500,
                cy: 500,
                scale: b == "Tiny" ? 1 : 0.25,
                label: "actor",
                costumeName: "actor",
                img: "avatar://spine",
                forceNumber: false,
                skeletonType: b,
                skeletonParts: d
            }, function (b) {
                b.spriteObj.setPosition(Runtime.stage.getWidth() / 2 - Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.getHeight() / 2 - Runtime.stage.tileLayer.getScrollOffsetY());
                IDE.selectAsset(b);
                IDE.Clipboard.undoAddActor(b)
            })
        });
        return false
    });
    $("#win-media-sidebar .global-toolbar .select-tool").click(WinMediaSidebar.handleSelectMode);
    $("#win-media-sidebar .global-toolbar .tile-tool").click(WinMediaSidebar.handleTileMode);
    $("#win-media-sidebar .global-toolbar .remove-tool").click(WinMediaSidebar.handleDeleteMode);
    $("#stage-canvas").dblclick(function () {
        if ($("#stagecmd-edit").hasClass("selected")) {
            var b = IDE.editingActor;
            b && (!b.lockedInSandbox && b.skeleton.skeleton) && WinSpine.showCreator(function (d, e) {
                b.loadSkeleton(d, e)
            }, b.skeleton.type,
                b.skeleton.parts)
        }
    });
    $("#stagecmd-run").click(function () {
        WinMediaSidebar.handleSelectMode()
    });
    $("#win-levels .leveltoggle").click(function () {
        if ($("#win-levels").hasClass("collapsed")) {
            $("#win-levels").removeClass("collapsed");
            $("#win-media-sidebar").removeClass("collapsed")
        } else {
            $("#win-levels").addClass("collapsed");
            $("#win-media-sidebar").addClass("collapsed")
        }
        IDE.adjustPanels();
        return false
    })
};
WinMediaSidebar.adjustWindow = function () { };
WinMediaSidebar.hide = function () {
    $("#win-media-sidebar").addClass("hidden");
    IDE.adjustPanels()
};
WinMediaSidebar.scrollIntoView = function (b) {
    $("#win-media-sidebar .tab-content-inner").scrollTop($("#win-media-sidebar .tab-content-inner").scrollTop() + b.position().top)
};
WinMediaSidebar.reset = function () {
    WinMediaSidebar._showBackgrounds = false;
    WinMediaSidebar._showImages = false;
    WinMediaSidebar._showSounds = false
};
WinMediaSidebar.enableLevels = function (b) {
    b ? $("#win-levels").removeClass("hidden") : $("#win-levels").addClass("hidden");
    IDE.adjustPanels()
};
WinMediaSidebar.showLevels = function () {
    var b = $("#win-levels").find("ul");
    b.empty();
    var c = $('<li class="add"><span class="icon-plus-2"></span><span>New Level</span></li>');
    b.prepend(c);
    c.click(function () {
        IDE.showProgress(g_loc.getText("dialog.projectloading"));
        $("#win-levels li.selected").find("span").text();
        var c = Runtime.stage.captureScreenshot();
        IDE._doProjectSave(null, null, c, false, true, Runtime.currentLevelIndex, null, function () {
            $("#win-levels li").removeClass("selected");
            var c = $('<li><img src=""/><span></span><input type="text" class="hidden"/><a href="#" class="remove icon-cancel-2"></a></li>');
            c.insertBefore(b.find("li.add"));
            c.find("img").attr("src", "ide/imgs/blank.png");
            c.find("span").text("Level " + (Runtime.levels.length + 1));
            Runtime.levels.push({
                name: "Level " + (Runtime.levels.length + 1),
                screenshotid: ""
            });
            Runtime.currentLevelIndex = Runtime.levels.length - 1;
            c.addClass("selected");
            WinMediaSidebar._addHandlers(c);
            ObjectIO.deserialize({
                projectName: IDE.currentProjectName,
                levels: Runtime.levels,
                currentLevel: Runtime.currentLevelIndex,
                name: "Level " + Runtime.levels.length,
                background: {
                    scaleType: "stretch",
                    width: 1364,
                    height: 768,
                    canvasWidth: 380,
                    canvasHeight: 213,
                    canvasExpand: true,
                    currentBackground: 0,
                    scripts: [{
                        func: "registerFlagTrigger",
                        values: [],
                        next: {
                            func: "blockPhysicsStart",
                            values: []
                        },
                        x: 20,
                        y: 20
                    }],
                    backgrounds: [],
                    sounds: [],
                    documentation: {
                        description: "",
                        inboundEvents: [],
                        outboundEvents: [],
                        properties: []
                    }
                },
                sprites: [],
                variables: {},
                cloudVariables: {},
                varDefaults: {},
                lists: {},
                cloudLists: {},
                physics: {
                    enabled: false,
                    gravity: {
                        x: 0,
                        y: 10
                    }
                },
                watchers: [],
                scrollBgOffset: false,
                tilesEnabled: true
            });
            IDE.dirty();
            IDE.selectAsset(null);
            IDE.showProgress(null)
        })
    });
    for (var d = false, e = 0; e < Runtime.levels.length; e++) {
        c = $('<li><img src=""/><span></span><input type="text" class="hidden"/><a href="#" class="remove icon-cancel-2"></a></li>');
        c.insertBefore(b.find("li.add"));
        Runtime.levels[e].screenshotid ? c.find("img").attr("src", "/assets/screenshot/" + Runtime.levels[e].screenshotid + ".png") : c.find("img").attr("src", "ide/imgs/blank.png");
        c.find("span").text(Runtime.levels[e].name);
        if (e == Runtime.currentLevelIndex) {
            c.addClass("selected");
            d = true
        }
        WinMediaSidebar._addHandlers(c)
    }
    d ||
        $("#win-levels ul li:first").addClass("selected")
};
WinMediaSidebar._addHandlers = function (b) {
    b.click(function () {
        if (!$(this).hasClass("selected")) {
            $("#win-levels li").removeClass("selected");
            $(this).addClass("selected");
            IDE.showProgress(g_loc.getText("dialog.projectloading"));
            var b = $(this).index(),
                d = Runtime.stage.captureScreenshot();
            IDE._doProjectSave(null, null, d, false, true, Runtime.currentLevelIndex, null, function () {
                Runtime.loadLevel(b, null, function () {
                    IDE.showProgress(null)
                })
            })
        }
        return false
    });
    b.find("span").click(function () {
        $(this).addClass("hidden");
        $(this).parents("li").find("input").removeClass("hidden").val($(this).text()).focus();
        return false
    });
    b.find("input").blur(function () {
        $(this).addClass("hidden");
        var b = $(this).parents("li"),
            d = $(this).val();
        Runtime.currentLevelName = d;
        Runtime.levels[b.index()].name = d;
        var e = b.index();
        if (e >= 0) {
            WinMediaSidebar._renameLevel(e, d);
            b.find("span").removeClass("hidden").text(d)
        }
    }).keypress(function (b) {
        b.which == 13 && $(this)[0].blur()
    });
    b.find("a").click(function () {
        if ($("#win-levels li").length > 2) {
            var b = $(this).parents("li"),
                d = b.index();
            d >= 0 && IDE.confirmDialog(g_loc.formatText("winassets.confirmdelete",
                b.find("span").text()), function () {
                    WinMediaSidebar._removeLevel(d);
                    Runtime.loadLevel(0);
                    $("#win-levels li").removeClass("selected");
                    $("#win-levels li:first").addClass("selected");
                    b.detach();
                    return false
                }, g_loc.getText("dialog.btnyes"), g_loc.getText("dialog.btnno"))
        } else IDE.alertDialog("Cannot remove level.  You need at least one level in a project.");
        return false
    })
};
WinMediaSidebar._renameLevel = function (b, c) {
    $.ajax({
        url: "api/levelrename.aspx",
        data: {
            id: IDE.currentProjectId,
            s: b,
            n: c
        }
    })
};
WinMediaSidebar._removeLevel = function (b) {
    $.ajax({
        url: "api/leveldelete.aspx",
        data: {
            id: IDE.currentProjectId,
            s: b
        }
    })
};
WinMediaSidebar._findActor = function (b) {
    var c = "";
    $("#win-media-sidebar ul.actors li.actor").each(function (d, e) {
        var f = $(e);
        if (f.attr("data-id") == b) {
            c = f.find("span").text();
            c = JSON.parse(c);
            if (f.hasClass("hidden")) c.hideInUI = true;
            return false
        }
    });
    return c
};
WinMediaSidebar.showPicker = function (b, c, d, e) {
    WinMediaSidebar._callback = c;
    WinMediaSidebar._callbackObj = e;
    var f = $("#win-media-sidebar");
    WinMediaSidebar.lastSelectedTile = 1;
    $("#win-media-sidebar .global-toolbar li").removeClass("selected");
    $("#win-media-sidebar .global-toolbar li:first").addClass("selected");
    $("#win-media-sidebar .tiles li").removeClass("selected");
    f.find(".tiles-wrapper").length <= 0 && $.ajax({
        url: WinMediaSidebar.tiles,
        dataType: "json",
        success: function (b) {
            f.find(".actionbar .tiletype").empty();
            $(b).each(function (b, c) {
                var d = $('<div class="tiles-wrapper"></div>');
                f.find(".container").append(d);
                b > 0 && d.addClass("hidden");
                var e = $('<a href="#" class="btn-round small"></a>');
                e.text(c.label);
                e.click(function () {
                    f.find(".actionbar .tiletype a").removeClass("active");
                    $(this).addClass("active");
                    f.find(".container .tiles-wrapper").addClass("hidden");
                    d.removeClass("hidden");
                    return false
                });
                f.find(".actionbar .tiletype").append(e);
                b == 0 && e.addClass("active");
                if (c.backgrounds) {
                    var g = $('<ul class="actors"></ul>'),
                        n = $("<h3>Backgrounds</h3>");
                    d.append(n);
                    d.append(g);
                    $(c.backgrounds).each(function (b, c) {
                        var d = $('<li class="background"><span class="hidden"></span></li>');
                        d.attr("name", c.name);
                        d.find("span").text(c.image);
                        generateImageFromUrl(c.preview, function (b) {
                            d.append(b)
                        });
                        g.append(d)
                    })
                }
                for (e = 0; e < c.tiles.length; e++) {
                    var q = c.tiles[e],
                        n = $("<h3></h3>");
                    n.text(q.label);
                    d.append(n);
                    if (e === 0) {
                        var p = $('<div class="size btn-group"><a class="btn-round white micro one" href="#"> 1x </a><a class="btn-round white micro three" href="#"> 3x </a><a class="btn-round white micro five" href="#"> 5x </a></div>');
                        p.find(".one").click(function () {
                            $("#win-media-sidebar h3 .size a").removeClass("blue").addClass("white");
                            $("#win-media-sidebar h3 .size a.one").addClass("blue");
                            Canvas.tileSize = 0
                        });
                        p.find(".three").click(function () {
                            $("#win-media-sidebar h3 .size a").removeClass("blue").addClass("white");
                            $("#win-media-sidebar h3 .size a.three").addClass("blue");
                            Canvas.tileSize = 1
                        });
                        p.find(".five").click(function () {
                            $("#win-media-sidebar h3 .size a").removeClass("blue").addClass("white");
                            $("#win-media-sidebar h3 .size a.five").addClass("blue");
                            Canvas.tileSize = 2
                        });
                        Canvas.tileSize == 1 ? p.find(".three").addClass("blue") : Canvas.tileSize == 2 ? p.find(".five").addClass("blue") : p.find(".one").addClass("blue");
                        n.append(p)
                    }
                    g = $('<ul class="tiles"></ul>');
                    d.append(g);
                    var q = q.tiles,
                        s;
                    for (s in Runtime.stage.tileLayer._tileSetMapping)
                        if (!q || q.indexOf(s) >= 0) {
                            b = Runtime.stage.tileLayer._tileSetMapping[s];
                            p = b > 0 ? $('<li data-type="' + b + '"><img class="tile" src="ide/level/' + s + '-preview.png"/></li>') : $('<li data-type="0"><img class="tile" src="ide/imgs/blank.png"/></li>');
                            g.append(p);
                            p.click(function () {
                                WinStage.cmdStop();
                                Runtime.stage.tileLayer.currentTileType = parseInt($(this).attr("data-type"));
                                WinMediaSidebar.lastSelectedTile = Runtime.stage.tileLayer.currentTileType;
                                $(".global-toolbar .tile-tool").addClass("selected").siblings().removeClass("selected");
                                $("#win-media-sidebar .tiles li").removeClass("selected");
                                $(this).addClass("selected");
                                Runtime.stage.setDesignMode("place");
                                $("#stage-canvas").css("cursor", "auto");
                                Runtime.stage.tileLayer.enableTiles(true);
                                return false
                            })
                        }
                }
                for (e =
                    0; e < c.actors.length; e++) {
                    var g = $('<ul class="actors"></ul>'),
                        n = null;
                    if (c.actors[e].hidden) g.addClass("hidden");
                    else {
                        n = $("<h3>" + c.actors[e].label + "</h3>");
                        d.append(n)
                    }
                    d.append(g);
                    if (c.actors[e].code) {
                        p = $('<li class="template hidden"></li>');
                        p.text(c.actors[e].code);
                        g.append(p)
                    }
                    $(c.actors[e].objects).each(function (b, c) {
                        if (c.launch) {
                            var d = $('<a href="#">Add</a>');
                            n && n.append(d);
                            c.defaultcode && d.find("span").text(c.defaultcode);
                            c.requirelibs && d.attr("data-libs", c.requirelibs.join(","));
                            c.requireactors &&
                                d.attr("data-actors", c.requireactors.join(","));
                            c.launch == "Character" ? d.click(WinMediaSidebar._addCharacter) : c.launch == "Media" && d.click(WinMediaSidebar._addMedia)
                        } else {
                            d = $('<li class="actor"><span class="hidden"></span></li>');
                            d.attr("data-id", c.id);
                            c.requirelibs && d.attr("data-libs", c.requirelibs.join(","));
                            c.requireactors && d.attr("data-actors", c.requireactors.join(","));
                            d.find("span").text(c.sprite);
                            g.append(d);
                            generateImageFromUrl(c.preview, function (b) {
                                d.append(b)
                            })
                        }
                    })
                }
            })
        }
    })
};
WinMediaSidebar._addCharacter = function () {
    var b = $(this).parents("ul").find("li.template").text(),
        c = $(this).find("span.template").text(),
        d = $(this).attr("data-libs"),
        e = $(this).attr("data-actors");
    window.WinSpine && WinSpine.showCreator(function (f, g) {
        Sprites.addSprite({
            cx: 500,
            cy: 500,
            scale: 0.25,
            label: "actor",
            costumeName: "actor",
            img: "avatar://spine",
            forceNumber: false,
            skeletonType: f,
            skeletonParts: g
        }, function (f) {
            f.spriteObj.setPosition(Runtime.stage.getWidth() / 2 - Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.getHeight() /
                2 - Runtime.stage.tileLayer.getScrollOffsetY());
            if (b) {
                b = JSON.parse(b);
                for (var g = 0; g < b.length; g++) b[g].hidden = true;
                ObjectIO.deserializeScripts(f, b)
            }
            if (c) {
                c = JSON.parse(c);
                ObjectIO.deserializeScripts(f, c)
            }
            if (d)
                for (var k = d.split(","), g = 0; g < k.length; g++) Runtime.requireLibrary(k[g], function () {
                    WinTools.reset()
                });
            if (e) {
                k = e.split(",");
                for (g = 0; g < k.length; g++) {
                    var l = WinMediaSidebar._findActor(k[g]);
                    if (l && !Sprites.getSpriteByName(l.label)) {
                        l.hidden = true;
                        ObjectIO.deserializeSprite(l)
                    }
                }
            }
            IDE.selectAsset(f);
            IDE.Clipboard.undoAddActor(f)
        })
    });
    return false
};
WinMediaSidebar._addMedia = function () {
    var b = $(this).parents("ul").find("li.template").text(),
        c = $(this).find("span.template").text(),
        d = $(this).attr("data-libs"),
        e = $(this).attr("data-actors");
    WinMediaAssets.showPicker("Add an Actor", function (f, g, h) {
        var j = f[0],
            k = getFileExt(j.url);
        if (k == ".mp3" || k == ".wav") {
            if (IDE.editingActor) {
                IDE.addResourceTo(j.url, j.name, IDE.editingActor);
                return IDE.editingActor
            }
            IDE.addResourceTo(j.url, j.name, Runtime.background);
            return Runtime.background
        }
        if (k == ".actor") ObjectIO.loadSprite(j.url, function (b) {
            b.spriteObj.setPosition(Runtime.stage.getWidth() /
                2 - Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.getHeight() / 2 - Runtime.stage.tileLayer.getScrollOffsetY());
            Runtime.stage.draw();
            IDE.computeAll();
            IDE.draw();
            IDE.selectAsset(b);
            window.WinProperties && WinProperties.show("interfaces");
            IDE.Clipboard.undoAddActor(b)
        });
        else {
            IDE.dirty();
            k = 1;
            if (j.url.indexOf("avatar://") == 0 && (Runtime.stage.width < 800 || Runtime.stage.height < 800)) k = 0.5;
            var l = Sprites.addSprite({
                cx: j.cx,
                cy: j.cy,
                scale: k,
                label: h ? h : j.name ? j.name : "actor",
                costumeName: j.name ? j.name : "actor",
                img: j.url,
                forceNumber: false
            }, function () {
                l.spriteObj.setPosition(Runtime.stage.getWidth() / 2 - Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.getHeight() / 2 - Runtime.stage.tileLayer.getScrollOffsetY());
                IDE._ignoreUpdates = true;
                for (var g = 1; g < f.length; g++) l.addCostume({
                    img: f[g].url,
                    name: f[g].name,
                    cx: f[g].cx,
                    cy: f[g].cy
                });
                IDE._ignoreUpdates = false;
                f[0].code && ObjectIO.deserializeScripts(l, JSON.parse(f[0].code));
                if (b) {
                    b = JSON.parse(b);
                    for (g = 0; g < b.length; g++) b[g].hidden = true;
                    ObjectIO.deserializeScripts(l, b)
                }
                if (c) {
                    c =
                        JSON.parse(c);
                    ObjectIO.deserializeScripts(l, c)
                }
                if (d)
                    for (var h = d.split(","), g = 0; g < h.length; g++) Runtime.requireLibrary(h[g], function () {
                        WinTools.reset()
                    });
                if (e) {
                    h = e.split(",");
                    for (g = 0; g < h.length; g++) {
                        var j = WinMediaSidebar._findActor(h[g]);
                        if (j && !Sprites.getSpriteByName(j.label)) {
                            j.hidden = true;
                            ObjectIO.deserializeSprite(j)
                        }
                    }
                }
                IDE.selectAsset(l);
                IDE.Clipboard.undoAddActor(l)
            });
            if (g) l.avatarid = g
        }
    }, {
        backgrounds: true,
        actors: true,
        images: true,
        sounds: true,
        charStudio: true
    });
    $("#win-media-assets").modal();
    return false
};
WinMediaSidebar._addAsset = function (b, c, d) {
    var e = b[0],
        f = getFileExt(e.url);
    if (f == ".mp3" || f == ".wav" || e.section == "scenes") {
        IDE.addResourceTo(e.url, e.name, Runtime.background);
        return Runtime.background
    }
    if (f == ".actor") ObjectIO.loadSprite(e.url, function (b) {
        b.spriteObj.setPosition(Runtime.stage.getWidth() / 2 - Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.getHeight() / 2 - Runtime.stage.tileLayer.getScrollOffsetY());
        Runtime.stage.draw();
        IDE.computeAll();
        IDE.draw();
        IDE.selectAsset(b);
        window.WinProperties &&
            WinProperties.show("interfaces");
        IDE.Clipboard.undoAddActor(b)
    });
    else {
        IDE.dirty();
        f = 1;
        if (e.url.indexOf("avatar://") == 0 && (Runtime.stage.width < 800 || Runtime.stage.height < 800)) f = 0.5;
        var g = Sprites.addSprite({
            cx: e.cx,
            cy: e.cy,
            scale: f,
            label: d ? d : e.name ? e.name : "actor",
            costumeName: e.name ? e.name : "actor",
            img: e.url,
            forceNumber: false
        }, function () {
            g.spriteObj.setPosition(Runtime.stage.getWidth() / 2 - Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.getHeight() / 2 - Runtime.stage.tileLayer.getScrollOffsetY());
            IDE._ignoreUpdates =
                true;
            for (var c = 1; c < b.length; c++) g.addCostume({
                img: b[c].url,
                name: b[c].name,
                cx: b[c].cx,
                cy: b[c].cy
            });
            IDE._ignoreUpdates = false;
            b[0].code && ObjectIO.deserializeScripts(g, JSON.parse(b[0].code));
            IDE.selectAsset(g);
            IDE.Clipboard.undoAddActor(g)
        });
        if (c) g.avatarid = c;
        return g
    }
};
WinMediaSidebar.searchAssets = function (b) {
    $.ajax({
        url: WinMediaAssets.medialibsearch,
        data: {
            q: b
        },
        success: function (c) {
            if (c.length > 0) {
                var d = $("#win-media-sidebar"),
                    e = d.find(".container");
                e.empty().append("<h3>Search Results</h3>");
                d = $('<ul class="images"></ul>');
                e.append(d);
                for (var f = false, e = 0; e < c.length; e++) {
                    var g = c[e];
                    if (g.dir != "backgrounds" && g.dir != "scenes")
                        for (var h = 0; h < g.entries.length; h++) {
                            var j = g.entries[h];
                            if (j.type != "mp3") {
                                if (j.entries && j.entries.length > 0) {
                                    f = $('<li class="image"><img name="' +
                                        j.entries[0].name + '" src="' + j.entries[0].url + '" alt="' + j.dir + '"/><span class="hidden"></span></li>');
                                    d.append(f);
                                    for (var k = 1; k < j.entries.length; k++) f.append('<img name="' + j.entries[k].name + '" src="' + j.entries[k].url + '" class="hidden"/>')
                                } else {
                                    f = $('<li class="image"><img src="' + j.url + '" alt="' + j.name + '"/><span class="hidden"></span></li>');
                                    d.append(f)
                                }
                                f = true
                            }
                        }
                }
            }
            if (!f) {
                d = $("#win-media-sidebar");
                e = d.find(".container");
                e.empty().append("<h3>Search Results</h3>");
                e.append('Sorry, no matches were found for "' +
                    b + '". Please try another search term.')
            }
        },
        error: function () {
            var c = $("#win-media-sidebar").find(".container");
            c.empty().append("<h3>Search Results</h3>");
            c.append('Sorry, no matches were found for "' + b + '". Please try another search term.')
        }
    })
};
WinMediaSidebar._showResults = function (b, c) {
    var d = $("#win-media-sidebar .tab-content .tab-content-inner");
    d.scrollTop(0);
    d.empty();
    for (var e = 0; e < WinMediaSidebar.displayOrder.length; e++)
        for (var f = 0; f < b.length; f++) {
            var g = b[f];
            if (!(g.dir == "backgrounds" || g.dir == "scenes") || WinMediaSidebar._showBackgrounds)
                if (g.dir && !(g.dir == "sounds" || g.dir == "music") || WinMediaSidebar._showSounds)
                    if (!g.dir || !(g.dir != "sounds" && g.dir != "music" && g.dir != "backgrounds" && g.dir != "scenes" && !WinMediaSidebar._showImages))
                        if (WinMediaSidebar.displayOrder[e] ==
                            g.dir && g.entries.length > 0) {
                            var h = $("<h3></h3>");
                            h.text(g.dir.charAt(0).toUpperCase() + g.dir.substring(1));
                            d.append(h);
                            h = $("<ul></ul>");
                            d.append(h);
                            for (f = 0; f < g.entries.length; f++) {
                                var j, k = g.entries[f];
                                if (k.dir) {
                                    if (k.entries.length > 0) {
                                        var l = k.dir;
                                        j = $('<li class="stack-asset" data-name="' + l + '" data-type="dir"><img src="' + k.entries[0].url + '"/><span class="asset-name"></span><span class="costume-count">' + k.entries.length + " costumes </span></li>");
                                        j.data("entries", k.entries);
                                        j.mouseenter(WinMediaSidebar._startAnimation).mouseleave(WinMediaSidebar._stopAnimation)
                                    }
                                } else {
                                    l =
                                        k.name;
                                    j = l.indexOf(".");
                                    j > 0 && (l = l.substring(0, j));
                                    if (k.type == "mp3" || k.type == "wav") {
                                        if (c) {
                                            j = $('<li class="sound-asset" data-name="' + l + '" data-type="' + k.type + '" data-id="' + k.id + '" data-url="assets/user/' + k.id + "." + k.type + '" data-my="true"><div class="icon-volume-high"></div><span class="asset-name"></span><a href="#" class="cmd-play">Play</a><a href="#" class="cmd-delete"></a></li>');
                                            j.find("a.cmd-delete").click(WinMediaSidebar._deleteClicked)
                                        } else j = $('<li class="sound-asset" data-name="' + l + '" data-type="' +
                                            k.type + '" data-id="' + k.id + '" data-url="' + k.url + '"><div class="icon-volume-high"></div><span class="asset-name"></span><a href="#" class="cmd-play">Play</a></li>');
                                        j.find("a.cmd-play").click(WinMediaSidebar._playClicked)
                                    } else {
                                        if (c) {
                                            j = $('<li data-name="' + l + '" data-type="' + k.type + '" data-id="' + k.id + '" data-url="assets/user/' + k.id + "." + k.type + '" data-my="true"><img src="assets/user/' + k.id + "." + k.type + '"/><span class="asset-name"></span><a href="#" class="cmd-delete"></a></li>');
                                            j.find("a.cmd-delete").click(WinMediaSidebar._deleteClicked)
                                        } else j =
                                            $('<li data-name="' + l + '" data-type="' + k.type + '" data-id="' + k.id + '" data-url="' + k.url + '"><img src="' + k.url + '"/><span class="asset-name"></span></li>');
                                        (g.dir == "backgrounds" || g.dir == "scenes") && j.addClass("scene-asset")
                                    }
                                }
                                j.find("span.asset-name").text(l);
                                j.click(WinMediaSidebar._pickAsset);
                                h.append(j)
                            }
                            break
                        } else if (WinMediaSidebar.displayOrder[e] == "" && !b[f].dir) {
                            h = d.find("ul.data-flat");
                            if (h.length === 0) {
                                h = $('<ul class="data-flat"></ul>');
                                d.append(h)
                            }
                            k = b[f];
                            l = k.name;
                            j = l.indexOf(".");
                            j > 0 && (l = l.substring(0,
                                j));
                            if (k.type == "mp3" || k.type == "wav") {
                                j = $('<li class="sound-asset" data-name="' + l + '" data-type="' + k.type + '" data-id="' + k.id + '" data-url="' + k.url + '"><div class="icon-volume-high"></div><span class="asset-name"></span><a href="#" class="cmd-play">Play</a></li>');
                                j.find("a.cmd-play").click(WinMediaSidebar._playClicked)
                            } else j = $('<li data-name="' + l + '" data-type="' + k.type + '" data-id="' + k.id + '" data-url="' + k.url + '"><img src="' + k.url + '"/><span class="asset-name"></span></li>');
                            j.find("span.asset-name").text(l);
                            j.click(WinMediaSidebar._pickAsset);
                            h.append(j)
                        }
        }
    if (c) {
        if (!h) {
            h = $("<ul></ul>");
            d.append(h)
        }
        d = $('<a class="asset-action" href="#"></a>');
        if (c == "upload") {
            d.text("Upload an Asset");
            d.click(WinMediaSidebar._upload)
        } else if (c == "photo") {
            d.text("Take a Picture");
            d.click(WinMediaSidebar._camera)
        } else if (c == "drawing") {
            d.text("Draw an Image");
            d.click(WinMediaSidebar._draw)
        } else if (c == "audio") {
            d.text("Record Audio");
            d.click(WinMediaSidebar._record);
            e = $('<a class="asset-action" href="#"></a>');
            e.text("Upload a Sound File");
            e.click(WinMediaSidebar._upload);
            h.prepend(e)
        }
        h.prepend(d)
    }
};
WinMediaSidebar._playClicked = function () {
    soundManager.stopAll();
    if ($(this).text() == "Play") {
        $(this).text("Stop");
        var b = $(this).parents("li");
        soundManager.createSound({
            id: "s" + Math.random(),
            url: b.attr("data-url")
        }).play({
            onfinish: function () {
                b.find("a.cmd-play").text("Play")
            }
        })
    } else $(this).text("Play");
    return false
};
WinMediaSidebar._deleteClicked = function () {
    var b = $(this).parents("li"),
        c = b.attr("data-id");
    $.ajax({
        url: WinMediaSidebar.medialibdelete,
        data: {
            i: c
        },
        success: function () {
            b.detach()
        }
    });
    return false
};
WinMediaSidebar._pickAsset = function () {
    var b = $(this),
        c = b.attr("data-type");
    if (c == "dir") {
        for (var c = b.data("entries"), d = [], e = 0; e < c.length; e++) {
            var f = c[e].name,
                g = f.indexOf(".");
            g > 0 && (f = f.substring(0, g));
            b.attr("data-my");
            d.push({
                name: f,
                url: c[e].url
            })
        }
        WinMediaSidebar._callback(d, null, null, WinMediaSidebar._callbackObj)
    } else {
        c != "actor" && b.attr("data-my");
        WinMediaSidebar._callback([{
            name: b.attr("data-name"),
            url: b.attr("data-url")
        }], null, null, WinMediaSidebar._callbackObj)
    }
    $.modal.close();
    return false
};
WinMediaSidebar.handleSelectMode = function () {
    $("#win-media-sidebar .global-toolbar li").removeClass("selected");
    $("#win-media-sidebar .tiles li").removeClass("selected");
    $("#win-media-sidebar .global-toolbar li.select-tool").addClass("selected");
    Runtime.stage.setDesignMode("normal");
    $("#stage-canvas").css("cursor", "auto");
    return false
};
WinMediaSidebar.handleTileMode = function () {
    $("#win-media-sidebar .global-toolbar li").removeClass("selected");
    $("#win-media-sidebar .global-toolbar li.tile-tool").addClass("selected");
    Runtime.stage.setDesignMode("place");
    Runtime.stage.tileLayer.currentTileType = WinMediaSidebar.lastSelectedTile;
    $("#win-media-sidebar .tiles-wrapper .tiles li").each(function (b, c) {
        b == Runtime.stage.tileLayer.currentTileType ? $(c).addClass("selected") : $(c).removeClass("selected")
    });
    $("#stage-canvas").css("cursor", "auto");
    Runtime.stage.tileLayer.enableTiles(true);
    return false
};
WinMediaSidebar.handleDeleteMode = function () {
    $("#win-media-sidebar .global-toolbar li").removeClass("selected");
    $("#win-media-sidebar .tiles li").removeClass("selected");
    $("#win-media-sidebar .global-toolbar li.remove-tool").addClass("selected");
    Runtime.stage.setDesignMode("remove");
    $("#stage-canvas").css("cursor", 'url("ide/imgs/trashcan-cursor.png"), auto');
    return false
};
WinMediaSidebar.canDrag = function (b, c) {
    var d = false;
    if (!$("#win-media-sidebar").hasClass("hidden")) {
        var e = $("#win-media-sidebar");
        b >= e.offset().left && (b <= e.offset().left + e.outerWidth() && c >= e.offset().top && c <= e.offset().top + e.outerHeight()) && (d = true)
    }
    return d
};
WinMediaSidebar.getDragObj = function (b, c) {
    var d = null;
    if (!$("#win-media-sidebar").hasClass("hidden")) {
        var e = $("#win-media-sidebar");
        b >= e.offset().left && (b <= e.offset().left + e.outerWidth() && c >= e.offset().top && c <= e.offset().top + e.outerHeight()) && $("#win-media-sidebar li.actor,li.image,li.background").each(function (e, g) {
            var h = $(g);
            if (b >= h.offset().left && b <= h.offset().left + h.outerWidth() && c >= h.offset().top && c <= h.offset().top + h.outerHeight()) {
                WinStage.cmdStop();
                $("#win-media-sidebar .tiles li").removeClass("selected");
                $("#win-media-sidebar li.select-tool").addClass("selected");
                Runtime.stage.setDesignMode("normal");
                var j = h.parents("ul").find("li.template").text();
                if (j)
                    for (var j = JSON.parse(j), k = 0; k < j.length; k++) j[k].hidden = true;
                if (h.hasClass("actor")) {
                    if (k = h.find("span").text()) {
                        k = JSON.parse(k);
                        if (j) k.scripts = k.scripts.concat(j);
                        k = JSON.stringify(k)
                    }
                    d = new WinAssets.DragObject(h.find("img").attr("src"), k);
                    d.requiredlibs = h.attr("data-libs");
                    d.requiredactors = h.attr("data-actors")
                } else if (h.hasClass("background")) {
                    j =
                        h.find("span").text();
                    d = new WinAssets.DragObject(j, {
                        type: "background",
                        name: h.attr("name"),
                        url: j
                    })
                } else if (h.hasClass("image")) {
                    var k = h.find("img")[0],
                        j = h.find("img").attr("src"),
                        l = {
                            label: "actor",
                            scripts: [],
                            costumes: [{
                                name: "image",
                                img: j,
                                cx: k.width / 2,
                                cy: k.height / 2
                            }],
                            currentCostume: 1,
                            sounds: [],
                            scale: 1,
                            x: 0,
                            y: 0,
                            rotation: 0,
                            rotateLock: 1,
                            isHidden: false,
                            volume: 100,
                            locked: false,
                            hiddenInSandbox: false,
                            lockedInSandbox: false,
                            zIndex: 0,
                            physics: {
                                isStatic: false,
                                isActive: true,
                                geometry: "circular",
                                density: 1,
                                friction: 0.5,
                                restitution: 0.2
                            },
                            variables: {},
                            varDefaults: {},
                            lists: {}
                        };
                    h.find("img.hidden").each(function (b, c) {
                        l.costumes.push({
                            name: "image" + (b + 1),
                            img: c.src,
                            cx: c.width,
                            cy: c.height
                        })
                    });
                    d = new WinAssets.DragObject(j, JSON.stringify(l))
                }
                return false
            }
        })
    }
    return d
};
WinMediaSidebar.dragCompleted = function (b) {
    if (b.requiredlibs)
        for (var c = b.requiredlibs.split(","), d = 0; d < c.length; d++) Runtime.requireLibrary(c[d], function () {
            WinTools.reset()
        });
    if (b.requiredactors) {
        b = b.requiredactors.split(",");
        for (d = 0; d < b.length; d++)
            if ((c = WinMediaSidebar._findActor(b[d])) && !Sprites.getSpriteByName(c.label)) {
                c.hidden = true;
                ObjectIO.deserializeSprite(c)
            }
    }
};
var WinMediaCapture = {
    meterLevel: null,
    meterSize: 100,
    mediaId: null,
    initialized: !1,
    audioStream: null,
    videoStream: null,
    audioCallback: null,
    videoCallback: null,
    audioRecorder: null,
    audio_context: null,
    init: function () {
        MediaCapture.init();
        if (!WinMediaCapture.initialized) {
            if (window.IDE && MediaCapture.supportsCapture) {
                WinMediaCapture.meterSize = $("#audiocapture .meter").innerWidth();
                WinMediaCapture.meterLevel = $("#audiocapture .meter .level");
                for (var b = 0; b < g_palette.length; b++)
                    if (g_palette[b].label == "Looks") {
                        if (g_steps.blockLooksVideo) {
                            g_steps.blockLooksVideo.hidden =
                                false;
                            g_palette[b].items.push(g_steps.blockLooksVideo);
                            g_steps.blockLooksVideoTransparency.hidden = false;
                            g_palette[b].items.push(g_steps.blockLooksVideoTransparency)
                        }
                    } else if (g_palette[b].label == "Sensing" && g_steps.valueSensingVideo) {
                        g_steps.valueSensingVideo.hidden = false;
                        g_steps.valueSensingSoundLevel.hidden = false;
                        g_palette[b].items.push(g_steps.valueSensingVideo);
                        g_palette[b].items.push(g_steps.valueSensingSoundLevel)
                    }
            }
            WinMediaCapture.initialized = true
        }
    },
    stop: function () {
        if (WinMediaCapture.audioRecorder) {
            WinMediaCapture.audioRecorder.stop();
            WinMediaCapture.audioRecorder = null
        }
        if (WinMediaCapture.audioStream) {
            var b = WinMediaCapture.audioStream.getAudioTracks();
            if (b)
                for (var c = 0; c < b.length; c++) b[c].stop();
            WinMediaCapture.audioStream = null
        }
        if (WinMediaCapture.videoStream) {
            if (b = WinMediaCapture.videoStream.getTracks())
                for (c = 0; c < b.length; c++) b[c].stop();
            WinMediaCapture.videoStream = null
        }
    },
    _audioCallback: function (b, c) {
        for (var d = 0, e = 0; e < b.length; e = e + 16) {
            var f = b[e],
                g = c[e];
            f < 0 ? -f > d && (d = -f) : f > 0 && f > d && (d = f);
            g < 0 ? -g > d && (d = -g) : g > 0 && g > d && (d = g)
        }
        WinMediaCapture.meterLevel.css("width",
            WinMediaCapture.meterSize * (d > 1 ? 1 : d))
    },
    _recordButton: function () {
        if (!$(this).hasClass("disabled")) {
            WinMediaCapture.startRecord();
            $(".recorderwidget .status").text("Recording...");
            $(".recorderwidget .record").addClass("disabled").addClass("selected");
            $(".recorderwidget .stop").removeClass("disabled").removeClass("selected");
            $(".recorderwidget .play").removeClass("disabled").removeClass("selected");
            WinMediaCapture._startTimer()
        }
        return false
    },
    _playButton: function () {
        if (!$(this).hasClass("disabled")) {
            $(".recorderwidget .status").text("Playing...");
            $(".recorderwidget .record").addClass("disabled").removeClass("selected");
            $(".recorderwidget .stop").removeClass("disabled").removeClass("selected");
            $(".recorderwidget .play").addClass("disabled").addClass("selected");
            if (WinMediaCapture.audioRecorder && WinMediaCapture.audioRecorder.isRecording()) WinMediaCapture.stopRecord(function (b) {
                WinMediaCapture._startTimer();
                soundManager.createSound({
                    id: "recorder",
                    url: b,
                    autoPlay: true,
                    onfinish: function () {
                        WinMediaCapture._stopTimer();
                        soundManager.destroySound("recorder");
                        $(".recorderwidget .status").text("");
                        $(".recorderwidget .record").removeClass("disabled").removeClass("selected");
                        $(".recorderwidget .stop").addClass("disabled").removeClass("selected");
                        $(".recorderwidget .play").removeClass("disabled").removeClass("selected")
                    }
                })
            }, true);
            else {
                WinMediaCapture._startTimer();
                soundManager.createSound({
                    id: "recorder",
                    url: "/assets/voice/" + IDE.currentProjectId + ".mp3",
                    autoPlay: true,
                    onfinish: function () {
                        WinMediaCapture._stopTimer();
                        soundManager.destroySound("recorder");
                        $(".recorderwidget .status").text("");
                        $(".recorderwidget .record").removeClass("disabled").removeClass("selected");
                        $(".recorderwidget .stop").addClass("disabled").removeClass("selected");
                        $(".recorderwidget .play").removeClass("disabled").removeClass("selected")
                    }
                })
            }
        }
        return false
    },
    _stopButton: function () {
        $(".recorderwidget .status").text("");
        if (!$(this).hasClass("disabled")) {
            WinMediaCapture._stopTimer();
            if (WinMediaCapture.audioRecorder && WinMediaCapture.audioRecorder.isRecording()) {
                $(".recorderwidget .status").text("Saving...");
                WinMediaCapture.stopRecord(function () {
                    $(".recorderwidget .status").text("");
                    $(".recorderwidget .record").removeClass("disabled").removeClass("selected");
                    $(".recorderwidget .stop").addClass("disabled").removeClass("selected");
                    $(".recorderwidget .play").removeClass("disabled").removeClass("selected")
                }, true)
            } else {
                soundManager.stopAll();
                soundManager.destroySound("recorder");
                $(".recorderwidget .record").removeClass("disabled").removeClass("selected");
                $(".recorderwidget .stop").addClass("disabled").removeClass("selected");
                $(".recorderwidget .play").removeClass("disabled").removeClass("selected")
            }
        }
        return false
    },
    _startWidgetCapture: function () {
        var b = $(".recorderwidget");
        b.find("span").removeClass("hidden");
        b.find("ul").addClass("hidden");
        if (!WinMediaCapture.audio_context) WinMediaCapture.audio_context = new AudioContext;
        navigator.getUserMedia({
            audio: true
        }, function (c) {
            var d = WinMediaCapture.audio_context.createMediaStreamSource(c);
            WinMediaCapture.audioStream = c;
            WinMediaCapture.audioRecorder = new Recorder(d, {
                levelCallback: WinMediaCapture._audioCallback
            });
            $(".recorderwidget span").addClass("hidden");
            $(".recorderwidget ul").removeClass("hidden");
            WinMediaCapture.startRecord();
            $(".recorderwidget .status").text("Recording...");
            $(".recorderwidget .record").addClass("disabled").addClass("selected");
            $(".recorderwidget .stop").removeClass("disabled");
            $(".recorderwidget .play").removeClass("disabled");
            WinMediaCapture._startTimer();
            b.find("li.record").unbind().click(WinMediaCapture._recordButton);
            b.find("li.stop").unbind().click(WinMediaCapture._stopButton);
            b.find("li.play").unbind().click(WinMediaCapture._playButton)
        }, function () {
            $(".recorderwidget span").removeClass("hidden").text("Please give me permission");
            $(".recorderwidget ul").addClass("hidden")
        })
    },
    _startTimer: function () {
        $(".recorderwidget .timer").addClass("selected");
        WinMediaCapture.startTime = Date.now();
        window.clearInterval(WinMediaCapture._timerId);
        WinMediaCapture._timerId = window.setInterval(function () {
            var b = parseInt((Date.now() - WinMediaCapture.startTime) / 1E3),
                c = parseInt(b / 60),
                b = b % 60;
            b < 10 && (b = "0" + b);
            $(".recorderwidget li.timer").removeClass("hidden").text(c + ":" + b)
        }, 1E3)
    },
    _stopTimer: function () {
        $(".recorderwidget .timer").removeClass("selected");
        window.clearInterval(WinMediaCapture._timerId)
    },
    showRecorderWidget: function (b, c) {
        if (WinMediaCapture.audioStream) {
            var d = WinMediaCapture.audioStream.getAudioTracks();
            if (d)
                for (var e = 0; e < d.length; e++) d[e].stop();
            WinMediaCapture.audioStream = null
        }
        WinMediaCapture.mediaId = null;
        WinMediaCapture.audioRecorder = null;
        if (MediaCapture.supportsCapture) {
            d = $('<div class="recorderwidget"><span class="hidden">Press the "Allow" button.</span><ul><li class="timer">0:00</li><li class="record"></li><li class="stop disabled"></li><li class="play"></li><li class="status"></li></ul></div>');
            b.append(d);
            d.find("li.record").click(WinMediaCapture._startWidgetCapture);
            d.find("li.stop").click(WinMediaCapture._stopButton);
            d.find("li.play").click(WinMediaCapture._playButton);
            WinMediaCapture.audioCallback = c
        }
    },
    showAudioRecorder: function (b) {
        if (WinMediaCapture.audioStream) {
            var c = WinMediaCapture.audioStream.getAudioTracks();
            if (c)
                for (var d = 0; d < c.length; d++) c[d].stop();
            WinMediaCapture.audioStream = null
        }
        WinMediaCapture.mediaId = null;
        WinMediaCapture.audioRecorder = null;
        if (MediaCapture.supportsCapture) {
            $("#audiocapture .askpermission").removeClass("hidden");
            $("#audiocapture .nopermission").addClass("hidden");
            $("#audiocapture .content").addClass("hidden");
            WinMediaCapture.audioCallback = b;
            if (!WinMediaCapture.audio_context) WinMediaCapture.audio_context = new AudioContext;
            navigator.getUserMedia({
                audio: true
            }, function (b) {
                var c = WinMediaCapture.audio_context.createMediaStreamSource(b);
                WinMediaCapture.audioStream = b;
                WinMediaCapture.audioRecorder = new Recorder(c, {
                    levelCallback: WinMediaCapture._audioCallback
                });
                $("#audiocapture .askpermission").addClass("hidden");
                $("#audiocapture .nopermission").addClass("hidden");
                $("#audiocapture .content").removeClass("hidden");
                $("#audiocapture .record").removeClass("disabled");
                $("#audiocapture .stop").addClass("disabled");
                $("#audiocapture .play").addClass("disabled")
            }, function () {
                $("#audiocapture .askpermission").addClass("hidden");
                $("#audiocapture .nopermission").removeClass("hidden");
                $("#audiocapture .content").addClass("hidden");
                $("#audiocapture .record").addClass("disabled");
                $("#audiocapture .stop").addClass("disabled");
                $("#audiocapture .play").addClass("disabled")
            });
            $("#audiocapture .record").addClass("disabled").unbind().click(function () {
                WinMediaCapture.startRecord();
                $("#audiocapture .record").addClass("disabled");
                $("#audiocapture .stop").removeClass("disabled");
                $("#audiocapture .play").removeClass("disabled")
            });
            $("#audiocapture .stop").addClass("disabled").unbind().click(function () {
                $("#audiocapture .play").addClass("disabled");
                if (WinMediaCapture.audioRecorder.isRecording()) WinMediaCapture.stopRecord(function () {
                    $("#audiocapture .record").removeClass("disabled");
                    $("#audiocapture .stop").addClass("disabled");
                    $("#audiocapture .play").removeClass("disabled")
                });
                else {
                    soundManager.stopAll();
                    soundManager.destroySound("recorder");
                    $("#audiocapture .record").removeClass("disabled");
                    $("#audiocapture .stop").addClass("disabled");
                    $("#audiocapture .play").removeClass("disabled")
                }
            });
            $("#audiocapture .play").addClass("disabled").unbind().click(function () {
                $("#audiocapture .record").addClass("disabled");
                $("#audiocapture .stop").removeClass("disabled");
                $("#audiocapture .play").addClass("disabled");
                WinMediaCapture.audioRecorder.isRecording() ? WinMediaCapture.stopRecord(function (b) {
                    soundManager.createSound({
                        id: "recorder",
                        url: b,
                        autoPlay: true,
                        onfinish: function () {
                            soundManager.destroySound("recorder");
                            $("#audiocapture .record").removeClass("disabled");
                            $("#audiocapture .stop").addClass("disabled");
                            $("#audiocapture .play").removeClass("disabled")
                        }
                    })
                }) : WinMediaCapture.mediaId && soundManager.createSound({
                    id: "recorder",
                    url: "assets/user/" + WinMediaCapture.mediaId + ".mp3",
                    autoPlay: true,
                    onfinish: function () {
                        soundManager.destroySound("recorder");
                        $("#audiocapture .record").removeClass("disabled");
                        $("#audiocapture .stop").addClass("disabled");
                        $("#audiocapture .play").removeClass("disabled")
                    }
                })
            });
            $("#audiocapture").modal();
            $("#audiocapture").on("modal:close", function () {
                if (WinMediaCapture.audioRecorder) {
                    WinMediaCapture.audioRecorder.stop();
                    WinMediaCapture.audioRecorder = null
                }
                if (WinMediaCapture.audioStream) {
                    var b = WinMediaCapture.audioStream.getAudioTracks();
                    if (b)
                        for (var c = 0; c < b.length; c++) b[c].stop();
                    WinMediaCapture.audioStream = null
                }
                WinMediaCapture.mediaId &&
                    $.ajax({
                        url: "api/medialibdelete.aspx",
                        type: "POST",
                        data: {
                            i: WinMediaCapture.mediaId
                        }
                    })
            });
            $("#audiocapture a.cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            });
            $("#audiocapture a.okBtn").unbind().click(function () {
                if (WinMediaCapture.audioRecorder && WinMediaCapture.audioRecorder.isRecording()) WinMediaCapture.stopRecord(function () {
                    var b = WinMediaCapture.mediaId;
                    WinMediaCapture.mediaId = null;
                    WinMediaCapture.audioCallback && b && WinMediaCapture.audioCallback("assets/user/" + b + ".mp3");
                    $.modal.close()
                });
                else {
                    var b = WinMediaCapture.mediaId;
                    WinMediaCapture.mediaId = null;
                    WinMediaCapture.audioCallback && b && WinMediaCapture.audioCallback("assets/user/" + b + ".mp3");
                    $.modal.close()
                }
                return false
            })
        }
    },
    startRecord: function () {
        MediaCapture.supportsCapture && WinMediaCapture.audioRecorder && WinMediaCapture.audioRecorder.record()
    },
    stopRecord: function (b, c) {
        if (MediaCapture.supportsCapture && WinMediaCapture.audioRecorder) {
            IDE.showProgress(g_loc.getText("dialog.projectloading"));
            WinMediaCapture.audioRecorder.stop();
            WinMediaCapture.audioRecorder.exportWAV(function (d) {
                WinMediaCapture.mediaId &&
                    $.ajax({
                        url: "api/medialibdelete.aspx",
                        type: "POST",
                        data: {
                            i: WinMediaCapture.mediaId
                        }
                    });
                saveurl = c ? "/api/projectsavevoice" : "api/medialibsave.aspx";
                var e = new FileReader;
                e.onload = function (d) {
                    $.ajax({
                        url: saveurl,
                        type: "POST",
                        data: {
                            p: IDE.currentProjectId,
                            t: "audio",
                            d: d.target.result
                        },
                        success: function (d) {
                            var d = JSON.parse(d),
                                e = "";
                            if (d.result) {
                                e = d.id;
                                WinMediaCapture.mediaId = e
                            }
                            b && (c ? b("/assets/voice/" + IDE.currentProjectId + ".mp3") : b("assets/user/" + e + ".mp3"));
                            IDE.showProgress(null)
                        },
                        error: function () {
                            IDE.showProgress(null)
                        }
                    })
                };
                e.readAsDataURL(d);
                WinMediaCapture.audioRecorder && WinMediaCapture.audioRecorder.clear()
            })
        }
    },
    deleteAudio: function () {
        $.ajax({
            url: "api/medialibdelete.aspx",
            type: "POST",
            data: "i=" + encodeURIComponent(mediaId),
            success: function () { }
        })
    },
    showPictureTaker: function (b, c) {
        WinMediaCapture.videoStream = null;
        if (MediaCapture.supportsCapture) {
            WinMediaCapture.videoCallback = b;
            $("#videocapture").modal();
            $("#videocapture").on("modal:close", function () {
                if (WinMediaCapture.videoStream) {
                    var b = WinMediaCapture.videoStream.getTracks();
                    if (b)
                        for (var c = 0; c < b.length; c++) b[c].stop();
                    WinMediaCapture.videoStream = null
                }
            });
            $("#videocapture a.okBtn").unbind().click(function () {
                WinMediaCapture.takeSnapshot();
                $.modal.close();
                return false
            });
            $("#videocapture a.cancelBtn").unbind().click(function () {
                $.modal.close();
                if (WinMediaCapture.videoStream) {
                    var b = WinMediaCapture.videoStream.getTracks();
                    if (b)
                        for (var c = 0; c < b.length; c++) b[c].stop();
                    WinMediaCapture.videoStream = null
                }
                return false
            });
            $("#videocapture .askpermission").removeClass("hidden");
            $("#videocapture .nopermission").addClass("hidden");
            $("#videocapture .content").addClass("hidden");
            var d = $("#videocapture video")[0];
            navigator.getUserMedia({
                video: true
            }, function (b) {
                d.src = window.URL.createObjectURL(b);
                WinMediaCapture.videoStream = b;
                $("#videocapture .askpermission").addClass("hidden");
                $("#videocapture .nopermission").addClass("hidden");
                $("#videocapture .content").removeClass("hidden")
            }, function () {
                $("#videocapture .askpermission").addClass("hidden");
                $("#videocapture .nopermission").removeClass("hidden");
                $("#videocapture .content").addClass("hidden");
                c && c()
            })
        }
    },
    takeSnapshot: function () {
        if (WinMediaCapture.videoStream) {
            var b = document.createElement("canvas"),
                c = $("#videocapture video")[0];
            b.width = c.videoWidth;
            b.height = c.videoHeight;
            b.getContext("2d").drawImage(c, 0, 0, b.width, b.height);
            $.ajax({
                url: "api/medialibsave.aspx",
                type: "POST",
                data: {
                    t: "photo",
                    d: b.toDataURL("image/png")
                },
                success: function (c) {
                    var c = JSON.parse(c),
                        d = "";
                    if (c.result) d = c.id;
                    WinMediaCapture.videoCallback && WinMediaCapture.videoCallback("assets/user/" + d + ".png", b.width / 2, b.height / 2)
                }
            });
            if (c =
                WinMediaCapture.videoStream.getTracks())
                for (var d = 0; d < c.length; d++) c[d].stop();
            WinMediaCapture.videoStream = null
        }
    }
},
    WinSpine = {
        _callback: null,
        _defaultType: null,
        updateId: 0,
        animationTimeScale: 1,
        totalTime: 0,
        lastTime: 0,
        currentType: null,
        currentPreset: null,
        currentParts: {},
        notify: !1,
        rewards: null,
        rewardTypes: null,
        skeletonData: null,
        skeleton: null,
        skeletonBounds: null,
        stateData: null,
        state: null,
        defaultAnimation: "",
        init: function () {
            var b = $("#win-spine");
            b.find(".cancelBtn").click(function () {
                WinSpine.clearNotification();
                window.clearInterval(WinSpine.updateId);
                WinSpine.updateId = 0;
                $("#win-spine").addClass("hidden");
                $("#win-spine .presetchooser").removeClass("hidden");
                $("#win-spine .partschooser").addClass("hidden");
                WinSpine.editingSprite = null;
                return false
            });
            b.find(".saveBtn").click(function () {
                WinSpine.clearNotification();
                window.clearInterval(WinSpine.updateId);
                WinSpine.updateId = 0;
                $("#win-spine").addClass("hidden");
                $("#win-spine .presetchooser").removeClass("hidden");
                $("#win-spine .partschooser").addClass("hidden");
                WinSpine._callback && WinSpine._callback(WinSpine.currentType, WinSpine.currentParts);
                WinSpine.editingSprite = null;
                return false
            });
            b.find(".presetsBtn").click(function () {
                window.clearInterval(WinSpine.updateId);
                WinSpine.updateId = 0;
                $(".winspine-header").addClass("presetchooser");
                $(".winspine-footer").addClass("presetchooser");
                $("#win-spine .presetchooser").removeClass("hidden");
                $("#win-spine .partschooser").addClass("hidden");
                return false
            });
            b.find(".resetBtn").click(function () {
                WinSpine.currentPreset && WinSpine.selectPreset();
                return false
            });
            $.ajax({
                url: "api/userrewards.aspx",
                data: {
                    t: "notify"
                },
                success: function (b) {
                    if (b) {
                        b = JSON.parse(b);
                        if (b.notify && b.rewards && b.types) {
                            WinSpine.notify = b.notify;
                            WinSpine.rewards = b.rewards;
                            WinSpine.rewardTypes = b.types
                        }
                    }
                }
            });
            WinSpine.totalTime = 0;
            WinSpine.lastTime = Date.now();
            window.clearInterval(WinSpine.updateId);
            WinSpine.updateSkeleton();
            $(window).resize(WinSpine.adjustWindow);
            WinSpine.adjustWindow()
        },
        clearNotification: function () {
            if (WinSpine.notify) {
                $.ajax({
                    url: "/api/userrewards",
                    type: "POST",
                    data: {
                        t: "clear"
                    }
                });
                var b = $("#win-spine");
                b.find(".new-item-tag-small").removeClass("new-item-tag-small");
                b.find(".new-item-preset-tag").removeClass("new-item-preset-tag");
                WinSpine.notify = false
            }
        },
        _handleCategoryClick: function () {
            if ($(this).attr("data-group")) WinSpine.selectGroup($(this).attr("data-group"));
            else {
                WinSpine.currentType = $(this).attr("data-type");
                WinSpine.selectCategory()
            }
            return false
        },
        selectCategory: function () {
            var b = $("#win-spine");
            b.find(".presetchooser .character-class li").each(function (b, c) {
                $(c).attr("data-type") ==
                    WinSpine.currentType ? $(c).addClass("selected") : $(c).removeClass("selected")
            });
            b = b.find(".presetchooser .presets ul");
            b.empty().scrollTop(0);
            if (g_parts[WinSpine.currentType]) {
                for (var c = 0; c < g_parts[WinSpine.currentType].presets.length; c++) {
                    var d = g_parts[WinSpine.currentType].presets[c];
                    //if (g_parts[WinSpine.currentType].allowed.indexOf(d) >= 0) {
                    d = WinSpine.notify && WinSpine.rewards[WinSpine.currentType] && WinSpine.rewards[WinSpine.currentType].indexOf(d) >= 0 ? $('<li class="tab" data-type="' + WinSpine.currentType +
                        '" data-preset="' + d + '"><div class="new-item-preset-tag"></div><img src="ide/avatar/previews/' + WinSpine.currentType + "/" + d + '/index.png"/></li>') : $('<li class="tab" data-type="' + WinSpine.currentType + '" data-preset="' + d + '"><img src="ide/avatar/previews/' + WinSpine.currentType + "/" + d + '/index.png"/></li>');
                    b.append(d);
                    d.click(WinSpine._handlePresetClick)
                    //}
                }
                //for (c = 0; c < g_parts[WinSpine.currentType].presets.length; c++) {
                //    d = g_parts[WinSpine.currentType].presets[c];
                //    if (g_parts[WinSpine.currentType].allowed.indexOf(d) <
                //        0) {
                //        d = $('<li class="tab locked" data-type="' + WinSpine.currentType + '" data-preset="' + d + '"><img src="ide/avatar/previews/' + WinSpine.currentType + "/" + d + '/index.png"/><span class="locked-message"> </span></li>');
                //        b.append(d);
                //        d.click(WinSpine._handlePresetClick);
                //        d.mouseenter(WinSpine._handlePresetMouseEnter);
                //        d.mouseleave(WinSpine._handlePresetMouseLeave)
                //    }
                //}
            }
        },
        selectGroup: function (b) {
            var c = $("#win-spine");
            c.find(".presetchooser .character-class li").each(function (c, d) {
                $(d).attr("data-group") == b ? $(d).addClass("selected") :
                    $(d).removeClass("selected")
            });
            c = c.find(".presetchooser .presets ul");
            c.empty().scrollTop(0);
            var d = [],
                e = [],
                f = 0,
                g;
            for (g in g_parts)
                if (g_parts[g].group == b) {
                    for (var h = 0, j = 0, k = 0; k < g_parts[g].presets.length; k++) {
                        var l = g_parts[g].presets[k];
                        //if (g_parts[g].allowed.indexOf(l) >= 0) {
                        l = WinSpine.notify && WinSpine.rewards[g] && WinSpine.rewards[g].indexOf(l) >= 0 ? $('<li class="tab" data-type="' + g + '" data-preset="' + l + '"><div class="new-item-preset-tag"></div><img src="ide/avatar/previews/' + g + "/" + l + '/index.png"/></li>') :
                            $('<li class="tab" data-type="' + g + '" data-preset="' + l + '"><img src="ide/avatar/previews/' + g + "/" + l + '/index.png"/></li>');
                        f + h * 2 > d.length ? d.push(l) : d.splice(f + h * 2, 0, l);
                        h++;
                        l.click(WinSpine._handlePresetClick)
                        //}
                    }
                    //for (k = 0; k < g_parts[g].presets.length; k++) {
                    //    l = g_parts[g].presets[k];
                    //    if (g_parts[g].allowed.indexOf(l) < 0) {
                    //        l = $('<li class="tab locked" data-type="' + g + '" data-preset="' + l + '"><img src="ide/avatar/previews/' + g + "/" + l + '/index.png"/><span class="locked-message"> </span></li>');
                    //        f + j * 2 > e.length ? e.push(l) : e.splice(f +
                    //            j * 2, 0, l);
                    //        j++;
                    //        l.click(WinSpine._handlePresetClick);
                    //        l.mouseenter(WinSpine._handlePresetMouseEnter);
                    //        l.mouseleave(WinSpine._handlePresetMouseLeave)
                    //    }
                    //}
                    f++
                }
            for (k = 0; k < d.length; k++) c.append(d[k]);
            for (k = 0; k < e.length; k++) c.append(e[k])
        },
        _handlePresetClick: function () {
            if (!$(this).hasClass("locked")) {
                WinSpine.currentType = $(this).attr("data-type");
                WinSpine.currentPreset = $(this).attr("data-preset");
                WinSpine.selectPreset();
                WinSpine.updateId = window.setInterval(function () {
                    WinSpine.updateSkeleton()
                }, 1E3 / 60)
            }
            return false
        },
        _handlePresetMouseEnter: function () {
            if ($(this).hasClass("locked")) {
                var b = $(this).attr("data-type"),
                    c = $(this).attr("data-preset"),
                    d = $(this).find("span.locked-message");
                $.ajax({
                    url: "api/userrewards.aspx",
                    data: {
                        t: "unlock",
                        c: b,
                        p: c
                    },
                    success: function (b) {
                        if (b) {
                            b = JSON.parse(b);
                            if (b.message && b.message != "-1") {
                                d.parent().parent().find("span.locked-message").css("display", "none");
                                d.html("Unlocked in " + b.message).css("display", "block")
                            }
                        }
                    }
                })
            }
        },
        _handlePresetMouseLeave: function () {
            $(this).hasClass("locked") && $(this).find("span.locked-message").html("").css("display",
                "none")
        },
        selectPreset: function (b) {
            var c = $("#win-spine"),
                d = c.find(".groups ul");
            d.empty();
            WinSpine.currentParts = b ? b : {};
            var e = "",
                f;
            for (f in g_parts[WinSpine.currentType].groupings) {
                var g = $('<li class="category"><a href="#" data-partgrouping="' + f + '"><img class="off" src="ide/avatar/previews/' + WinSpine.currentType + "/parts/top-" + f + '.png"/><img class="on" src="ide/avatar/previews/' + WinSpine.currentType + "/parts/top-" + f + '-active.png"/><img class="subcat-active" src="ide/avatar/previews/' + WinSpine.currentType +
                    "/parts/top-" + f + '-selected.png"/></a><ul class="subcat"></ul></li>');
                if (!e) {
                    e = f;
                    g.addClass("selected")
                }
                g.find("a").click(WinSpine._handleGroupingClick);
                var h = g.find("ul.subcat"),
                    j = g_parts[WinSpine.currentType].groupings[f];
                if (j.length > 1)
                    for (var k = 0; k < j.length; k++) {
                        var l = j[k];
                        if (!g_parts[WinSpine.currentType].macros[l] || k > 0) {
                            l = $('<li class="subcategory"><a href="#" data-subcat="' + l + '"><img class="off" src="ide/avatar/previews/' + WinSpine.currentType + "/parts/" + l + '.png"/><img class="on" src="ide/avatar/previews/' +
                                WinSpine.currentType + "/parts/" + l + '-active.png"/></a></li>');
                            h.append(l);
                            l.find("a").click(WinSpine._handleSubcategoryClick)
                        }
                    }
                d.append(g)
            }
            for (f in g_parts[WinSpine.currentType].options) WinSpine.currentPreset && g_parts[WinSpine.currentType].options[f].indexOf(WinSpine.currentPreset) < 0 || !WinSpine.currentPreset && g_parts[WinSpine.currentType].options[f].indexOf(WinSpine.currentParts[f]) < 0 ? WinSpine.currentParts[f] = "blank" : !b && g_parts[WinSpine.currentType].parts[f] && (WinSpine.currentParts[f] = g_parts[WinSpine.currentType].presetexceptions &&
                g_parts[WinSpine.currentType].presetexceptions[WinSpine.currentPreset] && g_parts[WinSpine.currentType].presetexceptions[WinSpine.currentPreset][f] ? g_parts[WinSpine.currentType].presetexceptions[WinSpine.currentPreset][f] : WinSpine.currentPreset);
            c.find(".winspine-header").removeClass("presetchooser");
            c.find(".winspine-footer").removeClass("presetchooser");
            c.find(".presetchooser").addClass("hidden");
            c.find(".partschooser").removeClass("hidden");
            WinSpine.showGrouping(e);
            WinSpine.adjustWindow();
            WinSpine.loadCharacter()
        },
        _handleGroupingClick: function () {
            var b = $(this).attr("data-partgrouping");
            WinSpine.showGrouping(b);
            return false
        },
        showGrouping: function (b) {
            var c = $("#win-spine");
            c.find(".groups ul.top > li a").each(function (c, d) {
                var e = $(d);
                e.attr("data-partgrouping") == b ? e.parent().addClass("selected").removeClass("active") : e.parent().removeClass("selected").removeClass("active")
            });
            if (g_parts[WinSpine.currentType].showoverride) {
                var d = g_parts[WinSpine.currentType].macros[b];
                if (d) {
                    for (var e = false, f = 0; f < d.length; f++) {
                        var g =
                            d[f],
                            h = WinSpine.currentParts[g];
                        if (!h) break;
                        if (g_parts[WinSpine.currentType].showoverride[g] && g_parts[WinSpine.currentType].showoverride[g].indexOf(h) >= 0) {
                            e = true;
                            break
                        }
                    }
                    e || c.find(".groups ul.top > li a").each(function (c, d) {
                        var e = $(d);
                        e.attr("data-partgrouping") == b && e.parent().find("ul.subcat").addClass("hidden")
                    })
                }
            }
            WinSpine.showSubcategory(g_parts[WinSpine.currentType].groupings[b][0])
        },
        _handleSubcategoryClick: function () {
            var b = $(this).attr("data-subcat");
            WinSpine.showSubcategory(b);
            return false
        },
        showSubcategory: function (b) {
            var c = $("#win-spine"),
                d = c.find(".parts ul");
            d.empty();
            c.find(".top ul li a").each(function (c, d) {
                var e = $(d);
                if (e.attr("data-subcat") == b) {
                    e.parent().addClass("selected");
                    e.parents("li.category").addClass("active")
                } else e.parent().removeClass("selected")
            });
            for (var c = g_parts[WinSpine.currentType].options[b], e = 0; e < c.length; e++) {
                var f = g_parts[WinSpine.currentType];
                //if (f.allowed.indexOf(c[e]) >= 0 && (!f.showoverride || !f.showoverride[b] || f.showoverride[b].indexOf(c[e]) >= 0)) {
                var g;
                c[e] != "blank" && (g = $('<li data-partgroup="' + b + '" data-part="' + c[e] + '"><img src="ide/avatar/previews/' + WinSpine.currentType + "/" + c[e] + "/" + b + '.png"/></li>'));
                WinSpine.currentParts[b] == c[e] && g.addClass("selected");
                g_parts[WinSpine.currentType].macros[b] ? g.click(WinSpine._handleMacroPartClick) : g.click(WinSpine._handlePartClick);
                d.append(g)
                //}
            }
            //for (e = 0; e < c.length; e++)
            //    if (g_parts[WinSpine.currentType].allowed.indexOf(c[e]) < 0) {
            //        c[e] != "blank" && (g = $('<li class="locked" data-partgroup="' + b + '" data-part="' + c[e] + '"><img src="ide/avatar/previews/' +
            //            WinSpine.currentType + "/" + c[e] + "/" + b + '.png"/></li>'));
            //        WinSpine.currentParts[b] == c[e] && g.addClass("selected");
            //        g_parts[WinSpine.currentType].macros[b] ? g.click(WinSpine._handleMacroPartClick) : g.click(WinSpine._handlePartClick);
            //        d.append(g)
            //    }
            g = $('<li data-partgroup="' + b + '" data-part="blank"><img src="ide/avatar/noFeature.png"/></li>');
            g_parts[WinSpine.currentType].macros[b] ? g.click(WinSpine._handleMacroPartClick) : g.click(WinSpine._handlePartClick);
            d.append(g)
        },
        _handleMacroPartClick: function () {
            if (!$(this).hasClass("locked")) {
                $(this).parents("ul").find("li").removeClass("selected");
                $(this).parents("li").addClass("selected");
                for (var b = $(this).attr("data-partgroup"), c = $(this).attr("data-part"), d = g_parts[WinSpine.currentType].macros[b], e = 0; e < d.length; e++) {
                    var f = d[e],
                        g;
                    if (g_parts[WinSpine.currentType].options[f].indexOf(c) < 0) g = WinSpine.currentParts[f] = "blank";
                    else g = WinSpine.currentParts[f] = c;
                    var h = g_parts[WinSpine.currentType].parts[f];
                    h || (h = g_parts[WinSpine.currentType].macros[f]);
                    if (g == "blank")
                        for (f = 0; f < h.length; f++) {
                            var j = new Image;
                            j.onload = function () {
                                WinSpine.updateSkeleton()
                            };
                            j.src = "ide/imgs/blank.png";
                            WinSpine.textures[h[f]] = j
                        } else
                        for (f = 0; f < h.length; f++) {
                            j = new Image;
                            j.onload = function () {
                                WinSpine.updateSkeleton()
                            };
                            j.src = "ide/avatar/skins/" + WinSpine.currentType + "/" + g + "/" + h[f] + ".png";
                            WinSpine.textures[h[f]] = j
                        }
                }
                g = $("#win-spine");
                g.find(".groups ul.top > li a").each(function (c, d) {
                    var e = $(d);
                    e.attr("data-partgrouping") == b && e.parent().find("ul.subcat").removeClass("hidden")
                });
                if (g_parts[WinSpine.currentType].showoverride) {
                    h = false;
                    for (e = 0; e < d.length; e++)
                        if (g_parts[WinSpine.currentType].showoverride[d[e]] &&
                            g_parts[WinSpine.currentType].showoverride[d[e]].indexOf(c) >= 0) {
                            h = true;
                            break
                        }
                    h || g.find(".groups ul.top > li a").each(function (c, d) {
                        var e = $(d);
                        e.attr("data-partgrouping") == b && e.parent().find("ul.subcat").addClass("hidden")
                    })
                }
            }
            return false
        },
        _handlePartClick: function () {
            if (!$(this).hasClass("locked")) {
                $(this).parents("ul").find("li").removeClass("selected");
                $(this).parents("li").addClass("selected");
                var b = $(this).attr("data-partgroup"),
                    c = $(this).attr("data-part");
                WinSpine.currentParts[b] = c;
                var d = g_parts[WinSpine.currentType].parts[b];
                d || (d = g_parts[WinSpine.currentType].macros[b]);
                if (c == "blank")
                    for (b = 0; b < d.length; b++) {
                        var e = new Image;
                        e.onload = function () {
                            WinSpine.updateSkeleton()
                        };
                        e.src = "ide/imgs/blank.png";
                        WinSpine.textures[d[b]] = e
                    } else
                    for (b = 0; b < d.length; b++) {
                        e = new Image;
                        e.onload = function () {
                            WinSpine.updateSkeleton()
                        };
                        e.src = "ide/avatar/skins/" + WinSpine.currentType + "/" + c + "/" + d[b] + ".png";
                        WinSpine.textures[d[b]] = e
                    }
            }
            return false
        },
        loadCharacter: function (b) {
            WinSpine.textures = {};
            for (var c in g_parts[WinSpine.currentType].parts) {
                var d =
                    g_parts[WinSpine.currentType].parts[c];
                if (!WinSpine.currentParts[c] || WinSpine.currentParts[c] == "blank")
                    for (var e = 0; e < d.length; e++) {
                        var f = new Image;
                        f.onload = function () {
                            WinSpine.updateSkeleton()
                        };
                        f.src = "ide/imgs/blank.png";
                        WinSpine.textures[d[e]] = f
                    } else
                    for (e = 0; e < d.length; e++) {
                        f = new Image;
                        f.onload = function () {
                            WinSpine.updateSkeleton()
                        };
                        f.src = "ide/avatar/skins/" + WinSpine.currentType + "/" + WinSpine.currentParts[c] + "/" + d[e] + ".png";
                        WinSpine.textures[d[e]] = f
                    }
            }
            $.ajax({
                url: "ide/avatar/rigs/" + WinSpine.currentType +
                    ".json",
                dataType: "json",
                success: function (c) {
                    var d = new spine.SkeletonJson({
                        newRegionAttachment: function (b, c) {
                            var d = new spine.RegionAttachment(c);
                            d.rendererObject = null;
                            d.setUVs(0, 0, 1, 1, false);
                            d.regionOffsetX = 0;
                            d.regionOffsetY = 0;
                            d.width = d.regionOriginalWidth = d.regionWidth = 1;
                            d.height = d.regionOriginalHeight = d.regionHeight = 1;
                            return d
                        },
                        newBoundingBoxAttachment: function (b, c) {
                            return new spine.BoundingBoxAttachment(c)
                        },
                        newMeshAttachment: function (b, c) {
                            return new spine.MeshAttachment(c)
                        },
                        newSkinnedMeshAttachment: function (b,
                            c) {
                            return new spine.SkinnedMeshAttachment(c)
                        }
                    });
                    WinSpine.skeletonData = d.readSkeletonData(c);
                    WinSpine.skeleton = new spine.Skeleton(WinSpine.skeletonData);
                    WinSpine.skeletonBounds = new spine.SkeletonImageBounds;
                    WinSpine.stateData = new spine.AnimationStateData(WinSpine.skeletonData);
                    WinSpine.defaultAnimation = WinSpine.skeletonData.animations[0].name;
                    for (c = 0; c < WinSpine.skeletonData.animations.length; c++) {
                        var e = WinSpine.skeletonData.animations[c].name;
                        if (e.toLowerCase() == "idle") {
                            WinSpine.defaultAnimation = e;
                            break
                        }
                    }
                    for (c = 0; c < WinSpine.skeletonData.animations.length; c++) {
                        e = WinSpine.skeletonData.animations[c].name;
                        if (e != WinSpine.defaultAnimation) {
                            WinSpine.stateData.setMixByName(WinSpine.defaultAnimation, e, 0);
                            WinSpine.stateData.setMixByName(e, WinSpine.defaultAnimation, 0)
                        }
                    }
                    WinSpine.state = new spine.AnimationState(WinSpine.stateData);
                    WinSpine.state.setAnimationByName(0, WinSpine.defaultAnimation, true, 0);
                    WinSpine.skeleton.setSkinByName("default");
                    WinSpine.skeleton.setSlotsToSetupPose();
                    d = $("#win-spine").find(".animations ul");
                    d.empty();
                    for (c = 0; c < WinSpine.skeletonData.animations.length; c++) {
                        e = WinSpine.skeletonData.animations[c].name;
                        if (e.toLowerCase() != "idle" && e.indexOf("Back 3/4") !== 0) {
                            e = $('<li><a href="#" data-animation="' + e + '">' + e + "</a></li>");
                            e.find("a").click(WinSpine._handleAnimationClick);
                            d.append(e)
                        }
                    }
                    WinSpine.totalTime = 0;
                    WinSpine.lastTime = Date.now();
                    WinSpine.updateSkeleton();
                    b && b()
                }
            });
            return false
        },
        _handleAnimationClick: function () {
            var b = $(this).attr("data-animation");
            $("#win-spine .animations li a").removeClass("selected");
            $(this).addClass("selected");
            WinSpine.state.setAnimationByName(0, b, false);
            WinSpine.state.addAnimationByName(0, WinSpine.defaultAnimation, true, 0);
            WinSpine.state.onEnd = function (b) {
                b == 1 && $("#win-spine .animations li a").removeClass("selected")
            };
            return false
        },
        _applySkelBoneTransform: function (b, c) {
            c.parent && WinSpine._applySkelBoneTransform(b, c.parent);
            b.translate(c.x, c.y);
            b.rotate(c.rotation * Math.PI / 180);
            b.scale(c.scaleX, c.scaleY)
        },
        updateSkeleton: function (b) {
            if (WinSpine.state) {
                var c = Date.now();
                WinSpine.state.update((c -
                    WinSpine.lastTime) / 1E3 * WinSpine.animationTimeScale);
                WinSpine.lastTime = c;
                WinSpine.state.apply(WinSpine.skeleton);
                WinSpine.skeleton.updateWorldTransform();
                WinSpine.skeletonBounds.update(WinSpine.skeleton, true);
                b || (b = $("#win-spine canvas")[0].getContext("2d"));
                b.mozImageSmoothingEnabled = false;
                c = WinSpine.currentType == "Tiny" || WinSpine.currentType == "Small" ? 2 : 1;
                b.save();
                b.clearRect(0, 0, b.canvas.width, b.canvas.height);
                b.translate(b.canvas.width / 2, b.canvas.height - 100);
                b.scale(c, -c);
                for (var c = WinSpine.skeleton.drawOrder,
                        d = 0; d < c.length; d++) {
                    var e = c[d],
                        f = e.attachment;
                    if (f) {
                        b.save();
                        WinSpine._applySkelBoneTransform(b, e.bone);
                        b.translate(f.x, f.y);
                        b.rotate(f.rotation * Math.PI / 180);
                        b.scale(f.scaleX, f.scaleY);
                        b.scale(1, -1);
                        try {
                            (e = WinSpine.textures[f.name]) && b.drawImage(e, -f.width / 2, -f.height / 2, f.width, f.height);
                        } catch (ex) {

                        }
                        b.restore()
                    }
                }
                b.restore()
            }
        },
        adjustWindow: function () {
            var b = $("#win-spine"),
                c = b.height() - b.find(".winspine-header").outerHeight() - b.find(".winspine-footer").outerHeight(),
                d = b.find(".winspine-content.partschooser").width() -
                b.find(".winspine-content .animations").width() - b.find(".partschooser .chooser").outerWidth() - 10,
                e = c;
            d < e ? e = d : d = e;
            b.find("canvas").width(d).height(e).css("margin-top", (c - e) / 2);
            b.find(".winspine-content").css("height", c);
            b.find(".animations").css("height", c);
            b.find(".groups").css("height", c - 20);
            b.find(".parts").css("height", c - 20)
        },
        showCreator: function (b, c, d) {
            WinSpine._callback = b;
            var e = {},
                f = $("#win-spine").find(".presetchooser .character-class ul");
            f.empty();
            for (var g in g_parts)
                if (!g_parts[g].alias) {
                    if (!WinSpine._defaultType) WinSpine._defaultType =
                        g;
                    if (g_parts[g].allowed && g_parts[g].allowed.length > 0) {
                        var h = null;
                        if (WinSpine.notify && WinSpine.rewardTypes.indexOf(g) >= 0) {
                            var j = g_parts[g].group;
                            if (j) {
                                if (!e[j]) {
                                    h = $('<li class="tab" data-group="' + j + '">' + j + ' <div class="new-item-tag-small"></div></li>');
                                    e[j] = h
                                }
                            } else h = $('<li class="tab" data-type="' + g + '">' + g_parts[g].name + ' <div class="new-item-tag-small"></div></li>')
                        } else if (j = g_parts[g].group) {
                            if (!e[j]) {
                                h = $('<li class="tab" data-group="' + j + '">' + j + "</li>");
                                e[j] = h
                            }
                        } else h = $('<li class="tab" data-type="' +
                            g + '">' + g_parts[g].name + "</li>");
                        if (h) {
                            f.append(h);
                            h.click(WinSpine._handleCategoryClick)
                        }
                    }
                }
            if (c) {
                if (g_parts[c].alias) c = g_parts[c].alias;
                if (g_parts[c].group) {
                    WinSpine.selectGroup(g_parts[c].group);
                    WinSpine.currentType = c
                } else {
                    WinSpine.currentType = c;
                    WinSpine.selectCategory()
                }
            } else {
                WinSpine.currentType = WinSpine._defaultType;
                WinSpine.selectCategory()
            }
            WinSpine.adjustWindow();
            e = $(".toolbar-top");
            f = 4;
            !e.hasClass("hidden") && e.hasClass("big") && (f = f + (e.offset().top + e.outerHeight()));
            $("#win-spine .presetchooser").removeClass("hidden");
            $("#win-spine .partschooser").addClass("hidden");
            $("#win-spine").css("top", f).removeClass("hidden");
            WinSpine.adjustWindow();
            WinSpine.saveCallback = b;
            if (c && d) {
                WinSpine.currentType = c;
                WinSpine.currentParts = d;
                if (!WinSpine.notify) {
                    WinSpine.selectPreset(d);
                    WinSpine.updateId = window.setInterval(function () {
                        WinSpine.updateSkeleton()
                    }, 1E3 / 60)
                }
            }
        },
        hideCreator: function () {
            $("#win-spine").addClass("hidden");
            WinSpine.resetCreator()
        },
        resetCreator: function () { },
        _generatePreview: function (b) {
            var c = document.createElement("canvas");
            ctx = c.getContext("2d");
            ctx.mozImageSmoothingEnabled = false;
            c.width = 128;
            c.height = 128;
            ctx.save();
            if (b.type == "Tiny") {
                ctx.translate(64, -32);
                ctx.scale(0.25, 0.25)
            } else if (b.type == "Troll") {
                ctx.translate(64, 64);
                ctx.scale(0.25, 0.25)
            } else if (b.type == "MonsterHighRig") {
                ctx.translate(64, 64);
                ctx.scale(0.3, 0.3)
            } else {
                ctx.translate(64, 64);
                ctx.scale(0.125, 0.125)
            }
            this._drawSkeleton(b, ctx);
            ctx.restore();
            return c
        },
        _drawSkeleton: function (b, c) {
            if (b.state) {
                c.save();
                c.translate(0, 500);
                c.scale(1, -1);
                for (var d = b.skeleton.drawOrder,
                        e = 0; e < d.length; e++) {
                    var f = d[e],
                        g = f.attachment;
                    if (g) {
                        c.save();
                        WinSpine._applySkelBoneTransform(c, f.bone);
                        c.translate(g.x, g.y);
                        c.rotate(g.rotation * Math.PI / 180);
                        c.scale(g.scaleX, g.scaleY);
                        c.scale(1, -1);
                        (f = b.textures[g.name]) && c.drawImage(f, -g.width / 2, -g.height / 2, g.width, g.height);
                        c.restore()
                    }
                }
                c.restore()
            }
        },
        generatePreview: function (b, c, d) {
            if (g_parts[b].alias) b = g_parts[b].alias;
            var e = this,
                f = {
                    textures: {},
                    type: b,
                    parts: c
                },
                g = 1,
                h;
            for (h in g_parts[f.type].parts)
                for (var c = g_parts[f.type].parts[h], j = 0; j < c.length; j++) g++;
            for (h in g_parts[f.type].parts) {
                c = g_parts[f.type].parts[h];
                if (!f.parts[h] || f.parts[h] == "blank")
                    for (j = 0; j < c.length; j++) {
                        var k = new Image;
                        k.onload = function () {
                            --g <= 0 && d && d(e._generatePreview(f).toDataURL("image/png"))
                        };
                        k.src = Sprites._blankImg;
                        f.textures[c[j]] = k
                    } else
                    for (j = 0; j < c.length; j++) {
                        k = new Image;
                        k.onload = function () {
                            e.updateSkeleton();
                            Runtime.stage.draw();
                            --g <= 0 && d && d(e._generatePreview(f).toDataURL("image/png"))
                        };
                        k.src = f.parts[h] == "blank" ? Sprites._blankImg : f.parts[h] ? "ide/avatar/skins/" + b + "/" +
                            f.parts[h] + "/" + c[j] + ".png" : Sprites._blankImg;
                        f.textures[c[j]] = k
                    }
            }
            $.ajax({
                url: "ide/avatar/rigs/" + f.type + ".json",
                dataType: "json",
                success: function (b) {
                    var c = new spine.SkeletonJson({
                        newRegionAttachment: function (b, c) {
                            var d = new spine.RegionAttachment(c);
                            d.rendererObject = null;
                            d.setUVs(0, 0, 1, 1, false);
                            d.regionOffsetX = 0;
                            d.regionOffsetY = 0;
                            d.regionOriginalWidth = d.regionWidth = 1;
                            d.regionOriginalHeight = d.regionHeight = 1;
                            return d
                        },
                        newBoundingBoxAttachment: function (b, c) {
                            return new spine.BoundingBoxAttachment(c)
                        },
                        newMeshAttachment: function (b,
                            c) {
                            return new spine.MeshAttachment(c)
                        },
                        newSkinnedMeshAttachment: function (b, c) {
                            return new spine.SkinnedMeshAttachment(c)
                        }
                    });
                    f.skeletonData = c.readSkeletonData(b);
                    f.skeleton = new spine.Skeleton(f.skeletonData);
                    f.stateData = new spine.AnimationStateData(f.skeletonData);
                    f.state = new spine.AnimationState(f.stateData);
                    f.animationName = f.skeletonData.animations[0].name;
                    for (b = 0; b < f.skeletonData.animations.length; b++) {
                        c = f.skeletonData.animations[b].name;
                        if (c.toLowerCase() == "idle") {
                            f.animationName = c;
                            break
                        }
                    }
                    f.state.setAnimationByName(0,
                        f.animationName, true);
                    f.skeleton.setSkinByName("default");
                    f.skeleton.setSlotsToSetupPose();
                    f.skeletonBounds = new spine.SkeletonImageBounds;
                    f.state.update(0);
                    f.state.apply(f.skeleton);
                    f.skeleton.updateWorldTransform();
                    f.skeletonBounds.update(f.skeleton, true);
                    --g <= 0 && d && d(e._generatePreview(f).toDataURL("image/png"))
                }
            })
        }
    },
    WinPreview = {
        _id: 0,
        init: function () {
            $("#preview > a").click(function () {
                WinPreview.hide();
                return false
            });
            WinPreview.adjustWindow()
        },
        adjustWindow: function () {
            $("#preview .content").css("top",
                $("#preview h1").outerHeight() + "px");
            $("#preview iframe").attr("scrolling", "no").attr("width", $("#preview .content").innerWidth() - 40 + "px").attr("height", $("#preview .content").outerHeight() - 40 + "px")
        },
        timedShow: function (b) {
            window.clearTimeout(WinPreview._id);
            if (b) WinPreview._id = window.setTimeout(function () {
                WinPreview.show(b)
            }, $("#preview").hasClass("hidden") ? 2500 : 250)
        },
        show: function (b) {
            $("#preview").removeClass("hidden");
            WinPreview.adjustWindow();
            if (b) {
                $("#preview iframe").attr("src", "ide/preview?s=" +
                    b).focus();
                WinPreview._titleId = window.setInterval(function () {
                    var b = $("#preview iframe")[0].contentWindow.document.title;
                    $("#preview h1").text(b)
                }, 1E3)
            }
            WinPreview.adjustWindow()
        },
        hide: function () {
            window.clearTimeout(WinPreview._id);
            window.clearInterval(WinPreview._titleId);
            $("#preview").addClass("hidden");
            $("#preview iframe").attr("src", "blank.html")
        }
    },
    WinPaint = {
        tool: "pencil",
        toolType: null,
        fillColor: "#000000",
        strokeColor: "#000000",
        selectedColor: "stroke",
        size: 4,
        transparency: 95,
        stampSize: 64,
        text: "",
        fontFamily: "Arial",
        fontSize: 10,
        fontIsBold: !1,
        fontIsItalic: !1,
        fontIsUnderline: !1,
        canvas: null,
        context: null,
        viewport: null,
        viewportContext: null,
        overlay: null,
        overlayContext: null,
        center: null,
        centerContext: null,
        selection: null,
        selectionContext: null,
        buffer: null,
        bufferContext: null,
        undoLimit: 20,
        undoStack: [],
        redoIndex: 0,
        dirty: !1,
        editingUrl: 0,
        editingWidth: 0,
        editingHeight: 0,
        centerVisible: !0,
        centerX: null,
        centerY: null,
        penDown: !1,
        lastX: 0,
        lastY: 0,
        dropZoneVisible: !1,
        gridVisible: !0,
        resizeHandleSize: 6,
        growFactor: 1.1,
        shrinkFactor: 0.9,
        rotateLeverSize: 6,
        brushBristles: [],
        brushNumberBristles: 20,
        brushRefreshRate: 15,
        brushEasing: 0.7,
        proportionalResize: !0,
        viewportX: 0,
        viewportY: 0,
        zoomLevel: 1,
        minZoomLevel: 0.0625,
        maxZoomLevel: 16,
        viewportWidth: 480,
        viewportHeight: 320,
        discardMoveTolerance: 15,
        init: function () {
            WinPaint.canvas = document.createElement("canvas");
            WinPaint.context = WinPaint.canvas.getContext("2d");
            WinPaint.viewport = document.createElement("canvas");
            WinPaint.viewportContext = WinPaint.viewport.getContext("2d");
            WinPaint.overlay = document.createElement("canvas");
            WinPaint.overlayContext = WinPaint.overlay.getContext("2d");
            WinPaint.selection = document.createElement("canvas");
            WinPaint.selectionContext = WinPaint.selection.getContext("2d");
            WinPaint.center = document.createElement("canvas");
            WinPaint.centerContext = WinPaint.center.getContext("2d");
            WinPaint.buffer = document.createElement("canvas");
            WinPaint.bufferContext = WinPaint.buffer.getContext("2d");
            WinPaint.mask = document.createElement("canvas");
            WinPaint.maskContext = WinPaint.mask.getContext("2d");
            $("#win-paint .canvas").append(WinPaint.canvas);
            $("#win-paint .canvas").append(WinPaint.viewport);
            $("#win-paint .canvas").append(WinPaint.overlay);
            $("#win-paint .canvas").append(WinPaint.selection);
            $("#win-paint .canvas").append('<div id="drop-zone" class="hidden"><p>' + g_loc.getText("paint.drop_zone") + "</p></div>");
            $("#win-paint .canvas").append(WinPaint.center);
            $("#win-paint .canvas").append(WinPaint.buffer);
            $("#win-paint .canvas").append(WinPaint.mask);
            $(WinPaint.canvas).addClass("hidden");
            $(WinPaint.selection).addClass("hidden");
            $(WinPaint.buffer).addClass("hidden");
            $("#win-paint .tool-options .pencil li").each(function (b, c) {
                var f = $(c).attr("radius");
                $(c).find("div").css("border-radius", Math.floor(f / 2)).css("width", f).css("height", f)
            });
            $("#win-paint .tool-options .pencil .oval li").each(function (b, c) {
                $(c).attr("type");
                var f = $(c).attr("radius");
                $(c).find("div").css("border-radius", Math.floor(f / 2)).css("width", f).css("height", f * 0.5)
            });
            $("#win-paint .tool-options .pencil .pen li").each(function (b, c) {
                var f = $(c).attr("size");
                $(c).find("div").css("width", f).css("height",
                    f)
            });
            ColorPicker.init("#win-paint");
            for (var b = 0; b < WinPaint.brushNumberBristles; b++) {
                var c = Math.random() * 0.05 + WinPaint.brushEasing;
                WinPaint.brushBristles.push({
                    dx: WinPaint.canvas.width / 2,
                    dy: WinPaint.canvas.height / 2,
                    ax: 0,
                    ay: 0,
                    div: 0.1,
                    ease: c
                })
            }
            $("#win-paint .edit-menu").click(WinPaint.cmdEditMenu);
            $("#win-paint .edit ul li a").click(WinPaint.cmdSelectEditMenuOption);
            $("#win-paint .zoom ul li").click(WinPaint.cmdSelectZoomOption);
            $("#win-paint .font-family").click(WinPaint.cmdChooseFontFamily);
            $("#win-paint .font-family").next().find("a").click(WinPaint.cmdSelectFontFamily);
            $("#win-paint .font-size").click(WinPaint.cmdChooseFontSize);
            $("#win-paint .font-size").next().find("a").click(WinPaint.cmdSelectFontSize);
            $("#win-paint .font-style.bold").click(WinPaint.cmdToggleBold);
            $("#win-paint .font-style.italic").click(WinPaint.cmdToggleItalic);
            $("#win-paint .font-style.underline").click(WinPaint.cmdToggleUnderline);
            $("#win-paint .pencilsize").click(WinPaint.cmdChoosePencilSize);
            $("#win-paint .brushsize").click(WinPaint.cmdChooseBrushSize);
            $("#win-paint .stampsize").click(WinPaint.cmdChooseStamp);
            $("#win-paint .fillcolor").click(WinPaint.cmdChooseFillColor);
            $("#win-paint .strokecolor").click(WinPaint.cmdChooseStrokeColor);
            $("#win-paint .color-predefined").mouseover(function () {
                $(".color-tray", this).show()
            });
            $("#win-paint .color-predefined").mouseleave(function () {
                $(".color-tray", this).hide()
            });
            $("#win-paint .color-predefined li").click(WinPaint.cmdChoosePredefinedColor);
            $("#win-paint .tool-color").click(WinPaint.cmdChooseColor);
            $("#win-paint .tool-eyedropper").click(WinPaint.cmdToolColor);
            $("#win-paint li.selection-type").click(WinPaint.cmdChooseSelectionType);
            $("#win-paint li.cut").click(WinPaint.cmdCut);
            $("#win-paint li.copy").click(WinPaint.cmdCopy);
            $("#win-paint li.paste").click(WinPaint.cmdPaste);
            $("#win-paint li.flip-horizontally").click(WinPaint.cmdFlipHorizontally);
            $("#win-paint li.flip-vertically").click(WinPaint.cmdFlipVertically);
            $("#win-paint li.grow").click(WinPaint.cmdGrow);
            $("#win-paint li.shrink").click(WinPaint.cmdShrink);
            $("#win-paint li.zoom-type").click(WinPaint.cmdChooseZoomType);
            $("#win-paint li.undo").click(WinPaint.cmdUndo);
            $("#win-paint li.redo").click(WinPaint.cmdRedo);
            $("#win-paint .tool-pencil").click(WinPaint.cmdToolPencil);
            $("#win-paint .tool-brush").click(WinPaint.cmdToolBrush);
            $("#win-paint .tool-eraser").click(WinPaint.cmdToolEraser);
            $("#win-paint .tool-fill").click(WinPaint.cmdToolFill);
            $("#win-paint .tool-shape").click(WinPaint.cmdToolShape);
            $("#win-paint .tool-rectangle").click(WinPaint.cmdToolRectangle);
            $("#win-paint .tool-filledrectangle").click(WinPaint.cmdToolFilledRectangle);
            $("#win-paint .tool-ellipse").click(WinPaint.cmdToolEllipse);
            $("#win-paint .tool-filledellipse").click(WinPaint.cmdToolFilledEllipse);
            $("#win-paint .tool-line").click(WinPaint.cmdToolLine);
            $("#win-paint .tool-text").click(WinPaint.cmdToolText);
            $("#win-paint .tool-selection").click(WinPaint.cmdToolSelection);
            $("#win-paint .tool-stamp").click(WinPaint.cmdToolStamp);
            $("#win-paint .tool-center").click(WinPaint.cmdToolCenter);
            $("#win-paint .pencil li").click(WinPaint.cmdChoosePredefinedPencilSize);
            $("#win-paint .pencil .oval li").click(WinPaint.cmdChoosePredefinedBrushSize);
            $("#win-paint .pencil .pen li").click(WinPaint.cmdChoosePredefinedPenSize);
            $("#win-paint .centertool li").click(WinPaint.cmdCenter);
            $("#win-paint .pencil .slider").slider({
                min: 1,
                max: 40,
                value: WinPaint.size,
                slide: function () {
                    WinPaint.size = $("#win-paint .pencil .slider").slider("value");
                    $("#win-paint .pencil .pencilsize span").css("border-radius", Math.floor(WinPaint.size / 2)).css("width", WinPaint.size).css("height", WinPaint.size);
                    $("#win-paint .pencil .showsize div").css("border-radius", Math.floor(WinPaint.size / 2)).css("width", WinPaint.size).css("height", WinPaint.size);
                    $("#win-paint .pencil .size").text(WinPaint.size)
                },
                change: function () {
                    WinPaint.size = $("#win-paint .pencil .slider").slider("value");
                    $("#win-paint .pencil .pencilsize span").css("border-radius", Math.floor(WinPaint.size / 2)).css("width", WinPaint.size).css("height", WinPaint.size);
                    $("#win-paint .pencil .showsize div").css("border-radius", Math.floor(WinPaint.size / 2)).css("width", WinPaint.size).css("height", WinPaint.size);
                    $("#win-paint .pencil .pencilsize").next().addClass("hidden");
                    $("#win-paint .pencil .size").text(WinPaint.size)
                }
            });
            $("#win-paint .pencil .size").text(WinPaint.size);
            WinPaint.transparency = 95;
            $("#win-paint .brush .slider").slider({
                min: 0,
                max: 100,
                value: WinPaint.transparency,
                slide: function () {
                    WinPaint.transparency = $("#win-paint .brush .slider").slider("value");
                    $("#win-paint .brush .size").text(WinPaint.transparency + "%")
                },
                change: function () {
                    WinPaint.transparency = $("#win-paint .brush .slider").slider("value");
                    $("#win-paint .brush .size").text(WinPaint.transparency + "%")
                }
            });
            $("#win-paint .brush .size").text(WinPaint.transparency + "%");
            WinPaint.stampImg = new Image;
            $("#win-paint .stamp .slider").slider({
                min: 8,
                max: 128,
                value: WinPaint.stampSize,
                slide: function () {
                    WinPaint.stampSize = $("#win-paint .stamp .slider").slider("value");
                    $("#win-paint .stamp .size").text(WinPaint.stampSize)
                },
                change: function () {
                    WinPaint.stampSize = $("#win-paint .stamp .slider").slider("value");
                    $("#win-paint .stamp .size").text(WinPaint.stampSize)
                }
            });
            $("#win-paint .stamp .slider").slider("value", WinPaint.stampSize);
            $("#win-paint .tools li.tool-shape").mouseenter(function () {
                $(this).find("div").removeClass("hidden")
            }).mouseleave(function () {
                $(this).find("div").addClass("hidden")
            }).find("div").mouseleave(function () {
                $(this).find("div").addClass("hidden")
            });
            $("#win-paint h1 a.close").click(function () {
                $("#win-paint").addClass("hidden");
                return false
            });
            $(WinPaint.mask).mousedown(WinPaint._mousedown);
            $(WinPaint.mask).mouseup(WinPaint._mouseup);
            $(WinPaint.mask).mouseenter(WinPaint._mouseenter);
            $(WinPaint.mask).mousemove(WinPaint._mousemove);
            $(WinPaint.mask).bind("mouseleave", WinPaint._mouseup);
            $(WinPaint.mask).bind("dragover", WinPaint._dragover);
            $(WinPaint.mask).bind("dragleave", WinPaint._dragleave);
            $(WinPaint.mask).bind("drop", WinPaint._drop);
            $(WinPaint.mask).bind("mousewheel",
                WinPaint._onScroll).bind("DOMMouseScroll", WinPaint._onScroll);
            $("#import-image-file").change(WinPaint._change);
            WinPaint.resetTools();
            WinPaint.adjustWindow();
            window.WinSVGPaint && window.WinSVGPaint.init()
        },
        resetTools: function () {
            WinPaint.updateToggleCenterText();
            WinPaint.text = "";
            WinPaint.fontFamily = "Arial";
            $("#win-paint .font-family span").text(WinPaint.fontFamily);
            WinPaint.fontSize = 30;
            $("#win-paint .font-size span").text(WinPaint.fontSize);
            WinPaint.fontIsBold = false;
            WinPaint.fontIsItalic = false;
            WinPaint.fontIsUnderline =
                false;
            $("#win-paint .font-style").removeClass("selected");
            WinPaint.size = 4;
            $("#win-paint .pencilsize span").css("border-radius", Math.floor(WinPaint.size / 2)).css("width", WinPaint.size).css("height", WinPaint.size);
            $("#win-paint .brushsize span").css("border-radius", Math.floor(WinPaint.size / 2)).css("width", WinPaint.size).css("height", WinPaint.size);
            WinPaint.transparency = 95;
            $("#win-paint .pensize span").css("width", WinPaint.size).css("height", WinPaint.size);
            WinPaint.selectedColor = "stroke";
            WinPaint.strokeColor =
                "#000000";
            $("#win-paint .strokecolor").addClass("selected").find("> div").css("border", "4px solid " + WinPaint.strokeColor);
            WinPaint.fillColor = "#0000ff";
            $("#win-paint .fillcolor").removeClass("selected").find("> div").css("background-color", WinPaint.fillColor);
            WinPaint.cmdToolPencil();
            WinPaint.context.strokeStyle = WinPaint.strokeColor;
            WinPaint.context.fillStyle = WinPaint.fillColor;
            WinPaint.context.lineWidth = WinPaint.size;
            WinPaint.context.lineCap = "round";
            WinPaint.viewportContext.imageSmoothingEnabled =
                false;
            WinPaint.viewportContext.mozImageSmoothingEnabled = false;
            WinPaint.viewportContext.webkitImageSmoothingEnabled = false;
            WinPaint.selectionContext.imageSmoothingEnabled = false;
            WinPaint.selectionContext.mozImageSmoothingEnabled = false;
            WinPaint.selectionContext.webkitImageSmoothingEnabled = false;
            WinPaint.overlayContext.imageSmoothingEnabled = false;
            WinPaint.overlayContext.mozImageSmoothingEnabled = false;
            WinPaint.overlayContext.webkitImageSmoothingEnabled = false;
            WinPaint.zoomTo(1);
            WinPaint.undoClear()
        },
        _editImage: function (b) {
            if (WinPaint.editingWidth >
                WinPaint.canvas.width) {
                WinPaint.canvas.width = WinPaint.editingWidth;
                $(WinPaint.canvas).css("width", WinPaint.editingWidth)
            } else if (WinPaint.editingWidth <= Runtime.stage.getWidth()) {
                WinPaint.editingWidth = Runtime.stage.getWidth();
                WinPaint.canvas.width = WinPaint.editingWidth;
                $(WinPaint.canvas).css("width", WinPaint.canvas.width)
            }
            if (WinPaint.editingHeight > WinPaint.canvas.height) {
                WinPaint.canvas.height = WinPaint.editingHeight;
                $(WinPaint.canvas).css("height", WinPaint.editingHeight)
            } else if (WinPaint.editingHeight <=
                Runtime.stage.getHeight()) {
                WinPaint.editingHeight = Runtime.stage.getHeight();
                WinPaint.canvas.height = WinPaint.editingHeight;
                $(WinPaint.canvas).css("height", WinPaint.canvas.height)
            }
            WinPaint.context.drawImage(b, (WinPaint.canvas.width - b.width) / 2, (WinPaint.canvas.height - b.height) / 2);
            var c = WinPaint.findBounds();
            WinPaint.centerX = WinPaint.centerX === void 0 || WinPaint.centerX === null ? Math.floor(c.left + (c.right - c.left) / 2) : (WinPaint.canvas.width - b.width) / 2 + WinPaint.centerX;
            WinPaint.centerY = WinPaint.centerY === void 0 ||
                WinPaint.centerY === null ? Math.floor(c.top + (c.bottom - c.top) / 2) : (WinPaint.canvas.height - b.height) / 2 + WinPaint.centerY;
            WinPaint.adjustWindow();
            WinPaint.viewportX = -($("#win-paint div.canvas").innerWidth() - WinPaint.editingWidth) / 2;
            WinPaint.viewportY = -($("#win-paint div.canvas").innerHeight() - WinPaint.editingHeight) / 2;
            WinPaint.updateViewport()
        },
        hide: function () {
            $("#win-paint").addClass("hidden");
            window.WinSVGPaint && window.WinSVGPaint.hide()
        },
        edit: function (b, c, d, e, f) {
            if (window.WinSVGPaint && c && c.indexOf(".svg") >
                0) WinSVGPaint.edit(b, c, d, e, f);
            else {
                var g = $("#win-paint ul.stampoptions");
                if (g.children().length == 0) {
                    for (var h = ["b_8ball", "b_alien", "b_apple", "b_balloon", "b_bird", "b_butterfly", "b_butterfly2", "b_candy", "b_clover", "b_cupcake", "b_disco", "b_fish2", "b_flower", "b_flower2", "b_football", "b_heart", "b_invader1", "b_ladybug", "b_octopus", "b_pirateflag2", "b_pirate-flag", "b_planet", "b_puffer", "b_raindrop", "b_robot1", "b_robot2", "b_rocket", "b_trex", "b_turtle", "b_ufo", "b_unicorn", "b_wheel"], j = 0; j < h.length; j++) g.append('<li type="stampoption"><img src="ide/imgs/paint/brushes/' +
                        h[j] + '.png" /></li>');
                    g.find("li").click(WinPaint.cmdChoosePredefinedStamp)
                }
                $("#win-paint").removeClass("hidden");
                g = window.innerWidth;
                h = window.innerHeight;
                g < Runtime.stage.getWidth() && (g = Runtime.stage.getWidth());
                h < Runtime.stage.getHeight() && (h = Runtime.stage.getHeight());
                WinPaint.viewportWidth = g;
                WinPaint.viewportHeight = h;
                if (c) {
                    WinPaint.editingUrl = c;
                    WinPaint.editingWidth = 0;
                    WinPaint.editingHeight = 0;
                    WinPaint.canvas.width = g;
                    WinPaint.canvas.height = h;
                    $(WinPaint.canvas).css("width", g).css("height", h);
                    WinPaint.viewport.width =
                        g;
                    WinPaint.viewport.height = h;
                    $(WinPaint.viewport).css("width", g).css("height", h);
                    WinPaint.overlay.width = g;
                    WinPaint.overlay.height = h;
                    $(WinPaint.overlay).css("width", g).css("height", h);
                    WinPaint.selection.width = g;
                    WinPaint.selection.height = h;
                    $(WinPaint.selection).css("width", g).css("height", h);
                    WinPaint.center.width = g;
                    WinPaint.center.height = h;
                    $(WinPaint.center).css("width", g).css("height", h);
                    WinPaint.buffer.width = g;
                    WinPaint.buffer.height = h;
                    $(WinPaint.buffer).css("width", g).css("height", h);
                    WinPaint.mask.width =
                        g;
                    WinPaint.mask.height = h;
                    $(WinPaint.mask).css("width", g).css("height", h);
                    var k = new Image;
                    k.onload = function () {
                        WinPaint.editingWidth = k.width;
                        WinPaint.editingHeight = k.height;
                        WinPaint.resetTools();
                        WinPaint._editImage(k);
                        WinPaint.addUndo()
                    };
                    k.src = c
                } else {
                    WinPaint.editingWidth = Runtime.stage.getWidth();
                    WinPaint.editingHeight = Runtime.stage.getHeight();
                    WinPaint.canvas.width = WinPaint.editingWidth;
                    WinPaint.canvas.height = WinPaint.editingHeight;
                    $(WinPaint.canvas).css("width", WinPaint.editingWidth).css("height",
                        WinPaint.editingHeight);
                    WinPaint.viewport.width = g;
                    WinPaint.viewport.height = h;
                    $(WinPaint.viewport).css("width", g).css("height", h);
                    WinPaint.overlay.width = g;
                    WinPaint.overlay.height = h;
                    $(WinPaint.overlay).css("width", g).css("height", h);
                    WinPaint.selection.width = g;
                    WinPaint.selection.height = h;
                    $(WinPaint.selection).css("width", g).css("height", h);
                    WinPaint.center.width = g;
                    WinPaint.center.height = h;
                    $(WinPaint.center).css("width", g).css("height", h);
                    WinPaint.buffer.width = g;
                    WinPaint.buffer.height = h;
                    $(WinPaint.buffer).css("width",
                        g).css("height", h);
                    WinPaint.mask.width = g;
                    WinPaint.mask.height = h;
                    $(WinPaint.mask).css("width", g).css("height", h);
                    WinPaint.resetTools();
                    WinPaint.addUndo()
                }
                WinPaint.doneCallback = f;
                b || (b = "Paint");
                WinPaint.clearCanvas(false);
                WinPaint.centerX = d;
                WinPaint.centerY = e;
                WinPaint.centerChanged = false;
                $("#win-paint .save").unbind().click(function () {
                    (WinPaint.redoIndex > 1 || WinPaint.centerChanged) && WinPaint.save();
                    $("#win-paint").addClass("hidden");
                    return false
                });
                $("#win-paint .exit").unbind().click(function () {
                    if (WinPaint.redoIndex >
                        1 || WinPaint.centerChanged) {
                        IDE.confirmDialog("图像已经被修改. 你想放弃你的改变吗?", function () {
                            $("#win-paint").addClass("hidden")
                        }, "放弃改变", "取消", function () { });
                        $("#confirm").modal()
                    } else $("#win-paint").addClass("hidden");
                    return false
                });
                WinPaint.adjustWindow();
                WinPaint.viewportX = -($("#win-paint div.canvas").innerWidth() - WinPaint.editingWidth) / 2;
                WinPaint.viewportY = -($("#win-paint div.canvas").innerHeight() - WinPaint.editingHeight) / 2;
                WinPaint.updateViewport();
                return false
            }
        },
        save: function () {
            WinPaint._commit();
            var b = WinPaint.findBounds();
            if (WinPaint.centerX === void 0 || WinPaint.centerX === null || WinPaint.centerY === void 0 || WinPaint.centerY === null) {
                WinPaint.centerX = Math.floor(b.left + (b.right - b.left) / 2);
                WinPaint.centerY = Math.floor(b.top + (b.bottom - b.top) / 2)
            }
            if (b.left > b.right) {
                b.left = 0;
                b.right = 0;
                WinPaint.centerX = 0
            } else WinPaint.centerX = Math.floor(WinPaint.centerX - b.left);
            if (b.top > b.bottom) {
                b.top = 0;
                b.bottom = 0;
                WinPaint.centerY = 0
            } else WinPaint.centerY = Math.floor(WinPaint.centerY -
                b.top);
            var c = document.createElement("canvas"),
                d = c.getContext("2d");
            c.width = b.right - b.left + 1;
            c.height = b.bottom - b.top + 1;
            b = WinPaint.context.getImageData(b.left, b.top, b.right - b.left + 1, b.bottom - b.top + 1);
            d.putImageData(b, 0, 0);
            if (WinPaint.dirty) {
                WinPaint.dirty = false;
                c = c.toDataURL();
                c = "d=" + encodeURIComponent(c) + "&t=drawing";
                WinPaint.mediaId && (c = c + ("&i=" + encodeURIComponent(WinPaint.mediaId)));
                $.ajax({
                    url: "api/medialibsave.aspx",
                    type: "POST",
                    data: c,
                    success: function (b) {
                        b = JSON.parse(b);
                        if (b.result) WinPaint.mediaId =
                            b.id;
                        WinPaint.doneCallback && WinPaint.doneCallback("assets/user/" + WinPaint.mediaId + ".png", WinPaint.centerX, WinPaint.centerY)
                    }
                })
            } else WinPaint.editingUrl && WinPaint.doneCallback && WinPaint.doneCallback(WinPaint.editingUrl, WinPaint.centerX, WinPaint.centerY);
            $("#win-paint").addClass("hidden");
            return false
        },
        adjustWindow: function () { },
        _mousedown: function (b) {
            $("#win-paint .menu").addClass("hidden");
            ColorPicker.hide();
            WinPaint.penDown = true;
            var c = b.pageX - $(WinPaint.viewport).offset().left,
                b = b.pageY - $(WinPaint.viewport).offset().top;
            WinPaint.context.save();
            WinPaint.context.translate(WinPaint.viewportX, WinPaint.viewportY);
            WinPaint.context.scale(1 / WinPaint.zoomLevel, 1 / WinPaint.zoomLevel);
            if (WinPaint.tool == "pencil" && WinPaint.toolType == "oval") {
                WinPaint.dirty = true;
                for (var d = 0; d < WinPaint.brushBristles.length; d++) {
                    WinPaint.brushBristles[d].ax = 0;
                    WinPaint.brushBristles[d].ay = 0;
                    WinPaint.brushBristles[d].dx = c;
                    WinPaint.brushBristles[d].dy = b
                }
                WinPaint.brushInterval = window.setInterval(WinPaint._updateBrush, WinPaint.brushRefreshRate)
            } else if (WinPaint.tool ==
                "pencil") {
                WinPaint.dirty = true;
                WinPaint.context.lineCap = "round";
                WinPaint.context.lineWidth = WinPaint.size * WinPaint.zoomLevel;
                WinPaint.context.strokeStyle = WinPaint.strokeColor;
                WinPaint.context.beginPath();
                WinPaint.context.moveTo(c, b);
                WinPaint.context.lineTo(c + 1, b);
                WinPaint.context.stroke()
            } else if (WinPaint.tool == "brush") {
                WinPaint.dirty = true;
                WinPaint.context.lineCap = "round";
                WinPaint.context.lineWidth = WinPaint.size * WinPaint.zoomLevel;
                d = parseColor(WinPaint.strokeColor);
                WinPaint.context.strokeStyle = "rgba(" +
                    d.r + "," + d.g + "," + d.b + "," + (1 - WinPaint.transparency / 100) + ")";
                WinPaint.context.beginPath();
                WinPaint.context.moveTo(c, b);
                WinPaint.context.lineTo(c + 1, b);
                WinPaint.context.stroke()
            } else if (WinPaint.tool == "stamp") {
                WinPaint.dirty = true;
                var d = WinPaint.stampImg.width * WinPaint.stampSize / WinPaint.stampImg.width * WinPaint.zoomLevel,
                    e = WinPaint.stampImg.height * WinPaint.stampSize / WinPaint.stampImg.width * WinPaint.zoomLevel;
                WinPaint.context.drawImage(WinPaint.stampImg, c - d / 2, b - e / 2, d, e)
            } else if (WinPaint.tool == "pen") {
                WinPaint.dirty =
                    true;
                WinPaint.context.restore();
                WinPaint.context.fillStyle = WinPaint.strokeColor;
                d = b / WinPaint.zoomLevel + WinPaint.viewportY;
                WinPaint.context.fillRect(Math.round(c / WinPaint.zoomLevel + WinPaint.viewportX - WinPaint.size / 2), Math.round(d - WinPaint.size / 2), WinPaint.size, WinPaint.size)
            } else if (WinPaint.tool == "colorpicker") {
                $("#win-paint .tool-eyedropper").removeClass("selected");
                WinPaint.tool = WinPaint.lastTool;
                c = c / WinPaint.zoomLevel + WinPaint.viewportX;
                b = b / WinPaint.zoomLevel + WinPaint.viewportY;
                d = WinPaint.context.getImageData(c,
                    b, 1, 1);
                d = "rgb(" + d.data[0] + "," + d.data[1] + "," + d.data[2] + ")";
                if (WinPaint.selectedColor == "fill") {
                    $("#win-paint .fillcolor > div").css("background-color", d);
                    WinPaint.fillColor = d
                } else if (WinPaint.selectedColor == "stroke") {
                    $("#win-paint .strokecolor > div").css("border", "4px solid " + d);
                    WinPaint.strokeColor = d
                }
            } else if (WinPaint.tool == "text") {
                WinPaint.dirty = true;
                WinPaint.context.restore();
                WinPaint._commit();
                WinPaint.text = "";
                WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                WinPaint.overlayContext.strokeStyle = WinPaint.strokeColor;
                WinPaint.overlayContext.lineWidth = 2;
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.moveTo(c, b);
                WinPaint.overlayContext.lineTo(c, b - WinPaint.fontSize * WinPaint.zoomLevel);
                WinPaint.overlayContext.closePath();
                WinPaint.overlayContext.stroke()
            } else if (WinPaint.tool == "move") {
                $(WinPaint.selection).addClass("hidden");
                switch (WinPaint.getSelectionLocation(c, b)) {
                    case "rotation_lever":
                        WinPaint.rotationAngle = 0;
                        WinPaint.tool = "rotate";
                        break;
                    case "nw_corner":
                        WinPaint.tool =
                            "nw-resize";
                        break;
                    case "ne_corner":
                        WinPaint.tool = "ne-resize";
                        break;
                    case "se_corner":
                        WinPaint.tool = "se-resize";
                        break;
                    case "sw_corner":
                        WinPaint.tool = "sw-resize";
                        break;
                    case "n_edge":
                        WinPaint.tool = "n-resize";
                        break;
                    case "e_edge":
                        WinPaint.tool = "e-resize";
                        break;
                    case "w_edge":
                        WinPaint.tool = "w-resize";
                        break;
                    case "s_edge":
                        WinPaint.tool = "s-resize";
                        break;
                    case "outside":
                        WinPaint.context.restore();
                        WinPaint._commit()
                }
            } else if (WinPaint.tool == "selection" || WinPaint.tool == "cut" || WinPaint.tool == "copy" || WinPaint.tool ==
                "paste" || WinPaint.tool == "stamp-selection") {
                if (WinPaint.toolType == "lasso") {
                    WinPaint.dirty = true;
                    WinPaint.overlayContext.lineCap = "round";
                    WinPaint.overlayContext.lineWidth = 1;
                    WinPaint.overlayContext.strokeStyle = "#333";
                    WinPaint.overlayContext.beginPath();
                    WinPaint.overlayContext.moveTo(c, b);
                    WinPaint.overlayContext.lineTo(c + 1, b);
                    WinPaint.overlayContext.stroke();
                    WinPaint.lassoPathPoints = [{
                        x: c,
                        y: b
                    }]
                }
            } else if (WinPaint.tool == "zoom" && WinPaint.toolType == "zoom-in") {
                e = WinPaint.viewportY + (b - WinPaint.viewportHeight /
                    2 / 2) / WinPaint.zoomLevel;
                d = Math.max(WinPaint.viewportX + (c - WinPaint.viewportWidth / 2 / 2) / WinPaint.zoomLevel, 0);
                e = Math.max(e, 0);
                WinPaint.zoomIn(d, e);
                if (WinPaint.zoomLevel >= WinPaint.maxZoomLevel) {
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.toolType = "zoom-out";
                    $("#win-paint .zoom ul li.zoom-type").removeClass("selected");
                    $("#win-paint .zoom ul li.zoom-type." + WinPaint.toolType).addClass("selected")
                }
            } else if (WinPaint.tool == "zoom" && WinPaint.toolType == "zoom-out") {
                WinPaint.zoomOut();
                if (WinPaint.zoomLevel <= WinPaint.minZoomLevel) {
                    WinPaint.toolType = "zoom-in";
                    $("#win-paint .zoom ul li.zoom-type").removeClass("selected");
                    $("#win-paint .zoom ul li.zoom-type." + WinPaint.toolType).addClass("selected")
                }
            } else if (WinPaint.tool == "center") {
                WinPaint.centerX = Math.round(c / WinPaint.zoomLevel + WinPaint.viewportX);
                WinPaint.centerY = Math.round(b / WinPaint.zoomLevel + WinPaint.viewportY)
            }
            WinPaint.lastX = c;
            WinPaint.lastY = b;
            WinPaint.context.restore();
            WinPaint.updateViewport()
        },
        _mouseup: function (b) {
            if (!WinPaint.penDown) return false;
            WinPaint.penDown = false;
            var c = b.pageX - $(WinPaint.viewport).offset().left,
                b = b.pageY - $(WinPaint.viewport).offset().top;
            WinPaint.checkDiscardableMove(c, b);
            WinPaint.context.save();
            WinPaint.context.translate(WinPaint.viewportX, WinPaint.viewportY);
            WinPaint.context.scale(1 / WinPaint.zoomLevel, 1 / WinPaint.zoomLevel);
            if (WinPaint.tool == "pencil" && WinPaint.toolType == "oval") {
                window.clearInterval(WinPaint.brushInterval);
                WinPaint.addUndo()
            } else if (WinPaint.tool == "pencil") WinPaint.addUndo();
            else if (WinPaint.tool == "eraser") WinPaint.addUndo();
            else if (WinPaint.tool == "brush") WinPaint.addUndo();
            else if (WinPaint.tool == "pen") WinPaint.addUndo();
            else if (WinPaint.tool == "stamp") WinPaint.addUndo();
            else if (WinPaint.tool == "line" && !WinPaint.isDiscardableMove) {
                WinPaint.dirty = true;
                var d = WinPaint.size * WinPaint.zoomLevel;
                WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                WinPaint.overlayContext.lineCap = "round";
                WinPaint.overlayContext.lineWidth = d;
                WinPaint.overlayContext.strokeStyle = WinPaint.strokeColor;
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.moveTo(WinPaint.lastX, WinPaint.lastY);
                WinPaint.overlayContext.lineTo(c, b);
                WinPaint.overlayContext.stroke();
                var e = Math.min(WinPaint.lastX, c) - d,
                    f = Math.min(WinPaint.lastY, b) - d,
                    c = Math.max(WinPaint.lastX, c) + d,
                    b = Math.max(WinPaint.lastY, b) + d;
                WinPaint.selectionX = e;
                WinPaint.selectionY = f;
                WinPaint.selectionWidth = c - e + 1;
                WinPaint.selectionHeight = b - f + 1;
                WinPaint.selectionContext.drawImage(WinPaint.overlay, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight,
                    0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight);
                WinPaint.drawSelectionOutline();
                WinPaint.tool = "move";
                WinPaint.toolType = "move-line"
            } else if ((WinPaint.tool == "rectangle" || WinPaint.tool == "filledrectangle") && !WinPaint.isDiscardableMove) {
                WinPaint.dirty = true;
                d = WinPaint.size * WinPaint.zoomLevel;
                WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                WinPaint.overlayContext.lineCap = "round";
                WinPaint.overlayContext.lineWidth = d;
                WinPaint.overlayContext.strokeStyle = WinPaint.strokeColor;
                WinPaint.overlayContext.fillStyle = WinPaint.fillColor;
                WinPaint.overlayContext.beginPath();
                var e = Math.min(WinPaint.lastX, c),
                    f = Math.min(WinPaint.lastY, b),
                    g = Math.abs(WinPaint.lastX - c),
                    h = Math.abs(WinPaint.lastY - b);
                WinPaint.overlayContext.rect(e, f, g, h);
                WinPaint.tool == "filledrectangle" && WinPaint.fillColor != "none" && WinPaint.overlayContext.fill();
                WinPaint.overlayContext.stroke();
                b = e - d;
                c = f - d;
                WinPaint.selectionX = b;
                WinPaint.selectionY = c;
                WinPaint.selectionWidth = e + g + d - b + 1;
                WinPaint.selectionHeight = f + h + d - c + 1;
                WinPaint.selectionContext.drawImage(WinPaint.overlay,
                    WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight);
                WinPaint.drawSelectionOutline();
                WinPaint.toolType = WinPaint.tool == "filledrectangle" ? "move-filledrectangle" : "move-rectangle";
                WinPaint.tool = "move"
            } else if ((WinPaint.tool == "ellipse" || WinPaint.tool == "filledellipse") && !WinPaint.isDiscardableMove) {
                WinPaint.dirty = true;
                d = WinPaint.size * WinPaint.zoomLevel;
                WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                WinPaint.overlayContext.lineCap = "round";
                WinPaint.overlayContext.lineWidth = d;
                WinPaint.overlayContext.strokeStyle = WinPaint.strokeColor;
                WinPaint.overlayContext.fillStyle = WinPaint.fillColor;
                WinPaint.overlayContext.beginPath();
                var e = Math.min(WinPaint.lastX, c),
                    f = Math.min(WinPaint.lastY, b),
                    g = Math.abs(WinPaint.lastX - c),
                    h = Math.abs(WinPaint.lastY - b),
                    j = Math.max(g, h),
                    k = g / j,
                    l = h / j;
                WinPaint.overlayContext.save();
                WinPaint.overlayContext.translate((WinPaint.lastX + c) / 2, (WinPaint.lastY + b) / 2);
                WinPaint.overlayContext.scale(k,
                    l);
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.arc(0, 0, j / 2, 0, Math.PI * 2, false);
                WinPaint.overlayContext.closePath();
                WinPaint.overlayContext.restore();
                WinPaint.tool == "filledellipse" && WinPaint.fillColor != "none" && WinPaint.overlayContext.fill();
                WinPaint.overlayContext.stroke();
                b = e - d;
                c = f - d;
                WinPaint.selectionX = b;
                WinPaint.selectionY = c;
                WinPaint.selectionWidth = e + g + d - b + 1;
                WinPaint.selectionHeight = f + h + d - c + 1;
                WinPaint.selectionContext.drawImage(WinPaint.overlay, WinPaint.selectionX, WinPaint.selectionY,
                    WinPaint.selectionWidth, WinPaint.selectionHeight, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight);
                WinPaint.drawSelectionOutline();
                WinPaint.toolType = WinPaint.tool == "filledellipse" ? "move-filledellipse" : "move-ellipse";
                WinPaint.tool = "move";
                WinPaint.addUndo()
            } else if (WinPaint.tool != "move")
                if ((WinPaint.tool == "selection" || WinPaint.tool == "cut" || WinPaint.tool == "copy" || WinPaint.tool == "paste" || WinPaint.tool == "stamp-selection") && !WinPaint.isDiscardableMove) {
                    WinPaint.dirty = true;
                    c = parseInt(c);
                    b = parseInt(b);
                    WinPaint.lastX = parseInt(WinPaint.lastX);
                    WinPaint.lastY = parseInt(WinPaint.lastY);
                    var e = Math.min(WinPaint.lastX, c),
                        f = Math.min(WinPaint.lastY, b),
                        d = Math.abs(WinPaint.lastX - c) + 1,
                        g = Math.abs(WinPaint.lastY - b) + 1,
                        m = Math.floor(e / WinPaint.zoomLevel + WinPaint.viewportX),
                        n = Math.floor(f / WinPaint.zoomLevel + WinPaint.viewportY),
                        q = Math.ceil(d / WinPaint.zoomLevel),
                        p = Math.ceil(g / WinPaint.zoomLevel),
                        e = (m - WinPaint.viewportX) * WinPaint.zoomLevel,
                        f = (n - WinPaint.viewportY) * WinPaint.zoomLevel,
                        d = q * WinPaint.zoomLevel,
                        g = p * WinPaint.zoomLevel;
                    WinPaint.selectionX = e;
                    WinPaint.selectionY = f;
                    WinPaint.selectionWidth = d;
                    WinPaint.selectionHeight = g;
                    WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    if (WinPaint.toolType != "rectangle")
                        if (WinPaint.toolType == "ellipse") {
                            j = Math.max(WinPaint.selectionWidth, WinPaint.selectionHeight);
                            k = WinPaint.selectionWidth / j;
                            l = WinPaint.selectionHeight / j;
                            WinPaint.selectionContext.save();
                            WinPaint.selectionContext.translate((WinPaint.lastX +
                                c) / 2 - WinPaint.selectionX, (WinPaint.lastY + b) / 2 - WinPaint.selectionY);
                            WinPaint.selectionContext.scale(k, l);
                            WinPaint.selectionContext.beginPath();
                            WinPaint.selectionContext.arc(0, 0, j / 2, 0, Math.PI * 2, false);
                            WinPaint.selectionContext.restore();
                            WinPaint.selectionContext.save();
                            WinPaint.selectionContext.clip();
                            WinPaint.overlayContext.save();
                            WinPaint.overlayContext.translate((WinPaint.lastX + c) / 2, (WinPaint.lastY + b) / 2);
                            WinPaint.overlayContext.scale(k, l);
                            WinPaint.overlayContext.beginPath();
                            WinPaint.overlayContext.arc(0,
                                0, j / 2, 0, Math.PI * 2, false);
                            WinPaint.overlayContext.stroke();
                            WinPaint.overlayContext.restore()
                        } else if (WinPaint.toolType == "lasso") {
                            WinPaint.lassoPathPoints.push({
                                x: c,
                                y: b
                            });
                            f = e = c;
                            k = j = b;
                            WinPaint.overlayContext.beginPath();
                            for (h in WinPaint.lassoPathPoints) {
                                l = WinPaint.lassoPathPoints[h];
                                WinPaint.overlayContext.lineTo(l.x, l.y);
                                e = Math.min(e, l.x);
                                f = Math.max(f, l.x);
                                j = Math.min(j, l.y);
                                k = Math.max(k, l.y)
                            }
                            WinPaint.overlayContext.closePath();
                            WinPaint.overlayContext.stroke();
                            d = Math.abs(f - e) + 1;
                            g = Math.abs(k - j) + 1;
                            WinPaint.selectionX =
                                e;
                            WinPaint.selectionY = j;
                            WinPaint.selectionWidth = Math.abs(f - e) + 1;
                            WinPaint.selectionHeight = Math.abs(k - j) + 1;
                            WinPaint.selectionContext.save();
                            WinPaint.selectionContext.translate(-WinPaint.selectionX, -WinPaint.selectionY);
                            WinPaint.selectionContext.beginPath();
                            for (h in WinPaint.lassoPathPoints) {
                                l = WinPaint.lassoPathPoints[h];
                                WinPaint.selectionContext.lineTo(l.x, l.y)
                            }
                            WinPaint.selectionContext.restore();
                            WinPaint.selectionContext.save();
                            WinPaint.selectionContext.clip()
                        }
                    WinPaint.selectionContext.drawImage(WinPaint.canvas,
                        m, n, q, p, 0, 0, d, g);
                    WinPaint.selectionContext.restore();
                    WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.drawSelectionOutline();
                    if (WinPaint.tool == "stamp-selection") WinPaint.tool = "stamp";
                    else {
                        if (WinPaint.toolType == "rectangle") WinPaint.context.save();
                        else if (WinPaint.toolType == "ellipse") {
                            g = Math.abs(WinPaint.lastX - c) + 1;
                            h = Math.abs(WinPaint.lastY - b) + 1;
                            j = Math.max(g, h);
                            k = g / j;
                            l = h / j;
                            WinPaint.context.save();
                            WinPaint.context.translate((WinPaint.lastX + c) / 2, (WinPaint.lastY + b) / 2);
                            WinPaint.context.scale(k, l);
                            WinPaint.context.beginPath();
                            WinPaint.context.arc(0, 0, j / 2, 0, Math.PI * 2, false);
                            WinPaint.context.restore();
                            WinPaint.context.save();
                            WinPaint.context.clip()
                        } else if (WinPaint.toolType == "lasso") {
                            WinPaint.context.beginPath();
                            for (h in WinPaint.lassoPathPoints) {
                                l = WinPaint.lassoPathPoints[h];
                                WinPaint.context.lineTo(l.x, l.y)
                            }
                            WinPaint.context.save();
                            WinPaint.context.clip()
                        }
                        WinPaint.context.clearRect(WinPaint.selectionX,
                            WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                        WinPaint.context.restore();
                        WinPaint.tool = "move"
                    }
                } else if (WinPaint.tool == "fill") {
                    WinPaint.dirty = true;
                    c = Math.round(c / WinPaint.zoomLevel + WinPaint.viewportX);
                    b = Math.round(b / WinPaint.zoomLevel + WinPaint.viewportY);
                    ff_floodFill(c, b, WinPaint.context, WinPaint.fillColor, 10);
                    WinPaint.addUndo()
                } else if (WinPaint.tool == "rotate") {
                    WinPaint.dirty = true;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.save();
                    WinPaint.overlayContext.translate(WinPaint.selectionX + WinPaint.selectionWidth / 2, WinPaint.selectionY + WinPaint.selectionHeight / 2);
                    WinPaint.overlayContext.rotate(WinPaint.rotationAngle);
                    WinPaint.overlayContext.translate(-(WinPaint.selectionX + WinPaint.selectionWidth / 2), -(WinPaint.selectionY + WinPaint.selectionHeight / 2));
                    WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.overlayContext.restore();
                    b = WinPaint.getRotationBoundingBox(WinPaint.overlayContext, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight, WinPaint.rotationAngle);
                    WinPaint.selectionX = Math.max(b.left, 0);
                    WinPaint.selectionY = Math.max(b.top, 0);
                    WinPaint.selectionWidth = b.right - b.left + 1;
                    WinPaint.selectionHeight = b.bottom - b.top + 1;
                    WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
                    WinPaint.selectionContext.drawImage(WinPaint.overlay,
                        Math.round(WinPaint.selectionX), Math.round(WinPaint.selectionY), WinPaint.selectionWidth, WinPaint.selectionHeight, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.drawSelectionOutline();
                    WinPaint.tool = "move"
                } else if (WinPaint.tool == "center") {
                    WinPaint.centerStyle = "#222";
                    WinPaint.centerChanged = true
                } else if (WinPaint.tool == "nw-resize") {
                    d = WinPaint.lastX - c;
                    g = WinPaint.lastY - b;
                    WinPaint.proportionalResize && (d = g = Math.max(d, g));
                    b = WinPaint.selectionWidth;
                    c = WinPaint.selectionHeight;
                    WinPaint.selectionX =
                        WinPaint.selectionX - d;
                    WinPaint.selectionY = WinPaint.selectionY - g;
                    WinPaint.selectionWidth = WinPaint.selectionWidth + d;
                    WinPaint.selectionHeight = WinPaint.selectionHeight + g;
                    WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height);
                    WinPaint.bufferContext.drawImage(WinPaint.selection, 0, 0);
                    WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
                    WinPaint.selectionContext.drawImage(WinPaint.buffer, 0, 0, b, c, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.tool = "move"
                } else if (WinPaint.tool == "ne-resize") {
                    d = c - WinPaint.lastX;
                    g = WinPaint.lastY - b;
                    WinPaint.proportionalResize && (d = g = Math.max(d, g));
                    b = WinPaint.selectionWidth;
                    c = WinPaint.selectionHeight;
                    WinPaint.selectionY = WinPaint.selectionY - g;
                    WinPaint.selectionWidth = WinPaint.selectionWidth + d;
                    WinPaint.selectionHeight = WinPaint.selectionHeight + g;
                    WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height);
                    WinPaint.bufferContext.drawImage(WinPaint.selection, 0, 0);
                    WinPaint.selectionContext.clearRect(0,
                        0, WinPaint.selection.width, WinPaint.selection.height);
                    WinPaint.selectionContext.drawImage(WinPaint.buffer, 0, 0, b, c, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.tool = "move"
                } else if (WinPaint.tool == "se-resize") {
                    d = c - WinPaint.lastX;
                    g = b - WinPaint.lastY;
                    WinPaint.proportionalResize && (d = g = Math.max(d, g));
                    b = WinPaint.selectionWidth;
                    c = WinPaint.selectionHeight;
                    WinPaint.selectionWidth = WinPaint.selectionWidth + d;
                    WinPaint.selectionHeight = WinPaint.selectionHeight + g;
                    WinPaint.bufferContext.clearRect(0,
                        0, WinPaint.buffer.width, WinPaint.buffer.height);
                    WinPaint.bufferContext.drawImage(WinPaint.selection, 0, 0);
                    WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
                    WinPaint.selectionContext.drawImage(WinPaint.buffer, 0, 0, b, c, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.tool = "move"
                } else if (WinPaint.tool == "sw-resize") {
                    d = WinPaint.lastX - c;
                    g = b - WinPaint.lastY;
                    WinPaint.proportionalResize && (d = g = Math.max(d, g));
                    b = WinPaint.selectionWidth;
                    c = WinPaint.selectionHeight;
                    WinPaint.selectionX = WinPaint.selectionX - d;
                    WinPaint.selectionWidth = WinPaint.selectionWidth + d;
                    WinPaint.selectionHeight = WinPaint.selectionHeight + g;
                    WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height);
                    WinPaint.bufferContext.drawImage(WinPaint.selection, 0, 0);
                    WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
                    WinPaint.selectionContext.drawImage(WinPaint.buffer, 0, 0, b, c, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.tool =
                        "move"
                } else if (WinPaint.tool == "n-resize") {
                    g = WinPaint.lastY - b;
                    c = WinPaint.selectionHeight;
                    WinPaint.selectionY = WinPaint.selectionY - g;
                    WinPaint.selectionHeight = WinPaint.selectionHeight + g;
                    WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height);
                    WinPaint.bufferContext.drawImage(WinPaint.selection, 0, 0);
                    WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
                    WinPaint.selectionContext.drawImage(WinPaint.buffer, 0, 0, WinPaint.selectionWidth, c, 0, 0, WinPaint.selectionWidth,
                        WinPaint.selectionHeight);
                    WinPaint.tool = "move"
                } else if (WinPaint.tool == "e-resize") {
                    d = c - WinPaint.lastX;
                    b = WinPaint.selectionWidth;
                    WinPaint.selectionWidth = WinPaint.selectionWidth + d;
                    WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height);
                    WinPaint.bufferContext.drawImage(WinPaint.selection, 0, 0);
                    WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
                    WinPaint.selectionContext.drawImage(WinPaint.buffer, 0, 0, b, WinPaint.selectionHeight, 0, 0, WinPaint.selectionWidth,
                        WinPaint.selectionHeight);
                    WinPaint.tool = "move"
                } else if (WinPaint.tool == "s-resize") {
                    g = b - WinPaint.lastY;
                    c = WinPaint.selectionHeight;
                    WinPaint.selectionHeight = WinPaint.selectionHeight + g;
                    WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height);
                    WinPaint.bufferContext.drawImage(WinPaint.selection, 0, 0);
                    WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
                    WinPaint.selectionContext.drawImage(WinPaint.buffer, 0, 0, WinPaint.selectionWidth, c, 0, 0, WinPaint.selectionWidth,
                        WinPaint.selectionHeight);
                    WinPaint.tool = "move"
                } else if (WinPaint.tool == "w-resize") {
                    d = WinPaint.lastX - c;
                    b = WinPaint.selectionWidth;
                    WinPaint.selectionX = WinPaint.selectionX - d;
                    WinPaint.selectionWidth = WinPaint.selectionWidth + d;
                    WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height);
                    WinPaint.bufferContext.drawImage(WinPaint.selection, 0, 0);
                    WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
                    WinPaint.selectionContext.drawImage(WinPaint.buffer,
                        0, 0, b, WinPaint.selectionHeight, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.tool = "move"
                }
            WinPaint.context.restore();
            WinPaint.updateViewport()
        },
        _mouseenter: function (b) {
            if (WinPaint.penDown && (WinPaint.tool == "pencil" || WinPaint.tool == "brush")) {
                WinPaint.lastX = b.pageX - $(WinPaint.canvas).offset().left;
                WinPaint.lastY = b.pageY - $(WinPaint.canvas).offset().top
            }
        },
        _mousemove: function (b) {
            var c = b.pageX - $(WinPaint.viewport).offset().left,
                d = b.pageY - $(WinPaint.viewport).offset().top;
            WinPaint.checkDiscardableMove(c,
                d);
            if (WinPaint.penDown) {
                WinPaint.context.save();
                WinPaint.context.translate(WinPaint.viewportX, WinPaint.viewportY);
                WinPaint.context.scale(1 / WinPaint.zoomLevel, 1 / WinPaint.zoomLevel);
                if (WinPaint.tool == "pencil" && WinPaint.toolType == "oval") {
                    WinPaint.lastX = c;
                    WinPaint.lastY = d
                } else if (WinPaint.tool == "pencil") {
                    WinPaint.dirty = true;
                    WinPaint.context.lineCap = "round";
                    WinPaint.context.lineWidth = WinPaint.size * WinPaint.zoomLevel;
                    WinPaint.context.strokeStyle = WinPaint.strokeColor;
                    WinPaint.context.beginPath();
                    WinPaint.context.moveTo(WinPaint.lastX,
                        WinPaint.lastY);
                    WinPaint.context.lineTo(c, d);
                    WinPaint.lastX = c;
                    WinPaint.lastY = d;
                    WinPaint.context.stroke();
                    WinPaint.context.restore()
                } else if (WinPaint.tool == "brush") {
                    WinPaint.dirty = true;
                    WinPaint.context.lineCap = "round";
                    WinPaint.context.lineWidth = WinPaint.size * WinPaint.zoomLevel;
                    var e = parseColor(WinPaint.strokeColor);
                    WinPaint.context.strokeStyle = "rgba(" + e.r + "," + e.g + "," + e.b + "," + (1 - WinPaint.transparency / 100) + ")";
                    WinPaint.context.beginPath();
                    WinPaint.context.moveTo(WinPaint.lastX, WinPaint.lastY);
                    WinPaint.context.lineTo(c,
                        d);
                    WinPaint.lastX = c;
                    WinPaint.lastY = d;
                    WinPaint.context.stroke();
                    WinPaint.context.restore()
                } else if (WinPaint.toolType == "wetbrush") {
                    WinPaint.dirty = true;
                    var e = WinPaint.stampImg.width * WinPaint.stampSize / WinPaint.stampImg.width * WinPaint.zoomLevel,
                        f = WinPaint.stampImg.height * WinPaint.stampSize / WinPaint.stampImg.width * WinPaint.zoomLevel;
                    WinPaint.context.drawImage(WinPaint.stampImg, c - e / 2, d - f / 2, e, f);
                    WinPaint.lastX = c;
                    WinPaint.lastY = d
                } else if (WinPaint.tool == "stamp") {
                    WinPaint.dirty = true;
                    e = WinPaint.stampImg.width *
                        WinPaint.stampSize / WinPaint.stampImg.width * WinPaint.zoomLevel;
                    f = WinPaint.stampImg.height * WinPaint.stampSize / WinPaint.stampImg.width * WinPaint.zoomLevel;
                    WinPaint.context.drawImage(WinPaint.stampImg, c - e / 2, d - f / 2, e, f);
                    WinPaint.lastX = c;
                    WinPaint.lastY = d
                } else if (WinPaint.tool == "pen") {
                    WinPaint.dirty = true;
                    WinPaint.context.restore();
                    WinPaint.context.fillStyle = WinPaint.strokeColor;
                    d = d / WinPaint.zoomLevel + WinPaint.viewportY;
                    WinPaint.context.fillRect(Math.round(c / WinPaint.zoomLevel + WinPaint.viewportX - WinPaint.size /
                        2), Math.round(d - WinPaint.size / 2), WinPaint.size, WinPaint.size)
                } else if (WinPaint.tool == "eraser") {
                    WinPaint.dirty = true;
                    e = WinPaint.context.globalCompositeOperation;
                    WinPaint.context.globalCompositeOperation = "destination-out";
                    WinPaint.context.strokeStyle = "rgba(255, 255, 255, 1.0)";
                    WinPaint.context.lineCap = "round";
                    WinPaint.context.lineWidth = WinPaint.size * WinPaint.zoomLevel;
                    WinPaint.context.beginPath();
                    WinPaint.context.moveTo(WinPaint.lastX, WinPaint.lastY);
                    WinPaint.context.lineTo(c, d);
                    WinPaint.lastX = c;
                    WinPaint.lastY =
                        d;
                    WinPaint.context.stroke();
                    WinPaint.context.globalCompositeOperation = e
                } else if (WinPaint.tool == "line" && !WinPaint.isDiscardableMove) {
                    WinPaint.dirty = true;
                    WinPaint.overlayContext.lineCap = "round";
                    WinPaint.overlayContext.lineWidth = WinPaint.size * WinPaint.zoomLevel;
                    WinPaint.overlayContext.strokeStyle = WinPaint.strokeColor;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.beginPath();
                    WinPaint.overlayContext.moveTo(WinPaint.lastX, WinPaint.lastY);
                    WinPaint.overlayContext.lineTo(c,
                        d);
                    WinPaint.overlayContext.stroke()
                } else if ((WinPaint.tool == "rectangle" || WinPaint.tool == "filledrectangle") && !WinPaint.isDiscardableMove) {
                    WinPaint.dirty = true;
                    WinPaint.overlayContext.lineCap = "round";
                    WinPaint.overlayContext.lineWidth = WinPaint.size * WinPaint.zoomLevel;
                    WinPaint.overlayContext.strokeStyle = WinPaint.strokeColor;
                    if (WinPaint.tool == "filledrectangle") WinPaint.overlayContext.fillStyle = WinPaint.fillColor;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.beginPath();
                    e = Math.min(WinPaint.lastX, c);
                    f = Math.min(WinPaint.lastY, d);
                    WinPaint.overlayContext.rect(e, f, Math.abs(WinPaint.lastX - c), Math.abs(WinPaint.lastY - d));
                    WinPaint.tool == "filledrectangle" && WinPaint.fillColor != "none" && WinPaint.overlayContext.fill();
                    WinPaint.overlayContext.stroke()
                } else if ((WinPaint.tool == "ellipse" || WinPaint.tool == "filledellipse") && !WinPaint.isDiscardableMove) {
                    WinPaint.dirty = true;
                    WinPaint.overlayContext.lineCap = "round";
                    WinPaint.overlayContext.lineWidth = WinPaint.size * WinPaint.zoomLevel;
                    WinPaint.overlayContext.strokeStyle =
                        WinPaint.strokeColor;
                    if (WinPaint.tool == "filledellipse") WinPaint.overlayContext.fillStyle = WinPaint.fillColor;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.beginPath();
                    Math.min(WinPaint.lastX, c);
                    Math.min(WinPaint.lastY, d);
                    var g = Math.abs(WinPaint.lastX - c),
                        f = Math.abs(WinPaint.lastY - d),
                        e = Math.max(g, f),
                        g = g / e,
                        f = f / e;
                    WinPaint.overlayContext.save();
                    WinPaint.overlayContext.translate((WinPaint.lastX + c) / 2, (WinPaint.lastY + d) / 2);
                    WinPaint.overlayContext.scale(g,
                        f);
                    WinPaint.overlayContext.beginPath();
                    WinPaint.overlayContext.arc(0, 0, e / 2, 0, Math.PI * 2, false);
                    WinPaint.overlayContext.closePath();
                    WinPaint.overlayContext.restore();
                    WinPaint.tool == "filledellipse" && WinPaint.fillColor != "none" && WinPaint.overlayContext.fill();
                    WinPaint.overlayContext.stroke()
                } else if (WinPaint.tool == "move") {
                    WinPaint.dirty = true;
                    switch (WinPaint.getSelectionLocation(c, d)) {
                        case "inside":
                            e = c - WinPaint.lastX;
                            f = d - WinPaint.lastY;
                            WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                            WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, Math.round(WinPaint.selectionX + e), Math.round(WinPaint.selectionY + f), WinPaint.selectionWidth, WinPaint.selectionHeight);
                            WinPaint.selectionX = WinPaint.selectionX + e;
                            WinPaint.selectionY = WinPaint.selectionY + f;
                            WinPaint.lastX = c;
                            WinPaint.lastY = d;
                            WinPaint.drawSelectionOutline();
                            $("#win-paint > div.canvas").css("cursor", "move");
                            break;
                        case "rotation_lever":
                            $("#win-paint > div.canvas").css("cursor", "move");
                            break;
                        default:
                            $("#win-paint > div.canvas").css("cursor", "crosshair")
                    }
                } else if ((WinPaint.tool == "selection" || WinPaint.tool == "cut" || WinPaint.tool == "copy" || WinPaint.tool == "paste" || WinPaint.tool == "stamp-selection") && !WinPaint.isDiscardableMove) {
                    WinPaint.dirty = true;
                    WinPaint.overlayContext.lineCap = "round";
                    WinPaint.overlayContext.lineWidth = 1;
                    WinPaint.overlayContext.strokeStyle = "#333";
                    e = Math.min(WinPaint.lastX, c);
                    f = Math.min(WinPaint.lastY, d);
                    WinPaint.overlayContext.beginPath();
                    if (WinPaint.toolType == "rectangle") {
                        WinPaint.overlayContext.clearRect(0,
                            0, WinPaint.overlay.width, WinPaint.overlay.height);
                        WinPaint.overlayContext.rect(e, f, Math.abs(WinPaint.lastX - c) + 1, Math.abs(WinPaint.lastY - d) + 1)
                    } else if (WinPaint.toolType == "ellipse") {
                        g = Math.abs(WinPaint.lastX - c) + 1;
                        f = Math.abs(WinPaint.lastY - d) + 1;
                        e = Math.max(g, f);
                        g = g / e;
                        f = f / e;
                        WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                        WinPaint.overlayContext.save();
                        WinPaint.overlayContext.translate((WinPaint.lastX + c) / 2, (WinPaint.lastY + d) / 2);
                        WinPaint.overlayContext.scale(g, f);
                        WinPaint.overlayContext.beginPath();
                        WinPaint.overlayContext.arc(0, 0, e / 2, 0, Math.PI * 2, false);
                        WinPaint.overlayContext.restore()
                    } else if (WinPaint.toolType == "lasso") {
                        WinPaint.overlayContext.moveTo(WinPaint.lastX, WinPaint.lastY);
                        WinPaint.overlayContext.lineTo(c, d);
                        WinPaint.lastX = c;
                        WinPaint.lastY = d;
                        WinPaint.lassoPathPoints.push({
                            x: c,
                            y: d
                        })
                    }
                    WinPaint.overlayContext.stroke()
                } else if (WinPaint.tool == "center") {
                    WinPaint.centerX = Math.round(c / WinPaint.zoomLevel + WinPaint.viewportX);
                    WinPaint.centerY = Math.round(d / WinPaint.zoomLevel + WinPaint.viewportY);
                    WinPaint.centerStyle = "#f00"
                } else if (WinPaint.tool == "rotate") {
                    e = c - WinPaint.lastX;
                    f = WinPaint.selectionY + WinPaint.selectionHeight / 2 - d;
                    WinPaint.rotationAngle = Math.atan2(e, f);
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.save();
                    WinPaint.overlayContext.translate(WinPaint.selectionX + WinPaint.selectionWidth / 2, WinPaint.selectionY + WinPaint.selectionHeight / 2);
                    WinPaint.overlayContext.rotate(WinPaint.rotationAngle);
                    WinPaint.overlayContext.translate(-(WinPaint.selectionX +
                        WinPaint.selectionWidth / 2), -(WinPaint.selectionY + WinPaint.selectionHeight / 2));
                    WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.drawSelectionOutline();
                    WinPaint.overlayContext.restore()
                } else if (WinPaint.tool == "nw-resize") {
                    e = WinPaint.lastX - c;
                    f = WinPaint.lastY - d;
                    WinPaint.proportionalResize && (e = f = Math.max(e, f));
                    var c = WinPaint.selectionX,
                        d = WinPaint.selectionY,
                        g = WinPaint.selectionWidth,
                        h = WinPaint.selectionHeight;
                    WinPaint.selectionX = WinPaint.selectionX - e;
                    WinPaint.selectionY = WinPaint.selectionY - f;
                    WinPaint.selectionWidth = WinPaint.selectionWidth + e;
                    WinPaint.selectionHeight = WinPaint.selectionHeight + f;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, g, h, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.drawSelectionOutline();
                    WinPaint.selectionX = c;
                    WinPaint.selectionY = d;
                    WinPaint.selectionWidth = g;
                    WinPaint.selectionHeight = h
                } else if (WinPaint.tool == "ne-resize") {
                    e = c - WinPaint.lastX;
                    f = WinPaint.lastY - d;
                    WinPaint.proportionalResize && (e = f = Math.max(e, f));
                    d = WinPaint.selectionY;
                    g = WinPaint.selectionWidth;
                    h = WinPaint.selectionHeight;
                    WinPaint.selectionY = WinPaint.selectionY - f;
                    WinPaint.selectionWidth = WinPaint.selectionWidth + e;
                    WinPaint.selectionHeight = WinPaint.selectionHeight + f;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, g, h, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.drawSelectionOutline();
                    WinPaint.selectionY = d;
                    WinPaint.selectionWidth = g;
                    WinPaint.selectionHeight = h
                } else if (WinPaint.tool == "se-resize") {
                    e = c - WinPaint.lastX;
                    f = d - WinPaint.lastY;
                    WinPaint.proportionalResize && (e = f = Math.max(e, f));
                    g = WinPaint.selectionWidth;
                    h = WinPaint.selectionHeight;
                    WinPaint.selectionWidth = WinPaint.selectionWidth + e;
                    WinPaint.selectionHeight =
                        WinPaint.selectionHeight + f;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, g, h, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.drawSelectionOutline();
                    WinPaint.selectionWidth = g;
                    WinPaint.selectionHeight = h
                } else if (WinPaint.tool == "sw-resize") {
                    e = WinPaint.lastX - c;
                    f = d - WinPaint.lastY;
                    WinPaint.proportionalResize && (e = f = Math.max(e, f));
                    c = WinPaint.selectionX;
                    g = WinPaint.selectionWidth;
                    h = WinPaint.selectionHeight;
                    WinPaint.selectionX = WinPaint.selectionX - e;
                    WinPaint.selectionWidth = WinPaint.selectionWidth + e;
                    WinPaint.selectionHeight = WinPaint.selectionHeight + f;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, g, h, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.drawSelectionOutline();
                    WinPaint.selectionX = c;
                    WinPaint.selectionWidth = g;
                    WinPaint.selectionHeight =
                        h
                } else if (WinPaint.tool == "n-resize") {
                    f = WinPaint.lastY - d;
                    d = WinPaint.selectionY;
                    g = WinPaint.selectionWidth;
                    h = WinPaint.selectionHeight;
                    WinPaint.selectionY = WinPaint.selectionY - f;
                    WinPaint.selectionHeight = WinPaint.selectionHeight + f;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, g, h, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.drawSelectionOutline();
                    WinPaint.selectionY =
                        d;
                    WinPaint.selectionHeight = h
                } else if (WinPaint.tool == "e-resize") {
                    e = c - WinPaint.lastX;
                    g = WinPaint.selectionWidth;
                    h = WinPaint.selectionHeight;
                    WinPaint.selectionWidth = WinPaint.selectionWidth + e;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, g, h, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.drawSelectionOutline();
                    WinPaint.selectionWidth = g
                } else if (WinPaint.tool ==
                    "s-resize") {
                    f = d - WinPaint.lastY;
                    g = WinPaint.selectionWidth;
                    h = WinPaint.selectionHeight;
                    WinPaint.selectionHeight = WinPaint.selectionHeight + f;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, g, h, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.drawSelectionOutline();
                    WinPaint.selectionHeight = h
                } else if (WinPaint.tool == "w-resize") {
                    e = WinPaint.lastX - c;
                    c = WinPaint.selectionX;
                    g = WinPaint.selectionWidth;
                    h = WinPaint.selectionHeight;
                    WinPaint.selectionX = WinPaint.selectionX - e;
                    WinPaint.selectionWidth = WinPaint.selectionWidth + e;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, g, h, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.drawSelectionOutline();
                    WinPaint.selectionX = c;
                    WinPaint.selectionWidth = g
                }
                WinPaint.context.restore();
                WinPaint.updateViewport()
            } else if (WinPaint.tool ==
                "move") switch (WinPaint.getSelectionLocation(c, d)) {
                    case "nw_corner":
                        $("#win-paint > div.canvas").css("cursor", "nw-resize");
                        break;
                    case "ne_corner":
                        $("#win-paint > div.canvas").css("cursor", "ne-resize");
                        break;
                    case "se_corner":
                        $("#win-paint > div.canvas").css("cursor", "se-resize");
                        break;
                    case "sw_corner":
                        $("#win-paint > div.canvas").css("cursor", "sw-resize");
                        break;
                    case "n_edge":
                        $("#win-paint > div.canvas").css("cursor", "n-resize");
                        break;
                    case "e_edge":
                        $("#win-paint > div.canvas").css("cursor", "e-resize");
                        break;
                    case "s_edge":
                        $("#win-paint > div.canvas").css("cursor", "s-resize");
                        break;
                    case "w_edge":
                        $("#win-paint > div.canvas").css("cursor", "w-resize");
                        break;
                    case "inside":
                        $("#win-paint > div.canvas").css("cursor", "move");
                        break;
                    case "rotation_lever":
                        $("#win-paint > div.canvas").css("cursor", "move");
                        break;
                    default:
                        $("#win-paint > div.canvas").css("cursor", "crosshair")
                } else if (WinPaint.tool == "stamp") {
                    WinPaint.dirty = true;
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, c - WinPaint.selectionWidth / 2, d - WinPaint.selectionHeight / 2, WinPaint.selectionWidth, WinPaint.selectionHeight);
                    WinPaint.drawSelectionOutline(false);
                    $("#win-paint > div.canvas").css("cursor", "crosshair")
                } else if (WinPaint.tool == "zoom" && WinPaint.toolType == "zoom-in") {
                    e = WinPaint.viewportWidth / 2;
                    f = WinPaint.viewportHeight / 2;
                    c = c - e / 2;
                    d = d - f / 2;
                    WinPaint.overlayContext.lineWidth = 1;
                    WinPaint.overlayContext.strokeStyle =
                        "#222";
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    WinPaint.overlayContext.strokeRect(c, d, e, f)
                }
            b.preventDefault();
            return false
        },
        _updateText: function () {
            WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
            var b = WinPaint.fontSize * WinPaint.zoomLevel + "px " + WinPaint.fontFamily;
            WinPaint.fontIsBold && (b = "bold " + b);
            WinPaint.fontIsItalic && (b = "italic " + b);
            WinPaint.overlayContext.font = b;
            WinPaint.overlayContext.lineWidth = 2 * WinPaint.zoomLevel;
            WinPaint.overlayContext.strokeStyle = WinPaint.strokeColor;
            WinPaint.overlayContext.fillStyle = WinPaint.fillColor;
            WinPaint.overlayContext.textAlign = "left";
            WinPaint.overlayContext.textBaseline = "bottom";
            WinPaint.overlayContext.fillText(WinPaint.text, WinPaint.lastX, WinPaint.lastY);
            WinPaint.overlayContext.strokeText(WinPaint.text, WinPaint.lastX, WinPaint.lastY);
            b = WinPaint.overlayContext.measureText(WinPaint.text).width;
            if (WinPaint.fontIsUnderline) {
                WinPaint.overlayContext.lineWidth = 1;
                WinPaint.overlayContext.strokeStyle =
                    WinPaint.fillColor;
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.moveTo(WinPaint.lastX, WinPaint.lastY);
                WinPaint.overlayContext.lineTo(WinPaint.lastX + b, WinPaint.lastY);
                WinPaint.overlayContext.closePath();
                WinPaint.overlayContext.stroke()
            }
        },
        _updateBrush: function () {
            WinPaint.context.lineWidth = WinPaint.size * WinPaint.zoomLevel;
            WinPaint.context.strokeStyle = WinPaint.strokeColor;
            WinPaint.context.save();
            WinPaint.context.translate(WinPaint.viewportX, WinPaint.viewportY);
            WinPaint.context.scale(1 /
                WinPaint.zoomLevel, 1 / WinPaint.zoomLevel);
            for (var b = 0; b < WinPaint.brushBristles.length; b++) {
                WinPaint.context.beginPath();
                WinPaint.context.moveTo(WinPaint.brushBristles[b].dx, WinPaint.brushBristles[b].dy);
                var c = WinPaint.brushBristles[b].ax = (WinPaint.brushBristles[b].ax + (WinPaint.brushBristles[b].dx - WinPaint.lastX) * WinPaint.brushBristles[b].div) * WinPaint.brushBristles[b].ease;
                WinPaint.brushBristles[b].dx = WinPaint.brushBristles[b].dx - c;
                var c = WinPaint.brushBristles[b].dx,
                    d = WinPaint.brushBristles[b].ay =
                    (WinPaint.brushBristles[b].ay + (WinPaint.brushBristles[b].dy - WinPaint.lastY) * WinPaint.brushBristles[b].div) * WinPaint.brushBristles[b].ease;
                WinPaint.brushBristles[b].dy = WinPaint.brushBristles[b].dy - d;
                WinPaint.context.lineTo(c, WinPaint.brushBristles[b].dy);
                WinPaint.context.stroke()
            }
            WinPaint.context.restore()
        },
        _dragover: function (b) {
            b.stopPropagation();
            b.preventDefault();
            $("#drop-zone").removeClass("hidden");
            WinPaint.dropZoneVisible = true
        },
        _dragleave: function () {
            if (WinPaint.dropZoneVisible) {
                $("#drop-zone").addClass("hidden");
                WinPaint.dropZoneVisible = false
            }
        },
        _drop: function (b) {
            WinPaint._commit();
            if (WinPaint.dropZoneVisible) {
                $("#drop-zone").addClass("hidden");
                WinPaint.dropZoneVisible = false
            }
            b.stopPropagation();
            b.preventDefault();
            WinPaint.lastX = (b.originalEvent.pageX - $(WinPaint.viewport).offset().left) / WinPaint.zoomLevel + WinPaint.viewportX;
            WinPaint.lastY = (b.originalEvent.pageY - $(WinPaint.viewport).offset().top) / WinPaint.zoomLevel + WinPaint.viewportY;
            for (var b = b.originalEvent.dataTransfer.files, c = 0, d; d = b[c]; c++)
                if (d.type.match("image.*")) {
                    var e =
                        new FileReader;
                    e.onload = WinPaint._onLoadImage;
                    e.readAsDataURL(d)
                }
        },
        _change: function (b) {
            WinPaint._commit();
            b = b.originalEvent.target.files;
            WinPaint.lastX = WinPaint.editingWidth / 2;
            WinPaint.lastY = WinPaint.editingHeight / 2;
            for (var c = 0, d; d = b[c]; c++)
                if (d.type.match("image.*")) {
                    var e = new FileReader;
                    e.onload = WinPaint._onLoadImage;
                    e.readAsDataURL(d)
                }
        },
        _keypress: function (b) {
            WinPaint._onKeyPress(b.keyCode, b.charCode);
            return false
        },
        _keydown: function (b) {
            if (b.keyCode == 8) {
                WinPaint._onKeyPress(b.keyCode, b.charCode);
                return false
            }
            b.keyCode >= 37 && b.keyCode <= 40 && WinPaint._onKeyPress(b.keyCode, b.charCode)
        },
        _onKeyPress: function (b, c) {
            if (WinPaint.tool == "text") {
                if (b == 8) {
                    if (WinPaint.text.length > 0) WinPaint.text = WinPaint.text.substring(0, WinPaint.text.length - 1)
                } else if (b == 32) WinPaint.text = WinPaint.text + " ";
                else if (c && c == b) WinPaint.text = WinPaint.text + String.fromCharCode(c);
                WinPaint._updateText();
                var d = WinPaint.overlayContext.measureText(WinPaint.text).width;
                WinPaint.overlayContext.strokeStyle = "#000000";
                WinPaint.overlayContext.lineWidth =
                    2;
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.moveTo(WinPaint.lastX + d, WinPaint.lastY);
                WinPaint.overlayContext.lineTo(WinPaint.lastX + d, WinPaint.lastY - WinPaint.fontSize * WinPaint.zoomLevel);
                WinPaint.overlayContext.closePath();
                WinPaint.overlayContext.stroke()
            } else if (b == 8) WinPaint.cmdCut();
            else if (b == 27) {
                if (WinPaint.tool == "stamp") {
                    WinPaint.tool = "stamp-selection";
                    WinPaint.toolType = "rectangle";
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height)
                }
            } else if (b ==
                37) {
                WinPaint._commit();
                WinPaint.viewportX = WinPaint.viewportX - WinPaint.viewportWidth / WinPaint.zoomLevel / 4;
                WinPaint.updateViewport()
            } else if (b == 38) {
                WinPaint._commit();
                WinPaint.viewportY = WinPaint.viewportY - WinPaint.viewportHeight / WinPaint.zoomLevel / 4;
                WinPaint.updateViewport()
            } else if (b == 39) {
                WinPaint._commit();
                WinPaint.viewportX = WinPaint.viewportX + WinPaint.viewportWidth / WinPaint.zoomLevel / 3;
                WinPaint.updateViewport()
            } else if (b == 40) {
                WinPaint._commit();
                WinPaint.viewportY = WinPaint.viewportY + WinPaint.viewportHeight /
                    WinPaint.zoomLevel / 3;
                WinPaint.updateViewport()
            }
        },
        _onScroll: function (b) {
            b.preventDefault();
            WinPaint._commit();
            var b = getScrollVectors(b),
                c = $("#win-paint div.canvas").innerWidth(),
                d = $("#win-paint div.canvas").innerHeight();
            if (WinPaint.editingWidth * WinPaint.zoomLevel > c) {
                WinPaint.viewportX = WinPaint.viewportX - b.x / WinPaint.zoomLevel;
                if (WinPaint.viewportX < 0) WinPaint.viewportX = 0;
                if ((WinPaint.editingWidth - WinPaint.viewportX) * WinPaint.zoomLevel < c) WinPaint.viewportX = WinPaint.editingWidth - c / WinPaint.zoomLevel
            }
            if (WinPaint.editingHeight *
                WinPaint.zoomLevel > d) {
                WinPaint.viewportY = WinPaint.viewportY - b.y / WinPaint.zoomLevel;
                if (WinPaint.viewportY < 0) WinPaint.viewportY = 0;
                if ((WinPaint.editingHeight - WinPaint.viewportY) * WinPaint.zoomLevel < d) WinPaint.viewportY = WinPaint.editingHeight - d / WinPaint.zoomLevel
            }
            WinPaint.updateViewport()
        },
        _onLoadImage: function (b) {
            var c = $("#import-image");
            c.unbind();
            c.attr("src", "");
            c.attr("src", b.target.result);
            c.load(function () {
                WinPaint.cmdToolSelection();
                var b = c[0];
                WinPaint.dirty = true;
                WinPaint.selectionContext.clearRect(0,
                    0, WinPaint.selection.width, WinPaint.selection.height);
                WinPaint.selectionX = (WinPaint.lastX - b.width / 2 - WinPaint.viewportX) * WinPaint.zoomLevel;
                WinPaint.selectionY = (WinPaint.lastY - b.height / 2 - WinPaint.viewportY) * WinPaint.zoomLevel;
                WinPaint.selectionWidth = Math.min(b.width, WinPaint.canvas.width) * WinPaint.zoomLevel;
                WinPaint.selectionHeight = Math.min(b.height, WinPaint.canvas.height) * WinPaint.zoomLevel;
                WinPaint.selectionContext.drawImage(b, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight);
                WinPaint.overlayContext.drawImage(WinPaint.selection,
                    0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
                WinPaint.drawSelectionOutline();
                WinPaint.tool = "move"
            })
        },
        findBounds: function () {
            return WinPaint.findBoxBounds(WinPaint.context, 0, 0, WinPaint.canvas.width, WinPaint.canvas.height)
        },
        findBoxBounds: function (b, c, d, e, f) {
            for (var b = b.getImageData(c, d, e, f).data, g = {
                top: d + f,
                left: c + e,
                bottom: d,
                right: c
            }, h = 0, j = d; j < d + f; j++)
                for (var k = c; k < c + e; k++) {
                    if (b[h + 3]) {
                        if (k < g.left) g.left =
                            k;
                        if (k > g.right) g.right = k;
                        if (j < g.top) g.top = j;
                        if (j > g.bottom) g.bottom = j
                    }
                    h = h + 4
                }
            return g
        },
        checkDiscardableMove: function (b, c) {
            var d = Math.sqrt(Math.pow(b - WinPaint.lastX, 2) + Math.pow(c - WinPaint.lastY, 2));
            WinPaint.isDiscardableMove = WinPaint.isDiscardableMove && d <= WinPaint.discardMoveTolerance
        },
        _commit: function () {
            if (WinPaint.tool == "text")
                if (WinPaint.text) {
                    WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                    var b = WinPaint.fontSize + "px " + WinPaint.fontFamily;
                    WinPaint.fontIsBold &&
                        (b = "bold " + b);
                    WinPaint.fontIsItalic && (b = "italic " + b);
                    WinPaint.context.font = b;
                    WinPaint.context.lineWidth = 2;
                    WinPaint.context.strokeStyle = WinPaint.strokeColor;
                    WinPaint.context.fillStyle = WinPaint.fillColor;
                    WinPaint.context.textAlign = "left";
                    WinPaint.context.textBaseline = "bottom";
                    WinPaint.context.fillText(WinPaint.text, WinPaint.lastX / WinPaint.zoomLevel + WinPaint.viewportX, WinPaint.lastY / WinPaint.zoomLevel + WinPaint.viewportY);
                    WinPaint.context.strokeText(WinPaint.text, WinPaint.lastX / WinPaint.zoomLevel + WinPaint.viewportX,
                        WinPaint.lastY / WinPaint.zoomLevel + WinPaint.viewportY);
                    b = WinPaint.overlayContext.measureText(WinPaint.text).width;
                    if (WinPaint.fontIsUnderline) {
                        WinPaint.context.lineWidth = 1;
                        WinPaint.context.strokeStyle = WinPaint.fillColor;
                        WinPaint.context.beginPath();
                        WinPaint.context.moveTo(WinPaint.lastX / WinPaint.zoomLevel + WinPaint.viewportX, WinPaint.lastY / WinPaint.zoomLevel + WinPaint.viewportY);
                        WinPaint.context.lineTo(WinPaint.lastX / WinPaint.zoomLevel + b / WinPaint.zoomLevel + WinPaint.viewportX, WinPaint.lastY / WinPaint.zoomLevel +
                            WinPaint.viewportY);
                        WinPaint.context.closePath();
                        WinPaint.context.stroke()
                    }
                    WinPaint.text = "";
                    WinPaint.addUndo()
                } else WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
            else if (WinPaint.tool == "move") {
                var b = Math.round(WinPaint.selectionX / WinPaint.zoomLevel + WinPaint.viewportX),
                    c = Math.round(WinPaint.selectionY / WinPaint.zoomLevel + WinPaint.viewportY);
                WinPaint.context.drawImage(WinPaint.selection, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, b, c, WinPaint.selectionWidth /
                    WinPaint.zoomLevel, WinPaint.selectionHeight / WinPaint.zoomLevel);
                WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
                WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
                WinPaint.addUndo();
                WinPaint.tool = WinPaint.toolType == "move-line" ? "line" : WinPaint.toolType == "move-rectangle" ? "rectangle" : WinPaint.toolType == "move-filledrectangle" ? "filledrectangle" : WinPaint.toolType == "move-ellipse" ? "ellipse" : WinPaint.toolType == "move-filledellipse" ?
                    "filledellipse" : "selection"
            } else WinPaint.tool == "stamp" ? WinPaint.tool = "stamp-selection" : WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
            WinPaint.isDiscardableMove = true;
            WinPaint.updateViewport()
        },
        _clearToolSelection: function () {
            $("#win-paint .text").addClass("hidden");
            $("#win-paint .pencil").addClass("hidden");
            $("#win-paint .brush").addClass("hidden");
            $("#win-paint .shape").addClass("hidden");
            $("#win-paint .centertool").addClass("hidden");
            $("#win-paint .colorpicker").addClass("hidden");
            $("#win-paint .fillcolor").addClass("hidden");
            $("#win-paint .strokecolor").addClass("hidden");
            $("#win-paint .copy").addClass("hidden");
            $("#win-paint .stamp").addClass("hidden");
            $("#win-paint .menu").addClass("hidden");
            $("#win-paint .paint-tools").removeClass("selected");
            WinPaint.clearCenter()
        },
        _showColorPicker: function () {
            $("#win-paint .colorpicker").removeClass("hidden");
            $("#win-paint .fillcolor").removeClass("hidden");
            $("#win-paint .strokecolor").removeClass("hidden");
            WinPaint.cmdChooseFillColor()
        },
        _showFillColorPicker: function () {
            $("#win-paint .colorpicker").removeClass("hidden");
            $("#win-paint .fillcolor").removeClass("hidden");
            WinPaint.cmdChooseFillColor()
        },
        _showStrokeColorPicker: function () {
            $("#win-paint .colorpicker").removeClass("hidden");
            $("#win-paint .strokecolor").removeClass("hidden");
            WinPaint.cmdChooseStrokeColor()
        },
        cmdEditMenu: function () {
            $("#win-paint .menu").not($(this).next()).addClass("hidden");
            var b = $("#win-paint .tool-options .edit");
            $(this).next().toggleClass("hidden").css("right",
                $("#win-paint").innerWidth() - (b.position().left + b.outerWidth())).css("top", b.position().top + b.outerHeight());
            return false
        },
        cmdSelectEditMenuOption: function () {
            $("#win-paint .menu").addClass("hidden");
            switch ($(this).attr("data-option")) {
                case "import_image":
                    WinPaint.lastX = WinPaint.viewportX + WinPaint.editingWidth / 2;
                    WinPaint.lastY = WinPaint.viewportY + WinPaint.editingHeight / 2;
                    $("#import-image-file").click();
                    break;
                case "clear_canvas":
                    WinPaint.clearCanvas();
                    break;
                case "flip_canvas_horizontal":
                    WinPaint.flipCanvasHorizontally();
                    break;
                case "flip_canvas_vertical":
                    WinPaint.flipCanvasVertically();
                    break;
                case "toggle_center":
                    WinPaint.toggleCenter();
                    break;
                case "toggle_grid":
                    WinPaint.toggleGrid()
            }
            return false
        },
        cmdSelectZoomOption: function () {
            WinPaint._commit();
            switch ($(this).attr("data-option")) {
                case "zoom_out":
                    WinPaint.zoomOut();
                    break;
                case "zoom_in":
                    WinPaint.zoomIn();
                    break;
                case "zoom_to":
                    WinPaint.zoomTo(parseFloat($(this).attr("data-value")))
            }
        },
        cmdChooseFontFamily: function () {
            $("#win-paint .menu").addClass("hidden");
            $(this).next().toggleClass("hidden").css("left",
                $(this).position().left).css("top", $(this).position().top + $(this).outerHeight());
            return false
        },
        cmdSelectFontFamily: function () {
            $("#win-paint .menu").addClass("hidden");
            WinPaint.fontFamily = $(this).text();
            $("#win-paint .font-family span").text(WinPaint.fontFamily);
            WinPaint._updateText();
            return false
        },
        cmdChooseFontSize: function () {
            $("#win-paint .menu").addClass("hidden");
            $(this).next().toggleClass("hidden").css("left", $(this).position().left).css("top", $(this).position().top + $(this).outerHeight());
            return false
        },
        cmdSelectFontSize: function () {
            $("#win-paint .menu").addClass("hidden");
            WinPaint.fontSize = parseInt($(this).text());
            $("#win-paint .font-size span").text(WinPaint.fontSize);
            WinPaint._updateText();
            return false
        },
        cmdToggleBold: function () {
            $("#win-paint .menu").addClass("hidden");
            $(this).toggleClass("selected");
            WinPaint.fontIsBold = $(this).hasClass("selected");
            WinPaint._updateText();
            return false
        },
        cmdToggleItalic: function () {
            $("#win-paint .menu").addClass("hidden");
            $(this).toggleClass("selected");
            WinPaint.fontIsItalic =
                $(this).hasClass("selected");
            WinPaint._updateText();
            return false
        },
        cmdToggleUnderline: function () {
            $("#win-paint .menu").addClass("hidden");
            $(this).toggleClass("selected");
            WinPaint.fontIsUnderline = $(this).hasClass("selected");
            WinPaint._updateText();
            return false
        },
        cmdChoosePencilSize: function () {
            $("#win-paint .menu").addClass("hidden");
            $(this).next().toggleClass("hidden").css("left", $(this).position().left).css("top", $(this).position().top + $(this).outerHeight());
            return false
        },
        cmdChooseBrushSize: function () {
            $("#win-paint .menu").addClass("hidden");
            $(this).next().toggleClass("hidden").css("left", $(this).position().left).css("top", $(this).position().top + $(this).outerHeight());
            return false
        },
        cmdChooseStamp: function () {
            $("#win-paint .menu").addClass("hidden");
            $(this).next().toggleClass("hidden").css("left", $(this).position().left).css("top", $(this).position().top + $(this).outerHeight());
            return false
        },
        cmdChoosePredefinedPencilSize: function () {
            $("#win-paint .menu").addClass("hidden");
            WinPaint.size = parseInt($(this).attr("radius"));
            $("#win-paint .pencil .slider").slider("value",
                WinPaint.size);
            $("#win-paint .pencilsize div img").addClass("hidden");
            $("#win-paint .pencilsize div span").css("border-radius", Math.floor(WinPaint.size / 2)).css("width", WinPaint.size).css("height", WinPaint.size);
            $("#win-paint .pencilsize div span").removeClass("hidden");
            $("#win-paint .pencil .showsize div").addClass("oval");
            $("#win-paint .pencil .showsize div").css("border-radius", Math.floor(WinPaint.size / 2)).css("width", WinPaint.size).css("height", WinPaint.size);
            $("#win-paint .pencil .showsize div img").addClass("hidden");
            $("#win-paint .brush .showsize div").addClass("oval");
            $("#win-paint .brush .showsize div").css("border-radius", Math.floor(WinPaint.size / 2)).css("width", WinPaint.size).css("height", WinPaint.size);
            $("#win-paint .brush .showsize div img").addClass("hidden");
            return false
        },
        cmdChoosePredefinedStamp: function () {
            $("#win-paint .menu").addClass("hidden");
            WinPaint.toolType = $(this).attr("type");
            WinPaint.stampImg.src = $("img", this).attr("src");
            $("#win-paint .stampsize div span").addClass("hidden");
            $("#win-paint .stampsize div img").attr("src",
                WinPaint.stampImg.src);
            $("#win-paint .stampsize div img").removeClass("hidden");
            return false
        },
        cmdChoosePenSize: function () {
            $("#win-paint .menu").addClass("hidden");
            $(this).next().toggleClass("hidden").css("left", $(this).position().left).css("top", $(this).position().top + $(this).outerHeight());
            return false
        },
        cmdChoosePredefinedPenSize: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            WinPaint._showStrokeColorPicker();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_pencil"));
            $("#win-paint .pencil").removeClass("hidden");
            $("#win-paint .tool-pencil").addClass("selected");
            $("#win-paint .menu").addClass("hidden");
            WinPaint.tool = "pen";
            WinPaint.size = parseInt($(this).attr("size"));
            $("#win-paint .pencil .slider").slider("value", WinPaint.size);
            $("#win-paint .pensize span").css("width", WinPaint.size * WinPaint.size).css("height", WinPaint.size * WinPaint.size);
            return false
        },
        cmdChooseFillColor: function () {
            $("#win-paint .menu").addClass("hidden");
            $("#win-paint .fillcolor").addClass("selected");
            $("#win-paint .strokecolor").removeClass("selected");
            WinPaint.selectedColor = "fill"
        },
        cmdChooseStrokeColor: function () {
            $("#win-paint .menu").addClass("hidden");
            $("#win-paint .fillcolor").removeClass("selected");
            $("#win-paint .strokecolor").addClass("selected");
            WinPaint.selectedColor = "stroke"
        },
        cmdChoosePredefinedColor: function () {
            $("#win-paint .menu").addClass("hidden");
            $("#win-paint .tool-eyedropper").removeClass("selected");
            var b = $(this).css("background-color");
            b || (b = "none");
            if (WinPaint.selectedColor ==
                "fill") {
                $("#win-paint .fillcolor > div").css("background-color", b);
                WinPaint.fillColor = b
            } else if (WinPaint.selectedColor == "stroke") {
                $("#win-paint .strokecolor > div").css("border", "4px solid " + b);
                WinPaint.strokeColor = b
            }
            WinPaint.tool == "text" && WinPaint._updateText();
            return false
        },
        cmdChooseColor: function () {
            $("#win-paint .menu").addClass("hidden");
            $("#win-paint .tool-eyedropper").removeClass("selected");
            var b = $("#win-paint .tool-color");
            ColorPicker.show(b.offset().left, b.offset().top, 0, function (b) {
                if (WinPaint.selectedColor ==
                    "fill") {
                    $("#win-paint .fillcolor > div").css("background-color", b);
                    WinPaint.fillColor = b
                } else if (WinPaint.selectedColor == "stroke") {
                    $("#win-paint .strokecolor > div").css("border", "4px solid " + b);
                    WinPaint.strokeColor = b
                }
            });
            return false
        },
        cmdToolColor: function () {
            $("#win-paint .menu").addClass("hidden");
            $("#win-paint .tool-eyedropper").addClass("selected");
            WinPaint.lastTool = WinPaint.tool;
            WinPaint.tool = "colorpicker";
            return false
        },
        cmdChooseSelectionType: function () {
            WinPaint._commit();
            if (WinPaint.tool == "move") WinPaint.tool =
                "selection";
            else if (WinPaint.tool == "stamp") WinPaint.tool = "stamp-selection";
            WinPaint.toolType = $(this).attr("data-tool_type");
            $("#win-paint li.selection-type").removeClass("selected");
            $(this).addClass("selected");
            return false
        },
        cmdCut: function () {
            WinPaint.tool = "cut";
            WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
            WinPaint.addUndo();
            return false
        },
        cmdCopy: function () {
            WinPaint.tool = "copy";
            return false
        },
        cmdPaste: function () {
            if (WinPaint.tool == "move") WinPaint.context.drawImage(WinPaint.selection,
                0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, WinPaint.selectionX / WinPaint.zoomLevel + WinPaint.viewportX, WinPaint.selectionY / WinPaint.zoomLevel + WinPaint.viewportY, WinPaint.selectionWidth / WinPaint.zoomLevel, WinPaint.selectionHeight / WinPaint.zoomLevel);
            else {
                WinPaint.tool = "move";
                WinPaint.context.drawImage(WinPaint.selection, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, WinPaint.selectionX / WinPaint.zoomLevel + WinPaint.viewportX, WinPaint.selectionY / WinPaint.zoomLevel + WinPaint.viewportY, WinPaint.selectionWidth /
                    WinPaint.zoomLevel, WinPaint.selectionHeight / WinPaint.zoomLevel);
                WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight)
            }
            WinPaint.addUndo();
            return false
        },
        cmdFlipHorizontally: function () {
            WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height);
            WinPaint.bufferContext.drawImage(WinPaint.selection, 0, 0);
            WinPaint.selectionContext.clearRect(0,
                0, WinPaint.selectionWidth, WinPaint.selectionHeight);
            WinPaint.selectionContext.save();
            WinPaint.selectionContext.scale(-1, 1);
            WinPaint.selectionContext.drawImage(WinPaint.buffer, -WinPaint.selectionWidth, 0);
            WinPaint.selectionContext.restore();
            WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
            WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
            WinPaint.drawSelectionOutline();
            WinPaint.tool = "move";
            WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height)
        },
        cmdFlipVertically: function () {
            WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height);
            WinPaint.bufferContext.drawImage(WinPaint.selection, 0, 0);
            WinPaint.selectionContext.clearRect(0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight);
            WinPaint.selectionContext.save();
            WinPaint.selectionContext.scale(1, -1);
            WinPaint.selectionContext.drawImage(WinPaint.buffer,
                0, -WinPaint.selectionHeight);
            WinPaint.selectionContext.restore();
            WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
            WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
            WinPaint.drawSelectionOutline();
            WinPaint.tool = "move";
            WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height)
        },
        cmdGrow: function () {
            WinPaint.scaleSelection(WinPaint.growFactor,
                WinPaint.growFactor);
            WinPaint.tool = "move"
        },
        cmdShrink: function () {
            WinPaint.scaleSelection(WinPaint.shrinkFactor, WinPaint.shrinkFactor);
            WinPaint.tool = "move"
        },
        cmdChooseZoomType: function () {
            WinPaint._commit();
            WinPaint.toolType = $(this).attr("data-tool_type");
            $("#win-paint .zoom ul li.zoom-type").removeClass("selected");
            $("#win-paint .zoom ul li.zoom-type." + WinPaint.toolType).addClass("selected")
        },
        cmdToolPencil: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            WinPaint._showStrokeColorPicker();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_pencil"));
            $("#win-paint .pencil").removeClass("hidden");
            $("#win-paint .tool-pencil").addClass("selected");
            WinPaint.tool = "pencil";
            return false
        },
        cmdToolBrush: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            WinPaint._showStrokeColorPicker();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_brush"));
            $("#win-paint .pencil").removeClass("hidden");
            $("#win-paint .brush").removeClass("hidden");
            $("#win-paint .tool-brush").addClass("selected");
            WinPaint.tool = "brush";
            return false
        },
        cmdToolStamp: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_stamp"));
            $("#win-paint .stamp").removeClass("hidden");
            $("#win-paint .tool-stamp").addClass("selected");
            WinPaint.tool = "stamp";
            $("#win-paint .stamp .stampoptions li:first").click();
            return false
        },
        cmdToolEraser: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_eraser"));
            $("#win-paint .tool-eraser").addClass("selected");
            $("#win-paint .pencil").removeClass("hidden");
            WinPaint.tool = "eraser";
            return false
        },
        cmdToolFill: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            WinPaint._showFillColorPicker();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_fill"));
            $("#win-paint .tool-fill").addClass("selected");
            WinPaint.tool = "fill";
            return false
        },
        cmdToolShape: function () {
            $(this).hasClass("ellipse") ? WinPaint.cmdToolEllipse() : $(this).hasClass("line") ? WinPaint.cmdToolLine() :
                WinPaint.cmdToolRectangle()
        },
        cmdToolRectangle: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            WinPaint._showColorPicker();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_rectangle"));
            $("#win-paint .tool-shape").addClass("selected");
            $("#win-paint .pencil").removeClass("hidden");
            $("#win-paint .tool-shape div").addClass("hidden");
            $("#win-paint .tool-shape").addClass("rectangle");
            $("#win-paint .tool-shape").removeClass("filledrectangle");
            $("#win-paint .tool-shape").removeClass("ellipse");
            $("#win-paint .tool-shape").removeClass("filledellipse");
            $("#win-paint .tool-shape").removeClass("line");
            WinPaint.tool = "rectangle";
            return false
        },
        cmdToolFilledRectangle: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            WinPaint._showColorPicker();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_rectangle"));
            $("#win-paint .tool-shape").addClass("selected");
            $("#win-paint .pencil").removeClass("hidden");
            $("#win-paint .tool-shape div").addClass("hidden");
            $("#win-paint .tool-shape").removeClass("rectangle");
            $("#win-paint .tool-shape").addClass("filledrectangle");
            $("#win-paint .tool-shape").removeClass("ellipse");
            $("#win-paint .tool-shape").removeClass("filledellipse");
            $("#win-paint .tool-shape").removeClass("line");
            WinPaint.tool = "filledrectangle";
            return false
        },
        cmdToolEllipse: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            WinPaint._showColorPicker();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_ellipse"));
            $("#win-paint .tool-shape").addClass("selected");
            $("#win-paint .pencil").removeClass("hidden");
            $("#win-paint .tool-shape div").addClass("hidden");
            $("#win-paint .tool-shape").removeClass("rectangle");
            $("#win-paint .tool-shape").removeClass("filledrectangle");
            $("#win-paint .tool-shape").addClass("ellipse");
            $("#win-paint .tool-shape").removeClass("filledellipse");
            $("#win-paint .tool-shape").removeClass("line");
            WinPaint.tool = "ellipse";
            return false
        },
        cmdToolFilledEllipse: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            WinPaint._showColorPicker();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_ellipse"));
            $("#win-paint .tool-shape").addClass("selected");
            $("#win-paint .pencil").removeClass("hidden");
            $("#win-paint .tool-shape div").addClass("hidden");
            $("#win-paint .tool-shape").removeClass("rectangle");
            $("#win-paint .tool-shape").removeClass("filledrectangle");
            $("#win-paint .tool-shape").addClass("ellipse");
            $("#win-paint .tool-shape").removeClass("filledellipse");
            $("#win-paint .tool-shape").removeClass("line");
            WinPaint.tool = "filledellipse";
            return false
        },
        cmdToolLine: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            WinPaint._showStrokeColorPicker();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_line"));
            $("#win-paint .tool-shape").addClass("selected");
            $("#win-paint .pencil").removeClass("hidden");
            $("#win-paint .tool-shape div").addClass("hidden");
            $("#win-paint .tool-shape").removeClass("rectangle");
            $("#win-paint .tool-shape").removeClass("filledrectangle");
            $("#win-paint .tool-shape").removeClass("ellipse");
            $("#win-paint .tool-shape").removeClass("filledellipse");
            $("#win-paint .tool-shape").addClass("line");
            WinPaint.tool = "line";
            return false
        },
        cmdToolText: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            WinPaint._showColorPicker();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_text"));
            $("#win-paint .text").removeClass("hidden");
            $("#win-paint .tool-text").addClass("selected");
            WinPaint.tool = "text";
            return false
        },
        cmdToolSelection: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_selection"));
            $("#win-paint .copy").removeClass("hidden");
            $("#win-paint .tool-selection").addClass("selected");
            $("#win-paint li.selection-type").removeClass("selected");
            $("#win-paint li.selection-type.selrectangle").addClass("selected");
            WinPaint.tool = "selection";
            WinPaint.toolType = "rectangle";
            return false
        },
        cmdToolZoom: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_zoom"));
            $("#win-paint .zoom").removeClass("hidden");
            $("#win-paint .tool-zoom").addClass("selected");
            $("#win-paint .zoom ul li.zoom-type").removeClass("selected");
            WinPaint.tool = "zoom";
            WinPaint.toolType = "zoom-in";
            $("#win-paint .zoom ul li.zoom-type." + WinPaint.toolType).addClass("selected");
            return false
        },
        cmdToolCenter: function () {
            WinPaint._commit();
            WinPaint._clearToolSelection();
            $("#win-paint .tool-options .label").text(g_loc.getText("paint.tool_center"));
            $("#win-paint .tool-center").addClass("selected");
            $("#win-paint .centertool").removeClass("hidden");
            WinPaint.tool = "center";
            WinPaint.drawCenter();
            return false
        },
        undoClear: function () {
            WinPaint.undoStack = [];
            WinPaint.redoIndex =
                0
        },
        addUndo: function () {
            WinPaint.undoStack.length > 0 && WinPaint.redoIndex < WinPaint.undoStack.length && WinPaint.undoStack.splice(WinPaint.redoIndex, WinPaint.undoStack.length - WinPaint.redoIndex);
            var b = new Image;
            try {
                b.src = WinPaint.canvas.toDataURL()
            } catch (c) {
                if (c.name == "SECURITY_ERR" && c.code == 18) return
            }
            WinPaint.undoStack.push(b);
            WinPaint.undoStack.length > WinPaint.undoLimit ? WinPaint.undoStack.splice(0, 1) : WinPaint.redoIndex++
        },
        cmdUndo: function () {
            WinPaint._commit();
            if (WinPaint.undoStack.length > 0 && WinPaint.redoIndex >
                1) {
                var b = WinPaint.undoStack[WinPaint.redoIndex - 2];
                WinPaint.context.clearRect(0, 0, WinPaint.canvas.width, WinPaint.canvas.height);
                WinPaint.context.drawImage(b, 0, 0);
                WinPaint.updateViewport();
                WinPaint.redoIndex--
            }
            return false
        },
        cmdRedo: function () {
            WinPaint._commit();
            if (WinPaint.undoStack.length > 0 && WinPaint.redoIndex < WinPaint.undoStack.length) {
                var b = WinPaint.undoStack[WinPaint.redoIndex];
                WinPaint.context.clearRect(0, 0, WinPaint.canvas.width, WinPaint.canvas.height);
                WinPaint.context.drawImage(b, 0, 0);
                WinPaint.updateViewport();
                WinPaint.redoIndex++
            }
            return false
        },
        cmdCenter: function (b) {
            var b = $(this),
                c = WinPaint.findBounds();
            if (b.hasClass("center-tl")) {
                WinPaint.centerX = Math.floor(c.left);
                WinPaint.centerY = Math.floor(c.top)
            } else if (b.hasClass("center-ml")) {
                WinPaint.centerX = Math.floor(c.left);
                WinPaint.centerY = Math.floor(c.top + (c.bottom - c.top) / 2)
            } else if (b.hasClass("center-bl")) {
                WinPaint.centerX = Math.floor(c.left);
                WinPaint.centerY = Math.floor(c.bottom)
            } else if (b.hasClass("center-tc")) {
                WinPaint.centerX = Math.floor(c.left + (c.right -
                    c.left) / 2);
                WinPaint.centerY = Math.floor(c.top)
            } else if (b.hasClass("center-c")) {
                WinPaint.centerX = Math.floor(c.left + (c.right - c.left) / 2);
                WinPaint.centerY = Math.floor(c.top + (c.bottom - c.top) / 2)
            } else if (b.hasClass("center-bc")) {
                WinPaint.centerX = Math.floor(c.left + (c.right - c.left) / 2);
                WinPaint.centerY = Math.floor(c.bottom)
            } else if (b.hasClass("center-tr")) {
                WinPaint.centerX = Math.floor(c.right);
                WinPaint.centerY = Math.floor(c.top)
            } else if (b.hasClass("center-mr")) {
                WinPaint.centerX = Math.floor(c.right);
                WinPaint.centerY =
                    Math.floor(c.top + (c.bottom - c.top) / 2)
            } else if (b.hasClass("center-br")) {
                WinPaint.centerX = Math.floor(c.right);
                WinPaint.centerY = Math.floor(c.bottom)
            }
            WinPaint.updateViewport()
        },
        drawCenter: function (b) {
            b = b || "#000";
            if (WinPaint.centerX === void 0 || WinPaint.centerX === null || WinPaint.centerY === void 0 || WinPaint.centerY === null) {
                var c = WinPaint.findBounds();
                WinPaint.centerX = Math.floor(c.left + (c.right - c.left) / 2);
                WinPaint.centerY = Math.floor(c.top + (c.bottom - c.top) / 2)
            }
            WinPaint.centerContext.save();
            WinPaint.centerContext.scale(WinPaint.zoomLevel,
                WinPaint.zoomLevel);
            WinPaint.centerContext.translate(-WinPaint.viewportX, -WinPaint.viewportY);
            WinPaint.centerContext.lineWidth = 1 / WinPaint.zoomLevel;
            WinPaint.centerContext.strokeStyle = b;
            WinPaint.centerContext.beginPath();
            WinPaint.centerContext.moveTo(WinPaint.centerX, 0);
            WinPaint.centerContext.lineTo(WinPaint.centerX, WinPaint.center.height);
            WinPaint.centerContext.stroke();
            WinPaint.centerContext.beginPath();
            WinPaint.centerContext.moveTo(0, WinPaint.centerY);
            WinPaint.centerContext.lineTo(WinPaint.center.width,
                WinPaint.centerY);
            WinPaint.centerContext.stroke();
            WinPaint.centerContext.restore();
            WinPaint.centerVisible = true;
            WinPaint.updateToggleCenterText()
        },
        clearCenter: function () {
            WinPaint.centerContext.clearRect(0, 0, WinPaint.center.width, WinPaint.center.height);
            WinPaint.centerVisible = false;
            WinPaint.updateToggleCenterText();
            WinPaint.updateViewport()
        },
        drawGrid: function () {
            $("#win-paint div.canvas").css("background-image", "");
            WinPaint.gridVisible = true;
            WinPaint.updateToggleGridText()
        },
        clearGrid: function () {
            $("#win-paint div.canvas").css("background-image",
                "none");
            WinPaint.gridVisible = false;
            WinPaint.updateToggleGridText()
        },
        drawSelectionOutline: function (b) {
            b = b != null ? b : true;
            WinPaint.overlayContext.save();
            WinPaint.overlayContext.lineWidth = 1;
            WinPaint.overlayContext.strokeStyle = "#333";
            WinPaint.overlayContext.fillStyle = "#fff";
            WinPaint.overlayContext.beginPath();
            WinPaint.overlayContext.strokeRect(WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
            if (b) {
                b = WinPaint.selectionX + WinPaint.selectionWidth / 2;
                WinPaint.rotationLeverX =
                    b - WinPaint.rotateLeverSize / 2;
                WinPaint.rotationLeverY = WinPaint.selectionY - 30 - WinPaint.rotateLeverSize / 2;
                WinPaint.overlayContext.moveTo(b, WinPaint.selectionY - 30);
                WinPaint.overlayContext.lineTo(b, WinPaint.selectionY);
                WinPaint.overlayContext.stroke();
                WinPaint.overlayContext.closePath();
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.rect(WinPaint.rotationLeverX, WinPaint.rotationLeverY, WinPaint.rotateLeverSize, WinPaint.rotateLeverSize);
                WinPaint.overlayContext.fill();
                var b = WinPaint.resizeHandleSize /
                    2,
                    c = WinPaint.selectionWidth / 2,
                    d = WinPaint.selectionHeight / 2;
                WinPaint.overlayContext.stroke();
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.rect(WinPaint.selectionX - b, WinPaint.selectionY - b, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize);
                WinPaint.overlayContext.fill();
                WinPaint.overlayContext.stroke();
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.rect(WinPaint.selectionX + WinPaint.selectionWidth - b, WinPaint.selectionY - b, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize);
                WinPaint.overlayContext.fill();
                WinPaint.overlayContext.stroke();
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.rect(WinPaint.selectionX + WinPaint.selectionWidth - b, WinPaint.selectionY + WinPaint.selectionHeight - b, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize);
                WinPaint.overlayContext.fill();
                WinPaint.overlayContext.stroke();
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.rect(WinPaint.selectionX - b, WinPaint.selectionY + WinPaint.selectionHeight - b, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize);
                WinPaint.overlayContext.fill();
                WinPaint.overlayContext.stroke();
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.rect(WinPaint.selectionX + c - b, WinPaint.selectionY - b, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize);
                WinPaint.overlayContext.fill();
                WinPaint.overlayContext.stroke();
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.rect(WinPaint.selectionX + WinPaint.selectionWidth - b, WinPaint.selectionY + d - b, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize);
                WinPaint.overlayContext.fill();
                WinPaint.overlayContext.stroke();
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.rect(WinPaint.selectionX + c - b, WinPaint.selectionY + WinPaint.selectionHeight - b, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize);
                WinPaint.overlayContext.fill();
                WinPaint.overlayContext.stroke();
                WinPaint.overlayContext.beginPath();
                WinPaint.overlayContext.rect(WinPaint.selectionX - b, WinPaint.selectionY + d - b, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize);
                WinPaint.overlayContext.fill();
                WinPaint.overlayContext.stroke()
            }
            WinPaint.overlayContext.restore()
        },
        updateToggleCenterText: function () {
            var b = !WinPaint.centerVisible ? g_loc.getText("paint.menu_showcenter") : g_loc.getText("paint.menu_hidecenter");
            $("#win-paint .edit .menu .toggle-center").text(b)
        },
        updateToggleGridText: function () {
            var b = !WinPaint.gridVisible ? g_loc.getText("paint.menu_showgrid") : g_loc.getText("paint.menu_hidegrid");
            $("#win-paint .edit .menu .toggle-grid").text(b)
        },
        updateViewport: function () {
            WinPaint.viewportX = parseInt(WinPaint.viewportX);
            WinPaint.viewportY = parseInt(WinPaint.viewportY);
            WinPaint.viewportContext.clearRect(0,
                0, WinPaint.viewport.width, WinPaint.viewport.height);
            WinPaint.viewportContext.save();
            WinPaint.viewportContext.scale(WinPaint.zoomLevel, WinPaint.zoomLevel);
            WinPaint.viewportContext.translate(-WinPaint.viewportX, -WinPaint.viewportY);
            WinPaint.centerContext.clearRect(0, 0, WinPaint.center.width, WinPaint.center.height);
            WinPaint.centerContext.save();
            WinPaint.centerContext.scale(WinPaint.zoomLevel, WinPaint.zoomLevel);
            WinPaint.centerContext.translate(-WinPaint.viewportX, -WinPaint.viewportY);
            if (WinPaint.zoomLevel >=
                4) {
                WinPaint.centerContext.lineWidth = 1 / WinPaint.zoomLevel;
                WinPaint.centerContext.strokeStyle = "#aaa";
                WinPaint.centerContext.beginPath();
                for (var b = 0; b < WinPaint.center.width; b = b + 1) {
                    WinPaint.centerContext.moveTo(b, 0);
                    WinPaint.centerContext.lineTo(b, WinPaint.center.height)
                }
                for (b = 0; b < WinPaint.center.height; b = b + 1) {
                    WinPaint.centerContext.moveTo(0, b);
                    WinPaint.centerContext.lineTo(WinPaint.center.width, b)
                }
                WinPaint.centerContext.stroke();
                WinPaint.clearGrid()
            } else {
                WinPaint.drawGrid();
                $("#win-paint .canvas").css("background-size",
                    30 * WinPaint.zoomLevel + "px")
            }
            WinPaint.viewportContext.drawImage(WinPaint.canvas, 0, 0);
            WinPaint.viewportContext.restore();
            WinPaint.centerContext.restore();
            WinPaint.centerVisible && WinPaint.drawCenter(WinPaint.centerStyle);
            WinPaint.maskContext.save();
            WinPaint.maskContext.fillStyle = "#999";
            WinPaint.maskContext.clearRect(-1E5, -1E5, 2E5, 2E5);
            WinPaint.maskContext.fillRect(parseInt(-WinPaint.viewportX * WinPaint.zoomLevel - 1E5), parseInt(-WinPaint.viewportY * WinPaint.zoomLevel), 1E5, 1E5);
            WinPaint.maskContext.fillRect(-1E5,
                parseInt(-WinPaint.viewportY * WinPaint.zoomLevel - 1E5), 2E5, 1E5);
            WinPaint.maskContext.fillRect(parseInt((WinPaint.canvas.width - WinPaint.viewportX) * WinPaint.zoomLevel), parseInt(-WinPaint.viewportY * WinPaint.zoomLevel), 1E5, 1E5);
            WinPaint.maskContext.fillRect(parseInt(-WinPaint.viewportX * WinPaint.zoomLevel - 1E4), parseInt((WinPaint.canvas.height - WinPaint.viewportY) * WinPaint.zoomLevel), 1E5, 1E5);
            WinPaint.maskContext.restore()
        },
        clearCanvas: function (b) {
            b = b != null ? b : true;
            WinPaint.mediaId = 0;
            WinPaint.dirty = true;
            WinPaint.context.clearRect(0,
                0, WinPaint.canvas.width, WinPaint.canvas.height);
            WinPaint.viewportContext.clearRect(0, 0, WinPaint.viewport.width, WinPaint.viewport.height);
            WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width, WinPaint.overlay.height);
            WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
            WinPaint.centerContext.clearRect(0, 0, WinPaint.center.width, WinPaint.center.height);
            WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height);
            b && WinPaint.addUndo()
        },
        flipCanvasHorizontally: function () {
            WinPaint.selectionContext.drawImage(WinPaint.canvas, 0, 0);
            WinPaint.context.clearRect(0, 0, WinPaint.canvas.width, WinPaint.canvas.height);
            WinPaint.context.save();
            WinPaint.context.scale(-1, 1);
            if (WinPaint.centerX === void 0 || WinPaint.centerX === null) {
                var b = WinPaint.findBounds();
                WinPaint.centerX = Math.floor(b.left + (b.right - b.left) / 2);
                WinPaint.centerY = Math.floor(b.top + (b.bottom - b.top) / 2)
            }
            WinPaint.context.drawImage(WinPaint.selection, -2 * WinPaint.centerX, 0);
            WinPaint.context.restore();
            WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
            WinPaint.addUndo();
            WinPaint.updateViewport()
        },
        flipCanvasVertically: function () {
            WinPaint.selectionContext.drawImage(WinPaint.canvas, 0, 0);
            WinPaint.context.clearRect(0, 0, WinPaint.canvas.width, WinPaint.canvas.height);
            WinPaint.context.save();
            WinPaint.context.scale(1, -1);
            if (WinPaint.centerY === void 0 || WinPaint.centerY === null) {
                var b = WinPaint.findBounds();
                WinPaint.centerX = Math.floor(b.left + (b.right - b.left) / 2);
                WinPaint.centerY =
                    Math.floor(b.top + (b.bottom - b.top) / 2)
            }
            WinPaint.context.drawImage(WinPaint.selection, 0, -2 * WinPaint.centerY);
            WinPaint.context.restore();
            WinPaint.selectionContext.clearRect(0, 0, WinPaint.selection.width, WinPaint.selection.height);
            WinPaint.addUndo();
            WinPaint.updateViewport()
        },
        zoomTo: function (b) {
            WinPaint._commit();
            WinPaint.zoomLevel = b;
            WinPaint.viewportX = -($("#win-paint div.canvas").innerWidth() / WinPaint.zoomLevel - WinPaint.editingWidth) / 2;
            WinPaint.viewportY = -($("#win-paint div.canvas").innerHeight() / WinPaint.zoomLevel -
                WinPaint.editingHeight) / 2;
            WinPaint.updateViewport();
            WinPaint.updateZoomLevelDisplay()
        },
        zoomIn: function (b, c) {
            b = b != null ? b : WinPaint.viewportX;
            c = c != null ? c : WinPaint.viewportY;
            WinPaint._commit();
            WinPaint.zoomLevel = WinPaint.zoomLevel * 2;
            WinPaint.zoomLevel = Math.min(WinPaint.zoomLevel, WinPaint.maxZoomLevel);
            WinPaint.viewportX = b + $("#win-paint div.canvas").innerWidth() / 2 / WinPaint.zoomLevel;
            WinPaint.viewportY = c + $("#win-paint div.canvas").innerHeight() / 2 / WinPaint.zoomLevel;
            WinPaint.updateViewport();
            WinPaint.updateZoomLevelDisplay()
        },
        zoomOut: function (b, c) {
            b = b != null ? b : WinPaint.viewportX;
            c = c != null ? c : WinPaint.viewportY;
            WinPaint._commit();
            WinPaint.zoomLevel = WinPaint.zoomLevel / 2;
            WinPaint.zoomLevel = Math.max(WinPaint.zoomLevel, WinPaint.minZoomLevel);
            WinPaint.viewportX = b - WinPaint.mask.width / 2 / WinPaint.zoomLevel;
            WinPaint.viewportY = c - WinPaint.mask.height / 2 / WinPaint.zoomLevel;
            var d = $("#win-paint div.canvas").innerWidth(),
                e = $("#win-paint div.canvas").innerHeight();
            if (WinPaint.viewportX < 0) WinPaint.viewportX = 0;
            if ((WinPaint.editingWidth - WinPaint.viewportX) *
                WinPaint.zoomLevel < d) WinPaint.viewportX = WinPaint.editingWidth - d / WinPaint.zoomLevel;
            if (WinPaint.viewportY < 0) WinPaint.viewportY = 0;
            if ((WinPaint.editingHeight - WinPaint.viewportY) * WinPaint.zoomLevel < e) WinPaint.viewportY = WinPaint.editingHeight - e / WinPaint.zoomLevel;
            if (WinPaint.editingWidth * WinPaint.zoomLevel <= d && WinPaint.editingHeight * WinPaint.zoomLevel <= e) {
                WinPaint.viewportX = -(d / WinPaint.zoomLevel - WinPaint.editingWidth) / 2;
                WinPaint.viewportY = -(e / WinPaint.zoomLevel - WinPaint.editingHeight) / 2
            }
            WinPaint.updateViewport();
            WinPaint.updateZoomLevelDisplay()
        },
        updateZoomLevelDisplay: function () {
            $("#win-paint li.indicator").removeClass("active");
            var b = false;
            $("#win-paint li.indicator").each(function () {
                if (!b) {
                    var c = parseFloat($(this).attr("data-value"));
                    if (WinPaint.zoomLevel <= c) {
                        $(this).addClass("active");
                        b = true
                    }
                }
            })
        },
        toggleCenter: function () {
            WinPaint.centerVisible ? WinPaint.clearCenter() : WinPaint.drawCenter()
        },
        toggleGrid: function () {
            WinPaint.gridVisible ? WinPaint.clearGrid() : WinPaint.drawGrid()
        },
        scaleSelection: function (b, c) {
            var d =
                WinPaint.selectionWidth * b,
                e = WinPaint.selectionHeight * c;
            WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height);
            WinPaint.bufferContext.drawImage(WinPaint.selection, 0, 0);
            WinPaint.selectionContext.clearRect(0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight);
            WinPaint.selectionContext.drawImage(WinPaint.buffer, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, 0, 0, d, e);
            WinPaint.selectionWidth = d;
            WinPaint.selectionHeight = e;
            WinPaint.overlayContext.clearRect(0, 0, WinPaint.overlay.width,
                WinPaint.overlay.height);
            WinPaint.overlayContext.drawImage(WinPaint.selection, 0, 0, WinPaint.selectionWidth, WinPaint.selectionHeight, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight);
            WinPaint.drawSelectionOutline();
            WinPaint.bufferContext.clearRect(0, 0, WinPaint.buffer.width, WinPaint.buffer.height)
        },
        getSelectionLocation: function (b, c) {
            var d = WinPaint.resizeHandleSize / 2,
                e = WinPaint.selectionWidth / 2,
                f = WinPaint.selectionHeight / 2;
            return WinPaint.isContained(b, c, WinPaint.rotationLeverX,
                    WinPaint.rotationLeverY, WinPaint.rotateLeverSize, WinPaint.rotateLeverSize) ? "rotation_lever" : WinPaint.isContained(b, c, WinPaint.selectionX - d, WinPaint.selectionY - d, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize) ? "nw_corner" : WinPaint.isContained(b, c, WinPaint.selectionX + WinPaint.selectionWidth - d, WinPaint.selectionY - d, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize) ? "ne_corner" : WinPaint.isContained(b, c, WinPaint.selectionX + WinPaint.selectionWidth - d, WinPaint.selectionY + WinPaint.selectionHeight - d,
                    WinPaint.resizeHandleSize, WinPaint.resizeHandleSize) ? "se_corner" : WinPaint.isContained(b, c, WinPaint.selectionX - d, WinPaint.selectionY + WinPaint.selectionHeight - d, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize) ? "sw_corner" : WinPaint.isContained(b, c, WinPaint.selectionX + e - d, WinPaint.selectionY - d, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize) ? "n_edge" : WinPaint.isContained(b, c, WinPaint.selectionX + WinPaint.selectionWidth - d, WinPaint.selectionY + f - d, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize) ?
                "e_edge" : WinPaint.isContained(b, c, WinPaint.selectionX + e - d, WinPaint.selectionY + WinPaint.selectionHeight - d, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize) ? "s_edge" : WinPaint.isContained(b, c, WinPaint.selectionX - d, WinPaint.selectionY + f - d, WinPaint.resizeHandleSize, WinPaint.resizeHandleSize) ? "w_edge" : WinPaint.isContained(b, c, WinPaint.selectionX, WinPaint.selectionY, WinPaint.selectionWidth, WinPaint.selectionHeight) ? "inside" : "outside"
        },
        isContained: function (b, c, d, e, f, g) {
            return b >= d && b <= d + f && c >= e && c <= e +
                g
        },
        getRotationBoundingBox: function (b, c, d, e, f, g) {
            var h = c + e / 2,
                j = d + f / 2,
                k = c + e,
                l = d + f,
                e = WinPaint.transformX(c, d, h, j, g),
                f = WinPaint.transformY(c, d, h, j, g),
                m = WinPaint.transformX(k, d, h, j, g),
                d = WinPaint.transformY(k, d, h, j, g),
                n = WinPaint.transformX(k, l, h, j, g),
                k = WinPaint.transformY(k, l, h, j, g),
                q = WinPaint.transformX(c, l, h, j, g),
                g = WinPaint.transformY(c, l, h, j, g),
                c = Math.min.apply(Math, [e, m, n, q]),
                h = Math.max.apply(Math, [e, m, n, q]),
                j = Math.min.apply(Math, [f, d, k, g]),
                f = Math.max.apply(Math, [f, d, k, g]);
            return WinPaint.findBoxBounds(b,
                c, j, Math.abs(h - c), Math.abs(f - j))
        },
        transformX: function (b, c, d, e, f) {
            return d + (b - d) * Math.cos(f) + (c - e) * Math.sin(f)
        },
        transformY: function (b, c, d, e, f) {
            return e - (b - d) * Math.sin(f) + (c - e) * Math.cos(f)
        },
        distance: function (b, c) {
            var d = c.y - b.y;
            return Math.sqrt(Math.pow(c.x - b.x, 2) + Math.pow(d, 2))
        },
        angle: function (b, c) {
            return Math.atan2(c.x - b.x, c.y - b.y)
        }
    },
    WinSVGPaint = {
        init: function () {
            $("#win-svgpaint > .save").unbind().click(function () {
                WinSVGPaint.save();
                WinSVGPaint.hide();
                return false
            });
            $("#win-svgpaint > .exit").unbind().click(function () {
                IDE.confirmDialog("你想放弃你的改变吗?",
                    function () {
                        WinSVGPaint.hide()
                    }, "放弃改变", "取消",
                    function () { });
                $("#confirm").modal();
                return false
            });
            WinSVGPaint.adjustWindow();
            $(window).resize(WinSVGPaint.adjustWindow)
        },
        adjustWindow: function () {
            var b = $("#win-svgpaint");
            b.hasClass("hidden") || b.find("iframe").css("height", b.innerHeight() - b.find(".buttonbar").outerHeight())
        },
        hide: function () {
            var b = $("#win-svgpaint");
            b.addClass("hidden");
            b.find("iframe").attr("src") != "ide/imgs/blank.png" && b.find("iframe").attr("src", "ide/imgs/blank.png")
        },
        enableDialogButtons: function (b) {
            b ? $("#win-svgpaint .buttonbar button").removeClass("disable") : $("#win-svgpaint .buttonbar button").addClass("disable")
        },
        edit: function (b, c, d, e, f) {
            WinSVGPaint.doneCallback = f;
            c ? $("#win-svgpaint").removeClass("hidden").find("iframe").attr("src", "ide/paint/index.html?image_url=" + escape(c) + "&cx=" + d + "&cy=" + e + "&initTool=select&dimensions=" + Runtime.stage.getWidth() + "," + Runtime.stage.getHeight()) : $("#win-svgpaint").removeClass("hidden").find("iframe").attr("src", "ide/paint/index.html?dimensions=" +
                Runtime.stage.getWidth() + "," + Runtime.stage.getHeight());
            $("#win-svgpaint iframe")[0].onload = function () {
                $("#win-svgpaint iframe").focus()
            };
            WinSVGPaint.adjustWindow();
            return false
        },
        save: function () {
            $("#win-svgpaint iframe")[0].contentWindow.svgCanvas.save();
            return false
        },
        _doneCallback: function (b, c, d) {
            $.ajax({
                url: "api/medialibsave.aspx",
                type: "POST",
                data: {
                    t: "drawing",
                    d: b
                },
                success: function (b) {
                    b = JSON.parse(b);
                    if (b.result) WinSVGPaint.mediaId = b.id;
                    WinSVGPaint.doneCallback && WinSVGPaint.doneCallback("assets/user/" +
                        WinSVGPaint.mediaId + ".svg", c, d);
                    WinSVGPaint.hide()
                }
            })
        }
    },
    WinLessons = {
        cMilestoneButtonTimeout: 3E3,
        cDoForMeTimeout: 1E4,
        _doForMeId: null,
        _locPrefix: "",
        sideImage: null,
        _listeners: [],
        playIndex: 0,
        helpButton: null,
        _enableButtonTimeout: null,
        _nextButtonTimeout: null,
        _id: 1,
        _scriptNumber: 0,
        _stepNumber: 0,
        _displayEndNotes: !0,
        _displayHidePlaybar: !1,
        globalVars: {},
        blocksUsed: [],
        resourcesUsed: [],
        currentPbIdx: -2,
        currentPlayStep: null,
        init: function () {
            $("#annotations ul").sortable({
                handle: ".context,.info",
                update: function () {
                    $("#annotations li").each(function (b) {
                        $(this).find("h1").text(b +
                            1);
                        $(this).data("info")
                    })
                }
            });
            WinCode.addChangeListener(WinLessons.blocksChanged);
            $("#lesson-dialog div.buttons > a").click(function () {
                UIUtil.hideDialog($("#lesson-dialog"), function () {
                    $("#lesson-dialog").empty();
                    WinLessons.playAnnotations()
                });
                return false
            });
            return false
        },
        addListener: function (b) {
            WinLessons._listeners.indexOf(b) < 0 && WinLessons._listeners.push(b)
        },
        removeListener: function (b) {
            b = WinLessons._listeners.indexOf(b);
            b >= 0 && WinLessons._listeners.splice(b, 1)
        },
        removeAllListeners: function () {
            WinLessons._listeners = []
        },
        _broadcast: function (b) {
            for (var c = 0; c < WinLessons._listeners.length; c++) WinLessons._listeners[c](b)
        },
        initializeLargestId: function () {
            WinLessons._id = 1;
            for (var b = 0; b < Runtime.background.scripts.length; b++) WinLessons._findLargestId(Runtime.background.scripts[b]);
            WinLessons._findLargestId(Runtime.background.scripts);
            for (b = 0; b < Runtime.sprites.length; b++)
                for (var c = Runtime.sprites[b].scripts, d = 0; d < c.length; d++) WinLessons._findLargestId(c[d]);
            WinLessons._id++;
            return WinLessons._id
        },
        show: function () {
            $("#annotations li").length ==
                0 ? WinLessons._loadLesson(WinLessons._show) : WinLessons._show()
        },
        _show: function () {
            $("#win-lessons-details input").val() || $("#win-lessons-details input").val(IDE.currentProjectName);
            $("#win-lessons-details textarea.description").val() || $("#win-lessons-details textarea.description").val(IDE.currentProjectDescription);
            var b = $("#win-lessons-desc");
            b.find(".buttonbar").empty();
            var c = $('<a href="#" class="btn-right btn-round medium action">' + g_loc.getText("winlessons.btncreatenew") + "</a>");
            b.find(".buttonbar").append(c);
            c.click(function () {
                if (!$("#win-lessons-details input").val() || !$("#win-lessons-details textarea").val()) IDE.showInfoDialog("Error", "Please enter a lesson name and description");
                else {
                    for (var b = 0; b < Runtime.background.scripts.length; b++) Scripts.clearIds(Runtime.background.scripts[b]);
                    for (b = 0; b < Runtime.sprites.length; b++)
                        for (var c = Runtime.sprites[b].scripts, f = 0; f < c.length; f++) Scripts.clearIds(c[f]);
                    $("#annotations ul").empty();
                    WinLessons.constructFromProject();
                    $.modal.close();
                    WinLessons.showList()
                }
                return false
            });
            c = $('<a href="#" class="btn-right btn-round medium secondary">' + g_loc.getText("winlessons.btncancel") + "</a>");
            b.find(".buttonbar").append(c);
            c.click(function () {
                $.modal.close();
                return false
            });
            if ($("#win-lessons li").length > 0) {
                c = $('<a href="#" class="btn-right btn-round medium secondary">' + g_loc.getText("winlessons.btnupdateexisting") + "</a>");
                b.find(".buttonbar").append(c);
                c.click(function () {
                    if (!$("#win-lessons-details input").val() || !$("#win-lessons-details textarea").val()) IDE.showInfoDialog("Error",
                        "Please enter a lesson name and description");
                    else {
                        $.modal.close();
                        WinLessons.constructFromProject();
                        WinLessons.showList()
                    }
                    return false
                });
                c = $('<a href="#" class="btn-right btn-round medium secondary">' + g_loc.getText("winlessons.btneditexisting") + "</a>");
                b.find(".buttonbar").append(c);
                c.click(function () {
                    if (!$("#win-lessons-details input").val() || !$("#win-lessons-details textarea").val()) IDE.showInfoDialog("Error", "Please enter a lesson name and description");
                    else {
                        $.modal.close();
                        WinLessons.showList()
                    }
                    return false
                });
                c = $('<a href="#" class="btn-right btn-round medium secondary">' + g_loc.getText("winlessons.btnremove") + "</a>");
                b.find(".buttonbar").append(c);
                c.click(function () {
                    $.modal.close();
                    $("#annotations ul").empty();
                    $("#wincmd-runlesson").addClass("disabled");
                    var b = Runtime.stage.captureScreenshot();
                    IDE._doProjectSave(IDE.currentProjectName, IDE.currentProjectDescription, b, false, true, Runtime.currentLevelIndex, null, function () {
                        WinLessons._saveLesson()
                    });
                    return false
                })
            }
            b.css("height", window.innerHeight).css("width",
                window.innerWidth).modal()
        },
        showList: function () {
            $("#win-lessons").modal();
            $("#win-lessons .saveplayBtn").unbind().click(function () {
                var b = Runtime.stage.captureScreenshot();
                IDE.currentProjectDescription = $("#win-lessons-details textarea").val();
                IDE._doProjectSave($("#win-lessons-details input").val(), $("#win-lessons-details textarea").val(), b, false, true, Runtime.currentLevelIndex, null, function () {
                    WinLessons._saveLesson(function () {
                        window.location = "/ide?l=" + IDE.currentProjectId
                    })
                });
                return false
            });
            $("#win-lessons .saveBtn").unbind().click(function () {
                var b =
                    Runtime.stage.captureScreenshot();
                IDE.currentProjectDescription = $("#win-lessons-details textarea").val();
                IDE._doProjectSave($("#win-lessons-details input").val(), $("#win-lessons-details textarea").val(), b, false, true, Runtime.currentLevelIndex, null, function () {
                    WinLessons._saveLesson()
                });
                return false
            });
            $("#win-lessons .closeBtn").unbind().click(function () {
                $.modal.close();
                return false
            });
            $("#win-lessons .adddialogBtn").unbind().click(WinLessons.addDialog);
            $("#win-lessons .addfreeplayBtn").unbind().click(WinLessons.addFreeplay);
            $("#win-lessons .addcheckpointBtn").unbind().click(WinLessons.addCheckpoint);
            $("#win-lessons .toggleskipBtn").unbind().click(WinLessons.toggleAllSkip);
            $("#win-lessons .showhideskipBtn").unbind().click(WinLessons.toggleShowHideSkip);
            $("#win-lessons").css("height", window.innerHeight).css("width", window.innerWidth).modal();
            return false
        },
        hide: function () {
            $.modal.close()
        },
        reset: function () {
            playIndex = 0;
            helpButton = null;
            _id = 1;
            currentPbIdx = -2;
            $("#annotations ul").empty();
            $("#win-lessons-details input").val("");
            $("#win-lessons-details textarea").val("")
        },
        _getId: function () {
            return WinLessons._id++
        },
        getDetails: function () {
            return {
                name: $("#win-lessons-details input").val(),
                description: $("#win-lessons-details textarea.description").val(),
                showPlayer: $("#win-lessons-details .showplayer")[0].checked,
                instructions: $("#win-lessons-details textarea.instructions").val()
            }
        },
        setDetails: function (b) {
            WinLessons.ownerid = b.ownerid;
            var c = "";
            WinLessons._locPrefix && (c = g_loc.getText(WinLessons._locPrefix + "name", c));
            $("#win-lessons-details input").val(c);
            c = "";
            b.description && (c = b.description);
            WinLessons._locPrefix && (c = g_loc.getText(WinLessons._locPrefix + "description", c));
            $("#win-lessons-details textarea").val(c);
            IDE.currentProjectDescription = c;
            $("#win-lessons-details .showplayer")[0].checked = b.showPlayer ? true : false;
            c = "";
            b.instructions && (c = b.instructions);
            WinLessons._locPrefix && (c = g_loc.getText(WinLessons._locPrefix + "instructions", c));
            $("#win-lessons-details textarea.instructions").val(c);
            IDE.currentProjectInstructions = c
        },
        getNotes: function () {
            var b = {
                globalVars: WinLessons.globalVars,
                blocks: WinLessons.blocksUsed,
                resources: WinLessons.resourcesUsed,
                notes: []
            };
            $("#annotations li").each(function () {
                b.notes.push($(this).data("info"))
            });
            var c = 0,
                d;
            do {
                d = WinLessons._findSkipRange(b.notes, c);
                if (d != null) {
                    b.notes[d[0]].snapshot = WinLessons.trimSteps(b.notes, d[1]);
                    c = d[1] + 1
                }
            } while (d != null);
            for (c = 0; c < b.notes.length; c++)
                if (b.notes[c].milestoneType == 4) b.notes[c].snapshot = WinLessons.trimSteps(b.notes, c);
            return b
        },
        jumpToSnapshot: function (b) {
            var c = 0;
            $("#annotations li").each(function (d) {
                var e =
                    $(this).data("info");
                if (e.milestoneType == 4) {
                    if (c == b) {
                        e = e.snapshot;
                        e.background.canvasWidth = $(Runtime.stage.container).innerWidth();
                        e.background.canvasHeight = $(Runtime.stage.container).innerHeight();
                        e = JSON.stringify(e);
                        ObjectIO.deserialize(e, function () {
                            WinLessons.currentPbIdx = d;
                            var b = IDE._ignoreUpdates;
                            IDE._ignoreUpdates = false;
                            WinLessons.playAnnotations();
                            IDE._ignoreUpdates = b
                        });
                        return false
                    }
                    c++
                }
            })
        },
        setNotes: function (b) {
            WinLessons.globalVars = b.globalVars;
            WinLessons.blocksUsed = b.blocks;
            WinLessons.resourcesUsed =
                b.resources;
            WinLessons.initialState = b.initialState;
            WinLessons._makeNotes(b.notes)
        },
        _makeNotes: function (b) {
            var c = $("#annotations ul");
            c.empty();
            for (var d = 0; d < b.length; d++) {
                var e = b[d],
                    f = e.text;
                e.text = f;
                var g = !e.block && !e.attached && !e.resource && !e.properties;
                if (e.milestoneType == 1) {
                    if (WinLessons._locPrefix) {
                        f = g_loc.getText(WinLessons._locPrefix + "-1-" + e.id, f);
                        e.text = f
                    }
                    f = $('<li class="sortable"><div class="context"><h1 class="milestone">' + ($("#annotations li").length + 1) + '</h1></div><div class="info">Milestone</div><div class="content"><span>' +
                        f + '</span></div><a href="#" class="delete">X</a></li>')
                } else if (e.milestoneType == 2) {
                    if (WinLessons._locPrefix) {
                        f = g_loc.getText(WinLessons._locPrefix + "-2-" + e.id, f);
                        e.text = f
                    }
                    f = $('<li class="sortable"><div class="context"><h1 class="freeplay">' + ($("#annotations li").length + 1) + '</h1></div><div class="info">Freeplay</div><div class="content"><span>' + f + '</span></div><a href="#" class="delete">X</a></li>')
                } else if (e.milestoneType == 3) {
                    if (WinLessons._locPrefix) {
                        f = g_loc.getText(WinLessons._locPrefix + "-3-" + e.id,
                            f);
                        e.text = f
                    }
                    f = $('<li class="sortable"><div class="context"><h1 class="dialog">' + ($("#annotations li").length + 1) + '</h1></div><div class="info">Dialog</div><div class="content"><span>' + f + '</span></div><a href="#" class="delete">X</a></li>')
                } else if (e.milestoneType == 4) {
                    if (WinLessons._locPrefix) {
                        f = g_loc.getText(WinLessons._locPrefix + "-4-" + e.id, f);
                        e.text = f
                    }
                    f = $('<li class="sortable checkpoint"><div class="context"><h1 class="checkpoint">' + ($("#annotations li").length + 1) + '</h1></div><div class="info">Checkpoint</div><div class="content"><span>' +
                        f + '</span></div><a href="#" class="delete">X</a></li>')
                } else {
                    if (g) {
                        if (WinLessons._locPrefix) {
                            f = g_loc.getText(WinLessons._locPrefix + "-0-" + e.id, f);
                            e.text = f
                        }
                        f = $('<li><div class="context"><h1>' + ($("#annotations li").length + 1) + '</h1></div><div class="info"></div><div class="content"><span>' + f + '</span></div><a href="#" class="delete">X</a></li>')
                    } else {
                        if (WinLessons._locPrefix) {
                            f = g_loc.getText(WinLessons._locPrefix + e.id, f);
                            e.text = f
                        }
                        f = $('<li class="unsortable"><div class="context"><h1>' + ($("#annotations li").length +
                            1) + '</h1><label class="skip"><input type="checkbox"' + (e.skip ? " checked" : "") + '/>Skip</label></div><div class="info"></div><div class="content"><span>' + f + '</span></div><a href="#" class="delete">X</a></li>')
                    }
                    if (e.spriteName) (g = Sprites.getSpriteByName(e.spriteName)) && g.costumes.length > 0 && (g.costumes[0].imgPreview ? f.find("h1").after('<br/><img src="' + g.costumes[0].imgPreview + '"/>') : f.find("h1").after('<br/><img src="' + g.costumes[0].img + '"/>'));
                    else Runtime.background.costumes.length > 0 && (Runtime.background.costumes[0].imgPreview ?
                        f.find("h1").after('<br/><img src="' + Runtime.background.costumes[0].imgPreview + '"/>') : f.find("h1").after('<br/><img src="' + Runtime.background.costumes[0].img + '"/>'));
                    if (e.block) {
                        g = WinLessons.makeInfo(e);
                        f.find(".content").append('<span class="sinfo">(Script ' + (e.scriptNum + 1) + ", Step " + (e.stepNum + 1) + ")</span>");
                        f.find(".info").append(g.img)
                    } else if (e.resource) {
                        g = getFileExt(e.resource);
                        if (g == ".mp3" || g == ".wav") f.find(".info").append('<img src="ide/imgs/content/sound.png"/>');
                        else if (g == ".actor") (g =
                            Sprites.getSpriteByName(e.spriteName)) && g.costumes.length > 0 && (g.costumes[0].imgPreview ? f.find(".info").append('<img src="' + g.costumes[0].imgPreview + '"/>') : f.find(".info").append('<img src="' + g.costumes[0].img + '"/>'));
                        else (g = Sprites.getSpriteByName(e.spriteName)) && g.costumes.length > 0 ? g.costumes[0].imgPreview ? f.find(".info").append('<img src="' + g.costumes[0].imgPreview + '"/>') : f.find(".info").append('<img src="' + e.resource + '"/>') : f.find(".info").append('<img src="' + e.resource + '"/>')
                    } else if (e.block ==
                        null) {
                        if (e.attached && e.attached.length >= 3) {
                            g = e.name ? WinLessons.makeBlockByName({
                                block: e.attached[0],
                                name: e.name,
                                label: e.labelText
                            }) : WinLessons.makeBlockByName({
                                block: e.attached[0]
                            });
                            f.find(".content").append('<span class="sinfo">(Script ' + (e.scriptNum + 1) + ", Step " + (e.stepNum + 1) + ")</span>");
                            if (g) {
                                g.x = g.y = 0;
                                g._computeBounds();
                                f.find(".info").append(g.getImage())
                            }
                            f.find(".info").append("<br/>set value at #" + (e.attached[2] + 1) + " to " + e.attached[3])
                        }
                    } else if (e.attached.length >= 3) {
                        g = e.name ? WinLessons.makeBlockByName({
                            block: e.attached[0],
                            name: e.name,
                            label: e.labelText
                        }) : WinLessons.makeBlockByName({
                            block: e.attached[0]
                        });
                        f.find(".content").append('<span class="sinfo">(Script ' + (e.scriptNum + 1) + ", Step " + (e.stepNum + 1) + ")</span>");
                        if (g) {
                            g.x = g.y = 0;
                            g._computeBounds();
                            f.find(".info").append(g.getImage())
                        }
                        f.find(".info").append("<br/>set value at #" + (e.attached[2] + 1) + " to " + e.attached[3])
                    }
                }
                if (f.find("label.skip input").length > 0) f.find("label.skip input").click(WinLessons._enableSkip)[0].checked = e.skip;
                f.click(WinLessons._selectEvent);
                f.find(".content").click(WinLessons._editEvent);
                f.find("a.delete").click(WinLessons._deleteEvent);
                f.data("info", e);
                c.append(f)
            }
            b.length > 0 && IDE.currentProjectId ? $("#wincmd-runlesson").removeClass("disabled") : $("#wincmd-runlesson").addClass("disabled")
        },
        toggleShowHideSkip: function () {
            $("#annotations li.collapsed").length > 0 ? $("#annotations li").removeClass("collapsed") : $("#annotations input[type=checkbox]").each(function () {
                this.checked && $(this).parents("li").addClass("collapsed")
            })
        },
        toggleAllSkip: function () {
            var b = $("#annotations input[type=checkbox]");
            b.length > 0 && b[0].checked ? b.each(function () {
                this.checked = false;
                var b = $(this).parents("li").data("info");
                if (b) {
                    b.skip = this.checked;
                    $(this).data("info", b)
                }
            }) : b.each(function () {
                this.checked = true;
                var b = $(this).parents("li").data("info");
                if (b) {
                    b.skip = this.checked;
                    $(this).data("info", b)
                }
            })
        },
        addNote: function () {
            var b = $("#annotations li.selected");
            $("#annotations ul li textarea").blur();
            $("#annotations ul li").removeClass("selected");
            var c = {
                text: "<div><p>" + g_loc.getText("winlessons.addnotetext") + "</p></div>",
                block: null,
                spriteName: null,
                attached: null,
                resource: null,
                id: WinLessons._getId()
            },
                d = $('<li class="selected"><div class="context"><h1>' + ($("#annotations li").length + 1) + '</h1><label class="skip"><input type="checkbox"' + (c.skip ? " checked" : "") + '/>Skip</label></div><div class="info"></div><div class="content"><span>' + c.text + '</span></div><a href="#" class="delete">X</a></li>');
            if (d.find("label.skip input").length > 0) d.find("label.skip input").click(WinLessons._enableSkip)[0].checked = c.skip;
            d.click(WinLessons._selectEvent);
            d.find(".content").click(WinLessons._editEvent);
            d.find("a.delete").click(WinLessons._deleteEvent);
            if (b.length > 0) {
                b.after(d);
                $("#annotations li").each(function (b) {
                    $(this).find("h1").text(b + 1);
                    $(this).data("info")
                })
            } else {
                $("#annotations ul").append(d);
                $("#annotations").animate({
                    scrollTop: $("#annotations")[0].scrollHeight
                }, 1E3)
            }
            d.data("info", c);
            return false
        },
        addCheckpoint: function () {
            var b = $("#annotations li.selected");
            $("#annotations ul li textarea").blur();
            $("#annotations ul li").removeClass("selected");
            var c = {
                text: "<div><p>" + g_loc.getText("winlessons.addcheckpointtext") + "</p></div>",
                milestoneType: 4,
                block: null,
                spriteName: null,
                attached: null,
                resource: null,
                id: WinLessons._getId()
            },
                d = $('<li class="sortable checkpoint"><div class="context"><h1 class="checkpoint">' + ($("#annotations li").length + 1) + '</h1></div><div class="info">Checkpoint</div><div class="content"><span>' + c.text + '</span></div><a href="#" class="delete">X</a></li>');
            if (d.find("label.skip input").length > 0) d.find("label.skip input").click(WinLessons._enableSkip)[0].checked =
                c.skip;
            d.click(WinLessons._selectEvent);
            d.find(".content").click(WinLessons._editEvent);
            d.find("a.delete").click(WinLessons._deleteEvent);
            if (b.length > 0) {
                b.after(d);
                $("#annotations li").each(function (b) {
                    $(this).find("h1").text(b + 1);
                    $(this).data("info")
                })
            } else {
                $("#annotations ul").append(d);
                $("#annotations").animate({
                    scrollTop: $("#annotations")[0].scrollHeight
                }, 1E3)
            }
            d.data("info", c);
            return false
        },
        addDialog: function () {
            var b = $("#annotations li.selected");
            $("#annotations ul li textarea").blur();
            $("#annotations ul li").removeClass("selected");
            var c = {
                text: "<div><p>" + g_loc.getText("winlessons.adddialogtext") + "</p></div>",
                milestoneType: 3,
                block: null,
                spriteName: null,
                attached: null,
                resource: null,
                id: WinLessons._getId()
            },
                d = $('<li class="sortable"><div class="context"><h1 class="dialog">' + ($("#annotations li").length + 1) + '</h1><label class="skip"><input type="checkbox"' + (c.skip ? " checked" : "") + '/>Skip</label></div><div class="info">Dialog</div><div class="content"><span>' + c.text + '</span><a href="#" class="delete">X</a></li>');
            if (d.find("label.skip input").length >
                0) d.find("label.skip input").click(WinLessons._enableSkip)[0].checked = c.skip;
            d.click(WinLessons._selectEvent);
            d.find(".content").click(WinLessons._editEvent);
            d.find("a.delete").click(WinLessons._deleteEvent);
            if (b.length > 0) {
                b.after(d);
                $("#annotations li").each(function (b) {
                    $(this).find("h1").text(b + 1);
                    $(this).data("info")
                })
            } else {
                $("#annotations ul").append(d);
                $("#annotations").animate({
                    scrollTop: $("#annotations")[0].scrollHeight
                }, 1E3)
            }
            d.data("info", c);
            return false
        },
        addFreeplay: function () {
            var b = $("#annotations li.selected");
            $("#annotations ul li textarea").blur();
            $("#annotations ul li").removeClass("selected");
            var c = {
                text: "<div><p>" + g_loc.getText("winlessons.addfreeplaytext") + "</p></div>",
                milestoneType: 2,
                block: null,
                spriteName: null,
                attached: null,
                resource: null,
                id: WinLessons._getId()
            },
                d = $('<li class="sortable"><div class="context"><h1 class="freeplay">' + ($("#annotations li").length + 1) + '</h1><label class="skip"><input type="checkbox"' + (c.skip ? " checked" : "") + '/>Skip</label></div><div class="info">Freeplay</div><div class="content"><span>' +
                    c.text + '</span><a href="#" class="delete">X</a></li>');
            if (d.find("label.skip input").length > 0) d.find("label.skip input").click(WinLessons._enableSkip)[0].checked = c.skip;
            d.click(WinLessons._selectEvent);
            d.find(".content").click(WinLessons._editEvent);
            d.find("a.delete").click(WinLessons._deleteEvent);
            if (b.length > 0) {
                b.after(d);
                $("#annotations li").each(function (b) {
                    $(this).find("h1").text(b + 1);
                    $(this).data("info")
                })
            } else {
                $("#annotations ul").append(d);
                $("#annotations").animate({
                    scrollTop: $("#annotations")[0].scrollHeight
                },
                    1E3)
            }
            d.data("info", c);
            return false
        },
        addMilestone: function () {
            var b = $("#annotations li.selected");
            $("#annotations ul li textarea").blur();
            $("#annotations ul li").removeClass("selected");
            var c = {
                text: "<div><p>" + g_loc.getText("winlessons.addmilestonetext") + "</p></div>",
                milestoneType: 1,
                block: null,
                spriteName: null,
                attached: null,
                resource: null,
                id: WinLessons._getId()
            },
                d = $('<li class="sortable"><div class="context"><h1 class="milestone">' + ($("#annotations li").length + 1) + '</h1><label class="skip"><input type="checkbox"' +
                    (c.skip ? " checked" : "") + '/>Skip</label></div><div class="info">Milestone</div><div class="content"><span>' + c.text + '</span><a href="#" class="delete">X</a></li>');
            if (d.find("label.skip input").length > 0) d.find("label.skip input").click(WinLessons._enableSkip)[0].checked = c.skip;
            d.click(WinLessons._selectEvent);
            d.find(".content").click(WinLessons._editEvent);
            d.find("a.delete").click(WinLessons._deleteEvent);
            if (b.length > 0) {
                b.after(d);
                $("#annotations li").each(function (b) {
                    $(this).find("h1").text(b + 1);
                    $(this).data("info")
                })
            } else {
                $("#annotations ul").append(d);
                $("#annotations").animate({
                    scrollTop: $("#annotations")[0].scrollHeight
                }, 1E3)
            }
            d.data("info", c);
            return false
        },
        _enableSkip: function () {
            var b = $(this).parents("li").data("info");
            if (b) {
                b.skip = $(this)[0].checked;
                $(this).data("info", b)
            }
        },
        _selectEvent: function () {
            if (!$(this).hasClass("selected")) {
                $("#annotations ul li textarea").blur();
                $("#annotations ul li").removeClass("selected");
                $(this).addClass("selected")
            }
        },
        _editEvent: function () {
            if ($(this).parents("li").find("textarea").length > 0) return false;
            $("#annotations ul li textarea").blur();
            var b = $(this).parents("li").data("info").text,
                c = $("<textarea></textarea>");
            c.blur(WinLessons._editDoneEvent).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            c.val(b);
            $(this).find("span:first").empty().append(c);
            c.focus()
        },
        _editDoneEvent: function () {
            var b = $(this).val(),
                c = $(this).parents("li"),
                d = c.data("info");
            d.text = b;
            c.data("info", d);
            c.find("span:first").empty().html(b);
            $("#annotations li").each(function (b) {
                $(this).find("h1").removeClass("hidden").text(b + 1);
                $(this).data("info")
            });
            c.find(".content").click(WinLessons._editEvent)
        },
        _deleteEvent: function () {
            $(this).parents("li").detach();
            return false
        },
        _refreshEvent: function () {
            var b = $(this).parents("li"),
                c = b.data("info"),
                d = WinLessons._makeDefaultStepNote(c);
            b.find("> span").empty().append(d);
            c.text = "<div>" + d + "</div>";
            return false
        },
        _makeDefaultStepNote: function (b) {
            var c, d;
            if (b.block != null)
                if (b.block.substring(0, 5) == "value")
                    if (b.attached == null) {
                        c = g_loc.formatText("lessontitle.label", b.spriteName ? b.spriteName : "Stage");
                        d = g_loc.formatText("generate.label", WinLessons._createBlockLabel(b.block),
                            b.spriteName ? b.spriteName : "Stage")
                    } else if (b.attached.length == 3) {
                        c = g_loc.formatText("lessontitle.addtolabelsocket", b.spriteName ? b.spriteName : "Stage");
                        d = g_loc.formatText("generate.addtolabelsocket", WinLessons._createBlockLabel(b.block), WinLessons._createBlockLabel(b.attached[0]), b.spriteName ? b.spriteName : "Stage")
                    } else {
                        if (b.attached.length == 2) {
                            c = g_loc.formatText("lessontitle.addtoblocksocket", b.spriteName ? b.spriteName : "Stage");
                            d = g_loc.formatText("generate.addtoblocksocket", WinLessons._createBlockLabel(b.block),
                                WinLessons._createBlockLabel(b.attached[0]), b.spriteName ? b.spriteName : "Stage")
                        }
                    } else if (b.attached == null) {
                        c = g_loc.formatText("lessontitle.block", b.spriteName ? b.spriteName : "Stage");
                        d = g_loc.formatText("generate.block", WinLessons._createBlockLabel(b.block), b.spriteName ? b.spriteName : "Stage")
                    } else if (b.attached.length == 3) {
                        c = g_loc.formatText("lessontitle.blockcontainer", b.spriteName ? b.spriteName : "Stage");
                        d = g_loc.formatText("generate.blockcontainer", WinLessons._createBlockLabel(b.block), WinLessons._createBlockLabel(b.attached[0]),
                            b.spriteName ? b.spriteName : "Stage")
                    } else {
                        c = g_loc.formatText("lessontitle.blocknext", b.spriteName ? b.spriteName : "Stage");
                        d = g_loc.formatText("generate.blocknext", WinLessons._createBlockLabel(b.block), WinLessons._createBlockLabel(b.attached[0]), b.spriteName ? b.spriteName : "Stage")
                    } else if (b.attached) {
                        c = g_loc.formatText("lessontitle.setvalue", b.spriteName ? b.spriteName : "Stage");
                        d = g_loc.formatText("generate.setvalue", WinLessons._createBlockLabel(b.attached[0]), b.attached[3], b.spriteName ? b.spriteName : "Stage")
                    } else if (b.resource) {
                        c =
                            getFileExt(b.resource);
                        d = false;
                        if (b.spriteName) {
                            var e = Sprites.getSpriteByName(b.spriteName);
                            if (e.costumes.length > 1)
                                for (var f = 1; f < e.costumes.length; f++)
                                    if (e.costumes[f].img == b.resource) {
                                        d = true;
                                        break
                                    }
                            if (!d && e.sounds.length > 0)
                                for (f = 0; f < e.sounds.length; f++)
                                    if (e.sounds[f].sound == b.resource) {
                                        d = true;
                                        break
                                    }
                        }
                        if (!b.spriteName || d)
                            if (c == ".mp3" || c == ".wav")
                                if (b.spriteName) {
                                    c = g_loc.formatText("lessontitle.addsound", b.spriteName, b.resourceName);
                                    d = g_loc.formatText("generate.addsound", b.resourceName, b.spriteName)
                                } else {
                                    c =
                                        g_loc.formatText("lessontitle.bgsound", b.resourceName);
                                    d = g_loc.formatText("generate.bgsound", b.resourceName)
                                }
                            else if (b.spriteName) {
                                c = g_loc.formatText("lessontitle.addcostume", b.spriteName);
                                d = g_loc.formatText("generate.addcostume", b.resourceName, b.spriteName)
                            } else {
                                c = g_loc.getText("lessontitle.bgimg");
                                d = g_loc.formatText("generate.bgimg", b.resourceName)
                            } else if (b.resource == "ide/imgs/blank.png") {
                                c = g_loc.getText("lessontitle.addsprite");
                                d = g_loc.formatText("generate.addblank")
                            } else if (getFileExt(b.resource) ==
                                ".actor") {
                                c = g_loc.getText("lessontitle.addtblock");
                                d = g_loc.formatText("generate.addtblock", WinLessons._createTBlockLabel(b.resource, b.spriteName))
                            } else {
                                c = g_loc.getText("lessontitle.addsprite");
                                d = g_loc.formatText("generate.addsprite", b.spriteName)
                            }
                    } else if (b.properties) {
                        c = g_loc.formatText("lessontitle.property", b.spriteName);
                        for (e in b.properties) d = g_loc.formatText("generate.property", e, b.spriteName, b.properties[e])
                    } else d = b.text;
            b = "<div>";
            c && (b = b + ("<h2>" + c + "</h2>"));
            return b + ("<p>" + d + "</p>") + "</div>"
        },
        trimSteps: function (b, c) {
            var d = ObjectIO.serialize(),
                d = JSON.parse(d);
            if (!b) {
                b = [];
                $("#annotations li").each(function () {
                    b.push($(this).data("info"))
                })
            }
            if (b) {
                for (var e = c + 1; e < b.length; e++) b[e].block ? WinLessons.trimBlock(d, b[e].spriteName, b[e].id) : b[e].resource && WinLessons.trimResource(d, b[e].spriteName, b[e].resource);
                for (e = 0; e < d.sprites.length; e++)
                    if (d.sprites[e].costumes.length == 0) {
                        d.sprites.splice(e, 1);
                        e--
                    }
            }
            return d
        },
        _findSkipRange: function (b, c) {
            if (!b) {
                b = [];
                $("#annotations li").each(function () {
                    b.push($(this).data("info"))
                })
            }
            if (b) {
                for (c ||
                    (c = 0) ; c < b.length; c++)
                    if (b[c].skip) break;
                if (c < b.length) {
                    for (var d = c; d < b.length; d++)
                        if (!b[d].skip) break;
                    return [c, d - 1]
                }
            }
            return null
        },
        trimResource: function (b, c, d) {
            if (c)
                for (var e = 0; e < b.sprites.length; e++) {
                    if (b.sprites[e].label == c) {
                        if (b.sprites[e].classname) b.sprites.splice(e, 1);
                        else {
                            c = false;
                            b = b.sprites[e];
                            for (e = 0; e < b.costumes.length; e++)
                                if (b.costumes[e].img == d) {
                                    b.costumes.splice(e, 1);
                                    c = true;
                                    break
                                }
                            if (!c)
                                for (e = 0; e < b.sounds.length; e++)
                                    if (b.sounds[e].sound == d) {
                                        b.sounds.splice(e, 1);
                                        break
                                    }
                        }
                        break
                    }
                } else {
                c = false;
                for (e = 0; e < b.background.backgrounds.length; e++)
                    if (b.background.backgrounds[e].img == d) {
                        b.background.backgrounds.splice(e, 1);
                        c = true;
                        break
                    }
                if (!c)
                    for (e = 0; e < b.background.sounds.length; e++)
                        if (b.background.sounds[e].sound == d) {
                            b.background.sounds.splice(e, 1);
                            break
                        }
            }
        },
        findBlockAndTrim: function (b, c) {
            if (b.containers)
                for (var d = 0; d < b.containers.length; d++)
                    if (b.containers[d]) {
                        if (b.containers[d].id == c) {
                            b.containers.splice(d, 1);
                            return
                        }
                        WinLessons.findBlockAndTrim(b.containers[d], c)
                    }
            if (b.values)
                for (d = 0; d < b.values.length; d++)
                    if (b.values[d].id ==
                        c) {
                        b.values[d].type = "string";
                        b.values[d].value = "";
                        delete b.values[d].func;
                        return
                    }
            b.next && (b.next.id == c ? delete b.next : WinLessons.findBlockAndTrim(b.next, c))
        },
        trimBlock: function (b, c, d) {
            if (c && b.sprites)
                for (var e = 0; e < b.sprites.length; e++) {
                    if (b.sprites[e].label == c) {
                        if (b = b.sprites[e].scripts)
                            for (e = 0; e < b.length; e++)
                                if (b[e].id == d) {
                                    b.splice(e, 1);
                                    break
                                } else if (WinLessons.findBlockAndTrim(b[e], d)) break;
                        break
                    }
                } else if (b = b.background.scripts)
                    for (e = 0; e < b.length; e++)
                        if (b[e].id == d) {
                            b.splice(e, 1);
                            break
                        } else if (WinLessons.findBlockAndTrim(b[e],
                    d)) break
        },
        _findLargestId: function (b) {
            if (b instanceof Block) {
                if (b.id > WinLessons._id) WinLessons._id = b.id;
                WinLessons._findLargestId(b.label);
                for (var c = 0; c < b._containers.length; c++) b._containers[c] != null && WinLessons._findLargestId(b._containers[c]);
                b.next != null && WinLessons._findLargestId(b.next)
            } else if (b instanceof Label) {
                if (b.id > WinLessons._id) WinLessons._id = b.id;
                for (c = 0; c < b._children.length; c++) WinLessons._findLargestId(b._children[c])
            }
        },
        _getBlockIds: function (b, c) {
            if (c instanceof Block) {
                b.indexOf(c.id) <
                    0 && b.push(c.id);
                for (var b = WinLessons._getBlockIds(b, c.label), d = 0; d < c._containers.length; d++) c._containers[d] != null && (b = WinLessons._getBlockIds(b, c._containers[d]));
                c.next != null && (b = WinLessons._getBlockIds(b, c.next))
            } else if (c instanceof Label) {
                b.indexOf(c.id) < 0 && b.push(c.id);
                for (d = 0; d < c._children.length; d++) b = WinLessons._getBlockIds(b, c._children[d])
            }
            return b
        },
        _actorExists: function (b, c) {
            for (var d = false, e = 0; e < b.length; e++)
                if (b[e].spriteName == c.label) {
                    d = true;
                    break
                }
            for (var f = [], e = 0; e < c.scripts.length; e++) f =
                WinLessons._getBlockIds(f, c.scripts[e]);
            if (!d) {
                for (var g = null, e = 0; e < f.length && !d; e++)
                    for (var h = 0; h < b.length; h++)
                        if (b[h].id == f[e]) {
                            d = true;
                            g = b[h].spriteName;
                            console.log("rename sprite from " + b[h].spriteName + " to " + c.label);
                            break
                        }
                if (d)
                    for (e = 0; e < b.length; e++)
                        if (b[e].spriteName == g) b[e].spriteName = c.label
            }
            return d
        },
        _assetExists: function (b, c, d, e) {
            for (var f = 0; f < b.length; f++) {
                var g = b[f];
                if ((e == null || g.resource == e) && g.spriteName == c && g.resourceName == d) return f
            }
            return -1
        },
        _replaceAsset: function (b, c, d, e, f) {
            for (var g =
                    getFileExt(e), h = false, j = 0; j < b.length; j++) {
                var k = b[j];
                if (k.resource == e && k.spriteName == c && k.resourceName == d) {
                    console.log("found asset:" + c + "," + d + "," + e);
                    h = true;
                    k.used = true;
                    break
                }
            }
            if (!h) {
                for (var l = g == ".mp3" || g == ".wav", j = 0; j < b.length; j++) {
                    k = b[j];
                    if (k.spriteName == c && k.resourceName == d) {
                        var m = getFileExt(k.resource);
                        if ((m = m == ".mp3" || m == ".wav") && l || !m && !l) {
                            console.log("replace resource:" + c + "," + d + "," + e);
                            b[j].resource = e;
                            b[j]._positionIndex = void 0;
                            delete b[j]._positionIndex;
                            h = true;
                            k.used = true;
                            break
                        }
                    }
                }
                if (!h)
                    for (j =
                        0; j < b.length; j++)
                        if (b[j].spriteName == c && b[j]._positionIndex == f) {
                            m = getFileExt(b[j].resource);
                            if ((m = m == ".mp3" || m == ".wav") && l || !m && !l) {
                                console.log("replace resource by index:" + c + "," + d + "," + e);
                                b[j].resource = e;
                                b[j]._positionIndex = void 0;
                                delete b[j]._positionIndex;
                                h = true;
                                b[j].used = true;
                                break
                            }
                        }
                if (!h) {
                    console.log("create resource:" + c + "," + d + "," + e);
                    f = b.length - 1;
                    if (g == ".mp3" || g == ".wav") {
                        console.log("  sound");
                        for (j = b.length - 1; j >= 0; j--) {
                            k = b[j];
                            if (k.resource) {
                                g = getFileExt(k.resource);
                                if ((g == ".mp3" || g == ".wav") &&
                                    k.spriteName == c) {
                                    console.log("    index:" + j);
                                    f = j;
                                    break
                                }
                            }
                        }
                    } else {
                        console.log("  image:" + g);
                        for (j = b.length - 1; j >= 0; j--) {
                            k = b[j];
                            if (k.resource) {
                                g = getFileExt(k.resource);
                                if ((g == ".png" || g == ".jpg" || g == ".gif" || g == ".svg") && k.spriteName == c) {
                                    console.log("    index:" + j);
                                    f = j;
                                    break
                                }
                            }
                        }
                    }
                    c = {
                        block: null,
                        spriteName: c,
                        resource: e,
                        resourceName: d,
                        attached: null,
                        id: WinLessons._getId(),
                        used: true
                    };
                    c.text = WinLessons._makeDefaultStepNote(c);
                    b.splice(f + 1, 0, c)
                }
            }
        },
        _replaceProperties: function (b, c, d, e) {
            for (var f = false, g = 0; g < b.length; g++) {
                var h =
                    b[g];
                if (h.spriteName == c && h.properties[d] !== void 0) {
                    console.log("replace property value:" + c + "," + d);
                    f = true;
                    h.properties[d] = e;
                    h.used = true;
                    break
                }
            }
            if (!f) {
                console.log("create property value:" + c + "," + d);
                f = b.length - 1;
                for (g = b.length - 1; g >= 0; g--) {
                    h = b[g];
                    if (h.spriteName == c && h.properties) {
                        f = g;
                        break
                    }
                }
                c = {
                    block: null,
                    spriteName: c,
                    resource: null,
                    resourceName: null,
                    resourceThumbnail: null,
                    attached: null,
                    properties: {},
                    id: WinLessons._getId(),
                    used: true
                };
                c.properties[d] = e;
                c.text = WinLessons._makeDefaultStepNote(c);
                b.splice(f +
                    1, 0, c)
            }
        },
        constructFromProject: function () {
            var b = WinLessons.getNotes();
            WinLessons.blocksUsed = [];
            WinLessons.resourcesUsed = [];
            WinLessons._id = 1;
            for (var c = 0; c < b.notes.length; c++)
                if (b.notes[c].id > WinLessons._id) WinLessons._id = b.notes[c].id;
            for (c = 0; c < Runtime.background.scripts.length; c++) WinLessons._findLargestId(Runtime.background.scripts[c]);
            WinLessons._findLargestId(Runtime.background.scripts);
            for (c = 0; c < Runtime.sprites.length; c++)
                for (var d = Runtime.sprites[c].scripts, e = 0; e < d.length; e++) WinLessons._findLargestId(d[e]);
            WinLessons._id++;
            for (c = 0; c < b.notes.length; c++) {
                var f = b.notes[c];
                if (!f.block && !f.spriteName && !f.attached && !f.resource) f.used = true
            }
            e = {};
            for (c = 0; c < b.notes.length; c++) {
                f = b.notes[c];
                if (f.resource && f.spriteName) {
                    d = f.spriteName;
                    if (!d) d = Runtime.background;
                    e[d] || (e[d] = 0);
                    f._positionIndex = e[d];
                    e[d]++
                }
            }
            for (c = 0; c < Runtime.background.costumes.length; c++) {
                f = Runtime.background.costumes[c];
                WinLessons._replaceAsset(b.notes, null, f.name, f.img, c)
            }
            for (c = 0; c < Runtime.background.sounds.length; c++) {
                f = Runtime.background.sounds[c];
                WinLessons._replaceAsset(b.notes, null, f.name, f.sound, c)
            }
            WinLessons.globalVars = Runtime.background.variables;
            for (c = 0; c < Runtime.sprites.length; c++) {
                d = Runtime.sprites[c];
                if (d.locked) {
                    d.captureScreenshot();
                    e = WinLessons._assetExists(b.notes, d.label, d.costumes[0].name, "/assets/code/" + d.id + ".actor");
                    if (e >= 0) {
                        console.log("existing tblock:" + d.label);
                        e = b.notes[e];
                        e._sprite = d;
                        e.properties = {
                            x: d.spriteObj.x,
                            y: d.spriteObj.y,
                            rotation: d.spriteObj.rotation,
                            rotateLock: d.spriteObj.rotateLock,
                            scale: d.spriteObj.scale.x
                        };
                        e.used = true
                    } else {
                        console.log("new tblock:" + d.label);
                        e = {
                            block: null,
                            _sprite: d,
                            spriteName: d.label,
                            resource: "/assets/code/" + d.id + ".actor",
                            resourceName: d.costumes[0].name,
                            attached: null,
                            properties: {
                                x: d.spriteObj.x,
                                y: d.spriteObj.y,
                                rotation: d.spriteObj.rotation,
                                rotateLock: d.spriteObj.rotateLock,
                                scale: d.spriteObj.scale.x
                            },
                            id: WinLessons._getId(),
                            used: true
                        };
                        b.notes.push(e);
                        e.text = WinLessons._makeDefaultStepNote(e)
                    }
                } else {
                    if (WinLessons._actorExists(b.notes, d)) {
                        console.log("existing actor:" + d.label);
                        e = WinLessons._assetExists(b.notes,
                            d.label, d.costumes[0].name, null);
                        if (e >= 0) {
                            console.log("existing actor - asset exists:" + d.label + "," + d.costumes[0].name);
                            e = b.notes[e];
                            e._sprite = d;
                            e.resource = d.costumes[0].img;
                            e.resourceName = d.costumes[0].name;
                            e.properties = {
                                variables: d.variables,
                                x: d.spriteObj.x,
                                y: d.spriteObj.y,
                                rotation: d.spriteObj.rotation,
                                rotateLock: d.spriteObj.rotateLock,
                                scale: d.spriteObj.scale.x
                            };
                            e.used = true
                        } else {
                            console.log("existing actor - did not find");
                            for (var g = false, e = 0; e < b.notes.length; e++)
                                if (b.notes[e].spriteName == d.label &&
                                    b.notes[e].resource) {
                                    console.log("existing actor - replacing first costume:" + d.label);
                                    e = b.notes[e];
                                    e._sprite = d;
                                    e.resource = d.costumes[0].img;
                                    e.resourceName = d.costumes[0].name;
                                    e.properties = {
                                        variables: d.variables,
                                        x: d.spriteObj.x,
                                        y: d.spriteObj.y,
                                        rotation: d.spriteObj.rotation,
                                        rotateLock: d.spriteObj.rotateLock,
                                        scale: d.spriteObj.scale.x
                                    };
                                    e.used = true;
                                    break
                                }
                        }
                    } else {
                        console.log("new actor:" + d.label);
                        e = {
                            block: null,
                            _sprite: d,
                            spriteName: d.label,
                            resource: d.costumes[0].img,
                            resourceName: d.costumes[0].name,
                            attached: null,
                            properties: {
                                variables: d.variables,
                                x: d.spriteObj.x,
                                y: d.spriteObj.y,
                                rotation: d.spriteObj.rotation,
                                rotateLock: d.spriteObj.rotateLock,
                                scale: d.spriteObj.scale.x
                            },
                            id: WinLessons._getId(),
                            used: true
                        };
                        b.notes.push(e);
                        e.text = WinLessons._makeDefaultStepNote(e)
                    }
                    for (e = 1; e < Runtime.sprites[c].costumes.length; e++) {
                        f = Runtime.sprites[c].costumes[e];
                        WinLessons._replaceAsset(b.notes, d.label, f.name, f.img, e)
                    }
                    for (e = 0; e < Runtime.sprites[c].sounds.length; e++) {
                        f = Runtime.sprites[c].sounds[e];
                        WinLessons._replaceAsset(b.notes,
                            d.label, f.name, f.sound, e)
                    }
                }
            }
            for (c = 0; c < Runtime.sprites.length; c++) {
                d = Runtime.sprites[c];
                if (d.locked)
                    for (var h in d.varDefaults) d.variables[h] !== d.varDefaults[h] && WinLessons._replaceProperties(b.notes, d.label, h, d.variables[h])
            }
            for (c = WinLessons._scriptNumber = 0; c < Runtime.background.scripts.length; c++) {
                WinLessons._stepNumber = 0;
                WinLessons._constructBlocksFor(null, Runtime.background.scripts[c], b.notes);
                WinLessons._scriptNumber++
            }
            for (c = 0; c < Runtime.sprites.length; c++) {
                d = Runtime.sprites[c];
                if (d.locked)
                    for (e =
                        0; e < d.scripts.length; e++) {
                        if (!d.scripts[e].hidden) {
                            WinLessons._stepNumber = 0;
                            WinLessons._constructBlocksFor(d.label, d.scripts[e], b.notes);
                            WinLessons._scriptNumber++
                        }
                    } else if (!d.hiddenInSandbox && !d.lockedInSandbox)
                        for (e = 0; e < d.scripts.length; e++) {
                            h = d.scripts[e];
                            if (!h.hiddenInSandbox && !h.lockedInSandbox) {
                                WinLessons._stepNumber = 0;
                                WinLessons._constructBlocksFor(d.label, h, b.notes);
                                WinLessons._scriptNumber++
                            }
                        }
            }
            for (c = 0; c < b.notes.length; c++)
                if (b.notes[c].used) {
                    b.notes[c].used = void 0;
                    delete b.notes[c].used
                } else {
                    console.log("removing: " +
                        c);
                    console.log(b.notes[c]);
                    b.notes.splice(c, 1);
                    c--
                }
            for (c = 0; c < b.notes.length; c++) {
                f = b.notes[c];
                if (f.resource) {
                    f._positionIndex = void 0;
                    delete f._positionIndex
                }
            }
            for (c = 0; c < b.notes.length; c++) {
                f = b.notes[c];
                if (f.block) {
                    h = f.scriptNum;
                    d = f.stepNum;
                    for (e = c + 1; e < b.notes.length; e++) {
                        f = b.notes[e];
                        if (f.scriptNum == h && f.stepNum < d)
                            for (g = 0; g < c; g++) {
                                var j = b.notes[g];
                                if (j.scriptNum == h && f.stepNum < j.stepNum) {
                                    b.notes.splice(e, 1);
                                    b.notes.splice(g, 0, f);
                                    c++;
                                    break
                                }
                            }
                    }
                }
            }
            b.blocks = [];
            for (c = 0; c < b.notes.length; c++) {
                f = b.notes[c];
                if (f.block) {
                    g =
                        false;
                    for (e = 0; e < b.blocks.length; e++)
                        if (b.blocks[e].func == f.block)
                            if (f.name) {
                                if (b.blocks[e].name == f.name) {
                                    g = true;
                                    break
                                }
                            } else {
                                g = true;
                                break
                            }
                    g || (f.name ? b.blocks.push({
                        func: f.block,
                        name: f.name,
                        label: f.label,
                        count: 1
                    }) : b.blocks.push({
                        func: f.block,
                        count: 1
                    }))
                }
            }
            WinLessons.blocksUsed = b.blocks;
            b.resources = [];
            for (c = 0; c < b.notes.length; c++) {
                f = b.notes[c];
                if (f.resource) {
                    g = false;
                    for (e = 0; e < b.resources.length; e++)
                        if (b.resources[e].img == f.resource || b.resources[e].sound == f.resource || f._sprite && b.resources[e].actor && b.resources[e].actor ==
                            f._sprite.id) {
                            g = true;
                            break
                        }
                    f.resource == "avatar://spine" && (g = false);
                    if (!g) {
                        e = getFileExt(f.resource);
                        if (e == ".mp3" || e == ".wav") b.resources.push({
                            sound: f.resource,
                            img: "ide/imgs/sound.png",
                            name: f.resourceName + e,
                            count: 1
                        });
                        else if (e == ".actor") b.resources.push({
                            img: f._sprite.captureScreenshot(),
                            name: f._sprite.classname ? f._sprite.classname : f._sprite.label,
                            actor: f._sprite.id,
                            count: 1
                        });
                        else if (f.resource == "avatar://spine") (d = Sprites.getSpriteByName(f.spriteName)) && d.skeleton.type && b.resources.push({
                            img: f.resource,
                            name: f.spriteName,
                            skelType: d.skeleton.type,
                            skelParts: d.skeleton.parts,
                            count: 1
                        });
                        else b.resources.push({
                            img: f.resource,
                            name: f.resourceName + e,
                            count: 1
                        })
                    }
                    f._sprite = void 0;
                    delete f._sprite
                }
            }
            WinLessons.resourcesUsed = b.resources;
            WinLessons._makeNotes(b.notes);
            $("#wincmd-runlesson").removeClass("disabled");
            return false
        },
        _createBlockLabel: function (b) {
            var c = findStepByFunc(b);
            return c ? c.readName ? c.readName : c.label.replace(RegExp(/{[^}]+}/g), "[ ]") : b
        },
        _createTBlockLabel: function (b, c) {
            for (var b = getFilename(b),
                    d = 0; d < WinLessons.resourcesUsed.length; d++)
                if (WinLessons.resourcesUsed[d].actor == b) return WinLessons.resourcesUsed[d].name;
            return c
        },
        _findBlock: function (b, c) {
            for (var d = 0; d < b.length; d++)
                if (b[d].id == c) {
                    console.log("found:" + c);
                    return d
                }
            console.log("not found:" + c);
            return -1
        },
        _findBlockValue: function (b, c, d) {
            for (var e = 0; e < b.length; e++)
                if (b[e].attached && b[e].attached[1] == c && b[e].attached[2] == d) {
                    console.log("found socket:" + c + "," + d + " at " + e);
                    return e
                }
            console.log("not found socket:" + c + "," + d);
            return -1
        },
        _insertNewBlock: function (b,
            c) {
            for (var d = -1, e = 0; e < b.length; e++)
                if (b[e].block && b[e].id == c.attached[1]) {
                    d = e;
                    for (e = e + 1; e < b.length; e++) {
                        if (!b[e].attached || b[e].attached[1] != c.attached[1]) break;
                        d = e
                    }
                    break
                }
            b.splice(d + 1, 0, c);
            console.log("inserted new block");
            console.log(c)
        },
        _constructBlocksFor: function (b, c, d, e) {
            if (c instanceof Label) {
                if (c.parent == null) {
                    if (!c.id) c.id = WinLessons._getId();
                    var f = WinLessons._findBlock(d, c.id);
                    if (f >= 0) {
                        d[f].scriptNum = WinLessons._scriptNumber;
                        d[f].stepNum = WinLessons._stepNumber++;
                        d[f].attached = null;
                        d[f].used =
                            true
                    } else {
                        f = {
                            scriptNum: WinLessons._scriptNumber,
                            stepNum: WinLessons._stepNumber++,
                            block: c.func,
                            spriteName: b,
                            resource: null,
                            attached: null,
                            id: c.id,
                            used: true
                        };
                        if (c.func == "valueVar" || c.func == "valueList" || c.func == "valueControlCall") {
                            f.name = c.name;
                            var g = Sprites.getSpriteByName(name);
                            if (g) f.isGlobal = typeof g.variables[c.name] != "undefined" ? false : true
                        } else if (c.func == "valueParam") f.name = c.name;
                        f.text = WinLessons._makeDefaultStepNote(f);
                        d.push(f);
                        console.log("inserted new dangling label");
                        console.log(f)
                    }
                } else if (c.parent instanceof LabelInput)
                    if (e.length > 1) {
                        if (!c.id) c.id = WinLessons._getId();
                        f = WinLessons._findBlock(d, c.id);
                        if (f >= 0) {
                            d[f].scriptNum = WinLessons._scriptNumber;
                            d[f].stepNum = WinLessons._stepNumber++;
                            d[f].attached = [e[0].func, e[0].id, e[1]];
                            d[f].used = true
                        } else {
                            f = {
                                scriptNum: WinLessons._scriptNumber,
                                stepNum: WinLessons._stepNumber++,
                                block: c.func,
                                spriteName: b,
                                resource: null,
                                attached: [e[0].func, e[0].id, e[1]],
                                id: c.id,
                                used: true
                            };
                            if (c.func == "valueVar" || c.func == "valueList" || c.func == "valueControlCall") {
                                f.name = c.name;
                                if (g = Sprites.getSpriteByName(name)) f.isGlobal =
                                    typeof g.variables[c.name] != "undefined" ? false : true
                            } else if (c.func == "valueParam") f.name = c.name;
                            f.text = WinLessons._makeDefaultStepNote(f);
                            (c.func != "valueParam" || e[0].func != "registerFunction") && WinLessons._insertNewBlock(d, f)
                        }
                    } else {
                        if (!c.id) c.id = WinLessons._getId();
                        f = WinLessons._findBlock(d, c.id);
                        if (f >= 0) {
                            d[f].scriptNum = WinLessons._scriptNumber;
                            d[f].stepNum = WinLessons._stepNumber++;
                            d[f].attached = [e[0].func, e[0].id];
                            d[f].used = true
                        } else {
                            f = {
                                scriptNum: WinLessons._scriptNumber,
                                stepNum: WinLessons._stepNumber++,
                                block: c.func,
                                spriteName: b,
                                resource: null,
                                attached: [e[0].func, e[0].id],
                                id: c.id,
                                used: true
                            };
                            if (c.func == "valueVar" || c.func == "valueList" || c.func == "valueControlCall") {
                                f.name = c.name;
                                if (g = Sprites.getSpriteByName(name)) f.isGlobal = typeof g.variables[c.name] != "undefined" ? false : true
                            } else if (c.func == "valueParam") f.name = c.name;
                            f.text = WinLessons._makeDefaultStepNote(f);
                            WinLessons._insertNewBlock(d, f)
                        }
                    }
                else {
                    if (!c.id) c.id = WinLessons._getId();
                    f = WinLessons._findBlock(d, c.id);
                    if (f >= 0) {
                        d[f].scriptNum = WinLessons._scriptNumber;
                        d[f].stepNum = WinLessons._stepNumber++;
                        d[f].attached = [c.parent.func, c.parent.id];
                        d[f].used = true
                    } else {
                        f = {
                            scriptNum: WinLessons._scriptNumber,
                            stepNum: WinLessons._stepNumber++,
                            block: c.func,
                            spriteName: b,
                            resource: null,
                            attached: [c.parent.func, c.parent.id],
                            id: c.id,
                            used: true
                        };
                        if (c.func == "valueVar" || c.func == "valueList" || c.func == "valueControlCall") {
                            f.name = c.name;
                            if (g = Sprites.getSpriteByName(name)) f.isGlobal = typeof g.variables[c.name] != "undefined" ? false : true
                        } else if (c.func == "valueParam") f.name = c.name;
                        f.text = WinLessons._makeDefaultStepNote(f);
                        WinLessons._insertNewBlock(d, f)
                    }
                }
                for (f = e = 0; f < c._children.length; f++)
                    if (c._children[f] instanceof LabelInput) {
                        WinLessons._constructBlocksFor(b, c._children[f], d, [c, e]);
                        e++
                    }
            } else if (c instanceof LabelInput)
                if (c._child != null) WinLessons._constructBlocksFor(b, c._child, d, e);
                else {
                    if (c.label != c.defaultLabel) {
                        if (!c.id) c.id = WinLessons._getId();
                        f = WinLessons._findBlockValue(d, e[0].id, e[1]);
                        if (f >= 0) {
                            d[f].scriptNum = WinLessons._scriptNumber;
                            if (e[0].func == "valueControlCall" || e[0].func == "blockControlCall") {
                                d[f].name =
                                    c.parent.parent.name;
                                d[f].labelText = c.parent.parent.labelText
                            }
                            d[f].stepNum = WinLessons._stepNumber++;
                            d[f].attached = [e[0].func, e[0].id, e[1], c.label];
                            d[f].used = true
                        } else {
                            f = {
                                scriptNum: WinLessons._scriptNumber,
                                stepNum: WinLessons._stepNumber++,
                                block: null,
                                spriteName: b,
                                resource: null,
                                attached: [e[0].func, e[0].id, e[1], c.label],
                                id: c.id,
                                used: true
                            };
                            if (e[0].func == "valueControlCall" || e[0].func == "blockControlCall") {
                                f.name = c.parent.parent.name;
                                f.labelText = c.parent.parent.labelText
                            }
                            f.text = WinLessons._makeDefaultStepNote(f);
                            WinLessons._insertNewBlock(d, f)
                        }
                    }
                }
            else if (c instanceof Block) {
                if (c.parent == null) {
                    if (!c.id) c.id = WinLessons._getId();
                    f = WinLessons._findBlock(d, c.id);
                    if (f >= 0) {
                        d[f].scriptNum = WinLessons._scriptNumber;
                        d[f].stepNum = WinLessons._stepNumber++;
                        d[f].attached = null;
                        if (c.func == "registerFunction") {
                            d[f].name = c.name;
                            d[f].label = c.labelText
                        } else if (c.func == "blockControlCall") {
                            d[f].name = c.name;
                            d[f].label = c.labelText
                        }
                        d[f].used = true
                    } else {
                        f = {
                            scriptNum: WinLessons._scriptNumber,
                            stepNum: WinLessons._stepNumber++,
                            block: c.func,
                            spriteName: b,
                            resource: null,
                            attached: null,
                            id: c.id,
                            used: true
                        };
                        if (c.func == "registerFunction") {
                            f.name = c.name;
                            f.label = c.labelText
                        } else if (c.func == "blockControlCall") {
                            f.name = c.name;
                            f.label = c.labelText
                        }
                        f.text = WinLessons._makeDefaultStepNote(f);
                        d.push(f);
                        console.log("inserted new start block");
                        console.log(f)
                    }
                } else if (e.length > 1) {
                    if (!c.id) c.id = WinLessons._getId();
                    f = WinLessons._findBlock(d, c.id);
                    if (f >= 0) {
                        d[f].scriptNum = WinLessons._scriptNumber;
                        d[f].stepNum = WinLessons._stepNumber++;
                        d[f].attached = [e[0].func,
                            e[0].id, e[1]
                        ];
                        if (c.name) {
                            d[f].name = c.name;
                            d[f].label = c.labelText
                        }
                        d[f].used = true
                    } else {
                        f = {
                            scriptNum: WinLessons._scriptNumber,
                            stepNum: WinLessons._stepNumber++,
                            block: c.func,
                            spriteName: b,
                            resource: null,
                            attached: [e[0].func, e[0].id, e[1]],
                            id: c.id,
                            used: true
                        };
                        if (c.name) {
                            f.name = c.name;
                            f.label = c.labelText
                        }
                        f.text = WinLessons._makeDefaultStepNote(f);
                        WinLessons._insertNewBlock(d, f)
                    }
                } else {
                    if (!c.id) c.id = WinLessons._getId();
                    f = WinLessons._findBlock(d, c.id);
                    if (f >= 0) {
                        d[f].scriptNum = WinLessons._scriptNumber;
                        d[f].stepNum =
                            WinLessons._stepNumber++;
                        d[f].attached = [e[0].func, e[0].id];
                        if (c.name) {
                            d[f].name = c.name;
                            d[f].label = c.labelText
                        }
                        d[f].used = true
                    } else {
                        f = {
                            scriptNum: WinLessons._scriptNumber,
                            stepNum: WinLessons._stepNumber++,
                            block: c.func,
                            spriteName: b,
                            resource: null,
                            attached: [e[0].func, e[0].id],
                            id: c.id,
                            used: true
                        };
                        if (c.name) {
                            f.name = c.name;
                            f.label = c.labelText
                        }
                        f.text = WinLessons._makeDefaultStepNote(f);
                        WinLessons._insertNewBlock(d, f)
                    }
                }
                for (f = e = 0; f < c.label._children.length; f++)
                    if (c.label._children[f] instanceof LabelInput) {
                        WinLessons._constructBlocksFor(b,
                            c.label._children[f], d, [c, e]);
                        e++
                    }
                for (f = 0; f < c._containers.length; f++) WinLessons._constructBlocksFor(b, c._containers[f], d, [c, f]);
                c.next != null && WinLessons._constructBlocksFor(b, c.next, d, [c])
            }
        },
        enableLessonHandlers: function (b, c) {
            if (b) {
                $("#win-properties .looks .add").unbind("click").click(WinLessons._looksAddCostume);
                $("#win-properties .sounds .add").unbind("click").click(WinLessons._soundsAddSound);
                $("#assetcmd-addscene").unbind("click").click(WinLessons._addScene);
                c == ".actor" ? $("#assetcmd-addactor").unbind("click").click(WinLessons._addTBlock) :
                    $("#assetcmd-addactor").unbind("click").click(WinLessons._addActor);
                Blocks._scale = 1;
                WinCode.draw();
                $("#win-code").removeClass("mintools").find(".zoom").addClass("hidden");
                $("#win-tools .palette a.toolsshow").addClass("hidden");
                $("#win-tools .palette .blocks").css("overflow-y", "hidden");
                $("#win-tools .palette .blocks").css("overflow-y", "hidden");
                WinCode.addChangeListener(WinLessons.blocksChanged);
                WinCode._enableContextMenu = false;
                WinCode._enableCutCopyPaste = false
            } else {
                WinTools.hilightBlock(null);
                WinCode.hilightBlock(null);
                IDE.hideMask();
                $("#assetcmd-addscene").unbind("click").click(WinAssets._addSceneButton);
                $("#assetcmd-addactor").unbind("click").click(WinAssets._addActorButton);
                $("#win-properties .looks .add").unbind("click").click(WinProperties._addCostumeButton);
                $("#win-properties .sounds .add").unbind("click").click(WinProperties._addSoundButton);
                Blocks._scale = 1;
                WinCode.draw();
                $("#win-code").removeClass("mintools").find(".zoom").removeClass("hidden");
                $("#win-tools .palette a.toolsshow").removeClass("hidden");
                $("#win-tools .palette .blocks").css("overflow-y", "");
                WinCode.removeChangeListener(WinLessons.blocksChanged);
                WinCode._enableContextMenu = true;
                WinCode._enableCutCopyPaste = true
            }
        },
        enableMenu: function (b) {
            if (b) {
                $(".toolbar-top .main").removeClass("hidden");
                $(".toolbar-top .puzzle").addClass("hidden");
                $("#wincmd-new").removeClass("disabled");
                $("#wincmd-open").removeClass("disabled");
                $("#wincmd-save").removeClass("disabled");
                $("#wincmd-saveas").removeClass("disabled");
                $("#wincmd-autosave").removeClass("disabled");
                $("#wincmd-share").removeClass("disabled");
                $("#wincmd-importscratch").removeClass("disabled");
                $("#wincmd-find").removeClass("disabled");
                $("#wincmd-undo").removeClass("disabled");
                $("#wincmd-redo").removeClass("disabled");
                $("#wincmd-delete").removeClass("disabled");
                $("#wincmd-cut").removeClass("disabled");
                $("#wincmd-copy").removeClass("disabled");
                $("#wincmd-paste").removeClass("disabled");
                $("#wincmd-movefront").removeClass("disabled");
                $("#wincmd-moveback").removeClass("disabled");
                $("#wincmd-backpack").removeClass("disabled");
                $("#wincmd-rearrange").removeClass("disabled");
                $("#wincmd-savetblock").removeClass("disabled");
                $("#wincmd-unlocktblock").removeClass("disabled");
                $("#wincmd-createblank").removeClass("disabled");
                $("#wincmd-clone").removeClass("disabled");
                $("#wincmd-lesson").removeClass("disabled");
                $("#wincmd-help").removeClass("disabled");
                $("#wincmd-tbbackpack").removeClass("disabled");
                $("#wincmd-tbundo").removeClass("disabled");
                $("#wincmd-tbredo").removeClass("disabled");
                $("#wincmd-tbsave").removeClass("disabled");
                $("#wincmd-project input").attr("disabled", null)
            } else {
                $(".toolbar-top .main").addClass("hidden");
                $(".toolbar-top .puzzle").removeClass("hidden").empty();
                $(".toolbar-top .puzzle.title").text(IDE.currentProjectName);
                $("#wincmd-new").addClass("disabled");
                $("#wincmd-open").addClass("disabled");
                $("#wincmd-save").addClass("disabled");
                $("#wincmd-saveas").addClass("disabled");
                $("#wincmd-autosave").addClass("disabled");
                $("#wincmd-share").addClass("disabled");
                $("#wincmd-importscratch").addClass("disabled");
                $("#wincmd-find").removeClass("disabled");
                $("#wincmd-undo").addClass("disabled");
                $("#wincmd-redo").addClass("disabled");
                $("#wincmd-delete").addClass("disabled");
                $("#wincmd-cut").addClass("disabled");
                $("#wincmd-copy").addClass("disabled");
                $("#wincmd-paste").addClass("disabled");
                $("#wincmd-movefront").addClass("disabled");
                $("#wincmd-moveback").addClass("disabled");
                $("#wincmd-backpack").addClass("disabled");
                $("#wincmd-rearrange").addClass("disabled");
                $("#wincmd-savetblock").addClass("disabled");
                $("#wincmd-unlocktblock").addClass("disabled");
                $("#wincmd-createblank").addClass("disabled");
                $("#wincmd-clone").addClass("disabled");
                $("#wincmd-lesson").addClass("disabled");
                $("#wincmd-help").addClass("disabled");
                $("#wincmd-tbbackpack").addClass("disabled");
                $("#wincmd-tbundo").addClass("disabled");
                $("#wincmd-tbredo").addClass("disabled");
                $("#wincmd-tbsave").addClass("disabled");
                $("#wincmd-project input").attr("disabled", "disabled")
            }
        },
        stopPlay: function () {
            IDE._clearDirty();
            WinLessons.currentPbIdx = -2;
            WinLessons.currentPlayStep = null;
            WinLessons.enableMenu(true);
            WinTools.hilightBlock(null);
            WinCode.hilightBlock(null);
            IDE.hideMask();
            WinTools.showSimplified(false);
            WinTools.reset();
            WinLessons.enableLessonHandlers(false)
        },
        resetCurrent: function (b) {
            var c = $("#annotations li");
            if (WinLessons.currentPbIdx >= 0 && WinLessons.currentPbIdx < c.length) {
                c = $(c[WinLessons.currentPbIdx]).data("info");
                WinLessons.currentPlayStep = c;
                c = JSON.parse(WinLessons.currentPlayStep.state);
                c.background.canvasWidth = $(Runtime.stage.container).innerWidth();
                c.background.canvasHeight = $(Runtime.stage.container).innerHeight();
                c = JSON.stringify(c);
                ObjectIO.deserialize(c, function () {
                    WinCode.computeAll();
                    WinCode.draw();
                    IDE.selectAsset(null);
                    IDE.hideMask();
                    WinLessons.showHint();
                    b && b()
                })
            }
        },
        goBack: function () {
            dismissChoosers();
            WinLessons.currentPbIdx--;
            if (WinLessons.currentPbIdx <= 0) {
                WinLessons.currentPbIdx = -1;
                IDE.reset();
                WinLessons.playAnnotations()
            } else {
                for (var b = $("#annotations li"), c = b[WinLessons.currentPbIdx], c = $(c).data("info"), d = WinLessons.currentPbIdx; c && (c.skip || c.milestoneType == 4) && WinLessons.currentPbIdx >= 0;) {
                    WinLessons.currentPbIdx--;
                    c = b[WinLessons.currentPbIdx];
                    c = $(c).data("info")
                }
                if (c && c.state && WinLessons.currentPbIdx >= 0) {
                    WinLessons.currentPlayStep = c;
                    b = JSON.parse(WinLessons.currentPlayStep.state);
                    b.background.canvasWidth = $(Runtime.stage.container).innerWidth();
                    b.background.canvasHeight = $(Runtime.stage.container).innerHeight();
                    b = JSON.stringify(b);
                    ObjectIO.deserialize(b);
                    WinCode.computeAll();
                    WinCode.draw();
                    IDE.selectAsset(null);
                    WinLessons.showHint()
                } else WinLessons.currentPbIdx = d + 1
            }
            return false
        },
        makeBlockByName: function (b) {
            return b.block ==
                "registerFunction" ? new Block({
                    cat: "functions",
                    name: b.name,
                    label: b.label,
                    hasFlap: false,
                    func: "registerFunction"
                }) : b.block == "blockControlCall" ? new Block({
                    cat: "functions",
                    name: b.name,
                    label: b.label,
                    func: "blockControlCall"
                }) : b.block == "valueControlCall" ? new Label({
                    cat: "functions",
                    name: b.name,
                    label: b.label,
                    value: "string",
                    func: "valueControlCall"
                }) : b.block == "valueParam" ? new Label({
                    cat: "functions",
                    name: b.name,
                    value: "string",
                    func: "valueParam"
                }) : b.block == "valueScriptVar" ? new Label({
                    cat: "localvar",
                    name: b.name,
                    value: "string",
                    func: "valueScriptVar"
                }) : b.block == "valueVar" ? new Label({
                    cat: "var",
                    name: b.name,
                    value: "string",
                    func: "valueVar"
                }) : b.block == "valueList" ? new Label({
                    cat: "list",
                    label: b.name,
                    value: "string",
                    func: "valueList"
                }) : makeBlockByName(b.block)
        },
        playButtonForNext: function () {
            WinLessons.saveCanvasWidth = $("#win-stage canvas").outerWidth();
            WinLessons.saveCanvasHeight = $("#win-stage canvas").outerHeight();
            IDE.showMaskElement(null);
            WinTools.hilightBlock(null);
            WinCode.hilightBlock(null);
            WinTools.showSimplified(false);
            WinTools.reset();
            Blocks.allowAddInOptions = true;
            IDE.hideMask();
            IDE.showAnnotation({
                text: null,
                show: false
            });
            $("#stagecmd-grid").addClass("hidden");
            $("#stagecmd-minmax").addClass("hidden");
            WinPuzzle.toolbarButton(g_loc.getText("dialog.btnreplaylesson"), function () {
                window.location.reload();
                return false
            }, "");
            WinPuzzle.toolbarButton(g_loc.getText("dialog.btncontinue"), function () {
                $("#stagecmd-grid").removeClass("hidden");
                $("#stagecmd-minmax").removeClass("hidden");
                WinLessons.currentPbIdx = -2;
                WinLessons.currentPlayStep =
                    null;
                WinLessons.enableMenu(true);
                WinProperties.enable(true);
                WinCode.enable(true);
                WinAssets.enable(true);
                WinStage.enableDecorations(true);
                $("#stage-buttons ul.toolleft").removeClass("hidden");
                $("#stage-buttons ul.toolright").removeClass("hidden");
                WinStage.enableToolbar(true);
                WinSidebar.hide();
                $("#wincmd-tbinfo").addClass("hidden");
                Runtime.stage.enableDragging(true);
                var b = $("#win-stage");
                b.css("width", WinLessons.saveCanvasWidth).css("height", WinLessons.saveCanvasHeight + b.find("h1").outerHeight() + b.find("#stage-buttons").outerHeight());
                WinStage.adjustWindow();
                WinStage.cmdStop();
                IDE.adjustPanels();
                IDE._clearDirty();
                WinLessons._broadcast("done");
                WinLessons.enableLessonHandlers(false);
                if (Director.isRunning()) {
                    IDE.showAnnotation({
                        show: false
                    });
                    Director.execute()
                }
                return false
            }, "active");
            var b = "";
            if (WinLessons._displayEndNotes) {
                $("#win-lessons-details textarea.instructions").val() && (b = b + "<h2>Instructions</h2>" + $("#win-lessons-details textarea.instructions").val());
                IDE.currentProjectDetails && (b = b + "<h2>Details</h2>" + ("<p>" + IDE.currentProjectDetails +
                    "</p>"));
                if (IDE.currentProjectConcepts) {
                    b = b + "<h2>Concepts</h2>";
                    if (typeof IDE.currentProjectConcepts == "string") b = b + ("<p>" + IDE.currentProjectConcepts + "</p>");
                    else {
                        var b = b + "<ul>",
                            c;
                        for (c in IDE.currentProjectConcepts) b = b + ("<li>" + c + "</span></li>");
                        b = b + "</ul>"
                    }
                }
            }
            WinProperties.enable(false);
            WinCode.enable(false);
            WinAssets.enable(false);
            WinStage.enableDecorations(false);
            $("#stage-buttons ul.toolleft").addClass("hidden");
            $("#stage-buttons ul.toolright").addClass("hidden");
            WinStage.enableToolbar(!WinLessons._displayHidePlaybar);
            if (b) {
                WinSidebar.show(false, true);
                WinSidebar.setContent(b)
            }
            Runtime.stage.enableDragging(false);
            IDE.adjustPanels();
            $("#stagecmd-run").unbind("click").click(function () {
                WinStage.cmdStart()
            });
            WinStage.cmdStart();
            return false
        },
        _startAnnotations: function () {
            WinTools.showSimplified(true, WinLessons.blocksUsed);
            WinLessons.hide();
            $("#win-stage canvas").css("width", 420).css("height", 280);
            IDE.adjustPanels();
            $("#wincmd-tbsave").addClass("disabled");
            WinCode._enableDragToDelete = false;
            Blocks.allowAddInOptions = false;
            WinCode._scripts = [];
            $.ajax({
                url: "/api/lessonstarted",
                type: "POST",
                data: "l=" + (IDE.currentProjectId ? IDE.currentProjectId : WinLessons.lessonId)
            })
        },
        playAnnotations: function () {
            IDE._clearDirty();
            IDE.hideMask();
            WinLessons.enableMenu(false);
            WinAssets.enableDelete(false);
            if (WinLessons.currentPbIdx == -2) {
                WinLessons._startAnnotations();
                WinLessons.currentPbIdx = -1;
                WinLessons.currentPlayStep = null;
                Runtime.background.variables = WinLessons.globalVars;
                var b = $.trim($("#win-lessons-details textarea.instructions").val());
                if ($("#win-lessons-details .showplayer")[0].checked) {
                    var c = $('<div id="tutorial-preview"><h1 class="big">' + $("#win-lessons-details input").val() + '</h1><div class="instructions"><p class="big">' + $("#win-lessons-details textarea.description").val() + "</p>" + (b ? '<p class="notbig">' + b + "</p>" : "") + '</div><div class="preview"><div class="previewframe" style="width:408;height:308px;background-image:url(/assets/pscreenshot/' + (IDE.currentProjectId ? IDE.currentProjectId : WinLessons.lessonId) + '.png);background-size:cover;"></div><a href="#" class="play tryit icon-play-2"></a></div></div>');
                    $("#infopopup").removeClass("w500nm").addClass("w800nm");
                    c.find("a.play").click(function () {
                        var b = $('<iframe width="480" height="360" src="ide/embedded?p=' + (IDE.currentProjectId ? IDE.currentProjectId : WinLessons.lessonId) + '&autostart=yes&controls=autohide" scrolling="no"></iframe>');
                        $(this).addClass("hidden").parent().append(b).find(".previewframe").detach();
                        b.load(function () {
                            $(this).focus()
                        });
                        return false
                    });
                    var d = $('<a class="btn-round medium action notdisable" href="#">Get Started</a>')
                } else {
                    c = $('<h1 class="big">' +
                        $("#win-lessons-details input").val() + '</h1><p class="big">' + $("#win-lessons-details textarea.description").val() + "</p></div>");
                    d = $('<a class="btn-round medium action" href="#">Get Started</a>')
                }
                var e = WinLessons._formatPopupText(c);
                d.click(function () {
                    $("#infopopup").addClass("w500nm").removeClass("w800nm").find("iframe").attr("src", "ide/imgs/blank.png");
                    IDE.showInfoPopup();
                    WinLessons.playAnnotations();
                    $("#mask-box").css("display", "");
                    return false
                });
                IDE.showInfoPopup(c, e, d, false, true);
                $("#mask-box").css("display",
                    "none");
                c = $("#infopopup");
                if (b && c.hasClass("wCharacter")) {
                    c.css("width", "1000px").find(".content").css("width", "auto");
                    c.css("top", (window.innerHeight - c.height()) / 2).css("left", (window.innerWidth - c.width()) / 2)
                }
            } else {
                b = $("#annotations li");
                if (WinLessons.currentPbIdx >= b.length - 1) {
                    WinLessons.currentPbIdx = -2;
                    WinLessons.currentPlayStep = null;
                    IDE._clearDirty();
                    $.ajax({
                        url: "/api/lessondone",
                        type: "POST",
                        data: "l=" + (IDE.currentProjectId ? IDE.currentProjectId : WinLessons.lessonId)
                    });
                    IDE.hideMask();
                    IDE.showAnnotation({
                        text: null,
                        show: false
                    });
                    IDE.showFlashAnimation("right", "right" + Math.floor(Math.random() * 10 + 1), function () {
                        var b = $(g_loc.getText("generate.defaultlaststep")),
                            c = WinLessons._formatPopupText(b),
                            d = $('<a class="btn-round medium blue" href="#">' + g_loc.getText("button.preview") + "</a>");
                        d.click(function () {
                            IDE.showInfoPopup();
                            WinLessons.playButtonForNext();
                            $("#mask-box").css("display", "");
                            return false
                        });
                        IDE.showInfoPopup(b, c, d, false, true);
                        $("#mask-box").css("display", "none")
                    })
                } else {
                    WinLessons.currentPbIdx++;
                    d = b[WinLessons.currentPbIdx];
                    d = $(d).data("info");
                    if (d.skip)
                        if (c = d.snapshot) {
                            c.background.canvasWidth = $(Runtime.stage.container).innerWidth();
                            c.background.canvasHeight = $(Runtime.stage.container).innerHeight();
                            c = JSON.stringify(c);
                            $("#annotations li").each(function (b, c) {
                                var d = $(c).data("info");
                                if (b > WinLessons.currentPbIdx) {
                                    WinLessons.currentPbIdx++;
                                    if (!d || !d.skip) return false
                                }
                            });
                            d = b[WinLessons.currentPbIdx];
                            d = $(d).data("info");
                            WinLessons.currentPbIdx--;
                            var f = WinCode._broadcastChange;
                            WinCode._broadcastChange = function () { };
                            var g = IDE.currentProjectName;
                            ObjectIO.deserialize(c, function () {
                                IDE.setTitle(g);
                                WinCode._broadcastChange = f;
                                IDE.selectAsset(null);
                                WinLessons.playAnnotations();
                                WinCode.computeAll();
                                WinCode.draw()
                            })
                        } else WinLessons.playAnnotations();
                    else {
                        WinLessons.currentPlayStep = d;
                        IDE.hideMask();
                        WinLessons.enableLessonHandlers(true);
                        Director.infobarShow(false);
                        WinLessons.showHint();
                        if (d) {
                            d.state = ObjectIO.serialize();
                            d.toolInfo = []
                        }
                        WinLessons.monitorAction();
                        return false
                    }
                }
            }
        },
        _looksAddCostume: function () {
            WinLessons.Note.displayNote(WinLessons.Note.stageMessage.title,
                WinLessons.Note.stageMessage.body, null, WinLessons.Note.stageMessage.id, false, false, true);
            var b = IDE.editingActor ? g_loc.formatText("wincontent.selectcostumes", IDE.editingActor.label) : g_loc.getText("wincontent.selectbackgrounds"),
                c = WinLessons.currentPlayStep.resourceName;
            WinMediaAssets.showSimplePicker(b, function (b) {
                if (b.length > 0) {
                    IDE.editingActor ? IDE.addResourceTo(b[0].url, c, IDE.editingActor) : IDE.addResourceTo(b[0].url, c, Runtime.background);
                    window.setTimeout(WinLessons.playAnnotations, 1)
                }
            }, WinLessons.resourcesUsed);
            IDE.hideMask();
            if (b = WinMediaAssets.getAssetInSimplified(WinLessons.currentPlayStep.resource)) {
                WinMediaAssets.scrollIntoView(b);
                IDE.showMaskElement(b)
            }
            return false
        },
        _addScene: function () {
            WinLessons.Note.displayNote(WinLessons.Note.stageMessage.title, WinLessons.Note.stageMessage.body, null, WinLessons.Note.stageMessage.id, false, false, true);
            var b = g_loc.getText("wincontent.selectbackgrounds"),
                c = WinLessons.currentPlayStep.resourceName;
            WinMediaAssets.showSimplePicker(b, function (b) {
                if (b.length > 0) {
                    IDE.addResourceTo(b[0].url,
                        c, Runtime.background);
                    window.setTimeout(WinLessons.playAnnotations, 1)
                }
            }, WinLessons.resourcesUsed);
            IDE.hideMask();
            if (b = WinMediaAssets.getAssetInSimplified(WinLessons.currentPlayStep.resource)) {
                WinMediaAssets.scrollIntoView(b);
                IDE.showMaskElement(b)
            }
            return false
        },
        _soundsAddSound: function () {
            WinLessons.Note.displayNote(WinLessons.Note.stageMessage.title, WinLessons.Note.stageMessage.body, null, WinLessons.Note.stageMessage.id, false, false, true);
            var b = IDE.editingActor ? g_loc.formatText("wincontent.selectsounds",
                    IDE.editingActor.label) : g_loc.formatText("wincontent.selectsounds", "Stage"),
                c = WinLessons.currentPlayStep.resourceName;
            WinMediaAssets.showSimplePicker(b, function (b) {
                if (b.length > 0) {
                    IDE.editingActor ? IDE.addResourceTo(b[0].url, c, IDE.editingActor) : IDE.addResourceTo(b[0].url, c, Runtime.background);
                    window.setTimeout(WinLessons.playAnnotations, 1)
                }
            }, WinLessons.resourcesUsed);
            IDE.hideMask();
            if (b = WinMediaAssets.getAssetInSimplified(WinLessons.currentPlayStep.resource)) {
                WinMediaAssets.scrollIntoView(b);
                IDE.showMaskElement(b)
            }
            return false
        },
        _addActor: function () {
            WinLessons.Note.displayNote(WinLessons.Note.stageMessage.title, WinLessons.Note.stageMessage.body, null, WinLessons.Note.stageMessage.id, false, false, true);
            var b = WinLessons.currentPlayStep.spriteName,
                c = WinLessons.currentPlayStep.resourceName,
                d = WinLessons.currentPlayStep.properties;
            WinMediaAssets.showSimplePicker(g_loc.getText("wincontent.selectactor"), function (e) {
                if (e.length > 0)
                    if (e[0].url == "avatar://spine") {
                        for (var g = null, h = 0; h < WinLessons.resourcesUsed.length; h++)
                            if (WinLessons.resourcesUsed[h].name ==
                                e[0].name) {
                                g = WinLessons.resourcesUsed[h];
                                break
                            }
                        g && Sprites.addSprite({
                            cx: 500,
                            cy: 500,
                            scale: 0.25,
                            label: e[0].name,
                            costumeName: e[0].name,
                            img: "avatar://spine",
                            forceNumber: false,
                            skeletonType: g.skelType,
                            skeletonParts: g.skelParts
                        }, function (b) {
                            b.spriteObj.setPosition(Runtime.stage.getWidth() / 2, Runtime.stage.getHeight() / 2);
                            IDE.selectAsset(b);
                            IDE.Clipboard.undoAddActor(b);
                            if (d) {
                                b.spriteObj.rotateLock = d.rotateLock ? d.rotateLock : 0;
                                b.spriteObj.setRotation(d.rotation);
                                b.spriteObj.setScale(d.scale);
                                b.spriteObj.setPosition(d.x,
                                    d.y);
                                if (d.variables) b.variables = d.variables;
                                Runtime.stage.draw()
                            }
                            window.setTimeout(WinLessons.playAnnotations, 1)
                        })
                    } else IDE.addResourceTo(e[0].url, c, null, function (c) {
                        c.changeSpriteName(b);
                        if (d) {
                            c.spriteObj.rotateLock = d.rotateLock ? d.rotateLock : 0;
                            c.spriteObj.setRotation(d.rotation);
                            c.spriteObj.setScale(d.scale);
                            c.spriteObj.setPosition(d.x, d.y);
                            if (d.variables) c.variables = d.variables;
                            Runtime.stage.draw()
                        }
                        window.setTimeout(WinLessons.playAnnotations, 1)
                    })
            }, WinLessons.resourcesUsed);
            IDE.hideMask();
            var e =
                WinLessons.currentPlayStep.resource;
            if (e = e == "avatar://spine" ? WinMediaAssets.getAssetInSimplified(e, WinLessons.currentPlayStep.spriteName) : WinMediaAssets.getAssetInSimplified(e)) {
                WinMediaAssets.scrollIntoView(e);
                IDE.showMaskElement(e)
            }
            return false
        },
        _addTBlock: function () {
            WinLessons.Note.displayNote(WinLessons.Note.stageMessage.title, WinLessons.Note.stageMessage.body, null, WinLessons.Note.stageMessage.id, false, false, true);
            var b = WinLessons.currentPlayStep.spriteName,
                c = WinLessons.currentPlayStep.resourceName,
                d = WinLessons.currentPlayStep.properties;
            WinMediaAssets.showSimplePicker(g_loc.getText("wincontent.selectactor"), function (e) {
                e.length > 0 && IDE.addResourceTo(e[0].url, c, null, function (c) {
                    c.changeSpriteName(b);
                    if (d) {
                        c.spriteObj.setRotation(d.rotation);
                        c.spriteObj.setScale(d.scale);
                        c.spriteObj.setPosition(d.x, d.y);
                        Runtime.stage.draw()
                    }
                    window.setTimeout(WinLessons.playAnnotations, 1)
                })
            }, WinLessons.resourcesUsed);
            IDE.hideMask();
            var e = WinMediaAssets.getAssetInSimplified(WinLessons.currentPlayStep.resource);
            if (e) {
                WinMediaAssets.scrollIntoView(e);
                IDE.showMaskElement(e)
            }
            return false
        },
        showHint: function () {
            window.clearTimeout(WinLessons._doForMeId);
            var b = WinLessons.currentPlayStep;
            if (b) {
                var c = null,
                    d = "",
                    e = "",
                    f = "",
                    g = "",
                    d = IDE._ignoreUpdates;
                IDE._ignoreUpdates = false;
                if (b.spriteName) {
                    var h = Sprites.getSpriteByName(b.spriteName);
                    IDE.editingActor != h && IDE.selectAsset(h)
                } else b.milestoneType != 2 && b.milestoneType != 3 && b.milestoneType != 4 && IDE.editingActor && IDE.selectAsset(null);
                IDE._ignoreUpdates = d;
                if (b.block != null) {
                    c =
                        WinTools.hilightBlock(b.block, b.name);
                    WinTools.hilightBlock(null)
                }
                if (b.attached != null) {
                    d = WinCode.findBlockWithId(b.attached[1]);
                    b.block == null ? b.attached.length >= 3 && (d = b.attached[0].substring(0, 3) == "val" ? d.getSocketAtChild(b.attached[2]) : d.label.getSocketAtChild(b.attached[2])) : b.block.substring(0, 3) == "val" && b.attached.length >= 3 && (d = b.attached[0].substring(0, 3) == "val" ? d.getSocketAtChild(b.attached[2]) : d.label.getSocketAtChild(b.attached[2]));
                    if (d instanceof LabelInput) {
                        d.label = "";
                        d._computeBounds()
                    }
                    WinCode.hilightBlock(d)
                }
                if (b.block !=
                    null) {
                    WinProperties.hide();
                    var g = b,
                        e = WinLessons.makeInfo(g),
                        f = e.img,
                        d = e.title,
                        e = e.note,
                        h = $("<div>" + b.text + "</div>"),
                        j = h.find("h2").html();
                    j || (j = d);
                    var k;
                    if (g.spriteName) {
                        if (k = Sprites.getSpriteByName(g.spriteName)) k = Sprites.getSpriteByName(g.spriteName).costumes[0].imgObj
                    } else if (Runtime.background.costumes.length > 0) k = Runtime.background.costumes[0].imgObj;
                    if (k) {
                        j = $("<span></span>").append($(k).clone()).append(j);
                        j.find("img").css("height", "70px").css("float", "right").css("margin-left", "10px").css("margin-top",
                            "-20px").css("margin-right", "-30px")
                    } (k = h.find("p").html()) || (k = e);
                    k = $("<span>" + k + "<br/></span>");
                    e = $('<a class="btn-round action small" href="#">' + g_loc.getText("button.showme") + "</a>");
                    e.click(function () {
                        WinLessons.showMe(null, 1E3);
                        return false
                    });
                    k.append(e);
                    var l = $('<a class="btn-round green small floatright hidden" href="#">' + g_loc.getText("button.dothisforme") + "</a>");
                    l.click(function () {
                        WinLessons.performAction();
                        return false
                    });
                    k.append(l);
                    WinLessons._doForMeId = window.setTimeout(function () {
                        l.removeClass("hidden")
                    },
                        WinLessons.cDoForMeTimeout);
                    IDE.showMaskElement($("#win-code .code canvas"), c);
                    WinLessons.Note.displayNote(j, k, f, b.id, false, false, true)
                } else if (b.attached) {
                    WinProperties.hide();
                    d = g_loc.formatText("lessontitle.setvalue", b.spriteName ? b.spriteName : "Stage");
                    e = g_loc.formatText("generate.setvalue", WinLessons._createBlockLabel(b.attached[0]), b.attached[3], b.spriteName ? b.spriteName : "Stage");
                    h = $("<div>" + b.text + "</div>");
                    (j = h.find("h2").html()) || (j = d);
                    g = b;
                    if (g.spriteName) {
                        if (k = Sprites.getSpriteByName(g.spriteName)) k =
                            Sprites.getSpriteByName(g.spriteName).costumes[0].imgObj
                    } else if (Runtime.background.costumes.length > 0) k = Runtime.background.costumes[0].imgObj;
                    if (k) {
                        j = $("<span></span>").append($(k).clone()).append(j);
                        j.find("img").css("height", "32px").css("float", "right").css("margin-left", "10px")
                    } (k = h.find("p").html()) || (k = e);
                    IDE.showMaskElement($("#win-code .code canvas"), {
                        x: 0,
                        y: 0,
                        width: 0,
                        height: 0
                    }, false, true);
                    WinLessons.Note.displayNote(j, k, null, b.id, false, false, true)
                } else if (b.resource) {
                    c = getFileExt(b.resource);
                    WinLessons.enableLessonHandlers(false);
                    if (!b.spriteName || Sprites.getSpriteByName(b.spriteName))
                        if (c == ".mp3" || c == ".wav") {
                            WinProperties.show("sounds");
                            IDE.showMaskElement($("#win-properties .sounds .add"));
                            if (b.spriteName) {
                                IDE.selectAsset(Sprites.getSpriteByName(b.spriteName));
                                d = g_loc.formatText("lessontitle.addsound", b.spriteName, b.resourceName);
                                e = g_loc.formatText("generate.addsound", b.resourceName, b.spriteName);
                                f = g_loc.getText("intlessontitle.addsound");
                                g = g_loc.formatText("lessontext.addsound", b.spriteName,
                                    b.resourceName)
                            } else {
                                d = g_loc.formatText("lessontitle.bgsound", b.resourceName);
                                e = g_loc.formatText("generate.bgsound", b.resourceName);
                                f = g_loc.getText("intlessontitle.bgsound");
                                g = g_loc.formatText("lessontext.bgsound", b.resourceName)
                            }
                        } else if (b.spriteName) {
                            WinProperties.show("looks");
                            WinAssets.showBackground(false);
                            IDE.showMaskElement($("#win-properties .looks .add"));
                            IDE.selectAsset(Sprites.getSpriteByName(b.spriteName));
                            d = g_loc.formatText("lessontitle.addcostume", b.spriteName);
                            e = g_loc.formatText("generate.addcostume",
                                b.resourceName, b.spriteName);
                            f = g_loc.getText("intlessontitle.addcostume");
                            g = g_loc.formatText("lessontext.addcostume", b.spriteName, b.resourceName)
                        } else {
                            WinProperties.hide();
                            WinAssets.showBackground(true);
                            IDE.showMaskElement($("#win-properties .looks a.add"));
                            d = g_loc.getText("lessontitle.bgimg");
                            e = g_loc.formatText("generate.bgimg", b.resourceName);
                            f = g_loc.getText("intlessontitle.bgimg");
                            g = g_loc.formatText("lessontext.bgimg", b.resourceName)
                        } else if (b.resource == "ide/imgs/blank.png") {
                            WinAssets.showBackground(false);
                            IDE.showMaskElement($("#assetcmd-addblank"));
                            d = g_loc.getText("lessontitle.addsprite");
                            e = g_loc.formatText("generate.addblank")
                        } else {
                            if (getFileExt(b.resource) == ".actor") {
                                WinAssets.showBackground(false);
                                IDE.showMaskElement($("#assetcmd-addactor"));
                                d = g_loc.getText("lessontitle.addtblock");
                                e = g_loc.formatText("generate.addtblock", WinLessons._createTBlockLabel(b.resource, b.spriteName))
                            } else {
                                WinAssets.showBackground(false);
                                IDE.showMaskElement($("#assetcmd-addactor"));
                                WinProperties.hide();
                                d = g_loc.getText("lessontitle.addsprite");
                                e = g_loc.formatText("generate.addsprite", b.spriteName)
                            }
                            f = g_loc.getText("intlessontitle.addsprite");
                            g = g_loc.formatText("lessontext.addsprite", b.spriteName)
                        }
                    k = b.resourceThumbnail;
                    if (!k) k = b.resource;
                    h = $("<div>" + b.text + "</div>");
                    (j = h.find("h2").html()) || (j = d);
                    k = h.find("p").html();
                    WinLessons.Note.stageMessage = {
                        title: j,
                        body: k,
                        id: b.id
                    };
                    e ? WinLessons.Note.displayNote(f, g, null, b.id, false, false, true) : WinLessons.Note.displayNote(j, k, null, b.id, false, false, true);
                    WinLessons.enableLessonHandlers(true, c)
                } else if (b.properties) {
                    IDE.showMaskElement(null);
                    d = g_loc.formatText("lessontitle.property", b.spriteName);
                    for (j in b.properties) e = g_loc.formatText("generate.property", j, b.spriteName, b.properties[j]);
                    h = $("<div>" + b.text + "</div>");
                    (j = h.find("h2").html()) || (j = d);
                    (k = h.find("p").html()) || (k = e);
                    WinLessons.Note.displayNote(j, k, null, b.id, false, false, true)
                } else {
                    c = $("#annotations li");
                    if (WinLessons.currentPbIdx >= c.length - 1) {
                        IDE._clearDirty();
                        $.ajax({
                            url: "/api/lessondone",
                            type: "POST",
                            data: "l=" + (IDE.currentProjectId ? IDE.currentProjectId : WinLessons.lessonId)
                        });
                        IDE.hideMask();
                        IDE.showAnnotation({
                            text: null,
                            show: false
                        });
                        IDE.showFlashAnimation("right", "right" + Math.floor(Math.random() * 10 + 1), function () {
                            var c = $(b.text),
                                d = $('<a class="btn-round medium action" href="#">' + g_loc.getText("button.preview") + "</a>"),
                                e = WinLessons._formatPopupText(c);
                            d.click(function () {
                                IDE.showInfoPopup();
                                WinLessons.playButtonForNext();
                                $("#mask-box").css("display", "");
                                return false
                            });
                            IDE.showInfoPopup(c, e, d, false, true);
                            $("#mask-box").css("display", "none")
                        })
                    } else {
                        IDE.showMaskElement(null);
                        if (b.milestoneType == 1) {
                            IDE.showMaskElement(null);
                            c = $(b.text);
                            e = WinLessons._formatPopupText(c);
                            IDE.showInfoPopup(c, e, null, false, true);
                            $("#mask-box").css("display", "none");
                            WinLessons._milestoneTimeoutId = window.setTimeout(function () {
                                IDE.showInfoPopup();
                                WinLessons.playAnnotations();
                                $("#mask-box").css("display", "")
                            }, WinLessons.cMilestoneButtonTimeout)
                        } else if (b.milestoneType == 2) {
                            IDE.showAnnotation({
                                show: false
                            });
                            IDE.hideMask();
                            WinCode.hilightBlock(null);
                            WinCode._enableDragToDelete = true;
                            WinAssets.enableDelete(true);
                            Director.infobarReset();
                            Director.infobarClearChoices();
                            Director.infobarShow(true);
                            c = $(b.text);
                            c.find("span.play_hilight").append('<img src="ide/imgs/lesson/play.png"/>');
                            c.find("code").each(function () {
                                var b = $(this).text();
                                try {
                                    var c = JSON.parse(b),
                                        d = ObjectIO.deserializeScriptStep(c);
                                    $(this).empty().append(d.getImage())
                                } catch (e) { }
                            });
                            Director.infobarSetContent(c);
                            Director.infobarShowClose(false);
                            Director.infobarShowPrev(false);
                            var m = ObjectIO.serialize();
                            WinPuzzle.toolbarButton(g_loc.getText("dialog.btnprev"),
                                function () {
                                    WinCode._enableDragToDelete = false;
                                    var b = JSON.parse(m);
                                    b.background.canvasWidth = $(Runtime.stage.container).innerWidth();
                                    b.background.canvasHeight = $(Runtime.stage.container).innerHeight();
                                    b = JSON.stringify(b);
                                    Runtime.stopScripts();
                                    WinAssets.enableDelete(false);
                                    ObjectIO.deserialize(b, function () {
                                        WinStage.restore();
                                        WinCode.computeAll();
                                        WinCode.draw();
                                        IDE.selectAsset(null);
                                        IDE.hideMask();
                                        WinLessons.enableLessonHandlers(true);
                                        Director.infobarShow(false);
                                        WinLessons.goBack()
                                    });
                                    WinPuzzle.toolbarRemoveButtons();
                                    return false
                                }, "secondary");
                            WinPuzzle.toolbarButton(g_loc.getText("dialog.btncontinue"), function () {
                                WinCode._enableDragToDelete = false;
                                var b = JSON.parse(m);
                                b.background.canvasWidth = $(Runtime.stage.container).innerWidth();
                                b.background.canvasHeight = $(Runtime.stage.container).innerHeight();
                                b = JSON.stringify(b);
                                Runtime.stopScripts();
                                WinAssets.enableDelete(false);
                                ObjectIO.deserialize(b, function () {
                                    WinStage.restore();
                                    WinCode.computeAll();
                                    WinCode.draw();
                                    IDE.selectAsset(null);
                                    IDE.hideMask();
                                    WinLessons.enableLessonHandlers(true);
                                    Director.infobarShow(false);
                                    WinLessons.playAnnotations()
                                });
                                WinPuzzle.toolbarRemoveButtons();
                                return false
                            }, "active");
                            Director.infobarShowNext(false);
                            Director.infobarEnableNext(false);
                            Director.infobarResetButtons();
                            c = $(b.text);
                            c.find("span.play_hilight_full").append('<img src="ide/imgs/lesson/play_full.png"/>');
                            e = WinLessons._formatPopupText(c);
                            f = $('<a class="btn-round medium action" href="#">' + g_loc.getText("dialog.btntryitout") + "</a>");
                            f.click(function () {
                                IDE.showInfoPopup();
                                $("#mask-box").css("display",
                                    "");
                                return false
                            });
                            IDE.showInfoPopup(c, e, f, false, true);
                            $("#mask-box").css("display", "none");
                            WinLessons.enableLessonHandlers(false)
                        } else if (b.milestoneType == 3) {
                            c = $(b.text);
                            e = WinLessons._formatPopupText(c);
                            if (WinLessons.currentPbIdx > 1) {
                                f = $('<a class="btn-round action secondary" href="#">' + g_loc.getText("dialog.btnprev") + '</a><a class="btn-round medium action" href="#">' + g_loc.getText("dialog.btnnext") + "</a>");
                                $(f[0]).click(function () {
                                    IDE.showInfoPopup();
                                    WinLessons.goBack();
                                    $("#mask-box").css("display",
                                        "");
                                    return false
                                });
                                $(f[1]).click(function () {
                                    IDE.showInfoPopup();
                                    WinLessons.playAnnotations();
                                    $("#mask-box").css("display", "");
                                    return false
                                })
                            } else {
                                f = $('<a class="btn-round medium action" href="#">' + g_loc.getText("dialog.btnnext") + "</a>");
                                f.click(function () {
                                    IDE.showInfoPopup();
                                    WinLessons.playAnnotations();
                                    $("#mask-box").css("display", "");
                                    return false
                                })
                            }
                            IDE.showInfoPopup(c, e, f, false, true);
                            $("#mask-box").css("display", "none")
                        } else if (b.milestoneType == 4) window.setTimeout(WinLessons.playAnnotations, 1);
                        else {
                            IDE.showMaskElement(null);
                            c = $(b.text);
                            e = WinLessons._formatPopupText(c);
                            f = $('<a class="btn-round medium action" href="#">' + g_loc.getText("dialog.btnnext") + "</a>");
                            f.click(function () {
                                IDE.showInfoPopup();
                                WinLessons.playAnnotations();
                                $("#mask-box").css("display", "");
                                return false
                            });
                            IDE.showInfoPopup(c, e, f, false, true);
                            $("#mask-box").css("display", "none")
                        }
                    }
                }
            }
        },
        makeInfo: function (b) {
            var c = null,
                d, e;
            if (b.block.substring(0, 5) == "value")
                if (b.attached == null) {
                    var c = $('<div class="blocks"><em class="block value">' +
                            b.block + "</em></div>"),
                        f = WinLessons.makeBlockByName(b);
                    if (f) {
                        f.x = f.y = 0;
                        f._computeBounds();
                        c.empty().append(f.getImage()).removeClass("block").removeClass("value")
                    }
                    d = g_loc.formatText("lessontitle.label", b.spriteName ? b.spriteName : "Stage");
                    e = g_loc.formatText("generate.label", WinLessons._createBlockLabel(f.func), b.spriteName ? b.spriteName : "Stage")
                } else if (b.attached.length == 3) {
                    e = b.attached[0];
                    d = b.attached[1];
                    var g = b.attached[2],
                        c = $('<div class="blocks"><em class="block value">' + b.block + '</em> <img src="imgs/plug_into.png"/> <em class="value block">' +
                            e + "</em></div>"),
                        h = WinLessons.makeBlockByName(b),
                        f = makeBlockByName(e);
                    if (!f) (f = WinCode.findBlockWithId(d)) && (f = f.copy());
                    d = WinLessons.makeBlockByName(b);
                    if (h && f && d) {
                        f instanceof Block ? f.label.setValue(g, d) : f.setValue(g, d);
                        f.x = f.y = 0;
                        f._computeBounds();
                        c.find("em:first").empty().append(h.getImage());
                        c.find("em:last").empty().append(f.getImage());
                        c.find("em").removeClass("block").removeClass("value")
                    }
                    d = g_loc.formatText("lessontitle.addtolabelsocket", b.spriteName ? b.spriteName : "Stage");
                    e = g_loc.formatText("generate.addtolabelsocket",
                        WinLessons._createBlockLabel(h.func), WinLessons._createBlockLabel(e), b.spriteName ? b.spriteName : "Stage")
                } else {
                    if (b.attached.length == 2) {
                        e = b.attached[0];
                        d = b.attached[1];
                        c = $('<div class="blocks"><em class="block value">' + b.block + '</em> <img src="imgs/plug_into.png"/> <em class="block">' + e + "</em></div>");
                        h = WinLessons.makeBlockByName(b);
                        if (d) (f = WinCode.findBlockWithId(d)) && (f = f.copy());
                        f || (f = makeBlockByName(e));
                        d = WinLessons.makeBlockByName(b);
                        if (h && f && d) {
                            f.label.setValue(g, d);
                            f.x = f.y = 0;
                            f._computeBounds();
                            c.find("em:first").empty().append(h.getImage());
                            c.find("em:last").empty().append(f.getImage());
                            c.find("em").removeClass("block").removeClass("value")
                        }
                        d = g_loc.formatText("lessontitle.addtoblocksocket", b.spriteName ? b.spriteName : "Stage");
                        e = g_loc.formatText("generate.addtoblocksocket", WinLessons._createBlockLabel(h.func), WinLessons._createBlockLabel(e), b.spriteName ? b.spriteName : "Stage")
                    }
                } else if (b.attached == null) {
                    c = $('<div class="blocks"><em class="block">' + b.block + "</em></div>");
                    if (f = WinLessons.makeBlockByName(b)) {
                        f.x =
                            f.y = 0;
                        f.y = slotHeight;
                        f._computeBounds();
                        c.find("em").empty().removeClass("block").append(f.getImage())
                    }
                    d = g_loc.formatText("lessontitle.block", b.spriteName ? b.spriteName : "Stage");
                    e = g_loc.formatText("generate.block", WinLessons._createBlockLabel(f.func), b.spriteName ? b.spriteName : "Stage")
                } else if (b.attached.length == 3) {
                    e = b.attached[0];
                    d = b.attached[1];
                    g = b.attached[2];
                    c = $('<div class="blocks"><em class="block">' + b.block + '</em> <img src="imgs/plug_into.png"/> <em class="block">' + e + "</em></div>");
                    h = WinLessons.makeBlockByName(b);
                    f = makeBlockByName(e);
                    if (!f) (f = WinCode.findBlockWithId(d)) && (f = f.copy());
                    f.hilight = true;
                    d = WinLessons.makeBlockByName(b);
                    if (h && f && d) {
                        f.addToContainer(g, d);
                        f.x = f.y = 0;
                        f.y = slotHeight;
                        f._computeBounds();
                        c.find("em:first").empty().append(h.getImage());
                        c.find("em:last").empty().append(f.getImage());
                        c.find("em").removeClass("block")
                    }
                    d = g_loc.formatText("lessontitle.blockcontainer", b.spriteName ? b.spriteName : "Stage");
                    e = g_loc.formatText("generate.blockcontainer", WinLessons._createBlockLabel(h.func), WinLessons._createBlockLabel(e),
                        b.spriteName ? b.spriteName : "Stage")
                } else {
                    e = b.attached[0];
                    d = b.attached[1];
                    c = $('<div class="blocks"><em class="block">' + b.block + '</em> <img src="imgs/plug_into.png"/> <em class="block">' + e + "</em></div>");
                    h = WinLessons.makeBlockByName(b);
                    if (d) (f = WinCode.findBlockWithId(d)) && (f = f.copy());
                    f || (f = WinLessons.makeBlockByName({
                        block: e,
                        name: b.name,
                        label: b.labelText
                    }));
                    f.hilight = true;
                    d = WinLessons.makeBlockByName(b);
                    if (h && f && d) {
                        f.next = d;
                        f.x = f.y = 0;
                        f.y = slotHeight;
                        f._computeBounds();
                        c.find("em:first").empty().append(h.getImage());
                        c.find("em:last").empty().append(f.getImage());
                        c.find("em").removeClass("block")
                    }
                    d = g_loc.formatText("lessontitle.blocknext", b.spriteName ? b.spriteName : "Stage");
                    e = g_loc.formatText("generate.blocknext", WinLessons._createBlockLabel(h.func), WinLessons._createBlockLabel(e), b.spriteName ? b.spriteName : "Stage")
                }
            return {
                img: c,
                title: d,
                note: e
            }
        },
        showMe: function (b, c) {
            if (WinLessons.currentPlayStep.block != null) {
                WinCode.show();
                WinTools.show();
                WinLessons.currentPlayStep == null ? IDE.selectAsset(null) : IDE.selectAsset(Sprites.getSpriteByName(WinLessons.currentPlayStep.spriteName));
                var d = WinTools.cloneBlock(WinLessons.currentPlayStep.block, true),
                    e = d.x,
                    f = d.y;
                d.x = 0;
                d.y = 0;
                d._computeBlockBounds();
                var g, h;
                g = WinLessons.currentPlayStep.attached;
                if (g == null) {
                    h = WinCode.findBlankSpace();
                    g = h.x;
                    h = h.y;
                    WinCode.scrollTo(g - 10, h - 40)
                } else if (g.length > 2) {
                    h = WinCode.findBlockWithId(g[1]);
                    h = WinLessons.currentPlayStep.block.substring(0, 3) == "val" ? h instanceof Block ? h.label.getContainerPos(g[2]) : h.getContainerPos(g[2]) : h.getContainerPos(g[2]);
                    g = h[0];
                    h = h[1]
                } else {
                    h = WinCode.findBlockWithId(g[1]);
                    g = h.x;
                    h = h.y + h.height
                }
                g = g + $(WinCode.canvas).offset().left;
                h = h + $(WinCode.canvas).offset().top;
                g = g + WinCode.context.offsetX;
                h = h + WinCode.context.offsetY;
                c ? DragLayer.showDragging(d, e, f, g, h, c ? c : 2E3, b) : b(g, h)
            } else b && typeof b == "function" && b(0, 0);
            return false
        },
        _goNext: function () {
            var b = $("#annotations li");
            WinLessons.currentPbIdx++;
            noteInfo = $(b[WinLessons.currentPbIdx]).data("info");
            WinLessons.currentPlayStep = noteInfo;
            WinLessons.showHint();
            if (noteInfo) {
                noteInfo.state = ObjectIO.serialize();
                noteInfo.toolInfo = []
            }
            WinLessons.monitorAction()
        },
        performAction: function () {
            dismissChoosers();
            WinLessons.currentPlayStep.skipped = true;
            WinLessons.resetCurrent(function () {
                WinLessons.showMe(function (b, c) {
                    if (WinLessons.currentPlayStep.block != null) {
                        var d = WinTools.cloneBlock(WinLessons.currentPlayStep.block);
                        d.x = 0;
                        d.y = 0;
                        WinCode.canDrop(b, c, 1, d, WinLessons.Note) ? WinCode.drop(b, c, 1, d, WinLessons.Note) : WinTools.dragCanceled(d)
                    } else if (WinLessons.currentPlayStep.attached) {
                        var d = WinLessons.currentPlayStep.attached,
                            e = d[2],
                            f = d[3],
                            d = WinCode.findBlockWithId(d[1]);
                        d instanceof Block ? d.label.setValue(e, f) : d instanceof Label && d.setValue(e, f);
                        dismissChoosers()
                    } else if (WinLessons.currentPlayStep.resource) {
                        var f = WinLessons.currentPlayStep.resource,
                            g = WinLessons.currentPlayStep.spriteName,
                            e = WinLessons.currentPlayStep.resourceName,
                            h = WinLessons.currentPlayStep.properties;
                        if (g)
                            if (Sprites.getSpriteByName(g)) {
                                IDE.addResourceTo(f, e, Sprites.getSpriteByName(g));
                                WinLessons._goNext()
                            } else WinLessons.currentPlayStep.resource == "ide/imgs/blank.png" ? IDE.addResourceTo(WinLessons.currentPlayStep.resource,
                                e, null,
                                function (b) {
                                    b.changeSpriteName(g);
                                    if (h) {
                                        b.spriteObj.rotateLock = h.rotateLock ? h.rotateLock : 0;
                                        b.spriteObj.setRotation(h.rotation);
                                        b.spriteObj.setScale(h.scale);
                                        b.spriteObj.setPosition(h.x, h.y);
                                        Runtime.stage.draw()
                                    }
                                    WinLessons._goNext()
                                }) : IDE.addResourceTo(f, e, null, function (b) {
                                    b.changeSpriteName(g);
                                    if (h) {
                                        if (!b.classname || !b.id) b.spriteObj.rotateLock = h.rotateLock ? h.rotateLock : 0;
                                        b.spriteObj.setRotation(h.rotation);
                                        b.spriteObj.setScale(h.scale);
                                        b.spriteObj.setPosition(h.x, h.y);
                                        Runtime.stage.draw()
                                    }
                                    WinLessons._goNext()
                                });
                        else {
                            IDE.addResourceTo(f, e, Runtime.background);
                            WinLessons._goNext()
                        }
                    } else if (WinLessons.currentPlayStep.spriteName) {
                        f = WinLessons.currentPlayStep.properties;
                        for (d = 0; d < Runtime.sprites.length; d++)
                            if (Runtime.sprites[d].label == WinLessons.currentPlayStep.spriteName) {
                                d = Runtime.sprites[d];
                                for (e in f) {
                                    d.variables[e] = f[e];
                                    WinProperties.update()
                                }
                                break
                            }
                    } else WinLessons.playAnnotations();
                    WinLessons.currentPbIdx >= $("#annotations li").length && WinLessons.playAnnotations()
                }, 0)
            });
            return false
        },
        monitorAction: function () {
            var b =
                WinLessons.currentPlayStep;
            if (b != null && b.spriteName != null && b.resource == null && b.block == null && b.properties) {
                for (var c = false, d = null, e = null, f = 0; f < Runtime.sprites.length; f++) {
                    var g = Runtime.sprites[f];
                    if (g.label == b.spriteName) {
                        var d = g,
                            h;
                        for (h in b.properties) {
                            e = h;
                            if (b.properties[h] == g.variables[h]) {
                                WinLessons.playAnnotations();
                                c = g;
                                break
                            }
                        }
                    }
                }
                if (c) $("#win-properties .interfaces .objprops li").removeClass("hilight");
                else {
                    IDE.editingActor != d && IDE.selectAsset(d);
                    ($("#win-properties").hasClass("hidden") || $("#win-properties h2[for=interfaces]").next().hasClass("hidden")) &&
                    WinProperties.show("interfaces");
                    $("#win-properties .interfaces .objprops li").each(function (b, c) {
                        if ($(c).find("em").text() == e) {
                            $(c).addClass("hilight");
                            $("#win-properties").scrollTop($(c).offset().top);
                            IDE.showMaskElement($(c));
                            return false
                        }
                    });
                    window.setTimeout(WinLessons.monitorAction, 1E3)
                }
            }
        },
        blocksChanged: function (b, c) {
            if (b != "move" && WinLessons.currentPlayStep != null && (IDE.editingActor == null && WinLessons.currentPlayStep.spriteName == null || IDE.editingActor != null && WinLessons.currentPlayStep.spriteName ==
                    IDE.editingActor.label)) {
                b != "valueChange" && IDE.showMaskElement($("#win-code .code canvas"), {
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                }, false, true);
                if (b == "attachTo") {
                    if (c.func == WinLessons.currentPlayStep.block) {
                        var d = WinLessons.currentPlayStep.attached;
                        if (d == null) {
                            if (c.parent == null) {
                                c.id = WinLessons.currentPlayStep.id;
                                WinLessons.playAnnotations();
                                WinCode.refresh();
                                return
                            }
                        } else if (d.length > 2) {
                            var e = d[2];
                            if (c instanceof Label) {
                                if (c.parent != null && c.parent.parent != null && c.parent.parent.indexForBlockInChildren(c) == e) {
                                    c.id =
                                        WinLessons.currentPlayStep.id;
                                    WinLessons.playAnnotations();
                                    WinCode.refresh();
                                    return
                                }
                            } else if (c instanceof Block && c.parent != null && c.parent.indexForBlockInContainer(c) == e) {
                                c.id = WinLessons.currentPlayStep.id;
                                WinLessons.playAnnotations();
                                WinCode.refresh();
                                return
                            }
                        } else {
                            e = WinCode.findBlockWithId(d[1]);
                            if (c.parent != null && c.parent.next == c && c.parent == e) {
                                c.id = WinLessons.currentPlayStep.id;
                                WinLessons.playAnnotations();
                                WinCode.refresh();
                                return
                            }
                        }
                    }
                } else if (b == "valueChange") {
                    if ((d = WinLessons.currentPlayStep.attached) &&
                        WinLessons.currentPlayStep.block == null) {
                        var e = d[1],
                            f = d[2],
                            g = d[3],
                            h = c.parent.id;
                        if ((h === void 0 || h == 0) && c.parent.parent != null) h = c.parent.parent.id;
                        d = c.parent.indexForBlockInChildren(c);
                        if (h == e && d == f) {
                            if (c.label == g || "0" + c.label == g || c.label == "0" + g || c.label + "." == g || c.label == g + "." || c.label + ".0" == g || c.label == g + ".0") {
                                WinLessons.currentPlayStep = null;
                                window.setTimeout(WinLessons.playAnnotations, 1);
                                WinCode.refresh();
                                return
                            }
                            if (c.parent && c.parent.parent && ["blockLooksSay", "blockLooksSayFor", "blockLooksThink", "blockLooksThinkFor",
                                    "blockSensingAskAndWait", "blockSensingAskChoices"
                            ].indexOf(c.parent.parent.func) >= 0) {
                                if (g && c.label) {
                                    WinLessons.currentPlayStep = null;
                                    window.setTimeout(WinLessons.playAnnotations, 1)
                                }
                                WinCode.refresh();
                                return
                            }
                            if (c.parent && c.parent.parent && ["blockPenSetFillColor", "blockPenSetColor"].indexOf(c.parent.parent.func) >= 0) {
                                c.label = g;
                                WinLessons.currentPlayStep = null;
                                window.setTimeout(WinLessons.playAnnotations, 1);
                                WinCode.refresh();
                                return
                            }
                            if (c.parent && ["valueSensingTouchingColor", "valueSensingSeeColor"].indexOf(c.parent.func) >=
                                0) {
                                c.label = g;
                                WinLessons.currentPlayStep = null;
                                window.setTimeout(WinLessons.playAnnotations, 1);
                                WinCode.refresh();
                                return
                            }
                        }
                    }
                } else b == "delete" && WinLessons.goBack();
                WinCode.refresh()
            }
        },
        _loadLesson: function (b) {
            $.ajax({
                url: "/api/lessonload",
                type: "POST",
                data: {
                    p: IDE.currentProjectId ? IDE.currentProjectId : WinLessons.lessonId
                },
                success: function (c) {
                    window.WinLessons && WinLessons.reset();
                    c = JSON.parse(c);
                    if (c.result !== false) {
                        ObjectIO.deserializeLesson(c);
                        WinLessons.lessonId = IDE.currentProjectId
                    }
                    b && b()
                },
                error: function () {
                    b &&
                        b()
                }
            })
        },
        _saveLesson: function (b) {
            var c = "l=" + encodeURIComponent(JSON.stringify(ObjectIO.serializeLesson())) + "&id=" + (IDE.currentProjectId ? IDE.currentProjectId : WinLessons.lessonId) + "&pb=false";
            $.ajax({
                url: "/api/lessonsave",
                type: "POST",
                data: c,
                success: function () {
                    b && b()
                }
            })
        },
        _formatPopupText: function (b) {
            var c = WinLessons.sideImage,
                d = b.find("img.infographic");
            if (d.length > 0) {
                c = d.attr("src");
                d.detach()
            }
            b.find("code").each(function () {
                var b = $(this).text();
                try {
                    var c = JSON.parse(b),
                        d = ObjectIO.deserializeScriptStep(c);
                    $(this).empty().append(d.getImage())
                } catch (h) { }
            });
            return c ? $('<img src="' + c + '"/>') : null
        },
        Note: {}
    };
WinLessons.Note.init = function () {
    $("#learndialog .buttonbar a.button2").click(function () {
        IDE.cmdExit()
    });
    $("#learndialog .buttonbar a.button1").click(function () {
        $("#learndialog").addClass("hidden");
        return false
    })
};
WinLessons.Note._goBack = function () {
    $(this).hasClass("btndisabled") || WinLessons.goBack();
    return false
};
WinLessons.Note._formatText = function (b) {
    var c;
    try {
        c = $(b)
    } catch (d) { }
    if (!c || c.length == 0) c = $("<div><p>" + b + "</p></div>");
    else if (c.length > 1 || c[0].tagName != "DIV") {
        c = $("<div></div>");
        c.append(b)
    }
    c.find("em").each(function (b, c) {
        c = $(c);
        c.hasClass("var") && c.text(prefs[c.attr("n")])
    });
    return c
};
WinLessons.Note.displayNote = function (b, c, d, e, f, g, h) {
    e = $("<div><h2></h2><p></p></div>");
    b ? e.find("h2").append(b) : e.find("h2").empty();
    d ? e.find("h2").after(d) : e.find("h2").next()[0].tagName == "DIV" && e.find("h2").next().detach();
    e.find("p").append(c);
    e.find("span.play_hilight").append('<img src="ide/imgs/lesson/play.png"/>');
    if (!f) {
        b = $('<a class="navlink" href="#">Previous Step</a>');
        e.append(b);
        b.click(WinLessons.Note._goBack)
    }
    h = {
        text: e,
        showClose: h ? false : true
    };
    if (g) {
        h.bgcolor = "#ffffff";
        h.showClose =
            false
    }
    h.el = IDE._maskElement;
    if ($(h.el).parents("#win-properties").length > 0) h.preferVertical = true;
    else if ($(h.el).parents("#win-code").length > 0) h.preferInset = true;
    IDE.showAnnotation(h)
};
var WinSidebar = {
    isVisible: !1,
    isRight: !1,
    init: function () {
        $("#win-sidebar a.window-close").click(function () {
            WinSidebar.hide();
            return false
        });
        $("#wincmd-tbinfo").click(function () {
            WinSidebar.isVisible ? WinSidebar.hide() : WinSidebar.show(WinSidebar.isRight);
            return false
        })
    },
    show: function (b, c) {
        $("#wincmd-tbinfo").removeClass("hidden");
        if (b === void 0) b = WinSidebar.isRight;
        WinSidebar.isVisible = true;
        WinSidebar.isRight = b ? true : false;
        WinSidebar.isRight = false;
        $("#win-sidebar").removeClass("hidden");
        c ? $("#win-sidebar a.window-close").addClass("hidden") :
            $("#win-sidebar a.window-close").removeClass("hidden");
        $("#win-sidebar").css("width", 0).animate({
            width: 250
        }, {
            duration: 500,
            progress: function () {
                IDE.adjustPanels()
            }
        })
    },
    hide: function () {
        $("#win-sidebar").css("width", 250).animate({
            width: 0
        }, {
            duration: 500,
            progress: function () {
                IDE.adjustPanels()
            },
            done: function () {
                WinSidebar.isVisible = false;
                $("#win-sidebar").addClass("hidden")
            }
        })
    },
    setContent: function (b) {
        $("#win-sidebar .content").html(b)
    },
    _replaceContents: function () {
        $("#win-sidebar .content").find("code").each(function () {
            var b =
                $(this).text(),
                c = JSON.parse(b),
                c = ObjectIO.deserializeScriptStep(c);
            $(this).css("display", "inline-block").empty().append(c.getImage()).append('<q style="display:none">' + b + "</q>")
        });
        $("#win-sidebar .content q").each(function () {
            var b = $(this).html();
            $(this).empty().text(b)
        });
        $("#win-sidebar .content a[href=code]").click(function () {
            IDE.showPopup($(this).find("q").text());
            return false
        })
    },
    load: function (b, c) {
        $.ajax({
            url: b,
            success: function (b) {
                WinSidebar.setContent(b);
                c && c();
                WinSidebar._replaceContents()
            }
        })
    }
},
    WinAnnotation = {
        width: 300,
        isVisible: !1,
        hideNotes: !1,
        allowAdvanced: !1,
        finalActionButton: "",
        finalActionCallback: null,
        init: function () {
            var b = $("#win-annotation");
            b.bind("dragstart", function () {
                return false
            });
            $("#win-tools a.tutorial").click(function () {
                $("#win-tools .tutorialtabs a").removeClass("active");
                $(this).addClass("active");
                WinAnnotation.expand(true);
                return false
            });
            $("#win-tools a.blocks").click(function () {
                $("#win-tools .tutorialtabs a").removeClass("active");
                $(this).addClass("active");
                WinAnnotation.expand(false);
                return false
            });
            var c = $('<div class="addnote"><span class="icon-plus-2"></span> Add a new note</div>');
            c.on("click", WinAnnotation.addNoteClicked);
            b.find("a.addnewnote").on("click", WinAnnotation.addNoteClicked);
            b.find("a.help").on("click", WinAnnotation.showHelp);
            var d = $('<div class="actions"><a href="#" class="nobtn-round secondary small previous">Back</a> <span class="step">1 / 3</span> <a href="#" class="btn-round action next small floatright">Next</a><a href="#" class="btn-round action done hidden small floatright">Done</a></div>');
            b.find(".content").sortable({
                items: "div.entry",
                handle: ".note,.note-actions",
                stop: function () {
                    WinAnnotation._updateOrder();
                    IDE.dirty()
                }
            }).append(c);
            b.append(d);
            b.on("click", function (c) {
                var d = $(c.target);
                c.target.tagName != "A" && (d = d.parents("a"));
                var g = d.parents(".note"),
                    h = d.parents(".jqte_editor");
                if (d.length > 0 && d[0].tagName == "A" && (g.length > 0 || h.length > 0) && (b.hasClass("playmode") || d.hasClass("link"))) {
                    c.preventDefault();
                    WinAnnotation.visitLink(d)
                }
            });
            b.find("a.pageview").on("click", WinAnnotation.switchPageView);
            b.find("a.listview").on("click", WinAnnotation.switchListView);
            b.find("a.edit").on("click", WinAnnotation.switchEditMode);
            b.find("a.play").on("click", WinAnnotation.switchPlayMode);
            b.find("a.previous").on("click", WinAnnotation.prevClicked);
            b.find("a.next").on("click", WinAnnotation.nextClicked);
            b.find("a.done").on("click", WinAnnotation.hide);
            b.find(".collapsed .expand").click(function () {
                WinAnnotation.expand(true);
                return false
            });
            b.find(".expanded .collapse").click(function () {
                WinAnnotation.expand(false);
                return false
            });
            WinCode.addChangeListener(WinAnnotation.blocksChanged)
        },
        blocksChanged: function (b) {
            b == "delete" && WinAnnotation._updateOrder()
        },
        hasNotes: function () {
            return $("#win-annotation .entry").length > 0
        },
        addNote: function (b) {
            var c = $("#win-annotation .content");
            c.find(".entry").removeClass("selected");
            var d = WinAnnotation.allowAdvanced ? $('<div class="entry selected"><div class="note-actions"><\!--span class="page"></span--\><span class="preview"></span><a href="#" class="remove icon-cancel"></a><a href="#" class="icon-mic recorder" title="Record voice"></a><a href="#" class="audioplayer hidden"></a><a href="#" class="context icon-blocked"></a><a href="#" class="actor"><img src="ide/imgs/blank.png" style="display:none"/> <span>No selection</span></a><a href="#" class="size icon-blocked"></a></div></div>') :
                $('<div class="entry selected"><div class="note-actions"><span class="page"></span><span class="preview"></span><a href="#" class="remove icon-cancel"></a><a href="#" class="icon-mic recorder" title="Record voice"></a><a href="#" class="audioplayer hidden"></a></div>');
            c.find("div.addnote").before(d);
            d.click(WinAnnotation.selectItem);
            d.find("a.remove").on("click", WinAnnotation.removeClicked);
            d.find("a.audioplayer").on("click", WinAnnotation.playStopClicked);
            d.find("a.context").on("click", WinAnnotation.contextClicked);
            d.find("a.actor").on("click", WinAnnotation.actorClicked);
            d.find("a.size").on("click", WinAnnotation.sizeClicked);
            c = $('<div class="note"></div>');
            d.append(c);
            c.append(b);
            c.on("click", WinAnnotation.clickedComment);
            d.find("a.recorder").on("click", WinAnnotation.recordClicked);
            WinAnnotation._updateOrder();
            c.click();
            c = $("#win-annotation .content");
            c.scrollTop(c[0].scrollHeight - c.height());
            WinAnnotation.updateOwner();
            return d
        },
        addNoteClicked: function (b) {
            b && b.preventDefault();
            WinAnnotation.addNote("", false)
        },
        switchPageView: function (b) {
            b && b.preventDefault();
            var c = $("#win-annotation");
            if ($("#win-tools").hasClass("showannotations")) {
                c.addClass("pageview").removeClass("listview");
                var d = c.find(".entry").length;
                c.find(".entry").each(function (b, f) {
                    if ($(f).hasClass("selected")) {
                        b > 0 ? c.find("a.previous").addClass("action").removeClass("secondary") : c.find("a.previous").removeClass("action").addClass("secondary");
                        if (b < d - 1) {
                            c.find("a.next").removeClass("hidden");
                            c.find("a.done").addClass("hidden")
                        } else {
                            c.find("a.next").addClass("hidden");
                            c.find("a.done").removeClass("hidden")
                        }
                    }
                });
                $("#win-annotation .content").scrollTop(0)
            } else {
                $("#win-tools").addClass("showannotations");
                $("#win-code").removeClass("mintools");
                WinTools.adjustWindow()
            }
        },
        switchListView: function (b) {
            b && b.preventDefault();
            b = $("#win-annotation");
            if ($("#win-tools").hasClass("showannotations")) {
                b.removeClass("pageview").addClass("listview");
                var c = b.find(".entry.selected");
                c.length > 0 && b.find(".content").scrollTop(c.position().top)
            } else {
                $("#win-tools").addClass("showannotations");
                $("#win-code").removeClass("mintools");
                WinTools.adjustWindow()
            }
        },
        isEditMode: function () {
            return $("#win-annotation").hasClass("editmode")
        },
        switchEditMode: function (b) {
            b && b.preventDefault();
            b = $("#win-annotation");
            b.addClass("editmode").removeClass("playmode");
            b.find(".content").sortable("enable")
        },
        switchPlayMode: function (b) {
            b && b.preventDefault();
            var c = $("#win-annotation");
            c.removeClass("editmode").addClass("playmode");
            WinAnnotation.updateTitle();
            c.find(".selected").length <= 0 && WinAnnotation._selectEntry(c.find(".entry:first"));
            WinAnnotation._runEntry(c.find(".entry.selected"));
            c.find(".jqte_linkform").css("display", "none");
            c.find(".jqte_editor").blur();
            c.find("a.previous").addClass("action").removeClass("secondary");
            var d = c.find(".entry").length;
            c.find(".entry").each(function (b, f) {
                var g = $(f);
                if (g.hasClass("selected")) {
                    b > 0 ? c.find("a.previous").addClass("action").removeClass("secondary") : c.find("a.previous").removeClass("action").addClass("secondary");
                    if (b < d - 1) {
                        c.find("a.next").removeClass("hidden");
                        c.find("a.done").addClass("hidden")
                    } else {
                        c.find("a.next").addClass("hidden");
                        c.find("a.done").removeClass("hidden")
                    }
                    if (window.soundManager) {
                        soundManager.stopAll();
                        c.find(".audioplayer").addClass("play");
                        if (g.attr("data-audio")) {
                            g.find(".audioplayer").removeClass("hidden").removeClass("play");
                            if (g.attr("data-audio")) {
                                var h = soundManager.createSound({
                                    url: g.attr("data-audio")
                                });
                                h.play({
                                    onfinish: function () {
                                        h.unload();
                                        g.find(".audioplayer").addClass("play")
                                    }
                                })
                            }
                        } else g.find(".audioplayer").addClass("hidden")
                    } else g.find(".audioplayer").addClass("hidden")
                }
            });
            c.find(".content").sortable("disable")
        },
        playStopClicked: function (b) {
            b && b.preventDefault();
            var c = $(this),
                b = c.parents(".entry");
            if (b.attr("data-audio"))
                if (c.hasClass("play")) {
                    c.removeClass("play");
                    var d = soundManager.createSound({
                        url: b.attr("data-audio")
                    });
                    d.play({
                        onfinish: function () {
                            d.unload();
                            c.addClass("play")
                        }
                    })
                } else {
                    soundManager.stopAll();
                    $("#win-annotation .audioplayer").addClass("play")
                }
        },
        contextClicked: function (b) {
            b && b.preventDefault();
            var b = $(this),
                c = "";
            if (b.hasClass("icon-blocked")) {
                b.removeClass("icon-blocked").addClass("icon-picture");
                c = "stage"
            } else if (b.hasClass("icon-picture")) {
                b.removeClass("icon-picture").addClass("icon-file-xml");
                c = "code"
            } else if (b.hasClass("icon-file-xml")) {
                b.removeClass("icon-file-xml").addClass("icon-list-title");
                c = "level"
            } else if (b.hasClass("icon-list-title")) {
                b.removeClass("icon-list-title").addClass("icon-blocked");
                c = ""
            }
            b.parents(".entry").attr("data-context", c)
        },
        actorClicked: function (b) {
            b && b.preventDefault();
            var c = $(this),
                b = $('<div class="choice-chooser"><ul></ul></div>');
            $("body").append(b);
            b.css("position",
                "absolute").css("top", c.offset().top + c.outerHeight()).css("left", c.offset().left);
            var b = b.find("ul"),
                d = $('<li><img src="ide/imgs/blank.png"/> No selection</li>');
            d.click(function () {
                c.find("img").attr("src", "ide/imgs/blank.png").css("display", "none");
                c.find("span").text("No selection");
                c.parents("div.entry").attr("data-actor", "").attr("data-stage", "");
                $(".choice-chooser").detach()
            });
            b.append(d);
            d = $('<li><img src="ide/imgs/blank.png"/> Stage</li>');
            d.click(function () {
                c.find("img").attr("src", "ide/imgs/blank.png").css("display",
                    "none");
                c.find("span").text("Stage");
                c.parents("div.entry").attr("data-actor", "").attr("data-stage", "Stage");
                $(".choice-chooser").detach()
            });
            b.append(d);
            for (var e = 0; e < Runtime.sprites.length; e++) {
                d = Runtime.sprites[e];
                d = $('<li><img src="' + d.costumes[0].imgObj.src + '"/> ' + d.label + "</li>");
                b.append(d);
                d.click(function () {
                    var b = $(this).find("img").attr("src"),
                        d = $.trim($(this).text());
                    c.find("img").attr("src", b).css("display", "");
                    c.find("span").text(d);
                    c.parents("div.entry").attr("data-actor", d).attr("data-stage",
                        "");
                    $(".choice-chooser").detach()
                })
            }
        },
        sizeClicked: function (b) {
            b && b.preventDefault();
            var b = $(this),
                c = "";
            if (b.hasClass("icon-collapse")) {
                b.removeClass("icon-collapse").addClass("icon-expand-2");
                c = "full"
            } else if (b.hasClass("icon-expand-2")) {
                b.removeClass("icon-expand-2").addClass("icon-blocked");
                c = ""
            } else {
                b.removeClass("icon-blocked").addClass("icon-collapse");
                c = "half"
            }
            b.parents(".entry").attr("data-size", c)
        },
        prevClicked: function (b) {
            b && b.preventDefault();
            var c = $("#win-annotation"),
                d = c.find(".entry").length;
            c.find(".entry").each(function (b, f) {
                var g = $(f);
                if (g.hasClass("selected")) {
                    if (b > 0) {
                        g = g.removeClass("selected").prev();
                        WinAnnotation._selectEntry(g);
                        WinAnnotation._runEntry(g);
                        b--;
                        b > 0 ? c.find("a.previous").addClass("action").removeClass("secondary") : c.find("a.previous").removeClass("action").addClass("secondary");
                        if (b < d - 1) {
                            c.find("a.next").removeClass("hidden");
                            c.find("a.done").addClass("hidden")
                        } else {
                            c.find("a.next").addClass("hidden");
                            c.find("a.done").removeClass("hidden")
                        }
                        c.find(".toggle .step").text("Step " +
                            (b + 1) + " / " + d)
                    }
                    return false
                }
            });
            c.find(".content").scrollTop(0)
        },
        nextClicked: function (b) {
            b && b.preventDefault();
            var c = $("#win-annotation"),
                d = c.find(".entry").length;
            c.find(".entry").each(function (b, f) {
                var g = $(f);
                if (g.hasClass("selected")) {
                    if (b < d - 1) {
                        g = g.removeClass("selected").next();
                        WinAnnotation._selectEntry(g);
                        WinAnnotation._runEntry(g);
                        b++;
                        b > 0 ? c.find("a.previous").addClass("action").removeClass("secondary") : c.find("a.previous").removeClass("action").addClass("secondary");
                        if (b < d - 1) {
                            c.find("a.next").removeClass("hidden");
                            c.find("a.done").addClass("hidden")
                        } else {
                            c.find("a.next").addClass("hidden");
                            c.find("a.done").removeClass("hidden")
                        }
                        c.find(".toggle .step").text("Step " + (b + 1) + " / " + d)
                    }
                    return false
                }
            });
            c.find(".content").scrollTop(0)
        },
        registerFinalAction: function (b, c) {
            $("#win-annotation a.done").text(b).unbind().on("click", c)
        },
        flashBlocks: function (b, c, d) {
            if (d >= 0) {
                b.setSelected(!b.showSelected, c);
                WinCode.draw();
                window.setTimeout(function () {
                    WinAnnotation.flashBlocks(b, c, d - 1)
                }, 150)
            }
        },
        selectItem: function (b) {
            b && b.preventDefault();
            b = $(this);
            WinAnnotation._selectEntry(b)
        },
        _selectEntry: function (b) {
            $("#win-annotation .entry").removeClass("selected");
            b.addClass("selected");
            var c = 1,
                d = 0;
            $("#win-annotation .entry").each(function (b, e) {
                d++;
                $(e).hasClass("selected") && (c = b + 1)
            });
            $("#win-annotation .toggle .step").text("Step " + c + " / " + d);
            $("#win-annotation .expanded .subject").text("Step " + c + " / " + d);
            var e = $("#win-annotation .entry.selected h1:first").text();
            e || (e = $("#win-annotation .entry.selected h2:first").text());
            e || (e = $("#win-annotation .entry.selected h3:first").text());
            $("#win-annotation .expanded .tutorial-sound").unbind().click(function () {
                var b = $(this);
                if (b.hasClass("icon-volume-high")) {
                    b.removeClass("icon-volume-high").addClass("icon-mute");
                    soundManager.mute()
                } else {
                    b.addClass("icon-volume-high").removeClass("icon-mute");
                    soundManager.unmute()
                }
                return false
            });
            $("#win-annotation .collapsed .subject").text("(Step " + c + " / " + d + ") " + e);
            if (!$("#win-annotation").hasClass("editmode")) {
                e = b.attr("data-size");
                e = e == "full" ? $("#win-tools").innerHeight() - 8 : e == "half" ? $("#win-tools").innerHeight() /
                    2 - 8 : $("#win-annotation .entry.selected pre").length > 0 ? $("#win-tools").innerHeight() - 8 : $("#win-tools").innerHeight() / 2 - 8;
                $(".tools-resize-handle").css("top", e);
                $("#win-annotation").css("height", e);
                $("#win-tools .palette").css("top", e);
                if (window.WinStage) b.attr("data-context") == "level" ? WinStage.setStageState(true) : WinStage.setStageState(false);
                else {
                    if (WinAnnotation.isVisible) {
                        e = $("#win-annotation .entry.selected").attr("data-size");
                        e == "full" ? $(".tools-resize-handle").css("top", window.innerHeight - $(".toolbar-top").outerHeight()) :
                            e == "half" && $(".tools-resize-handle").css("top", (window.innerHeight - $(".toolbar-top").outerHeight()) / 2)
                    }
                    IDE.adjustPanels()
                }
            }
        },
        _runEntry: function (b) {
            WinCode.clearSelection();
            WinCode.draw();
            var c = b.hasClass("entry") ? b.find(".note") : b.parents(".entry").find(".note"),
                d = b.attr("data-actor");
            if (d) WinAnnotation.selectAsset(Sprites.getSpriteByName(d));
            else (d = b.attr("data-stage")) ? WinAnnotation.selectAsset(null) : WinAnnotation.visitLink(c.find("a.link:first"));
            if (window.soundManager) {
                soundManager.stopAll();
                $("#win-annotation .audioplayer").addClass("play");
                if (b.attr("data-audio")) {
                    if ($("#win-annotation").hasClass("playmode")) {
                        b.find(".audioplayer").removeClass("hidden").removeClass("play");
                        var e = soundManager.createSound({
                            url: b.attr("data-audio")
                        });
                        e.play({
                            onfinish: function () {
                                e.unload();
                                b.find(".audioplayer").addClass("play")
                            }
                        })
                    }
                } else b.find(".audioplayer").addClass("hidden")
            } else b.find(".audioplayer").addClass("hidden")
        },
        selectAsset: function (b) {
            IDE.selectAsset(b)
        },
        visitLink: function (b) {
            if (b.hasClass("link")) {
                b.attr("data-stage") ?
                    WinAnnotation.selectAsset(null) : b.attr("data-actor") && WinAnnotation.selectAsset(Sprites.getSpriteByName(b.attr("data-actor")));
                var c = b.attr("data-blockid");
                if (c && c != "0")
                    if (c = WinCode.findBlockWithId(parseInt(c))) {
                        WinCode.centerBlock(c);
                        WinCode.clearSelection();
                        b.attr("data-endblockid") ? WinAnnotation.flashBlocks(c, parseInt(b.attr("data-endblockid")), 4) : c.setSelected(true, false);
                        WinCode.draw()
                    }
            } else if (b.length > 0) {
                c = $('<a href="#" class="btnDefaultOrange">OK</a>');
                c.click(function () {
                    $("#infopopup").addClass("w600nm").removeClass("w800nm");
                    showInfoPopup();
                    return false
                });
                $("#infopopup").removeClass("w600nm").addClass("w800nm");
                showInfoPopup('<iframe src="' + b.attr("href") + '" width="100%" height="400px"></iframe>', null, c, false, true)
            }
        },
        removeClicked: function (b) {
            b && b.preventDefault();
            var c = $(this).parents(".entry");
            IDE.confirmDialog("Are you sure you wish to remove this note?", function () {
                c.detach();
                WinAnnotation._updateOrder();
                IDE.dirty()
            }, "Yes", "No")
        },
        clickedComment: function (b) {
            if (!$("#win-annotation").hasClass("playmode")) {
                var c = $(b.target);
                b.target.tagName != "A" && (c = c.parents("a"));
                b && b.preventDefault();
                c = $(this).parents(".entry");
                c.find(".jqte_editor").blur();
                c.find("div.note").jqte({
                    b: true,
                    i: false,
                    u: true,
                    remove: false,
                    color: false,
                    format: true,
                    formats: [
                        ["p", "Normal"],
                        ["h1", "Header"],
                        ["h2", "Sub-header"],
                        ["h3", "User Action"],
                        ["pre", "Draggable"]
                    ],
                    p: true,
                    br: true,
                    link: true,
                    unlink: true,
                    rule: false,
                    left: false,
                    right: false,
                    center: false,
                    ol: false,
                    ul: true,
                    sub: false,
                    sup: false,
                    fsize: false,
                    indent: false,
                    outdent: false,
                    strike: false,
                    source: false,
                    blur: function () {
                        if (c.find(".jqte_linkform:visible").length <=
                            0) {
                            var b = "<p>" + c.find("textarea").val() + "</p>",
                                b = b.replace(/\<p(|\s+.*?)>(.*?)<p(|\s+.*?)>(.*?)<\/p>\s*<\/p>/gim, "<p$1>$2</p><p$3>$4</p>"),
                                b = b.replace(/\<p><\/p>/gim, ""),
                                b = $('<div class="note">' + b + "</div>");
                            b.on("click", WinAnnotation.clickedComment);
                            c.find(".jqte").after(b);
                            window.setTimeout(function () {
                                c.find(".jqte").detach()
                            }, 1);
                            IDE.dirty();
                            c.find("p").removeClass("draggable");
                            c.find("p img").each(function () {
                                var b = $(this);
                                b.attr("data-locked") != "true" && b.attr("data-block") && b.parents("p").addClass("draggable")
                            });
                            c.find("p.draggable").replaceWith(function () {
                                return $("<pre/>", {
                                    html: $(this).html()
                                })
                            });
                            c.find("pre *").each(function () {
                                var b = $(this);
                                if (b.prop("tagName") == "PRE") {
                                    b.after(b.find("*"));
                                    b.detach()
                                } else b.prop("tagName") != "A" && b.prop("tagName") != "IMG" ? b.detach() : b.attr("style", "")
                            });
                            c.find("pre a").each(function () {
                                var b = $(this),
                                    c = b;
                                b.find("*").each(function () {
                                    var b = $(this);
                                    b.detach();
                                    c.after(b);
                                    c = b
                                });
                                b.detach()
                            });
                            WinAnnotation.hideNotes = false
                        }
                    }
                });
                c.find(".jqte_linkinput").blur(function () {
                    c.find(".jqte_linkform").css("display",
                        "none")
                });
                var d = RegExp("<\!--.*?--\>", "g");
                c.find(".jqte_editor").bind("paste", function (b) {
                    b.preventDefault();
                    if (b.clipboardData || b.originalEvent && b.originalEvent.clipboardData) {
                        for (b = (b.originalEvent || b).clipboardData.getData("text/html") ; d.test(b) ;) b = b.replace(d, "");
                        var c = $("<div></div>");
                        c.append(b);
                        c.find("*").each(function (b, c) {
                            var d = $(c),
                                e = false;
                            if (c.tagName == "A") {
                                if (d.hasClass("link")) {
                                    e = true;
                                    d.attr("href", "#")
                                }
                                d.removeAttr("style");
                                d.removeAttr("class")
                            } else if (c.tagName == "SPAN") {
                                var f = d.attr("style");
                                if (f) (f = f.match(/color:[ ]?rgb\([0-9, ]+\);/)) && d.attr("style", f[0]);
                                else d.removeAttr("style");
                                d.removeAttr("class")
                            } else if (c.nodeType == 8) d.detach();
                            else {
                                d.removeAttr("style");
                                d.removeAttr("class")
                            }
                            e && d.addClass("link")
                        });
                        document.execCommand("insertHtml", false, c.html())
                    } else if (window.clipboardData) {
                        b = window.clipboardData.getData("Text");
                        c = $(b);
                        c[0].tagName == "A" && c.find("img").length == 1 || (b = window.clipboardData.getData("Text"));
                        document.selection.createRange().pasteHTML(b)
                    }
                    WinAnnotation.hideNotes =
                        false
                });
                WinAnnotation.updateOwner();
                b = $('<div class="jqte_tool unselectable"><a href="#" class="icon-pictures" title="Add Image"></a></div>');
                b.find("a").on("click", WinAnnotation.addAssetClicked).hover(WinAnnotation.iconHoverIn, WinAnnotation.iconHoverOut);
                c.find(".jqte_toolbar").append(b);
                c.find(".jqte_editor").focus()
            }
        },
        iconHoverIn: function () {
            $(".jqte_title").remove();
            $(this).parents(".entry").find(".jqte").append('<div class="jqte_title"><div class="jqte_titleArrow"><div class="jqte_titleArrowIcon"></div></div><div class="jqte_titleText">' +
                $(this).attr("title") + "</div></div>");
            var b = $(".jqte_title:first");
            b.find(".jqte_titleArrowIcon");
            var c = $(this).position(),
                d = c.left + $(this).outerWidth() - b.outerWidth() / 2 - $(this).outerWidth() / 2,
                c = c.top + $(this).outerHeight() + 5;
            b.delay(400).css({
                top: c,
                left: d
            }).fadeIn(200)
        },
        iconHoverOut: function () {
            $(".jqte_title").remove()
        },
        recordClicked: function (b) {
            b && b.preventDefault();
            var c = $(this).parents("div.entry");
            if (c.find("a.recorder").hasClass("icon-mic")) WinMediaCapture.showAudioRecorder(function (b) {
                c.attr("data-audio",
                    b);
                c.find("a.recorder").addClass("icon-mic-2").removeClass("icon-mic");
                IDE.dirty();
                WinAnnotation._updateOrder();
                WinAnnotation.updateOwner()
            });
            else {
                c.removeAttr("data-audio");
                c.find("a.recorder").addClass("icon-mic").removeClass("icon-mic-2");
                IDE.dirty();
                WinAnnotation._updateOrder()
            }
        },
        addAssetClicked: function (b) {
            b && b.preventDefault();
            b = $(this).parents("div.entry");
            $("#win-media-assets").modal();
            WinMediaAssets.showPicker("Select an Asset", WinAnnotation.addAsset, {
                backgrounds: true,
                actors: false,
                images: true,
                sounds: window.soundManager ? true : false,
                charStudio: false
            }, b)
        },
        addAsset: function (b, c, d, e) {
            if (!e && WinMediaAssets._callbackObj) e = WinMediaAssets._callbackObj;
            if (e) {
                b = b[0];
                c = getFileExt(b.url);
                c == ".mp3" || c == ".wav" ? e.attr("data-audio", b.url) : e.find(".note").append('<p><img src="' + b.url + '"/></p>')
            }
            WinAnnotation._updateOrder();
            WinAnnotation.updateOwner()
        },
        _updateOrder: function () {
            var b = $("#win-annotation .entry").length;
            $("#win-annotation .entry").each(function (c, d) {
                var e = $(d);
                e.find(".page").text("Step " + (c +
                    1) + " / " + b);
                e.find(".preview").empty();
                if (window.soundManager) {
                    soundManager.stopAll();
                    $("#win-annotation .audioplayer").addClass("play");
                    if (e.attr("data-audio")) {
                        e.find(".audioplayer").removeClass("hidden").addClass("play");
                        e.find(".recorder").removeClass("icon-mic").addClass("icon-mic-2")
                    } else {
                        e.find(".audioplayer").addClass("hidden");
                        e.find(".recorder").addClass("icon-mic").removeClass("icon-mic-2")
                    }
                }
                e.find("a.link").each(function (b, c) {
                    var d = $(c);
                    if (d.attr("data-stage")) {
                        if (d.attr("data-blockid")) {
                            for (var e =
                                    false, k = 0; k < Runtime.background.scripts.length; k++) {
                                var l = Blocks.findBlockWithId(Runtime.background.scripts[k], d.attr("data-blockid"));
                                if (l) {
                                    e = true;
                                    break
                                }
                            }
                            e || d.addClass("removelink").children().each(function (b, c) {
                                $(c).detach();
                                d.after(c)
                            })
                        }
                    } else if (d.attr("data-actor")) {
                        var m = Sprites.getSpriteByName(d.attr("data-actor"));
                        if (m && d.attr("data-blockid")) {
                            e = false;
                            for (k = 0; k < m.scripts.length; k++)
                                if (l = Blocks.findBlockWithId(m.scripts[k], d.attr("data-blockid"))) {
                                    e = true;
                                    break
                                }
                            e || d.addClass("removelink").children().each(function (b,
                                c) {
                                $(c).detach();
                                d.after(c)
                            })
                        }
                    }
                });
                e.find(".removelink").detach()
            });
            WinCode.draw();
            WinAnnotation.hideNotes = false
        },
        show: function (b) {
            WinAnnotation.isVisible = true;
            WinAnnotation.updateTitle();
            $("#win-tools").removeClass("pin");
            b || WinAnnotation._selectEntry($("#win-annotation .entry.selected"));
            $("#wincmd-showannotate").text(g_loc.getText("menu.hideannotate"));
            if (b) {
                $("#win-code").addClass("editannotations");
                $("#wincmd-annotate").addClass("hidden")
            } else $("#win-code").removeClass("editannotations");
            $("#wincmd-showannotate").removeClass("hidden");
            $("#win-tools").addClass("showannotations");
            WinCode._assignIds();
            b ? WinAnnotation.switchEditMode() : WinAnnotation.switchPlayMode();
            WinTools.adjustWindow()
        },
        expand: function (b) {
            if (b) {
                $("#win-tools").addClass("showannotations");
                $("#win-annotation .expanded").removeClass("hidden");
                $("#win-annotation .collapsed").addClass("hidden");
                $(".tools-resize-handle").removeClass("hidden");
                b = $("#win-tools .palette").innerHeight() - 8;
                $("#win-annotation").css("height", b);
                $("#win-tools .palette").css("top", b);
                b = b + $(".tutorialtabs").outerHeight();
                $(".tools-resize-handle").css("top", b);
                WinAnnotation._selectEntry($("#win-annotation .entry.selected"))
            } else {
                $("#win-annotation .expanded").addClass("hidden");
                $("#win-annotation .collapsed").removeClass("hidden");
                $(".tools-resize-handle").addClass("hidden");
                b = $("#win-annotation .collapsed").outerHeight();
                $("#win-annotation").css("height", b);
                b = b + $(".tutorialtabs").outerHeight();
                $(".tools-resize-handle").css("top", b);
                $("#win-tools .palette").css("top", b)
            }
        },
        isExpanded: function () {
            return $("#win-tools").hasClass("showannotations") &&
                $("#win-annotation").outerHeight() > $("#win-annotation .actions").outerHeight()
        },
        hide: function (b) {
            WinAnnotation.isVisible = false;
            b && b.preventDefault();
            (!prefs["category-pin"] || prefs["category-pin"] == "on") && $("#win-tools").addClass("pin");
            $("#wincmd-showannotate").text(g_loc.getText("menu.showannotate"));
            WinAnnotation.hasNotes() ? $("#wincmd-showannotate").removeClass("hidden") : $("#wincmd-showannotate").addClass("hidden");
            $("#wincmd-annotate").removeClass("hidden");
            $("#win-tools").removeClass("showannotations");
            $("#win-annotation").removeClass("editmode").removeClass("playmode");
            $("#win-code").removeClass("editannotations");
            WinTools.adjustWindow();
            WinCode.adjustWindow()
        },
        showHelp: function () {
            Help.cmdHelp(null, "ide/help/tutorial-designer")
        },
        updateOwner: function () {
            IDE.currentLessonOwnerId = prefs.userid
        },
        serialize: function () {
            var b = [],
                c = RegExp("http[s]?://([a-zA-Z]+.)tynker.co[m]?(.*)", "g");
            $("#win-annotation .entry").each(function (d, e) {
                var f = {},
                    g = $(e);
                if (g.attr("data-audio"))
                    for (f.audio = g.attr("data-audio") ; c.test(f.audio) ;) f.audio =
                        f.audio.replace(c, "$2");
                var h = g.attr("data-context"),
                    j = g.attr("data-actor"),
                    k = g.attr("data-stage"),
                    l = g.attr("data-size");
                f.comment = g.find("div.note").html();
                if (!f.comment) f.comment = g.find("textarea.note").val();
                for (; c.test(f.comment) ;) f.comment = f.comment.replace(c, "$2");
                g = "<p>" + f.comment + "</p>";
                g = g.replace(/\<p(|\s+.*?)>(.*?)<p(|\s+.*?)>(.*?)<\/p>\s*<\/p>/gim, "<p$1>$2</p><p$3>$4</p>");
                g = g.replace(/\<p><\/p>/gim, "");
                g = $(g);
                g.find("a").each(function (b, c) {
                    var d = $(c),
                        e = d.attr("data-block");
                    if (e) {
                        d.find("img").attr("data-block",
                            e);
                        d.removeAttr("data-block")
                    }
                });
                g.find("img").each(function (b, c) {
                    var d = $(c);
                    d.attr("data-block") && d.attr("src", "ide/imgs/blank.png")
                });
                var m = $("<div></div>");
                m.append(g);
                if (h) f.context = h;
                if (j) f.actor = j;
                if (k) f.stage = "stage";
                if (l) f.size = l;
                f.comment = m.html();
                b.push(f)
            });
            return b.length > 0 ? JSON.stringify(b) : ""
        },
        updateTitle: function () {
            prefs.lessonowner && prefs.lessonowner.displayName ? $("#win-annotation .title").text(IDE.currentProjectName + " by " + prefs.lessonowner.displayName) : $("#win-annotation .title").text(IDE.currentProjectName)
        },
        deserialize: function (b) {
            var c = $("#win-annotation .content");
            c.find(".entry").detach();
            WinAnnotation.updateTitle();
            for (var d = RegExp("http[s]?://([a-zA-Z]+.)tynker.co[m]?(.*)", "g"), e = RegExp("<\!--.*?--\>", "g"), f = /\<p><\/p>/gim, g = 0; g < b.length; g++) {
                var h = WinAnnotation.allowAdvanced ? $('<div class="entry selected"><div class="note-actions"><\!--span class="page"></span--\><span class="preview"></span><a href="#" class="remove icon-cancel"></a><a href="#" class="icon-mic recorder" title="Record voice"></a><a href="#" class="audioplayer hidden"></a><a href="#" class="context icon-blocked"></a><a href="#" class="actor"><img src="ide/imgs/blank.png" style="display:none"/> <span>No selection</span></a><a href="#" class="size icon-blocked"></a></div></div>') :
                    $('<div class="entry selected"><div class="note-actions"><span class="page"></span><span class="preview"></span><a href="#" class="remove icon-cancel"></a><a href="#" class="icon-mic recorder" title="Record voice"></a><a href="#" class="audioplayer hidden"></a></div>');
                c.find("div.addnote").before(h);
                h.click(WinAnnotation.selectItem);
                h.find("a.remove").on("click", WinAnnotation.removeClicked);
                h.find("a.audioplayer").on("click", WinAnnotation.playStopClicked);
                h.find("a.context").on("click", WinAnnotation.contextClicked);
                h.find("a.actor").on("click", WinAnnotation.actorClicked);
                h.find("a.size").on("click", WinAnnotation.sizeClicked);
                var j = b[g].audio;
                if (j) {
                    for (; d.test(j) ;) j = j.replace(d, "$2");
                    h.attr("data-audio", j);
                    h.find(".recorder").removeClass("icon-mic").addClass("icon-mic-2").attr("title", "Remove recording")
                }
                h.find("a.recorder").on("click", WinAnnotation.recordClicked);
                var j = $('<div class="note"></div>'),
                    k = b[g].context;
                if (k) {
                    h.attr("data-context", k);
                    k == "stage" ? h.find("a.context").removeClass("icon-blocked").addClass("icon-picture") :
                        k == "code" ? h.find("a.context").removeClass("icon-blocked").addClass("icon-file-xml") : k == "level" && h.find("a.context").removeClass("icon-blocked").addClass("icon-list-title")
                }
                if (k = b[g].actor) {
                    h.attr("data-actor", k);
                    h.find("a.actor span").text(k);
                    (k = Sprites.getSpriteByName(k)) && k.costumes.length > 0 ? h.find("a.actor img").attr("src", k.costumes[0].imgObj.src).css("display", "") : h.find("a.actor img").attr("src", "ide/imgs/blank.png").css("display", "none")
                } else {
                    if (k = b[g].stage) {
                        h.attr("data-stage", "Stage");
                        h.find("a.actor span").text("Stage")
                    } else h.find("a.actor span").text("No selection");
                    h.find("a.actor img").attr("src", "ide/imgs/blank.png").css("display", "none")
                }
                if (k = b[g].size) {
                    h.attr("data-size", k);
                    k == "full" ? h.find("a.size").removeClass("icon-blocked").addClass("icon-expand-2") : k == "half" && h.find("a.size").removeClass("icon-blocked").addClass("icon-collapse")
                }
                h.append(j);
                if (h = b[g].comment) {
                    for (; d.test(h) ;) h = h.replace(d, "$2");
                    for (; e.test(h) ;) h = h.replace(e, "");
                    for (; f.test(h) ;) h = h.replace(f, "");
                    j.html(h);
                    j.find("p img").each(function () {
                        var b = $(this);
                        if (b.attr("data-locked") != "true" && b.attr("data-block")) {
                            b.parents("p").addClass("draggable");
                            var c = b.attr("data-block");
                            if (c) {
                                c = WinAnnotation._repair(c, b);
                                b.attr("data-block", c)
                            }
                        }
                    });
                    j.find("p.draggable").replaceWith(function () {
                        return $("<pre/>", {
                            html: $(this).html()
                        })
                    });
                    j.find("pre *").each(function () {
                        var b = $(this);
                        if (b.prop("tagName") == "PRE") {
                            b.after(b.find("*"));
                            b.detach()
                        } else if (b.prop("tagName") != "A" && b.prop("tagName") != "IMG") b.detach();
                        else {
                            b.attr("style",
                                "");
                            if (!b.attr("data-block")) {
                                var c = b.parent();
                                b.detach();
                                c.after(b)
                            }
                        }
                    });
                    j.find("pre").each(function () {
                        $(this).find("*").length === 0 && $(this).detach()
                    });
                    j.find("pre a").each(function () {
                        var b = $(this),
                            c = b;
                        b.find("*").each(function () {
                            var b = $(this);
                            b.detach();
                            c.after(b);
                            c = b
                        });
                        b.detach()
                    });
                    j.find("*").each(function (b, c) {
                        var d = $(c),
                            e = false;
                        if (c.tagName == "A") {
                            if (d.hasClass("link")) {
                                e = true;
                                d.attr("href", "#")
                            }
                            var f = d.attr("data-block");
                            if (f) {
                                f = WinAnnotation._repair(f, d);
                                d.removeAttr("data-block");
                                d.find("img").attr("data-block",
                                    f)
                            }
                            d.removeAttr("style");
                            d.removeAttr("class")
                        } else if (c.tagName == "SPAN") {
                            if (f = d.attr("style")) (f = f.match(/color:[ ]?rgb\([0-9, ]+\);/)) ? d.attr("style", f[0]) : d.removeAttr("style");
                            d.removeAttr("class")
                        } else if (c.tagName == "IMG") {
                            if (f = d.attr("data-block")) {
                                f = WinAnnotation._repair(f, d);
                                try {
                                    f = ObjectIO.deserializeScriptStep(JSON.parse(f));
                                    f.getImage(function (b) {
                                        d.attr("src", b.src)
                                    })
                                } catch (g) { }
                            }
                        } else {
                            d.removeAttr("style");
                            d.removeAttr("class")
                        }
                        e && d.addClass("link")
                    })
                }
                j.on("click", WinAnnotation.clickedComment)
            }
            WinAnnotation._updateOrder();
            c.find(".entry:first").addClass("selected").click()
        },
        _repair: function (b, c) {
            if (b == "{") {
                for (var d = false, b = b + '"', e = c[0].attributes, f = 0; f < e.length; f++) {
                    var g = e[f].name;
                    if (["style", "class", "id", "href", "src", "data-block", "data-blockid", "data-endblockid", "data-actor", "data-stage"].indexOf(g) < 0) {
                        d && (b = b + " ");
                        b = b + g;
                        d = true
                    }
                }
                if (!d) {
                    c = c.parent();
                    e = c[0].attributes;
                    for (f = 0; f < e.length; f++) {
                        g = e[f].name;
                        if (["style", "class", "id", "href", "src", "data-block", "data-blockid", "data-endblockid", "data-actor", "data-stage"].indexOf(g) <
                            0) {
                            d && (b = b + " ");
                            b = b + g;
                            d = true
                        }
                    }
                }
                if (d) {
                    for (var h in g_steps) {
                        d = RegExp('"' + h.toLowerCase() + '"', "g");
                        b = b.replace(d, '"' + h + '"')
                    }
                    b = b.replace(/valuevar/g, "valueVar");
                    b = b.replace(/containerlabels/g, "containerLabels");
                    b = b.replace(/labeltext/g, "labelText");
                    b = b.substring(0, b.length - 1)
                }
            }
            return b
        },
        canDrag: function (b, c) {
            var d = false,
                e = $("#win-annotation");
            e.is(":visible") && e.hasClass("playmode") && b >= e.offset().left && (b <= e.offset().left + e.outerWidth() && c >= e.offset().top && c <= e.offset().top + e.outerHeight()) && (d = true);
            return d
        },
        getDragObj: function (b, c) {
            var d = null,
                e = $("#win-annotation");
            e.is(":visible") && e.hasClass("playmode") && b >= e.offset().left && (b <= e.offset().left + e.outerWidth() && c >= e.offset().top && c <= e.offset().top + e.outerHeight()) && e.find("img").each(function (e, g) {
                var h = $(g),
                    j = h.attr("data-block");
                if (j) {
                    var k = h.offset();
                    if (h.attr("data-locked") != "true" && b >= k.left && c >= k.top && b <= k.left + h.outerWidth() && c <= k.top + h.outerHeight()) {
                        d = ObjectIO.deserializeScriptStep(JSON.parse(j));
                        d.x = k.left - b;
                        d.y = k.top - c;
                        d._computeBounds();
                        return false
                    }
                }
            });
            return d
        },
        canDrop: function (b, c, d, e, f) {
            d = $("#win-annotation");
            if (d.is(":visible") && b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight())
                if (d.hasClass("editmode")) {
                    if (f != WinBackpack && (e instanceof Block || e instanceof Label) || f != WinBackpack && e instanceof WinAssets.DragObject) return true
                } else if (f == WinCode && (e instanceof Block || e instanceof Label)) return true;
            return false
        },
        dragOver: function (b, c) {
            var d = $("#win-annotation");
            d.is(":visible") &&
                b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight() && d.hasClass("editmode") && d.find(".entry").each(function (b, d) {
                    var g = $(d);
                    c >= g.offset().top && c <= g.offset().top + g.outerHeight() ? g.addClass("selected") : g.removeClass("selected")
                })
        },
        _getLastBlock: function (b) {
            return b.next ? WinAnnotation._getLastBlock(b.next) : b
        },
        drop: function (b, c, d, e, f) {
            c = $("#win-annotation");
            b = c.find(".entry.selected");
            if (c.hasClass("editmode")) {
                if (e instanceof Block || e instanceof Label) {
                    if (f == WinCode || f == WinTools) {
                        IDE.Clipboard.doUndo();
                        f = e.lockedInSandbox ? $('<p><a class="link" href="#"></a></p>') : $('<pre><a class="link" href="#"></a></pre>');
                        (c = e.id) && f.find("a").attr("data-blockid", c);
                        (c = WinAnnotation._getLastBlock(e).id) && f.find("a").attr("data-endblockid", c);
                        c = e.x;
                        d = e.y;
                        e.x = 0;
                        e.y = 0;
                        e.showDragHandle = false;
                        e.setSelected(false, true);
                        e._computeBounds();
                        f.find("a").append($(e.getImage()));
                        e.x = c;
                        e.y = d;
                        e._computeBounds();
                        Scripts.clearIds(e);
                        c = false;
                        if (e.lockedInSandbox) {
                            delete e.lockedInSandbox;
                            c = true
                        } !IDE.editingActor || IDE.editingActor == Runtime.background ? f.find("a").attr("data-stage", "Stage") : IDE.editingActor && f.find("a").attr("data-actor", IDE.editingActor.label);
                        if (e instanceof Block) {
                            e = JSON.stringify(ObjectIO.genScriptObj(e));
                            f.find("img").attr("data-block", e);
                            c && f.find("img").attr("data-locked", "true").addClass("locked")
                        } else if (e instanceof Label) {
                            e = JSON.stringify(ObjectIO.genValueObj(e));
                            f.find("img").attr("data-block", e);
                            c && f.find("img").attr("data-locked", "true").addClass("locked")
                        }
                        b.find("div.note").append(f).append("<p><br/></p>")
                    }
                } else if (e instanceof WinAssets.DragObject) {
                    f = $('<p><a class="link" href="#"></a></p>');
                    c = "";
                    if (e.sprite) {
                        var d = JSON.parse(e.sprite),
                            g = d.currentCostume;
                        if (g > 0 && g <= d.costumes.length)
                            if (c = d.costumes[g - 1]) {
                                c = c.img;
                                c.indexOf(".png") < 0 && c.indexOf(".jpg") < 0 && (c = "")
                            } else c = "";
                        d = d.label;
                        f.find("a").attr("data-actor", d)
                    } else f.find("a").attr("data-stage", "Stage");
                    f.find("a").append(c ? '<img src="' + c + '"/>' : $(e.img).clone());
                    b.find("div.note").append(f)
                }
                WinAnnotation._updateOrder()
            } else {
                (e instanceof Block || e instanceof Label) && WinCode._broadcastChange("delete",
                    e);
                return true
            }
        }
    },
    WinPuzzle = {
        puzzleTitle: "",
        puzzleInstructions: "",
        originalProject: null,
        stageScripts: null,
        actors: null,
        enableFieldEdit: !1,
        enableDelete: !1,
        enableDeleteStart: !1,
        enableScrolling: !1,
        showTools: !1,
        blocksInTools: !1,
        blocksOnCanvas: !0,
        scrambledBlocks: [],
        startingBlocks: [],
        init: function () {
            $("#win-editor > a.close").click(function () {
                $("#win-editor").toggleClass("minimized");
                IDE.adjustPanels();
                return false
            });
            $("#win-editor a.solve").click(function () {
                $("#win-editor").addClass("minimized");
                IDE.adjustPanels();
                Runtime.sendEvent("tynker.validate", "any");
                return false
            })
        },
        adjustWindow: function () { },
        editBegin: function () {
            WinPuzzle.originalProject = ObjectIO.serialize();
            WinProperties.enable(false);
            WinTools.enable(false);
            if (!WinPuzzle.puzzleTitle) WinPuzzle.puzzleTitle = IDE.currentProjectName;
            if (!WinPuzzle.puzzleInstructions) IDE.puzzleInstructions = IDE.currentProjectDescription ? IDE.currentProjectDescription : IDE.currentProjectName;
            $(".toolbar-top .main").addClass("hidden");
            $(".toolbar-top .puzzle").removeClass("hidden").empty();
            $(".toolbar-top .title.puzzle").append('<input type="text"/> <textarea></textarea>');
            var b = $(".toolbar-top .title.puzzle input"),
                c = $(".toolbar-top .title.puzzle textarea");
            b.val(WinPuzzle.puzzleTitle);
            c.val(WinPuzzle.puzzleInstructions);
            b.focus(function () {
                $(this).addClass("active")
            }).blur(function () {
                $(this).removeClass("active");
                WinPuzzle.puzzleTitle = $(this).val();
                IDE.dirty()
            }).keydown(function (b) {
                b.keyCode == 13 && $(this).blur()
            });
            c.focus(function () {
                $(this).addClass("active")
            }).blur(function () {
                $(this).removeClass("active");
                WinPuzzle.puzzleInstructions = $(this).val();
                IDE.dirty()
            });
            WinPuzzle.toolbarRemoveButtons();
            WinPuzzle.toolbarButton("Reset Puzzle", function () {
                WinPuzzle.originalProject && ObjectIO.deserialize(WinPuzzle.originalProject, function () {
                    for (var b = 0; b < Runtime.sprites.length; b++)
                        for (var c = 0; c < Runtime.sprites[b].scripts.length; c++) WinCode.markBlockChildren(Runtime.sprites[b].scripts[c], false);
                    for (b = 0; b < Runtime.background.scripts.length; b++) WinCode.markBlockChildren(Runtime.background.scripts[b], false);
                    Runtime.sprites.length >
                        0 ? IDE.selectAsset(Runtime.sprites[0]) : IDE.selectAsset(null)
                });
                return false
            }, "tertiary");
            WinPuzzle.toolbarButton("Done Editing", function () {
                WinPuzzle.editEnd();
                return false
            });
            WinCode.enableDecorations(false);
            WinStage.enableDecorations(false);
            WinAssets.enableDecorations(false);
            IDE.adjustPanels();
            WinAssets._enableContextMenu = false;
            WinAssets.enableDelete(false);
            IDE._enableKeyboardShortcuts = false;
            WinCode._enableRun = false;
            WinCode._enableDelete = false;
            WinCode._enableContextMenu = false;
            WinCode._enableFieldEdit =
                false;
            WinCode._enableDragToDelete = false;
            WinCode._enableCutCopyPaste = false;
            WinCode._enableDoubleClick = false;
            for (b = 0; b < Runtime.background.scripts.length; b++) WinPuzzle._saveOriginalParents(Runtime.background.scripts[b]);
            for (b = 0; b < Runtime.sprites.length; b++)
                for (var c = Runtime.sprites[b], d = 0; d < c.scripts.length; d++) WinPuzzle._saveOriginalParents(c.scripts[d]);
            WinPuzzle.scramble()
        },
        editEnd: function () {
            for (var b = 0; b < Runtime.background.scripts.length; b++) WinPuzzle._restoreAttachment(Runtime.background.scripts[b],
                Runtime.background);
            WinPuzzle._cleanScripts(Runtime.background);
            for (b = 0; b < Runtime.background.scripts.length; b++) WinPuzzle._cleanOriginals(Runtime.background.scripts[b]);
            for (b = 0; b < Runtime.sprites.length; b++) {
                for (var c = Runtime.sprites[b], d = 0; d < c.scripts.length; d++) WinPuzzle._restoreAttachment(c.scripts[d], c);
                WinPuzzle._cleanScripts(c);
                for (d = 0; d < c.scripts.length; d++) WinPuzzle._cleanOriginals(c.scripts[d])
            }
            for (b = 0; b < Runtime.background.scripts.length; b++)
                if (WinPuzzle._hasMark(Runtime.background.scripts[b])) Runtime.background.scripts[b].marked =
                    true;
            for (b = 0; b < Runtime.sprites.length; b++) {
                c = Runtime.sprites[b];
                for (d = 0; d < c.scripts.length; d++)
                    if (WinPuzzle._hasMark(c.scripts[d])) c.scripts[d].marked = true
            }
            WinCode.draw();
            WinProperties.enable(true);
            WinTools.enable(true);
            WinCode.enableDecorations(true);
            WinCode.enable(true);
            WinStage.enableDecorations(true);
            WinAssets.enableDecorations(true);
            $(".toolbar-top .main").removeClass("hidden");
            $(".toolbar-top .puzzle").addClass("hidden").empty();
            IDE.adjustPanels();
            WinAssets._enableContextMenu = true;
            WinAssets.enableDelete(true);
            IDE._enableKeyboardShortcuts = true;
            WinCode._enableRun = true;
            WinCode._enableDelete = true;
            WinCode._enableContextMenu = true;
            WinCode._enableFieldEdit = true;
            WinCode._enableDragToDelete = true;
            WinCode._enableCutCopyPaste = true;
            WinCode._enableDoubleClick = true
        },
        toolbarTitle: function (b) {
            b ? $(".toolbar-top .title.puzzle").text(b) : $(".toolbar-top .title.puzzle").text("")
        },
        toolbarText: function (b) {
            WinPuzzle.description = b
        },
        toolbarRemoveButtons: function () {
            $(".toolbar-top .buttons.puzzle").empty()
        },
        toolbarButton: function (b,
            c, d) {
            b = $('<a class="action-btn ' + d + '" href="#">' + b + "</a>");
            $(".toolbar-top .buttons.puzzle").append(b);
            b.click(function () {
                c && c();
                return false
            })
        },
        showInfo: function (b) {
            var c = "<h1>" + WinPuzzle.puzzleTitle + "</h1><p>" + WinPuzzle.puzzleInstructions + "</p>",
                d = $('<a class="btnDefaultOrange medium">OK</a>');
            d.click(function () {
                IDE.showInfoPopup();
                b && b();
                return false
            });
            IDE.showInfoPopup(c, null, d, true, true)
        },
        puzzleBegin: function () {
            WinPuzzle.toolsPalette = g_palette;
            WinPuzzle.scrambledBlocks = [];
            WinPuzzle.startingBlocks = [];
            WinPuzzle._savedProject = ObjectIO.serialize();
            WinProperties.enable(false);
            WinTools.enable(WinPuzzle.showTools);
            WinTools.enableSearch(false);
            WinAssets.enable(false);
            WinCode.enable(true);
            WinStage.enableToolbar(false);
            WinCode.enableDocked(true);
            $("#win-editor > a.close").removeClass("hidden");
            $("#win-code .trash").css("display", "none");
            $("#win-editor .puzzlebar").removeClass("hidden");
            $("#win-editor").addClass("over");
            window.WinToolbar && WinToolbar.enable(true);
            $(".toolbar-top .main").addClass("hidden");
            $(".toolbar-top .puzzle").removeClass("hidden").empty();
            if (!WinPuzzle.puzzleTitle) WinPuzzle.puzzleTitle = IDE.currentProjectName;
            if (!WinPuzzle.puzzleInstructions) WinPuzzle.puzzleInstructions = IDE.currentProjectDescription;
            WinPuzzle.toolbarTitle(IDE.currentProjectName);
            WinPuzzle.toolbarText(IDE.puzzleInstructions);
            WinPuzzle.toolbarRemoveButtons();
            WinPuzzle.toolbarButton("", WinPuzzle.showInfo, "icon-info");
            WinCode.enableDecorations(false);
            WinStage.enableDecorations(false);
            IDE._enableKeyboardShortcuts = false;
            WinCode._enableRun = false;
            WinCode._enableDelete = WinPuzzle.enableDelete;
            WinCode._enableDeleteStart = WinPuzzle.enableDeleteStart;
            WinCode._enableScrolling = WinPuzzle.enableScrolling;
            WinCode._enableContextMenu = false;
            WinCode._enableFieldEdit = WinPuzzle.enableFieldEdit;
            WinCode._enableDragToDelete = WinPuzzle.enableDelete;
            WinCode._enableCutCopyPaste = false;
            WinCode._enableDoubleClick = false;
            IDE.adjustPanels();
            WinPuzzle.scramble();
            for (var b = [], c = 0; c < Runtime.sprites.length; c++) {
                for (var d = Runtime.sprites[c], e = false,
                        f = 0; f < d.scripts.length; f++) {
                    if (!d.scripts[f].marked && (!d.scripts[f].tags || d.scripts[f].tags.indexOf("visible") < 0)) d.scripts[f].hidden = true;
                    else {
                        e = true;
                        Runtime.sprites[c].scripts[f].locked = true
                    }
                    WinCode.markBlockChildren(Runtime.sprites[c].scripts[f], false)
                }
                e && b.push(d)
            }
            e = false;
            for (c = 0; c < Runtime.background.scripts.length; c++) {
                if (Runtime.background.scripts[c].marked) {
                    e = true;
                    Runtime.background.scripts[f].locked = true
                } else Runtime.background.scripts[c].hidden = true;
                WinCode.markBlockChildren(Runtime.background.scripts[c],
                    false)
            }
            e && b.push(null);
            WinCode.reRender();
            WinCode.draw();
            if (WinPuzzle.blocksInTools) {
                d = {
                    label: "Misc",
                    cat: "misc",
                    items: []
                };
                g_palette = [d];
                for (c = 0; c < WinPuzzle.scrambledBlocks.length; c++) d.items.push(WinPuzzle.scrambledBlocks[c]);
                WinTools.enableSearch(false);
                WinTools.reset()
            }
            WinCode._showHidden = false;
            Runtime.stage.enableDragging(false);
            b.length > 0 ? IDE.selectAsset(b[0]) : IDE.selectAsset(null);
            if (b.length > 1) {
                WinAssets.enable(true);
                WinAssets.enableDecorations(false);
                WinAssets._enableContextMenu = false;
                WinAssets.enableDelete(false);
                b.indexOf(null) <= 0 && $("#win-assets > div.background").addClass("hidden");
                $("#win-assets > div.actors li").each(function (c, d) {
                    var e = $(d);
                    b.indexOf(e.data("sprite")) < 0 && e.addClass("hidden")
                })
            }
            WinAssets.enableDelete(false);
            WinPuzzle.showInfo(function () {
                WinStage.cmdStart()
            })
        },
        restoreTools: function () {
            if (WinPuzzle.toolsPalette) {
                g_palette = WinPuzzle.toolsPalette;
                WinPuzzle.toolsPalette = null;
                WinPuzzle.scrambledBlocks = [];
                WinPuzzle.startingBlocks = [];
                WinTools.reset()
            }
        },
        puzzleEnd: function () {
            if (WinPuzzle.toolsPalette) {
                g_palette =
                    WinPuzzle.toolsPalette;
                WinPuzzle.toolsPalette = null;
                WinPuzzle.scrambledBlocks = [];
                WinPuzzle.startingBlocks = []
            }
            ObjectIO.deserialize(WinPuzzle._savedProject);
            WinProperties.enable(true);
            WinTools.enable(true);
            WinTools.enableSearch(true);
            WinAssets.enable(true);
            WinCode.enableDecorations(true);
            WinStage.enableDecorations(true);
            WinStage.enableToolbar(true);
            WinCode.enableDocked(false);
            $("#win-editor > a.close").addClass("hidden");
            $("#win-code .trash").css("display", "");
            $("#win-editor .puzzlebar").addClass("hidden");
            $("#win-editor").removeClass("over");
            $(".toolbar-top .main").removeClass("hidden");
            $(".toolbar-top .puzzle").addClass("hidden").empty();
            WinAssets._enableContextMenu = true;
            WinAssets.enableDelete(true);
            IDE._enableKeyboardShortcuts = true;
            WinCode._enableRun = true;
            WinCode._enableDelete = true;
            WinCode._enableDeleteStart = true;
            WinCode._enableScrolling = true;
            WinCode._enableContextMenu = true;
            WinCode._enableFieldEdit = true;
            WinCode._enableDragToDelete = true;
            WinCode._enableCutCopyPaste = true;
            WinCode._enableDoubleClick =
                true;
            IDE.adjustPanels()
        },
        countBlocksUsed: function () {
            for (var b = 0, c = 0; c < Runtime.background.scripts.length; c++) {
                var d = Runtime.background.scripts[c];
                if (!d.hasFlap && (d.marked || !d.hidden)) b = b + WinPuzzle._countBlocks(d)
            }
            for (c = 0; c < Runtime.sprites.length; c++) {
                var e = Runtime.sprites[c];
                if (!e.instantiated)
                    for (var f = 0; f < e.scripts.length; f++) {
                        d = e.scripts[f];
                        if (!d.hasFlap && (d.marked || !d.hidden)) b = b + WinPuzzle._countBlocks(d)
                    }
            }
            return b
        },
        _countBlocks: function (b) {
            var c = 0;
            if (b)
                if (b instanceof Label)
                    for (var d = 0; d < b._children.length; d++) c =
                        c + WinPuzzle._countBlocks(b._children[d]);
                else if (b instanceof Block) {
                    c = c + (1 + WinPuzzle._countBlocks(b.label));
                    for (d = 0; d < b._containers.length; d++) c = c + WinPuzzle._countBlocks(b._containers[d]);
                    c = c + WinPuzzle._countBlocks(b.next)
                }
            return c
        },
        _findMarks: function (b, c) {
            if (b instanceof Block) {
                (b.marked || b.tags && b.tags.indexOf("visible") >= 0) && c.push(b);
                WinPuzzle._findMarks(b.label, c);
                for (var d = b.getNumContainers(), e = 0, d = b.getNumContainers() ; e < d; e++) {
                    var f = b.getBlockAtContainer(e);
                    f && WinPuzzle._findMarks(f, c)
                }
                b.next &&
                    WinPuzzle._findMarks(b.next, c)
            } else if (b instanceof Label) {
                (b.marked || b.tags && b.tags.indexOf("visible") >= 0) && c.push(b);
                e = 0;
                for (d = b.getNumSockets() ; e < d; e++) (f = b.getSocketAtChild(e)) && f._child && WinPuzzle._findMarks(f._child, c)
            }
            return c
        },
        findMarks: function (b) {
            for (var b = b.scripts, c = [], d = 0; d < b.length; d++) WinPuzzle._findMarks(b[d], c);
            return c
        },
        scramble: function () {
            var b = null,
                c = WinPuzzle.findMarks(Runtime.background);
            if (c.length == 0)
                for (var d = 0; d < Runtime.sprites.length; d++) {
                    c = WinPuzzle.findMarks(Runtime.sprites[d]);
                    if (c.length > 0) {
                        b = Runtime.sprites[d];
                        break
                    }
                } else b = Runtime.background;
            if (c && b) {
                for (d = 0; d < c.length; d++)
                    if (c[d].parent) c[d].detach();
                    else
                        for (var e = 0; e < b.scripts.length; e++)
                            if (b.scripts[e] == c[d]) {
                                b.scripts.splice(e, 1);
                                break
                            }
                for (e = []; c.length > 0;) {
                    var f = Math.floor(Math.random() * c.length),
                        g = c[f];
                    if (g.hasFlap) {
                        WinPuzzle.blocksOnCanvas && b.scripts.unshift(g);
                        for (var h = false, d = 0; d < WinPuzzle.scrambledBlocks.length; d++)
                            if (WinPuzzle.scrambledBlocks[d].labelText == g.labelText || WinPuzzle.scrambledBlocks[d].label ==
                                g.label) {
                                h = true;
                                break
                            }
                        h || WinPuzzle.scrambledBlocks.push(g.copy())
                    } else {
                        e.push(g);
                        h = false;
                        for (d = 0; d < WinPuzzle.scrambledBlocks.length; d++)
                            if (WinPuzzle.scrambledBlocks[d].labelText == g.labelText || WinPuzzle.scrambledBlocks[d].label == g.label) {
                                h = true;
                                break
                            }
                        h || WinPuzzle.scrambledBlocks.push(g.copy());
                        WinPuzzle.startingBlocks.push(g.copy())
                    }
                    c.splice(f, 1)
                }
                for (d = 0; d < e.length; d++) b.scripts.unshift(e[d]);
                IDE.selectAsset(b);
                WinCode.relayoutBlocks(true)
            } else Runtime.sprites.length > 0 && (b = Runtime.sprites[0]);
            IDE.selectAsset(b)
        },
        _hasMark: function (b) {
            if (b) {
                if (b.marked) return true;
                if (b instanceof Block) {
                    if (WinPuzzle._hasMark(b.next) || WinPuzzle._hasMark(b.label)) return true;
                    for (var c = b.getNumContainers(), d = 0; d < c; d++)
                        if (WinPuzzle._hasMark(b.getBlockAtContainer(d))) return true
                } else if (b instanceof Label) {
                    c = b.getNumSockets();
                    for (d = 0; d < c; d++)
                        if (WinPuzzle._hasMark(b.getSocketAtChild(d))) return true
                }
            }
            return false
        },
        _cleanScripts: function (b) {
            for (var c = 0; c < b.scripts.length; c++)
                if (b.scripts[c] == null) {
                    b.scripts.splice(c, 1);
                    c--
                }
        },
        _restoreAttachment: function (b,
            c) {
            if (b && b.origParent && b.parent != b.origParent.parent) {
                b.marked = true;
                var d = b.origParent;
                if (d.parent != null) {
                    if (b.parent == null)
                        for (var e = 0; e < c.scripts.length; e++)
                            if (c.scripts[e] == b) {
                                c.scripts[e] = null;
                                break
                            }
                    d.inContainer ? d.parent.addToContainer(d.container, b) : d.isNext ? d.parent.add(b) : d.isSocket && d.parent.parent.setValue(d.socket, b)
                }
            }
        },
        _cleanOriginals: function (b) {
            b && b.origParent && delete b.origParent;
            if (b instanceof Block) {
                WinPuzzle._cleanOriginals(b.label);
                for (var c = b.getNumContainers(), d = 0; d < c; d++) WinPuzzle._cleanOriginals(b.getBlockAtContainer(d));
                b.next && WinPuzzle._cleanOriginals(b.next)
            } else if (b instanceof Label) {
                c = b.getNumSockets();
                for (d = 0; d < c; d++) WinPuzzle._cleanOriginals(b.getSocketAtChild(d))
            }
        },
        _saveOriginalParents: function (b, c) {
            if (b) {
                b.origParent = c ? c : {};
                b.origParent.parent = b.parent;
                if (b instanceof Block) {
                    WinPuzzle._saveOriginalParents(b.label);
                    for (var d = b.getNumContainers(), e = 0; e < d; e++) WinPuzzle._saveOriginalParents(b.getBlockAtContainer(e), {
                        inContainer: true,
                        container: e
                    });
                    b.next && WinPuzzle._saveOriginalParents(b.next, {
                        isNext: true
                    })
                } else if (b instanceof Label) {
                    d = b.getNumSockets();
                    for (e = 0; e < d; e++) {
                        var f = b.getSocketAtChild(e);
                        f._child && WinPuzzle._saveOriginalParents(f._child, {
                            isSocket: true,
                            socket: e
                        })
                    }
                }
            }
        },
        _diff: function () {
            for (var b = 0; b < WinPuzzle.stageScripts.length; b++);
            for (b = 0; b < WinPuzzle.actors.length; b++)
                for (var c = WinPuzzle.actors[b], d = 0; d < c.scripts.length; d++);
        },
        setUpPuzzleExercise: function (b, c) {
            IDE._ignoreDirty = true;
            WinCode.enableDocked(true);
            $("#win-editor > a.close").removeClass("hidden");
            $("#win-code .trash").css("display", "none");
            $("#win-editor .puzzlebar").removeClass("hidden");
            $("#win-editor").addClass("over");
            $("#win-code a.switchview").addClass("hidden");
            WinCode.enableDecorations(false);
            WinProperties.enable(false);
            WinTools.enableSearch(false);
            WinAssets.enable(true);
            WinAssets.enableStrip(true);
            WinStage.enableDecorations(false);
            WinSidebar.hide();
            WinStage.enableToolbar(false);
            window.WinToolbar && WinToolbar.enable(true);
            $(".toolbar-top .main").addClass("hidden");
            $(".toolbar-top .puzzle").removeClass("hidden").empty();
            WinPuzzle.puzzleTitle = b;
            WinPuzzle.puzzleInstructions = c;
            WinPuzzle.toolbarTitle(b);
            WinPuzzle.toolbarText(c);
            WinPuzzle.toolbarRemoveButtons();
            WinPuzzle.toolbarButton("", WinPuzzle.showInfo, "icon-info");
            IDE._enableKeyboardShortcuts = false;
            Canvas.hideSelections = true;
            WinCode._enableRun = false;
            WinCode._enableDelete = true;
            WinCode._enableDeleteStart = true;
            WinCode._enableScrolling = WinPuzzle.enableScrolling;
            WinCode._enableContextMenu = false;
            WinCode._enableFieldEdit = true;
            WinCode._enableDragToDelete = WinPuzzle.enableDelete;
            WinCode._enableCutCopyPaste = false;
            WinCode._enableDoubleClick =
                false;
            WinCode.draw();
            if (WinPuzzle.blocksInTools) {
                var d = {
                    label: "Misc",
                    cat: "misc",
                    items: []
                };
                g_palette = [d];
                for (var e = 0; e < WinPuzzle.scrambledBlocks.length; e++) d.items.push(WinPuzzle.scrambledBlocks[e]);
                WinTools.enableSearch(false);
                WinTools.reset()
            }
            Runtime.stage.enableDragging(false);
            WinAssets.enableDelete(false);
            $("#wincmd-restoreide").detach();
            $("#win-stage").css("width", window.innerWidth);
            IDE.adjustPanels();
            WinCode.adjustWindow();
            WinCode.enableSandbox(true);
            WinAssets.enableSandbox(true)
        }
    },
    WinExpressions = {
        keywords: "PI E var round rand length abs floor ceil int sqrt sin cos tan asin acos atan ln log exp exp10 constant join".split(" "),
        re: RegExp(/^[a-zA-Z_][a-zA-Z0-9_]*$/),
        show: function (b, c) {
            WinExpressions.expression = null;
            var d = $("#win-expressions");
            d.find(".blockimage").empty();
            d.find(".expression").val(b ? b : "").unbind().keyup(function () {
                WinExpressions.build()
            });
            b && WinExpressions.build();
            d.find(".exprhelpbtn a").unbind().click(function () {
                d.find(".exprhelp").toggleClass("hidden");
                d.find(".exprhelp").hasClass("hidden") ?
                    $(this).html('More <span class="down"></span>') : $(this).html('Less <span class="up"></span>');
                d.modal();
                return false
            });
            var e = d.find("p.variables").empty(),
                f = false,
                g;
            for (g in Runtime.background.variables) {
                f = $('<span class="global"><a class="op" op="' + WinExpressions._fixVar(g) + '" href="#">' + g + "</a></span>");
                e.append(f);
                f = true
            }
            if (IDE.editingActor && IDE.editingActor != Runtime.background)
                for (g in IDE.editingActor.variables) {
                    f = $('<span class="local"><a class="op" op="' + WinExpressions._fixVar(g) + '" href="#">' +
                        g + "</span>");
                    e.append(f);
                    f = true
                }
            f ? d.find("div.variables").removeClass("hidden") : d.find("div.variables").addClass("hidden");
            d.find("a.op").unbind().click(function () {
                var b = d.find(".expression"),
                    c = b.val(),
                    e = $(this).attr("op"),
                    f = b[0].selectionStart;
                b.val($.trim(c.substring(0, f) + " " + e + " " + c.substring(f)));
                WinExpressions.build();
                b[0].selectionStart = b[0].selectionEnd = f + e.length + 1;
                b.focus();
                return false
            });
            d.modal();
            d.find(".okBtn").unbind().click(function () {
                try {
                    var b = WinExpressions.expression.copy();
                    if (c) c($.trim(d.find(".expression").val()),
                        b);
                    else {
                        b._computeBounds();
                        b.x = -WinCode.context.offsetX + (WinCode.canvas.width - b.width) / 2;
                        b.y = -WinCode.context.offsetY + (WinCode.canvas.height - b.height) / 2;
                        WinCode._scripts.push(b)
                    }
                    b._computeBounds();
                    WinCode._getScrollBounds();
                    WinCode.draw()
                } catch (e) { }
                $.modal.close();
                return false
            });
            d.find(".cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            })
        },
        hide: function () {
            $.modal.close()
        },
        _fixVar: function (b) {
            for (var c = "", d = b[0], c = d >= "a" && d <= "z" || d >= "A" && d < "Z" || d == "_" ? d : "_", e = 1; e < b.length; e++) {
                d = b[e];
                c = d >= "a" && d <= "z" || d >= "A" && d < "Z" || d >= "0" && d <= "9" || d == "_" ? c + d : c + "_"
            }
            return c
        },
        _resolveVars: function (b) {
            if (b && b instanceof Label) {
                if (b.func == "valueVar") {
                    if (IDE.editingActor && IDE.editingActor != Runtime.background)
                        for (var c in IDE.editingActor.variables)
                            if (WinExpressions._fixVar(c) == b.name) {
                                b.name = c;
                                b._children[0].label = c;
                                break
                            }
                    for (c in Runtime.background.variables)
                        if (WinExpressions._fixVar(c) == b.name) {
                            b.name = c;
                            b._children[0].label = c;
                            break
                        }
                }
                for (c = 0; c < b._children.length; c++) b._children[c] instanceof LabelInput &&
                    b._children[c]._child && WinExpressions._resolveVars(b._children[c]._child)
            }
        },
        build: function () {
            var b = $("#win-expressions .expression").val();
            try {
                WinExpressions.expression = g_expressionBuilder.parse(b);
                WinExpressions._resolveVars(WinExpressions.expression);
                var c = WinExpressions.expression.getImage();
                $("#win-expressions .blockimage").empty().append(c);
                $("#win-expressions .expression").removeClass("error")
            } catch (d) {
                $("#win-expressions .expression").addClass("error")
            }
        },
        buildObject: function (b) {
            try {
                var c = g_expressionBuilder.parse(b);
                WinExpressions._resolveVars(c);
                return c
            } catch (d) { }
            return null
        }
    },
    g_expressionBuilder = function () {
        function b() {
            this.yy = {}
        }
        var c = {
            trace: function () { },
            yy: {},
            symbols_: {
                error: 2,
                expression: 3,
                logical_or_expression: 4,
                EOF: 5,
                primary_expression: 6,
                IDENTIFIER: 7,
                NUMBER: 8,
                STRING: 9,
                "(": 10,
                ")": 11,
                postfix_expression: 12,
                "[": 13,
                "]": 14,
                argument_expression_list: 15,
                ",": 16,
                unary_expression: 17,
                unary_operator: 18,
                "+": 19,
                "-": 20,
                "~": 21,
                "!": 22,
                multiplicative_expression: 23,
                "*": 24,
                "/": 25,
                "%": 26,
                additive_expression: 27,
                shift_expression: 28,
                "<<": 29,
                ">>": 30,
                ">>>": 31,
                relational_expression: 32,
                "<": 33,
                ">": 34,
                "<=": 35,
                ">=": 36,
                equality_expression: 37,
                "==": 38,
                "!=": 39,
                and_expression: 40,
                "&": 41,
                exclusive_or_expression: 42,
                "^": 43,
                inclusive_or_expression: 44,
                "|": 45,
                logical_and_expression: 46,
                "&&": 47,
                "||": 48,
                $accept: 0,
                $end: 1
            },
            terminals_: {
                2: "error",
                5: "EOF",
                7: "IDENTIFIER",
                8: "NUMBER",
                9: "STRING",
                10: "(",
                11: ")",
                13: "[",
                14: "]",
                16: ",",
                19: "+",
                20: "-",
                21: "~",
                22: "!",
                24: "*",
                25: "/",
                26: "%",
                29: "<<",
                30: ">>",
                31: ">>>",
                33: "<",
                34: ">",
                35: "<=",
                36: ">=",
                38: "==",
                39: "!=",
                41: "&",
                43: "^",
                45: "|",
                47: "&&",
                48: "||"
            },
            productions_: [0, [3, 2],
                [6, 1],
                [6, 1],
                [6, 1],
                [6, 3],
                [12, 1],
                [12, 4],
                [12, 3],
                [12, 4],
                [15, 1],
                [15, 3],
                [17, 1],
                [17, 2],
                [18, 1],
                [18, 1],
                [18, 1],
                [18, 1],
                [23, 1],
                [23, 3],
                [23, 3],
                [23, 3],
                [27, 1],
                [27, 3],
                [27, 3],
                [28, 1],
                [28, 3],
                [28, 3],
                [28, 3],
                [32, 1],
                [32, 3],
                [32, 3],
                [32, 3],
                [32, 3],
                [37, 1],
                [37, 3],
                [37, 3],
                [40, 1],
                [40, 3],
                [42, 1],
                [42, 3],
                [44, 1],
                [44, 3],
                [46, 1],
                [46, 3],
                [4, 1],
                [4, 3]
            ],
            performAction: function (b, c, d, h, j, k) {
                b = k.length - 1;
                switch (j) {
                    case 1:
                        return k[b - 1];
                    case 2:
                        if (k[b] == "PI") {
                            j = makeBlockByName("valueOpConstants");
                            j.setValue(0, "pi")
                        } else if (k[b] == "E") {
                            j = makeBlockByName("valueOpConstants");
                            j.setValue(0, "e")
                        } else j = new Label({
                            cat: "var",
                            func: "valueVar",
                            name: k[b]
                        });
                        this.$ = j;
                        break;
                    case 3:
                        this.$ = k[b];
                        break;
                    case 4:
                        this.$ = k[b].substring(1, k[b].length - 1);
                        break;
                    case 5:
                        this.$ = k[b - 1];
                        break;
                    case 7:
                        j = makeBlockByName("valueOpLetter");
                        j.setValue(0, k[b - 1]);
                        j.setValue(1, k[b - 3]);
                        this.$ = j;
                        break;
                    case 8:
                        if (k[b - 2] instanceof Label) j = k[b - 2].name;
                        else throw new Exception("invalid function");
                        break;
                    case 9:
                        if (k[b - 1].length <= 0) throw new Exception("invalid parameters");
                        j = k[b - 3];
                        switch (j) {
                            case "var":
                                j = new Label({
                                    cat: "var",
                                    func: "valueVar",
                                    name: k[b - 1][0]
                                });
                                break;
                            case "round":
                                j = makeBlockByName("valueOpRound");
                                j.setValue(0, k[b - 1][0]);
                                break;
                            case "rand":
                                j = makeBlockByName("valueOpRandom");
                                if (k[b - 1].length != 2) throw new Exception("invalid rand parameters");
                                j.setValue(0, k[b - 1][0]);
                                j.setValue(1, k[b - 1][1]);
                                break;
                            case "length":
                                j = makeBlockByName("valueOpLength");
                                j.setValue(0, k[b - 1][0]);
                                break;
                            case "abs":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "abs");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "floor":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "floor");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "ceil":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "ceiling");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "int":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "int");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "sqrt":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "sqrt");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "sin":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "sin");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "cos":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "cos");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "tan":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "tan");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "asin":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "asin");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "acos":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "acos");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "atan":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "atan");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "ln":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "ln");
                                j.setValue(1,
                                    k[b - 1][0]);
                                break;
                            case "log":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "log");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "exp":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "e^");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "exp10":
                                j = makeBlockByName("valueOpMath");
                                j.setValue(0, "10^");
                                j.setValue(1, k[b - 1][0]);
                                break;
                            case "constant":
                                j = makeBlockByName("valueOpConstants");
                                j.setValue(0, k[b - 1][0]);
                                break;
                            case "join":
                                c = k[b - 1].length;
                                if (c >= 2) {
                                    j = makeBlockByName("valueOpJoin");
                                    j.setValue(0, k[b - 1][c - 2]);
                                    j.setValue(1, k[b - 1][c -
                                        1
                                    ]);
                                    for (c = c - 3; c >= 0; c--) {
                                        d = makeBlockByName("valueOpJoin");
                                        d.setValue(0, k[b - 1][c]);
                                        d.setValue(1, j);
                                        j = d
                                    }
                                    this.$ = j
                                } else throw new Exception("invalid join parameters");
                                break;
                            default:
                                throw new Exception("invalid function: " + k[b - 3]);
                        }
                        this.$ = j;
                        break;
                    case 10:
                        this.$ = [k[b]];
                        break;
                    case 11:
                        k[b - 2].push(k[b]);
                        this.$ = k[b - 2];
                        break;
                    case 12:
                        this.$ = k[b];
                        break;
                    case 13:
                        switch (k[b - 1]) {
                            case "+":
                                this.$ = k[b];
                                break;
                            case "-":
                                j = makeBlockByName("valueOpMultiply");
                                j.setValue(0, -1);
                                j.setValue(1, k[b]);
                                this.$ = j;
                                break;
                            case "~":
                                j = makeBlockByName("valueOpNot");
                                j.setValue(0, k[b]);
                                this.$ = j;
                                break;
                            case "!":
                                j = makeBlockByName("valueOpNot");
                                j.setValue(0, k[b]);
                                this.$ = j;
                                break;
                            default:
                                throw new Exception("illegal unary operator: " + k[b - 1]);
                        }
                        break;
                    case 14:
                        this.$ = k[b];
                        break;
                    case 15:
                        this.$ = k[b];
                        break;
                    case 16:
                        this.$ = k[b];
                        break;
                    case 17:
                        this.$ = k[b];
                        break;
                    case 19:
                        j = makeBlockByName("valueOpMultiply");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, k[b]);
                        this.$ = j;
                        break;
                    case 20:
                        j = makeBlockByName("valueOpDivide");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, k[b]);
                        this.$ = j;
                        break;
                    case 21:
                        j = makeBlockByName("valueOpMod");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, k[b]);
                        this.$ = j;
                        break;
                    case 23:
                        j = makeBlockByName("valueOpAdd");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, k[b]);
                        this.$ = j;
                        break;
                    case 24:
                        j = makeBlockByName("valueOpSubtract");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, k[b]);
                        this.$ = j;
                        break;
                    case 26:
                        j = makeBlockByName("valueOpBinary");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, "<<");
                        j.setValue(2, k[b]);
                        this.$ = j;
                        break;
                    case 27:
                        j = makeBlockByName("valueOpBinary");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, ">>");
                        j.setValue(2, k[b]);
                        this.$ = j;
                        break;
                    case 28:
                        j = makeBlockByName("valueOpBinary");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, ">>>");
                        j.setValue(2, k[b]);
                        this.$ = j;
                        break;
                    case 30:
                        j = makeBlockByName("valueOpLess");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, k[b]);
                        this.$ = j;
                        break;
                    case 31:
                        j = makeBlockByName("valueOpGreater");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, k[b]);
                        this.$ = j;
                        break;
                    case 32:
                        j = makeBlockByName("valueOpBinary");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, "<=");
                        j.setValue(2, k[b]);
                        this.$ = j;
                        break;
                    case 33:
                        j = makeBlockByName("valueOpBinary");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, ">=");
                        j.setValue(2, k[b]);
                        this.$ = j;
                        break;
                    case 35:
                        j = makeBlockByName("valueOpEqual");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, k[b]);
                        this.$ = j;
                        break;
                    case 36:
                        j = makeBlockByName("valueOpBinary");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, "!=");
                        j.setValue(2, k[b]);
                        this.$ = j;
                        break;
                    case 38:
                        j = makeBlockByName("valueOpBinary");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, "and");
                        j.setValue(2, k[b]);
                        this.$ = j;
                        break;
                    case 40:
                        j = makeBlockByName("valueOpBinary");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, "xor");
                        j.setValue(2, k[b]);
                        this.$ = j;
                        break;
                    case 42:
                        j = makeBlockByName("valueOpBinary");
                        j.setValue(0,
                            k[b - 2]);
                        j.setValue(1, "or");
                        j.setValue(2, k[b]);
                        this.$ = j;
                        break;
                    case 44:
                        j = makeBlockByName("valueOpAnd");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, k[b]);
                        this.$ = j;
                        break;
                    case 46:
                        j = makeBlockByName("valueOpOr");
                        j.setValue(0, k[b - 2]);
                        j.setValue(1, k[b]);
                        this.$ = j
                }
            },
            table: [{
                3: 1,
                4: 2,
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 9,
                32: 8,
                37: 7,
                40: 6,
                42: 5,
                44: 4,
                46: 3
            }, {
                1: [3]
            }, {
                5: [1, 24],
                48: [1, 25]
            }, {
                5: [2, 45],
                11: [2, 45],
                16: [2, 45],
                47: [1, 26],
                48: [2, 45]
            }, {
                5: [2, 43],
                11: [2,
                    43
                ],
                16: [2, 43],
                45: [1, 27],
                47: [2, 43],
                48: [2, 43]
            }, {
                5: [2, 41],
                11: [2, 41],
                16: [2, 41],
                43: [1, 28],
                45: [2, 41],
                47: [2, 41],
                48: [2, 41]
            }, {
                5: [2, 39],
                11: [2, 39],
                16: [2, 39],
                41: [1, 29],
                43: [2, 39],
                45: [2, 39],
                47: [2, 39],
                48: [2, 39]
            }, {
                5: [2, 37],
                11: [2, 37],
                16: [2, 37],
                38: [1, 30],
                39: [1, 31],
                41: [2, 37],
                43: [2, 37],
                45: [2, 37],
                47: [2, 37],
                48: [2, 37]
            }, {
                5: [2, 34],
                11: [2, 34],
                16: [2, 34],
                33: [1, 32],
                34: [1, 33],
                35: [1, 34],
                36: [1, 35],
                38: [2, 34],
                39: [2, 34],
                41: [2, 34],
                43: [2, 34],
                45: [2, 34],
                47: [2, 34],
                48: [2, 34]
            }, {
                5: [2, 29],
                11: [2, 29],
                16: [2, 29],
                29: [1, 36],
                30: [1, 37],
                31: [1, 38],
                33: [2,
                    29
                ],
                34: [2, 29],
                35: [2, 29],
                36: [2, 29],
                38: [2, 29],
                39: [2, 29],
                41: [2, 29],
                43: [2, 29],
                45: [2, 29],
                47: [2, 29],
                48: [2, 29]
            }, {
                5: [2, 25],
                11: [2, 25],
                16: [2, 25],
                19: [1, 39],
                20: [1, 40],
                29: [2, 25],
                30: [2, 25],
                31: [2, 25],
                33: [2, 25],
                34: [2, 25],
                35: [2, 25],
                36: [2, 25],
                38: [2, 25],
                39: [2, 25],
                41: [2, 25],
                43: [2, 25],
                45: [2, 25],
                47: [2, 25],
                48: [2, 25]
            }, {
                5: [2, 22],
                11: [2, 22],
                16: [2, 22],
                19: [2, 22],
                20: [2, 22],
                24: [1, 41],
                25: [1, 42],
                26: [1, 43],
                29: [2, 22],
                30: [2, 22],
                31: [2, 22],
                33: [2, 22],
                34: [2, 22],
                35: [2, 22],
                36: [2, 22],
                38: [2, 22],
                39: [2, 22],
                41: [2, 22],
                43: [2, 22],
                45: [2, 22],
                47: [2,
                    22
                ],
                48: [2, 22]
            }, {
                5: [2, 18],
                11: [2, 18],
                16: [2, 18],
                19: [2, 18],
                20: [2, 18],
                24: [2, 18],
                25: [2, 18],
                26: [2, 18],
                29: [2, 18],
                30: [2, 18],
                31: [2, 18],
                33: [2, 18],
                34: [2, 18],
                35: [2, 18],
                36: [2, 18],
                38: [2, 18],
                39: [2, 18],
                41: [2, 18],
                43: [2, 18],
                45: [2, 18],
                47: [2, 18],
                48: [2, 18]
            }, {
                5: [2, 12],
                11: [2, 12],
                13: [1, 44],
                16: [2, 12],
                19: [2, 12],
                20: [2, 12],
                24: [2, 12],
                25: [2, 12],
                26: [2, 12],
                29: [2, 12],
                30: [2, 12],
                31: [2, 12],
                33: [2, 12],
                34: [2, 12],
                35: [2, 12],
                36: [2, 12],
                38: [2, 12],
                39: [2, 12],
                41: [2, 12],
                43: [2, 12],
                45: [2, 12],
                47: [2, 12],
                48: [2, 12]
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1,
                    23
                ],
                12: 13,
                17: 45,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20]
            }, {
                5: [2, 6],
                11: [2, 6],
                13: [2, 6],
                16: [2, 6],
                19: [2, 6],
                20: [2, 6],
                24: [2, 6],
                25: [2, 6],
                26: [2, 6],
                29: [2, 6],
                30: [2, 6],
                31: [2, 6],
                33: [2, 6],
                34: [2, 6],
                35: [2, 6],
                36: [2, 6],
                38: [2, 6],
                39: [2, 6],
                41: [2, 6],
                43: [2, 6],
                45: [2, 6],
                47: [2, 6],
                48: [2, 6]
            }, {
                5: [2, 2],
                10: [1, 46],
                11: [2, 2],
                13: [2, 2],
                16: [2, 2],
                19: [2, 2],
                20: [2, 2],
                24: [2, 2],
                25: [2, 2],
                26: [2, 2],
                29: [2, 2],
                30: [2, 2],
                31: [2, 2],
                33: [2, 2],
                34: [2, 2],
                35: [2, 2],
                36: [2, 2],
                38: [2, 2],
                39: [2, 2],
                41: [2, 2],
                43: [2, 2],
                45: [2, 2],
                47: [2, 2],
                48: [2, 2]
            }, {
                7: [2, 14],
                8: [2,
                    14
                ],
                9: [2, 14],
                10: [2, 14],
                19: [2, 14],
                20: [2, 14],
                21: [2, 14],
                22: [2, 14]
            }, {
                7: [2, 15],
                8: [2, 15],
                9: [2, 15],
                10: [2, 15],
                19: [2, 15],
                20: [2, 15],
                21: [2, 15],
                22: [2, 15]
            }, {
                7: [2, 16],
                8: [2, 16],
                9: [2, 16],
                10: [2, 16],
                19: [2, 16],
                20: [2, 16],
                21: [2, 16],
                22: [2, 16]
            }, {
                7: [2, 17],
                8: [2, 17],
                9: [2, 17],
                10: [2, 17],
                19: [2, 17],
                20: [2, 17],
                21: [2, 17],
                22: [2, 17]
            }, {
                5: [2, 3],
                11: [2, 3],
                13: [2, 3],
                16: [2, 3],
                19: [2, 3],
                20: [2, 3],
                24: [2, 3],
                25: [2, 3],
                26: [2, 3],
                29: [2, 3],
                30: [2, 3],
                31: [2, 3],
                33: [2, 3],
                34: [2, 3],
                35: [2, 3],
                36: [2, 3],
                38: [2, 3],
                39: [2, 3],
                41: [2, 3],
                43: [2, 3],
                45: [2, 3],
                47: [2, 3],
                48: [2,
                    3
                ]
            }, {
                5: [2, 4],
                11: [2, 4],
                13: [2, 4],
                16: [2, 4],
                19: [2, 4],
                20: [2, 4],
                24: [2, 4],
                25: [2, 4],
                26: [2, 4],
                29: [2, 4],
                30: [2, 4],
                31: [2, 4],
                33: [2, 4],
                34: [2, 4],
                35: [2, 4],
                36: [2, 4],
                38: [2, 4],
                39: [2, 4],
                41: [2, 4],
                43: [2, 4],
                45: [2, 4],
                47: [2, 4],
                48: [2, 4]
            }, {
                4: 47,
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 9,
                32: 8,
                37: 7,
                40: 6,
                42: 5,
                44: 4,
                46: 3
            }, {
                1: [2, 1],
                14: [2, 1]
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 9,
                32: 8,
                37: 7,
                40: 6,
                42: 5,
                44: 4,
                46: 48
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 9,
                32: 8,
                37: 7,
                40: 6,
                42: 5,
                44: 49
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 9,
                32: 8,
                37: 7,
                40: 6,
                42: 50
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 9,
                32: 8,
                37: 7,
                40: 51
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 9,
                32: 8,
                37: 52
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 9,
                32: 53
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 9,
                32: 54
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 55
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 56
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 57
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 58
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 59
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1,
                    19
                ],
                22: [1, 20],
                23: 11,
                27: 60
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 61
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 62
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 63
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 64,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20]
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 65,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20]
            }, {
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 66,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20]
            }, {
                3: 67,
                4: 2,
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                12: 13,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 9,
                32: 8,
                37: 7,
                40: 6,
                42: 5,
                44: 4,
                46: 3
            }, {
                5: [2, 13],
                11: [2, 13],
                16: [2, 13],
                19: [2, 13],
                20: [2, 13],
                24: [2, 13],
                25: [2, 13],
                26: [2, 13],
                29: [2, 13],
                30: [2, 13],
                31: [2, 13],
                33: [2, 13],
                34: [2, 13],
                35: [2, 13],
                36: [2, 13],
                38: [2, 13],
                39: [2, 13],
                41: [2, 13],
                43: [2,
                    13
                ],
                45: [2, 13],
                47: [2, 13],
                48: [2, 13]
            }, {
                4: 70,
                6: 15,
                7: [1, 16],
                8: [1, 21],
                9: [1, 22],
                10: [1, 23],
                11: [1, 68],
                12: 13,
                15: 69,
                17: 12,
                18: 14,
                19: [1, 17],
                20: [1, 18],
                21: [1, 19],
                22: [1, 20],
                23: 11,
                27: 10,
                28: 9,
                32: 8,
                37: 7,
                40: 6,
                42: 5,
                44: 4,
                46: 3
            }, {
                11: [1, 71],
                48: [1, 25]
            }, {
                5: [2, 46],
                11: [2, 46],
                16: [2, 46],
                47: [1, 26],
                48: [2, 46]
            }, {
                5: [2, 44],
                11: [2, 44],
                16: [2, 44],
                45: [1, 27],
                47: [2, 44],
                48: [2, 44]
            }, {
                5: [2, 42],
                11: [2, 42],
                16: [2, 42],
                43: [1, 28],
                45: [2, 42],
                47: [2, 42],
                48: [2, 42]
            }, {
                5: [2, 40],
                11: [2, 40],
                16: [2, 40],
                41: [1, 29],
                43: [2, 40],
                45: [2, 40],
                47: [2, 40],
                48: [2, 40]
            }, {
                5: [2, 38],
                11: [2, 38],
                16: [2, 38],
                38: [1, 30],
                39: [1, 31],
                41: [2, 38],
                43: [2, 38],
                45: [2, 38],
                47: [2, 38],
                48: [2, 38]
            }, {
                5: [2, 35],
                11: [2, 35],
                16: [2, 35],
                33: [1, 32],
                34: [1, 33],
                35: [1, 34],
                36: [1, 35],
                38: [2, 35],
                39: [2, 35],
                41: [2, 35],
                43: [2, 35],
                45: [2, 35],
                47: [2, 35],
                48: [2, 35]
            }, {
                5: [2, 36],
                11: [2, 36],
                16: [2, 36],
                33: [1, 32],
                34: [1, 33],
                35: [1, 34],
                36: [1, 35],
                38: [2, 36],
                39: [2, 36],
                41: [2, 36],
                43: [2, 36],
                45: [2, 36],
                47: [2, 36],
                48: [2, 36]
            }, {
                5: [2, 30],
                11: [2, 30],
                16: [2, 30],
                29: [1, 36],
                30: [1, 37],
                31: [1, 38],
                33: [2, 30],
                34: [2, 30],
                35: [2, 30],
                36: [2, 30],
                38: [2, 30],
                39: [2, 30],
                41: [2, 30],
                43: [2, 30],
                45: [2, 30],
                47: [2, 30],
                48: [2, 30]
            }, {
                5: [2, 31],
                11: [2, 31],
                16: [2, 31],
                29: [1, 36],
                30: [1, 37],
                31: [1, 38],
                33: [2, 31],
                34: [2, 31],
                35: [2, 31],
                36: [2, 31],
                38: [2, 31],
                39: [2, 31],
                41: [2, 31],
                43: [2, 31],
                45: [2, 31],
                47: [2, 31],
                48: [2, 31]
            }, {
                5: [2, 32],
                11: [2, 32],
                16: [2, 32],
                29: [1, 36],
                30: [1, 37],
                31: [1, 38],
                33: [2, 32],
                34: [2, 32],
                35: [2, 32],
                36: [2, 32],
                38: [2, 32],
                39: [2, 32],
                41: [2, 32],
                43: [2, 32],
                45: [2, 32],
                47: [2, 32],
                48: [2, 32]
            }, {
                5: [2, 33],
                11: [2, 33],
                16: [2, 33],
                29: [1, 36],
                30: [1, 37],
                31: [1, 38],
                33: [2, 33],
                34: [2, 33],
                35: [2, 33],
                36: [2, 33],
                38: [2, 33],
                39: [2, 33],
                41: [2, 33],
                43: [2, 33],
                45: [2, 33],
                47: [2, 33],
                48: [2, 33]
            }, {
                5: [2, 26],
                11: [2, 26],
                16: [2, 26],
                19: [1, 39],
                20: [1, 40],
                29: [2, 26],
                30: [2, 26],
                31: [2, 26],
                33: [2, 26],
                34: [2, 26],
                35: [2, 26],
                36: [2, 26],
                38: [2, 26],
                39: [2, 26],
                41: [2, 26],
                43: [2, 26],
                45: [2, 26],
                47: [2, 26],
                48: [2, 26]
            }, {
                5: [2, 27],
                11: [2, 27],
                16: [2, 27],
                19: [1, 39],
                20: [1, 40],
                29: [2, 27],
                30: [2, 27],
                31: [2, 27],
                33: [2, 27],
                34: [2, 27],
                35: [2, 27],
                36: [2, 27],
                38: [2, 27],
                39: [2, 27],
                41: [2, 27],
                43: [2, 27],
                45: [2, 27],
                47: [2, 27],
                48: [2, 27]
            }, {
                5: [2, 28],
                11: [2, 28],
                16: [2, 28],
                19: [1, 39],
                20: [1, 40],
                29: [2, 28],
                30: [2, 28],
                31: [2, 28],
                33: [2, 28],
                34: [2, 28],
                35: [2, 28],
                36: [2, 28],
                38: [2, 28],
                39: [2, 28],
                41: [2, 28],
                43: [2, 28],
                45: [2, 28],
                47: [2, 28],
                48: [2, 28]
            }, {
                5: [2, 23],
                11: [2, 23],
                16: [2, 23],
                19: [2, 23],
                20: [2, 23],
                24: [1, 41],
                25: [1, 42],
                26: [1, 43],
                29: [2, 23],
                30: [2, 23],
                31: [2, 23],
                33: [2, 23],
                34: [2, 23],
                35: [2, 23],
                36: [2, 23],
                38: [2, 23],
                39: [2, 23],
                41: [2, 23],
                43: [2, 23],
                45: [2, 23],
                47: [2, 23],
                48: [2, 23]
            }, {
                5: [2, 24],
                11: [2, 24],
                16: [2, 24],
                19: [2, 24],
                20: [2, 24],
                24: [1, 41],
                25: [1, 42],
                26: [1, 43],
                29: [2, 24],
                30: [2, 24],
                31: [2, 24],
                33: [2, 24],
                34: [2, 24],
                35: [2, 24],
                36: [2, 24],
                38: [2, 24],
                39: [2, 24],
                41: [2, 24],
                43: [2, 24],
                45: [2, 24],
                47: [2, 24],
                48: [2, 24]
            }, {
                5: [2, 19],
                11: [2, 19],
                16: [2, 19],
                19: [2, 19],
                20: [2, 19],
                24: [2, 19],
                25: [2, 19],
                26: [2, 19],
                29: [2, 19],
                30: [2, 19],
                31: [2, 19],
                33: [2, 19],
                34: [2, 19],
                35: [2, 19],
                36: [2, 19],
                38: [2, 19],
                39: [2, 19],
                41: [2, 19],
                43: [2, 19],
                45: [2, 19],
                47: [2, 19],
                48: [2, 19]
            }, {
                5: [2, 20],
                11: [2, 20],
                16: [2, 20],
                19: [2, 20],
                20: [2, 20],
                24: [2, 20],
                25: [2, 20],
                26: [2, 20],
                29: [2, 20],
                30: [2, 20],
                31: [2, 20],
                33: [2, 20],
                34: [2, 20],
                35: [2, 20],
                36: [2, 20],
                38: [2, 20],
                39: [2, 20],
                41: [2, 20],
                43: [2, 20],
                45: [2, 20],
                47: [2, 20],
                48: [2, 20]
            },
                {
                    5: [2, 21],
                    11: [2, 21],
                    16: [2, 21],
                    19: [2, 21],
                    20: [2, 21],
                    24: [2, 21],
                    25: [2, 21],
                    26: [2, 21],
                    29: [2, 21],
                    30: [2, 21],
                    31: [2, 21],
                    33: [2, 21],
                    34: [2, 21],
                    35: [2, 21],
                    36: [2, 21],
                    38: [2, 21],
                    39: [2, 21],
                    41: [2, 21],
                    43: [2, 21],
                    45: [2, 21],
                    47: [2, 21],
                    48: [2, 21]
                }, {
                    14: [1, 72]
                }, {
                    5: [2, 8],
                    11: [2, 8],
                    13: [2, 8],
                    16: [2, 8],
                    19: [2, 8],
                    20: [2, 8],
                    24: [2, 8],
                    25: [2, 8],
                    26: [2, 8],
                    29: [2, 8],
                    30: [2, 8],
                    31: [2, 8],
                    33: [2, 8],
                    34: [2, 8],
                    35: [2, 8],
                    36: [2, 8],
                    38: [2, 8],
                    39: [2, 8],
                    41: [2, 8],
                    43: [2, 8],
                    45: [2, 8],
                    47: [2, 8],
                    48: [2, 8]
                }, {
                    11: [1, 73],
                    16: [1, 74]
                }, {
                    11: [2, 10],
                    16: [2, 10],
                    48: [1, 25]
                }, {
                    5: [2,
                        5
                    ],
                    11: [2, 5],
                    13: [2, 5],
                    16: [2, 5],
                    19: [2, 5],
                    20: [2, 5],
                    24: [2, 5],
                    25: [2, 5],
                    26: [2, 5],
                    29: [2, 5],
                    30: [2, 5],
                    31: [2, 5],
                    33: [2, 5],
                    34: [2, 5],
                    35: [2, 5],
                    36: [2, 5],
                    38: [2, 5],
                    39: [2, 5],
                    41: [2, 5],
                    43: [2, 5],
                    45: [2, 5],
                    47: [2, 5],
                    48: [2, 5]
                }, {
                    5: [2, 7],
                    11: [2, 7],
                    13: [2, 7],
                    16: [2, 7],
                    19: [2, 7],
                    20: [2, 7],
                    24: [2, 7],
                    25: [2, 7],
                    26: [2, 7],
                    29: [2, 7],
                    30: [2, 7],
                    31: [2, 7],
                    33: [2, 7],
                    34: [2, 7],
                    35: [2, 7],
                    36: [2, 7],
                    38: [2, 7],
                    39: [2, 7],
                    41: [2, 7],
                    43: [2, 7],
                    45: [2, 7],
                    47: [2, 7],
                    48: [2, 7]
                }, {
                    5: [2, 9],
                    11: [2, 9],
                    13: [2, 9],
                    16: [2, 9],
                    19: [2, 9],
                    20: [2, 9],
                    24: [2, 9],
                    25: [2, 9],
                    26: [2, 9],
                    29: [2, 9],
                    30: [2,
                        9
                    ],
                    31: [2, 9],
                    33: [2, 9],
                    34: [2, 9],
                    35: [2, 9],
                    36: [2, 9],
                    38: [2, 9],
                    39: [2, 9],
                    41: [2, 9],
                    43: [2, 9],
                    45: [2, 9],
                    47: [2, 9],
                    48: [2, 9]
                }, {
                    4: 75,
                    6: 15,
                    7: [1, 16],
                    8: [1, 21],
                    9: [1, 22],
                    10: [1, 23],
                    12: 13,
                    17: 12,
                    18: 14,
                    19: [1, 17],
                    20: [1, 18],
                    21: [1, 19],
                    22: [1, 20],
                    23: 11,
                    27: 10,
                    28: 9,
                    32: 8,
                    37: 7,
                    40: 6,
                    42: 5,
                    44: 4,
                    46: 3
                }, {
                    11: [2, 11],
                    16: [2, 11],
                    48: [1, 25]
                }
            ],
            defaultActions: {},
            parseError: function (b) {
                throw Error(b);
            },
            parse: function (b) {
                function c() {
                    var b;
                    b = d.lexer.lex() || 1;
                    typeof b !== "number" && (b = d.symbols_[b] || b);
                    return b
                }
                var d = this,
                    h = [0],
                    j = [null],
                    k = [],
                    l = this.table,
                    m = "",
                    n = 0,
                    q = 0,
                    p = 0;
                this.lexer.setInput(b);
                this.lexer.yy = this.yy;
                this.yy.lexer = this.lexer;
                this.yy.parser = this;
                if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
                b = this.lexer.yylloc;
                k.push(b);
                var s = this.lexer.options && this.lexer.options.ranges;
                if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
                for (var r, o, t, u, w = {}, z, A; ;) {
                    t = h[h.length - 1];
                    if (this.defaultActions[t]) u = this.defaultActions[t];
                    else {
                        if (r === null || typeof r == "undefined") r = c();
                        u = l[t] && l[t][r]
                    }
                    if (typeof u === "undefined" ||
                        !u.length || !u[0]) {
                        u = "";
                        if (!p) {
                            o = [];
                            for (z in l[t]) this.terminals_[z] && z > 2 && o.push("'" + this.terminals_[z] + "'");
                            u = this.lexer.showPosition ? "Parse error on line " + (n + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + o.join(", ") + ", got '" + (this.terminals_[r] || r) + "'" : "Parse error on line " + (n + 1) + ": Unexpected " + (r == 1 ? "end of input" : "'" + (this.terminals_[r] || r) + "'");
                            this.parseError(u, {
                                text: this.lexer.match,
                                token: this.terminals_[r] || r,
                                line: this.lexer.yylineno,
                                loc: b,
                                expected: o
                            })
                        }
                        if (p == 3) {
                            if (r == 1) throw Error(u ||
                                "Parsing halted.");
                            q = this.lexer.yyleng;
                            m = this.lexer.yytext;
                            n = this.lexer.yylineno;
                            b = this.lexer.yylloc;
                            r = c()
                        }
                        for (; ;) {
                            if ((2).toString() in l[t]) break;
                            if (t === 0) throw Error(u || "Parsing halted.");
                            h.length = h.length - 2;
                            j.length = j.length - 1;
                            k.length = k.length - 1;
                            t = h[h.length - 1]
                        }
                        o = r == 2 ? null : r;
                        r = 2;
                        t = h[h.length - 1];
                        u = l[t] && l[t][2];
                        p = 3
                    }
                    if (u[0] instanceof Array && u.length > 1) throw Error("Parse Error: multiple actions possible at state: " + t + ", token: " + r);
                    switch (u[0]) {
                        case 1:
                            h.push(r);
                            j.push(this.lexer.yytext);
                            k.push(this.lexer.yylloc);
                            h.push(u[1]);
                            r = null;
                            if (o) {
                                r = o;
                                o = null
                            } else {
                                q = this.lexer.yyleng;
                                m = this.lexer.yytext;
                                n = this.lexer.yylineno;
                                b = this.lexer.yylloc;
                                p > 0 && p--
                            }
                            break;
                        case 2:
                            A = this.productions_[u[1]][1];
                            w.$ = j[j.length - A];
                            w._$ = {
                                first_line: k[k.length - (A || 1)].first_line,
                                last_line: k[k.length - 1].last_line,
                                first_column: k[k.length - (A || 1)].first_column,
                                last_column: k[k.length - 1].last_column
                            };
                            if (s) w._$.range = [k[k.length - (A || 1)].range[0], k[k.length - 1].range[1]];
                            t = this.performAction.call(w, m, q, n, this.yy, u[1], j, k);
                            if (typeof t !== "undefined") return t;
                            if (A) {
                                h = h.slice(0, A * -2);
                                j = j.slice(0, -1 * A);
                                k = k.slice(0, -1 * A)
                            }
                            h.push(this.productions_[u[1]][0]);
                            j.push(w.$);
                            k.push(w._$);
                            t = l[h[h.length - 2]][h[h.length - 1]];
                            h.push(t);
                            break;
                        case 3:
                            return true
                    }
                }
                return true
            }
        },
            d = function () {
                return {
                    EOF: 1,
                    parseError: function (b, c) {
                        if (this.yy.parser) this.yy.parser.parseError(b, c);
                        else throw Error(b);
                    },
                    setInput: function (b) {
                        this._input = b;
                        this._more = this._less = this.done = false;
                        this.yylineno = this.yyleng = 0;
                        this.yytext = this.matched = this.match = "";
                        this.conditionStack = ["INITIAL"];
                        this.yylloc = {
                            first_line: 1,
                            first_column: 0,
                            last_line: 1,
                            last_column: 0
                        };
                        if (this.options.ranges) this.yylloc.range = [0, 0];
                        this.offset = 0;
                        return this
                    },
                    input: function () {
                        var b = this._input[0];
                        this.yytext = this.yytext + b;
                        this.yyleng++;
                        this.offset++;
                        this.match = this.match + b;
                        this.matched = this.matched + b;
                        if (b.match(/(?:\r\n?|\n).*/g)) {
                            this.yylineno++;
                            this.yylloc.last_line++
                        } else this.yylloc.last_column++;
                        this.options.ranges && this.yylloc.range[1]++;
                        this._input = this._input.slice(1);
                        return b
                    },
                    unput: function (b) {
                        var c = b.length,
                            d = b.split(/(?:\r\n?|\n)/g);
                        this._input = b + this._input;
                        this.yytext = this.yytext.substr(0, this.yytext.length - c - 1);
                        this.offset = this.offset - c;
                        b = this.match.split(/(?:\r\n?|\n)/g);
                        this.match = this.match.substr(0, this.match.length - 1);
                        this.matched = this.matched.substr(0, this.matched.length - 1);
                        if (d.length - 1) this.yylineno = this.yylineno - (d.length - 1);
                        var h = this.yylloc.range;
                        this.yylloc = {
                            first_line: this.yylloc.first_line,
                            last_line: this.yylineno + 1,
                            first_column: this.yylloc.first_column,
                            last_column: d ? (d.length === b.length ? this.yylloc.first_column :
                                0) + b[b.length - d.length].length - d[0].length : this.yylloc.first_column - c
                        };
                        if (this.options.ranges) this.yylloc.range = [h[0], h[0] + this.yyleng - c];
                        return this
                    },
                    more: function () {
                        this._more = true;
                        return this
                    },
                    less: function (b) {
                        this.unput(this.match.slice(b))
                    },
                    pastInput: function () {
                        var b = this.matched.substr(0, this.matched.length - this.match.length);
                        return (b.length > 20 ? "..." : "") + b.substr(-20).replace(/\n/g, "")
                    },
                    upcomingInput: function () {
                        var b = this.match;
                        b.length < 20 && (b = b + this._input.substr(0, 20 - b.length));
                        return (b.substr(0,
                            20) + (b.length > 20 ? "..." : "")).replace(/\n/g, "")
                    },
                    showPosition: function () {
                        var b = this.pastInput(),
                            c = Array(b.length + 1).join("-");
                        return b + this.upcomingInput() + "\n" + c + "^"
                    },
                    next: function () {
                        if (this.done) return this.EOF;
                        if (!this._input) this.done = true;
                        var b, c, d;
                        if (!this._more) this.match = this.yytext = "";
                        for (var h = this._currentRules(), j = 0; j < h.length; j++)
                            if ((c = this._input.match(this.rules[h[j]])) && (!b || c[0].length > b[0].length)) {
                                b = c;
                                d = j;
                                if (!this.options.flex) break
                            }
                        if (b) {
                            if (c = b[0].match(/(?:\r\n?|\n).*/g)) this.yylineno =
                                this.yylineno + c.length;
                            this.yylloc = {
                                first_line: this.yylloc.last_line,
                                last_line: this.yylineno + 1,
                                first_column: this.yylloc.last_column,
                                last_column: c ? c[c.length - 1].length - c[c.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + b[0].length
                            };
                            this.yytext = this.yytext + b[0];
                            this.match = this.match + b[0];
                            this.matches = b;
                            this.yyleng = this.yytext.length;
                            if (this.options.ranges) this.yylloc.range = [this.offset, this.offset = this.offset + this.yyleng];
                            this._more = false;
                            this._input = this._input.slice(b[0].length);
                            this.matched =
                                this.matched + b[0];
                            b = this.performAction.call(this, this.yy, this, h[d], this.conditionStack[this.conditionStack.length - 1]);
                            if (this.done && this._input) this.done = false;
                            if (b) return b
                        } else return this._input === "" ? this.EOF : this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
                            text: "",
                            token: null,
                            line: this.yylineno
                        })
                    },
                    lex: function () {
                        var b = this.next();
                        return typeof b !== "undefined" ? b : this.lex()
                    },
                    begin: function (b) {
                        this.conditionStack.push(b)
                    },
                    popState: function () {
                        return this.conditionStack.pop()
                    },
                    _currentRules: function () {
                        return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules
                    },
                    topState: function () {
                        return this.conditionStack[this.conditionStack.length - 2]
                    },
                    pushState: function (b) {
                        this.begin(b)
                    },
                    options: {},
                    performAction: function (b, c, d) {
                        switch (d) {
                            case 1:
                                return 8;
                            case 2:
                                return 7;
                            case 3:
                                return 9;
                            case 4:
                                return 9;
                            case 5:
                                return 24;
                            case 6:
                                return 25;
                            case 7:
                                return 26;
                            case 8:
                                return 20;
                            case 9:
                                return 19;
                            case 10:
                                return 43;
                            case 11:
                                return 10;
                            case 12:
                                return 11;
                            case 13:
                                return 13;
                            case 14:
                                return 14;
                            case 15:
                                return 29;
                            case 16:
                                return 31;
                            case 17:
                                return 30;
                            case 18:
                                return 35;
                            case 19:
                                return 36;
                            case 20:
                                return 38;
                            case 21:
                                return 39;
                            case 22:
                                return 33;
                            case 23:
                                return 34;
                            case 24:
                                return 21;
                            case 25:
                                return 22;
                            case 26:
                                return 43;
                            case 27:
                                return 47;
                            case 28:
                                return 48;
                            case 29:
                                return 41;
                            case 30:
                                return 45;
                            case 31:
                                return 16;
                            case 32:
                                return 5;
                            case 33:
                                return "INVALID"
                        }
                    },
                    rules: [/^(?:\s+)/, /^(?:[0-9]+(\.[0-9]+)?\b)/, /^(?:[a-zA-Z_][a-zA-Z0-9_]*)/, /^(?:"[^\"]*")/, /^(?:'[^\']*')/, /^(?:\*)/, /^(?:\/)/, /^(?:%)/, /^(?:-)/, /^(?:\+)/,
                        /^(?:\^)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:<<)/, /^(?:>>>)/, /^(?:>>)/, /^(?:<=)/, /^(?:>=)/, /^(?:==)/, /^(?:!=)/, /^(?:<)/, /^(?:>)/, /^(?:~)/, /^(?:!)/, /^(?:\^)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:&)/, /^(?:\|)/, /^(?:,)/, /^(?:$)/, /^(?:.)/
                    ],
                    conditions: {
                        INITIAL: {
                            rules: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33],
                            inclusive: true
                        }
                    }
                }
            }();
        c.lexer = d;
        b.prototype = c;
        c.Parser = b;
        return new b
    }();
"undefined" !== typeof require && "undefined" !== typeof exports && (exports.parser = g_expressionBuilder, exports.Parser = g_expressionBuilder.Parser, exports.parse = function () {
    return g_expressionBuilder.parse.apply(g_expressionBuilder, arguments)
}, exports.main = function (b) {
    if (!b[1]) throw Error("Usage: " + b[0] + " FILE");
    b = typeof process !== "undefined" ? require("fs").readFileSync(require("path").resolve(b[1]), "utf8") : require("file").path(require("file").cwd()).join(b[1]).read({
        charset: "utf-8"
    });
    return exports.parser.parse(b)
},
    "undefined" !== typeof module && require.main === module && exports.main("undefined" !== typeof process ? process.argv.slice(1) : require("system").args));
var Help = {
    indexPage: "help/index.aspx",
    searchPage: "help/search",
    init: function (b, c) {
        b || (b = "help/index.aspx");
        c || (c = "help/search");
        Help.indexPage = b;
        Help.searchPage = c;
        $("#help").resizable().draggable({});
        $("#help > a").click(Help.hideHelp);
        $("#help .header h1 a").click(function () {
            $("#help iframe").attr("src", Help.indexPage);
            return false
        });
        $("#help .header label a").click(function () {
            $("#help .header label input").val("");
            $("#help iframe").attr("src", Help.indexPage);
            return false
        })
    },
    hideHelp: function () {
        $("#help").addClass("hidden").find("iframe").attr("src",
            "ide/imgs/blank.png");
        return false
    },
    fetchHelp: function (b) {
        b != Help.lastUrl && $.ajax({
            url: b,
            success: function (c) {
                Help.lastUrl = b;
                Help.showHelp(c)
            }
        })
    },
    cmdHelp: function (b, c) {
        window.WinBackpack && WinBackpack.hide();
        var d = $("#help");
        d.removeClass("hidden").find("iframe").attr("src", Help.indexPage);
        d.css("width", d.outerWidth()).css("height", d.outerHeight()).css("right", "").css("bottom", "");
        d.find(".footer a").unbind().click(function () {
            Help.hideHelp();
            return false
        });
        d.find(".header input").val("").unbind().keydown(function (b) {
            b.keyCode ==
                13 && d.find("iframe").attr("src", Help.searchPage + "?q=" + escape($(this).val()))
        });
        b ? d.find("iframe").attr("src", Help.searchPage + "?q=" + escape(b)) : c && d.find("iframe").attr("src", c)
    },
    canDrag: function (b) {
        if (!$("#help").hasClass("hidden")) {
            var c = b.pageX,
                b = b.pageY,
                d = $("#help");
            if (c >= d.offset().left && c <= d.offset().left + d.outerWidth() && b >= d.offset().top && b <= d.offset().top + d.outerHeight() - 40) return true
        }
        return false
    },
    getDragObj: function () {
        return null
    },
    canDrop: function () {
        return false
    },
    drop: function () { },
    dragCanceled: function () { },
    hideIDEHelp: function () {
        $("*").removeClass("winhilight");
        IDE.hideMask();
        if (Help._savedIDEHelp) {
            for (var b = Help._savedIDEHelp.length - 1; b >= 0; b--) Help._savedIDEHelp[b].cleanup && Help._savedIDEHelp[b].cleanup();
            Help._savedIDEHelp = null
        }
    },
    showIDEHelp: function (b, c, d, e) {
        $("*").removeClass("winhilight");
        Help._savedIDEHelp = [];
        for (var f = null, g = null, h = Help._ideHelpSections, j = 0; j < b.length; j++)
            if (h = h[b[j]]) {
                Help._savedIDEHelp.push(h);
                h.select && h.select();
                if (c) g = h;
                else if (f) h.hilight();
                else {
                    var f = h,
                        k = h.hilight();
                    d &&
                        IDE.showMaskElement(k, null, e, true)
                }
                h = h.parts
            } else break;
        c && g && g.hilight()
    },
    _ideHelpSections: {
        studio: {
            hilight: function () {
                return null
            },
            cleanup: function () { }
        },
        "window.stage": {
            hilight: function () {
                return $("#win-stage").addClass("winhilight")
            },
            cleanup: function () {
                $("#win-stage").removeClass("winhilight")
            },
            parts: {
                "button.share": {
                    hilight: function () {
                        return $("#stagecmd-share").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#stagecmd-share").removeClass("winhilight")
                    }
                },
                "button.grid": {
                    hilight: function () {
                        return $("#stagecmd-grid").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#stagecmd-grid").removeClass("winhilight")
                    }
                },
                "button.run": {
                    hilight: function () {
                        return $("#stagecmd-run").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#stagecmd-run").removeClass("winhilight")
                    }
                },
                "button.stop": {
                    hilight: function () {
                        return $("#stagecmd-stop").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#stagecmd-stop").removeClass("winhilight")
                    }
                }
            }
        },
        "window.assets": {
            hilight: function () {
                return $("#win-assets").addClass("winhilight")
            },
            cleanup: function () {
                $("#win-assets").removeClass("winhilight")
            },
            parts: {
                "button.createnew": {
                    hilight: function () {
                        return $("#assetcmd-paint").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#assetcmd-paint").removeClass("winhilight")
                    }
                },
                "button.newactor": {
                    hilight: function () {
                        return $("#assetcmd-addactor").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#assetcmd-addactor").removeClass("winhilight")
                    }
                },
                "button.newblank": {
                    hilight: function () {
                        return $("#assetcmd-addblank").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#assetcmd-addblank").removeClass("winhilight")
                    }
                }
            }
        },
        "window.media": {
            select: function () {
                WinMediaAssets.showPicker("Media Library",
                    null, {
                        backgrounds: false,
                        images: true,
                        sounds: false
                    })
            },
            hilight: function () {
                return $("#win-medialib").addClass("winhilight")
            },
            cleanup: function () {
                $("#win-medialib").removeClass("winhilight");
                WinMediaAssets.hide()
            },
            parts: {}
        },
        "properties.interfaces": {
            select: function () {
                if (!IDE.editingActor || !IDE.editingActor.locked)
                    for (var b = 0; b < Runtime.sprites.length; b++)
                        if (Runtime.sprites[b].locked) {
                            IDE.selectAsset(Runtime.sprites[b]);
                            break
                        }
                IDE.editingActor && IDE.editingActor.locked && WinProperties.show("interfaces")
            },
            hilight: function () {
                return IDE.editingActor &&
                    IDE.editingActor.locked ? $("#win-properties div.interfaces").addClass("winhilight") : null
            },
            cleanup: function () {
                $("#win-properties div.interfaces").removeClass("winhilight")
            },
            parts: {
                properties: {
                    hilight: function () {
                        $("#win-properties div.interfaces").scrollTop($("#win-properties div.objprops").position().top);
                        return $("#win-properties div.objprops").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.objprops").removeClass("winhilight")
                    }
                },
                incoming: {
                    hilight: function () {
                        $("#win-properties div.interfaces").scrollTop($("#win-properties div.inbound").position().top);
                        return $("#win-properties div.inbound").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.inbound").removeClass("winhilight")
                    }
                },
                outgoing: {
                    hilight: function () {
                        $("#win-properties div.interfaces").scrollTop($("#win-properties div.outbound").position().top);
                        return $("#win-properties div.outbound").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.outbound").removeClass("winhilight")
                    }
                }
            }
        },
        "properties.looks": {
            select: function () {
                if (IDE.editingActor && IDE.editingActor.locked)
                    for (var b =
                            0; b < Runtime.sprites.length; b++)
                        if (!Runtime.sprites[b].locked) {
                            IDE.selectAsset(Runtime.sprites[b]);
                            break
                        } (!IDE.editingActor || !IDE.editingActor.locked) && WinProperties.show("looks")
            },
            hilight: function () {
                return !IDE.editingActor || !IDE.editingActor.locked ? $("#win-properties div.looks").addClass("winhilight") : null
            },
            cleanup: function () {
                $("#win-properties div.looks").removeClass("winhilight")
            },
            parts: {
                "button.createnew": {
                    hilight: function () {
                        return $("#win-properties div.looks button.create").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.looks button.create").removeClass("winhilight")
                    }
                },
                "button.addnew": {
                    hilight: function () {
                        return $("#win-properties div.looks button.add").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.looks button.add").removeClass("winhilight")
                    }
                },
                item: {
                    hilight: function () {
                        return $("#win-properties div.looks div.pcostumes li:first").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.looks div.pcostumes li:first").removeClass("winhilight")
                    },
                    parts: {
                        "input.name": {
                            hilight: function () {
                                return $("#win-properties div.looks div.pcostumes li:first input[type=text]").addClass("winhilight")
                            },
                            cleanup: function () {
                                $("#win-properties div.looks div.pcostumes li:first input[type=text]").removeClass("winhilight")
                            }
                        },
                        "button.edit": {
                            hilight: function () {
                                return $("#win-properties div.looks div.pcostumes li:first button").addClass("winhilight")
                            },
                            cleanup: function () {
                                $("#win-properties div.looks div.pcostumes li:first button").removeClass("winhilight")
                            }
                        }
                    }
                }
            }
        },
        "properties.sounds": {
            select: function () {
                WinProperties.show("sounds")
            },
            hilight: function () {
                return $("#win-properties div.sounds").addClass("winhilight")
            },
            cleanup: function () {
                $("#win-properties div.sounds").removeClass("winhilight")
            },
            parts: {
                "button.addnew": {
                    hilight: function () {
                        return $("#win-properties div.sounds button.add").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.sounds button.add").removeClass("winhilight")
                    }
                },
                item: {
                    hilight: function () {
                        $("#win-properties div.sounds div.psounds").scrollTop($("#win-properties div.sounds div.psounds li:first").position().top);
                        return $("#win-properties div.sounds div.psounds li:first").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.sounds div.psounds li:first").removeClass("winhilight")
                    },
                    parts: {
                        "input.name": {
                            hilight: function () {
                                return $("#win-properties div.sounds div.psounds li:first input[type=text]").addClass("winhilight")
                            },
                            cleanup: function () {
                                $("#win-properties div.sounds div.psounds li:first input[type=text]").removeClass("winhilight")
                            }
                        },
                        "button.play": {
                            hilight: function () {
                                return $("#win-properties div.sounds div.psounds li:first a.play").addClass("winhilight")
                            },
                            cleanup: function () {
                                $("#win-properties div.sounds div.psounds li:first a.play").removeClass("winhilight")
                            }
                        },
                        "button.stop": {
                            hilight: function () {
                                return $("#win-properties div.sounds div.psounds li:first a.stop").addClass("winhilight")
                            },
                            cleanup: function () {
                                $("#win-properties div.sounds div.psounds li:first a.stop").removeClass("winhilight")
                            }
                        },
                        "button.delete": {
                            hilight: function () {
                                return $("#win-properties div.sounds div.psounds li:first a.delete").addClass("winhilight")
                            },
                            cleanup: function () {
                                $("#win-properties div.sounds div.psounds li:first a.delete").removeClass("winhilight")
                            }
                        }
                    }
                }
            }
        },
        "properties.notes": {
            select: function () {
                if (!IDE.editingActor ||
                    IDE.editingActor && IDE.editingActor.locked)
                    for (var b = 0; b < Runtime.sprites.length; b++)
                        if (!Runtime.sprites[b].locked) {
                            IDE.selectAsset(Runtime.sprites[b]);
                            break
                        }
                IDE.editingActor && WinProperties.show("notes")
            },
            hilight: function () {
                return IDE.editingActor ? $("#win-properties div.notes").addClass("winhilight") : null
            },
            cleanup: function () {
                $("#win-properties div.notes").removeClass("winhilight")
            },
            parts: {
                description: {
                    hilight: function () {
                        $("#win-properties div.notes").scrollTop($("#win-properties div.description").position().top);
                        return $("#win-properties div.notes div.description").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.notes div.description").removeClass("winhilight")
                    }
                },
                incoming: {
                    hilight: function () {
                        $("#win-properties div.notes").scrollTop($("#win-properties div.inbound").position().top);
                        return $("#win-properties div.notes div.inbound").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.notes div.inbound").removeClass("winhilight")
                    },
                    parts: {
                        item: {
                            hilight: function () {
                                $("#win-properties div.notes").scrollTop($("#win-properties div.notes div.inbound li:first").position().top);
                                return $("#win-properties div.notes div.inbound li:first").addClass("winhilight")
                            },
                            cleanup: function () {
                                $("#win-properties div.notes div.inbound li:first").removeClass("winhilight")
                            },
                            parts: {
                                description: {
                                    hilight: function () {
                                        return $("#win-properties div.notes div.inbound li:first input.description").addClass("winhilight")
                                    },
                                    cleanup: function () {
                                        $("#win-properties div.notes div.inbound li:first input.description").removeClass("winhilight")
                                    }
                                }
                            }
                        }
                    }
                },
                outgoing: {
                    hilight: function () {
                        $("#win-properties div.notes").scrollTop($("#win-properties div.outbound").position().top);
                        return $("#win-properties div.notes div.outbound").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.notes div.outbound").removeClass("winhilight")
                    },
                    parts: {
                        item: {
                            hilight: function () {
                                $("#win-properties div.notes").scrollTop($("#win-properties div.notes div.outbound li:first").position().top);
                                return $("#win-properties div.notes div.outbound li:first").addClass("winhilight")
                            },
                            cleanup: function () {
                                $("#win-properties div.notes div.outbound li:first").removeClass("winhilight")
                            },
                            parts: {
                                description: {
                                    hilight: function () {
                                        return $("#win-properties div.notes div.outbound li:first input.description").addClass("winhilight")
                                    },
                                    cleanup: function () {
                                        $("#win-properties div.notes div.outbound li:first input.description").removeClass("winhilight")
                                    }
                                }
                            }
                        }
                    }
                },
                properties: {
                    hilight: function () {
                        $("#win-properties div.notes").scrollTop($("#win-properties div.notes div.objprops").position().top);
                        return $("#win-properties div.notes div.objprops").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.notes div.objprops").removeClass("winhilight")
                    },
                    parts: {
                        item: {
                            hilight: function () {
                                $("#win-properties div.notes").scrollTop($("#win-properties div.notes div.objprops li:first").position().top);
                                return $("#win-properties div.notes div.objprops li:first").addClass("winhilight")
                            },
                            cleanup: function () {
                                $("#win-properties div.notes div.objprops li:first").removeClass("winhilight")
                            },
                            parts: {
                                description: {
                                    hilight: function () {
                                        $("#win-properties div.notes").scrollTop($("#win-properties div.notes div.objprops li:first input.smalldescription").position().top);
                                        return $("#win-properties div.notes div.objprops li:first input.smalldescription").addClass("winhilight")
                                    },
                                    cleanup: function () {
                                        $("#win-properties div.notes div.objprops li:first input.smalldescription").removeClass("winhilight")
                                    }
                                },
                                defaultvalue: {
                                    hilight: function () {
                                        $("#win-properties div.notes").scrollTop($("#win-properties div.notes div.objprops li:first input.default").position().top);
                                        return $("#win-properties div.notes div.objprops li:first input.default").addClass("winhilight")
                                    },
                                    cleanup: function () {
                                        $("#win-properties div.notes div.objprops li:first input.default").removeClass("winhilight")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "actorproperties.advanced": {
            select: function () {
                WinProperties.show("advanced")
            },
            hilight: function () {
                return $("#win-properties div.advanced").addClass("winhilight")
            },
            cleanup: function () {
                $("#win-properties div.advanced").removeClass("winhilight")
            },
            parts: {
                "button.maketblock": {
                    hilight: function () {
                        if (!IDE.editingActor.locked) {
                            $("#win-properties div.advanced").scrollTop($("#win-properties a.maketblock").position().top);
                            return $("#win-properties div.advanced div.buttons a.save").addClass("winhilight")
                        }
                        return null
                    },
                    cleanup: function () {
                        $("#win-properties div.advanced div.buttons a.save").removeClass("winhilight")
                    }
                },
                "button.unlocktblock": {
                    hilight: function () {
                        if (IDE.editingActor.locked) {
                            $("#win-properties div.advanced").scrollTop($("#win-properties a.unlock").position().top);
                            return $("#win-properties div.advanced div.buttons a.unlock").addClass("winhilight")
                        }
                        return null
                    },
                    cleanup: function () {
                        $("#win-properties div.advanced div.buttons a.unlock").removeClass("winhilight")
                    }
                },
                "button.clone": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#win-properties a.clone").position().top);
                        return $("#win-properties div.advanced div.buttons a.clone").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.advanced div.buttons a.clone").removeClass("winhilight")
                    }
                },
                "section.rotation": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#sprite-rotate").position().top);
                        return $("#sprite-rotate").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#sprite-rotate").removeClass("winhilight")
                    }
                },
                "button.allowdragging": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#sprite-dragging").position().top);
                        return $("#win-properties div.advanced span.sprite-dragging").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.advanced span.sprite-dragging").removeClass("winhilight")
                    }
                },
                "input.friction": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#sprite-friction").position().top);
                        return $("#sprite-friction").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#sprite-friction").removeClass("winhilight")
                    }
                },
                "input.restitution": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#sprite-restitution").position().top);
                        return $("#sprite-restitution").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#sprite-restitution").removeClass("winhilight")
                    }
                },
                "input.density": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#sprite-density").position().top);
                        return $("#sprite-density").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#sprite-density").removeClass("winhilight")
                    }
                },
                "section.geometry": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#sprite-geometry").position().top);
                        return $("#sprite-geometry").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#sprite-geometry").removeClass("winhilight")
                    }
                },
                "button.isstatic": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#sprite-static").position().top);
                        return $("#sprite-static").parent().addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#sprite-static").parent().removeClass("winhilight")
                    }
                },
                "button.isactive": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#sprite-active").position().top);
                        return $("#sprite-active").parent().addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#sprite-active").parent().removeClass("winhilight")
                    }
                }
            }
        },
        "stageproperties.advanced": {
            select: function () {
                IDE.editingActor && IDE.selectAsset(null);
                WinProperties.show("advanced")
            },
            hilight: function () {
                return $("#win-properties div.advanced").addClass("winhilight")
            },
            cleanup: function () {
                $("#win-properties div.advanced").removeClass("winhilight")
            },
            parts: {
                description: {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#win-properties div.advanced div.stage textarea").position().top);
                        return $("#win-properties div.advanced div.stage textarea").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.advanced div.stage textarea").removeClass("winhilight")
                    }
                },
                "button.bgimgnormal": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#win-properties div.advanced input[value=normal]").position().top);
                        return $("#win-properties div.advanced input[value=normal]").parent().addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.advanced input[value=normal]").parent().removeClass("winhilight")
                    }
                },
                "button.bgimgstretch": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#win-properties div.advanced input[value=stretch]").position().top);
                        return $("#win-properties div.advanced input[value=stretch]").parent().addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.advanced input[value=stretch]").parent().removeClass("winhilight")
                    }
                },
                "button.bgimgtile": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#win-properties div.advanced input[value=tile]").position().top);
                        return $("#win-properties div.advanced input[value=tile]").parent().addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-properties div.advanced input[value=tile]").parent().removeClass("winhilight")
                    }
                },
                "button.bgfixed": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#bgfixed").position().top);
                        return $("#bgfixed").parent().addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#bgfixed").parent().removeClass("winhilight")
                    }
                },
                "button.bgstretch": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#bgstretch").position().top);
                        return $("#bgstretch").parent().addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#bgstretch").parent().removeClass("winhilight")
                    }
                },
                "input.bgwidth": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#bgfixed-width").position().top);
                        return $("#bgfixed-width").parent().addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#bgfixed-width").parent().removeClass("winhilight")
                    }
                },
                "input.bgheight": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#bgfixed-height").position().top);
                        return $("#bgfixed-height").parent().addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#bgfixed-height").parent().removeClass("winhilight")
                    }
                },
                "button.enablephysics": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#bg-physics").position().top);
                        return $("#bg-physics").parent().addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#bg-physics").parent().removeClass("winhilight")
                    }
                },
                "input.gravityx": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#bg-gravity-x").position().top);
                        return $("#bg-gravity-x").parent().addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#bg-gravity-x").parent().removeClass("winhilight")
                    }
                },
                "input.gravityy": {
                    hilight: function () {
                        $("#win-properties div.advanced").scrollTop($("#bg-gravity-y").position().top);
                        return $("#bg-gravity-y").parent().addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#bg-gravity-y").parent().removeClass("winhilight")
                    }
                }
            }
        },
        "window.code": {
            select: function () {
                WinCode.show()
            },
            hilight: function () {
                return $("#win-code").addClass("winhilight")
            },
            cleanup: function () {
                $("#win-code").removeClass("winhilight")
            },
            parts: {
                "input.search": {
                    hilight: function () {
                        return $("#win-code div.search").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-code div.search").removeClass("winhilight")
                    }
                },
                categories: {
                    hilight: function () {
                        return $("#tools-categories").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#tools-categories").removeClass("winhilight")
                    }
                },
                tools: {
                    hilight: function () {
                        return $("#tools-blocks").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#tools-blocks").removeClass("winhilight")
                    }
                },
                workspace: {
                    hilight: function () {
                        return $("#win-code > canvas").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#win-code > canvas").removeClass("winhilight")
                    }
                }
            }
        },
        "window.toolbar": {
            hilight: function () {
                return $(".toolbar-top").addClass("winhilight")
            },
            cleanup: function () {
                $(".toolbar-top").removeClass("winhilight")
            },
            parts: {
                "button.home": {
                    hilight: function () {
                        return $(".wincmd-home").addClass("winhilight")
                    },
                    cleanup: function () {
                        $(".wincmd-home").removeClass("winhilight")
                    }
                },
                "button.menu": {
                    hilight: function () {
                        return $("#wincmd-project").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#wincmd-project").removeClass("winhilight")
                    }
                },
                "button.undo": {
                    hilight: function () {
                        return $("#wincmd-tbundo").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#wincmd-tbundo").removeClass("winhilight")
                    }
                },
                "button.redo": {
                    hilight: function () {
                        return $("#wincmd-tbredo").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#wincmd-tbredo").removeClass("winhilight")
                    }
                },
                "button.save": {
                    hilight: function () {
                        return $("#wincmd-tbsave").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#wincmd-tbsave").removeClass("winhilight")
                    }
                },
                "button.voice": {
                    hilight: function () {
                        return $("#wincmd-tbtalk").addClass("winhilight")
                    },
                    cleanup: function () {
                        $("#wincmd-tbtalk").removeClass("winhilight")
                    }
                }
            }
        }
    }
},
    WinStage = {
        enableDragging: !0,
        _showToolbarWhenMaximized: !1,
        _isStageState: !1,
        _isLegacyMode: !0,
        enable: function (b) {
            b ? $("#win-stage").removeClass("hidden") : $("#win-stage").addClass("hidden");
            IDE.adjustPanels()
        },
        enableDecorations: function (b) {
            b ? $("#win-stage h1").removeClass("hidden") : $("#win-stage h1").addClass("hidden");
            IDE.adjustPanels()
        },
        enableToolbar: function (b) {
            b ? $("#stage-buttons").removeClass("hidden") : $("#stage-buttons").addClass("hidden");
            IDE.adjustPanels()
        },
        enableLegacy: function (b) {
            WinStage._isLegacyMode = b;
            WinStage.setStageState(false)
        },
        setStageState: function (b) {
            if (b) {
                if (WinStage._isLegacyMode) {
                    $("#win-media-sidebar").removeClass("hidden");
                    $("#win-levels").removeClass("hidden");
                    WinStage.enableToolbar(true)
                } else {
                    $("#win-media-sidebar").removeClass("hidden").addClass("collapsed");
                    $("#win-levels").removeClass("hidden").addClass("collapsed");
                    WinStage.enableToolbar(false)
                }
                $(".canvas-toggle a").removeClass("selected");
                $("#stagecmd-edit").addClass("selected");
                WinCode.enable(false);
                WinProperties.enable(false);
                WinAssets.enable(false);
                WinStage.enable(true);
                WinStage.editTiles();
                if (WinAnnotation.isVisible) {
                    b = $("#win-annotation");
                    b.detach();
                    b.css("top", $(".toolbar-top").height()).css("left", 0).css("bottom", 0).css("width", 250).css("height", "").css("display", "block").css("border-right",
                        "1px solid #aaa").find(".collapse").addClass("hidden");
                    $("body").append(b)
                }
                $("#stagecmd-zoomin").removeClass("hidden");
                $("#stagecmd-zoomout").removeClass("hidden");
                IDE.adjustPanels()
            } else {
                if (WinAnnotation.isVisible) {
                    b = $("#win-annotation");
                    b.detach();
                    $("#win-tools .palette").after(b);
                    b.css("height", "").css("top", "").css("left", "").css("bottom", "").css("width", "").css("display", "").css("border-right", "").find(".collapse").removeClass("hidden");
                    b = $("#win-annotation .entry.selected").attr("data-size");
                    b == "full" ? $(".tools-resize-handle").css("top", window.innerHeight - $(".toolbar-top").outerHeight()) : b == "half" && $(".tools-resize-handle").css("top", (window.innerHeight - $(".toolbar-top").outerHeight()) / 2)
                }
                if (WinStage._isLegacyMode) {
                    $("#win-media-sidebar").addClass("hidden").removeClass("collapsed");
                    $("#win-levels").addClass("hidden").removeClass("collapsed");
                    $(".canvas-toggle a").removeClass("selected");
                    $("#codecmd-edit").addClass("selected");
                    WinCode.enable(true);
                    WinProperties.enable(false);
                    WinAssets.enable(true);
                    WinStage.enable(true);
                    WinStage.enableToolbar(true);
                    Runtime.stage.tileLayer.showGrid(false);
                    $("#win-tools").css("top", 0);
                    $("#win-editor").removeClass("fullscreen");
                    $(".runbutton").addClass("hidden");
                    IDE.adjustPanels()
                } else {
                    $("#win-media-sidebar").addClass("hidden").removeClass("collapsed");
                    $("#win-levels").addClass("hidden").removeClass("collapsed");
                    $(".canvas-toggle a").removeClass("selected");
                    $("#codecmd-edit").addClass("selected");
                    WinCode.enable(true);
                    WinProperties.enable(false);
                    WinAssets.enable(true);
                    WinStage.enable(false);
                    WinStage.enableToolbar(false);
                    Runtime.stage.tileLayer.showGrid(false);
                    $("#win-editor").addClass("fullscreen");
                    $(".runbutton").removeClass("hidden");
                    IDE.adjustPanels();
                    $("#win-tools").css("top", -($("#win-code").offset().top - $("#ide-header").outerHeight()))
                }
                $("#stagecmd-zoomin").addClass("hidden");
                $("#stagecmd-zoomout").addClass("hidden");
                Runtime.stage.canvasScale = 1;
                Runtime.stage.tileLayer.setScrollOffset(Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.tileLayer.getScrollOffsetY());
                Runtime.stage.draw()
            }
        },
        init: function () {
            $("#stagecmd-edit").click(function () {
                WinStage.setStageState(true);
                return false
            });
            $("#codecmd-edit").click(function () {
                WinStage.setStageState(false);
                return false
            });
            $("#stagecmd-minmax").click(WinStage.minmax);
            $("#stagecmd-reset").click(function () {
                for (var b = 0; b < Runtime.sprites.length; b++) Runtime.sprites[b].bringIntoView();
                Runtime.stage.draw();
                return false
            });
            $("#stagecmd-grid").click(function () {
                WinStage.cmdGrid();
                return false
            });
            $("#stagecmd-run").click(function () {
                WinStage.cmdStart();
                return false
            });
            $(".runbutton .play").click(function () {
                WinStage._isStageState = !WinCode.isEnabled();
                WinStage.setStageState(true);
                WinMediaSidebar.enableLevels(false);
                WinMediaSidebar.hide();
                WinStage.cmdStart();
                return false
            });
            $("#stagecmd-pause").click(function () {
                WinStage.cmdPause();
                return false
            });
            $("#stagecmd-resume").click(function () {
                WinStage.cmdResume();
                return false
            });
            $("#stagecmd-stop").click(function () {
                WinStage.cmdStop();
                return false
            });
            $(".runbutton .stop").click(function () {
                WinStage.setStageState(WinStage._isStageState);
                WinStage.cmdStop();
                return false
            });
            $("#stagecmd-inspect").click(function () {
                window.WinTools && WinTools.showDebugger();
                return false
            });
            $("#stagecmd-zoomin").click(function () {
                Runtime.stage.canvasScale = Runtime.stage.canvasScale + 0.1;
                if (Runtime.stage.canvasScale > 4) Runtime.stage.canvasScale = 4;
                var b = Math.min(Runtime.stage.actorsLayer.canvas.width / (Runtime.stage.tileLayer.mapWidth * Runtime.stage.tileLayer.tileSize), Runtime.stage.actorsLayer.canvas.height / (Runtime.stage.tileLayer.mapHeight * Runtime.stage.tileLayer.tileSize));
                if (Runtime.stage.canvasScale < b) Runtime.stage.canvasScale = b;
                Runtime.stage.tileLayer.setScrollOffset(Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.tileLayer.getScrollOffsetY());
                Runtime.stage.draw();
                return false
            });
            $("#stagecmd-zoomout").click(function () {
                Runtime.stage.canvasScale = Runtime.stage.canvasScale - 0.1;
                if (Runtime.stage.canvasScale < 0.1) Runtime.stage.canvasScale = 0.1;
                var b = Math.min(Runtime.stage.actorsLayer.canvas.width / (Runtime.stage.tileLayer.mapWidth * Runtime.stage.tileLayer.tileSize),
                    Runtime.stage.actorsLayer.canvas.height / (Runtime.stage.tileLayer.mapHeight * Runtime.stage.tileLayer.tileSize));
                if (Runtime.stage.canvasScale < b) Runtime.stage.canvasScale = b;
                Runtime.stage.tileLayer.setScrollOffset(Runtime.stage.tileLayer.getScrollOffsetX(), Runtime.stage.tileLayer.getScrollOffsetY());
                Runtime.stage.draw();
                return false
            });
            Runtime.addRuntimeListener(WinStage.runtimeChanged);
            Runtime.stage.addListener("mousemoved", WinStage.mousemoved);
            $("#stage-canvas").mouseleave(function () {
                $("#win-stage #stage-buttons .pointerpos").addClass("hidden")
            }).mouseenter(function () {
                $("#win-stage #stage-buttons .pointerpos").removeClass("hidden")
            });
            Runtime.blockEvents(true)
        },
        editTiles: function () {
            if ($("#win-media-sidebar").hasClass("hidden")) {
                $("#win-stage").removeClass("centeredframe");
                WinMediaSidebar.hide();
                WinCode.enable(true);
                WinAssets.enable(true);
                WinStage.enableDecorations(true);
                Runtime.stage.setDesignMode("normal");
                var b = parseInt($("#win-stage").attr("data-lastwidth"));
                b && $("#win-stage").css("width", b);
                $("#win-stage").removeAttr("data-lastwidth");
                Runtime.stage.tileLayer.showGrid(false)
            } else {
                $("#win-stage").attr("data-lastwidth", "" + $("#win-stage").innerWidth());
                $("#win-stage").addClass("centeredframe");
                WinMediaSidebar.showLevels();
                WinMediaSidebar.showPicker("title", null, null, null);
                WinProperties.enable(false);
                WinCode.enable(false);
                WinAssets.enable(false);
                WinStage.enableDecorations(false);
                Runtime.stage.tileLayer.showGrid(true)
            }
            IDE.adjustPanels();
            return false
        },
        restore: function () {
            var b = $("#stagecmd-minmax");
            if (!b.hasClass("maximize")) {
                b.addClass("maximize").removeClass("minimize");
                $("#win-stage").css("width", window.innerWidth * 0.4);
                if (WinStage._minState) {
                    WinCode.enable(WinStage._minState.code);
                    WinAssets.enable(WinStage._minState.assets);
                    WinStage._showToolbarWhenMaximized || WinToolbar.enable(WinStage._minState.toolbar);
                    WinStage.enableDecorations(WinStage._minState.stage)
                } else {
                    WinCode.enable(true);
                    WinAssets.enable(true);
                    WinStage._showToolbarWhenMaximized || WinToolbar.enable(true);
                    WinStage.enableDecorations(true)
                }
            }
        },
        minmax: function () {
            var b = $(this);
            if (b.hasClass("maximize")) {
                b.removeClass("maximize icon-full-screen").addClass("minimize icon-contract");
                $("#win-stage").removeClass("centeredframe");
                if ($("#win-media-sidebar").hasClass("hidden")) $("#win-stage").attr("data-lastwidth", "" + $("#win-stage").innerWidth());
                else {
                    $("#win-stage").attr("data-showsidebar", "true");
                    $("#win-media-sidebar").addClass("hidden");
                    WinMediaSidebar.hide();
                    WinMediaSidebar.enableLevels(false);
                    WinCode.enable(true);
                    WinAssets.enable(true);
                    WinStage.enableDecorations(true);
                    Runtime.stage.setDesignMode("normal");
                    Runtime.stage.tileLayer.showGrid(false)
                }
                WinStage._minState = {
                    code: WinCode._enabled,
                    properties: WinProperties._enabled,
                    assets: !$("#win-assets").hasClass("hidden"),
                    toolbar: !$(".toolbar-top").hasClass("hidden"),
                    stage: !$("#stage-controls").hasClass("hidden")
                };
                WinProperties.enable(false);
                WinCode.enable(false);
                WinAssets.enable(false);
                WinStage.enableDecorations(false);
                WinToolbar.enable(false);
                $(".buttons.stage.main").removeClass("hidden")
            } else {
                b.addClass("maximize icon-full-screen").removeClass("minimize icon-contract");
                if (WinStage._minState) {
                    WinCode.enable(WinStage._minState.code);
                    WinAssets.enable(WinStage._minState.assets);
                    WinStage.enableDecorations(WinStage._minState.stage)
                } else {
                    WinCode.enable(true);
                    WinAssets.enable(true);
                    WinStage.enableDecorations(true)
                }
                WinStage._showToolbarWhenMaximized || WinToolbar.enable(true);
                if ($("#win-stage").attr("data-showsidebar") == "true") {
                    $("#win-stage").removeAttr("data-showsidebar");
                    $("#win-media-sidebar").removeClass("hidden");
                    $("#win-stage").addClass("centeredframe");
                    WinMediaSidebar.showPicker("title", null, null, null);
                    WinMediaSidebar.enableLevels(true);
                    WinProperties.enable(false);
                    WinCode.enable(false);
                    WinAssets.enable(false);
                    WinStage.enableDecorations(false);
                    Runtime.stage.tileLayer.showGrid(true)
                } else {
                    $("#win-stage").removeClass("centeredframe");
                    (b = parseInt($("#win-stage").attr("data-lastwidth"))) && $("#win-stage").css("width", b);
                    $("#win-stage").removeAttr("data-lastwidth")
                }
            }
            IDE.adjustPanels()
        },
        mousemoved: function (b) {
            b = Runtime.stage.getMousePos();
            $("#win-stage #stage-buttons .pointerpos").text("[" + Math.floor(b.x - Runtime.stage.getWidth() / 2) + "," + Math.floor(Runtime.stage.getHeight() / 2 - b.y) + "]")
        },
        cmdStart: function () {
            FocusManager.clearFocus();
            WinCode.draw();
            Runtime.startScripts();
            WinStage.showStarted()
        },
        showStarted: function () {
            Runtime.blockEvents(false);
            $(".stagecmd-run").addClass("hidden");
            $(".stagecmd-stop").removeClass("hidden");
            $(".stagecmd-pause").removeClass("hidden");
            $(".stagecmd-resume").addClass("hidden");
            $(".runbutton").addClass("playing")
        },
        cmdStop: function () {
            Runtime.stopScripts();
            Runtime.stage.enableDragging(WinStage.enableDragging);
            Runtime.blockEvents(true);
            WinStage.showStopped()
        },
        showStopped: function () {
            $(".stagecmd-run").removeClass("hidden");
            $(".stagecmd-stop").addClass("hidden");
            $(".stagecmd-pause").addClass("hidden");
            $(".stagecmd-resume").addClass("hidden");
            $(".runbutton").removeClass("playing")
        },
        cmdPause: function () {
            Runtime.pauseScripts();
            WinStage.showPaused()
        },
        cmdResume: function () {
            FocusManager.clearFocus();
            WinCode.draw();
            Runtime.resumeScripts();
            WinStage.showStarted()
        },
        showPaused: function () {
            $(".stagecmd-run").addClass("hidden");
            $(".stagecmd-stop").removeClass("hidden");
            $(".stagecmd-pause").addClass("hidden");
            $(".stagecmd-resume").removeClass("hidden");
            $(".runbutton").addClass("playing")
        },
        adjustWindow: function () {
            var b = $("#stage-canvas").innerWidth(),
                c = $("#stage-canvas").innerHeight(),
                d = $("#win-stage").innerWidth(),
                e = $("#win-stage").innerHeight() - $("#win-stage .sprite-position:visible").outerHeight() - $("#stage-buttons:visible").outerHeight();
            $("#stage-canvas").css("width", d).css("height", e);
            $("#win-stage canvas").css("width", d).css("height", e);
            (b != d || c != e) && Runtime.stage.updateStageSize();
            Runtime.stage.draw();
            Physics.updateWorld()
        },
        show: function () {
            $("#win-stage").removeClass("hidden")
        },
        hide: function () {
            $("#win-stage").addClass("hidden")
        },
        canDrop: function (b, c, d, e) {
            if (!$("#win-stage").hasClass("hidden")) {
                d = $("#win-stage");
                if (b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight())
                    if (e instanceof WinMediaAssets.DragObject && (e.ext == "jpg" || e.ext == "png" || e.ext == "gif" || e.ext == "actor" || e.ext == "jpeg" || e.ext == "mp3" || e.ext == "wav")) {
                        d = $("#stage-canvas");
                        b = b - d.offset().left;
                        c = c - d.offset().top;
                        if (b >= 0 && b < d.width() && c >= 0 && c < d.height()) return true
                    } else if (window.WinAssets &&
                    e instanceof WinAssets.DragObject || window.WinTools && (e.watchable || e.func == "valueVar")) return true
            }
            return false
        },
        drop: function (b, c, d, e, f, g) {
            if (!$("#win-stage").hasClass("hidden")) {
                var h = b,
                    j = c,
                    b = $("#win-stage");
                if (h >= b.offset().left && h <= b.offset().left + b.outerWidth() && j >= b.offset().top && j <= b.offset().top + b.outerHeight())
                    if (e instanceof WinMediaAssets.DragObject && (e.ext == "jpg" || e.ext == "png" || e.ext == "gif" || e.ext == "actor" || e.ext == "jpeg" || e.ext == "mp3" || e.ext == "wav")) {
                        IDE.dirty();
                        b = $("#stage-canvas");
                        h =
                            h - b.offset().left;
                        j = j - b.offset().top;
                        c = e.path;
                        if (c.substring(c.length - 6) == ".actor") ObjectIO.loadSprite(c, function (b) {
                            h = h / Runtime.stage.canvasScale;
                            j = j / Runtime.stage.canvasScale;
                            b.spriteObj.setPosition(h - Runtime.stage.tileLayer.scrollOffset.x, j - Runtime.stage.tileLayer.scrollOffset.y);
                            Runtime.stage.draw();
                            IDE.computeAll();
                            IDE.draw();
                            IDE.selectAsset(b);
                            g && g(b);
                            IDE.Clipboard.undoAddActor(b)
                        });
                        else if (e.ext == "mp3" || e.ext == "wav")
                            if ((b = null) && !b.locked) {
                                e = b.sprite.addSound({
                                    name: e.file,
                                    sound: c
                                });
                                g && g(k);
                                IDE.Clipboard.undoAddSound(k, e)
                            } else {
                                e = Runtime.background.addSound({
                                    name: e.file,
                                    sound: c
                                });
                                g && g(k);
                                IDE.Clipboard.undoAddSound(Runtime.background, e)
                            }
                        else if ((b = null) && !b.sprite.locked) {
                            e = b.sprite.addCostume({
                                name: e.file,
                                img: c
                            });
                            b.sprite.setCostumeByName(e.name);
                            g && g(k);
                            IDE.Clipboard.undoAddCostume(k, e)
                        } else if (c.indexOf("/Backgrounds/") >= 0) {
                            e = Runtime.background.addCostume({
                                name: e.file,
                                img: c
                            });
                            Runtime.background.setCostumeByName(e.name);
                            IDE.selectAsset(null);
                            g && g(k);
                            IDE.Clipboard.undoAddCostume(Runtime.background,
                                e)
                        } else {
                            var h = h / Runtime.stage.canvasScale,
                                j = j / Runtime.stage.canvasScale,
                                k = Sprites.addSprite({
                                    costumeName: e.file,
                                    img: c,
                                    forceNumber: false
                                }, g);
                            k.spriteObj.setPosition(h - Runtime.stage.tileLayer.scrollOffset.x, j - Runtime.stage.tileLayer.scrollOffset.y);
                            IDE.Clipboard.undoAddActor(k)
                        }
                        Runtime.stage.draw()
                    } else if (e instanceof WinAssets.DragObject) {
                        IDE.dirty();
                        if (!(e.sprite instanceof Sprite))
                            if (e.sprite && e.sprite.type == "background") {
                                e = Runtime.background.addCostume({
                                    name: e.sprite.name,
                                    img: e.sprite.url
                                });
                                Runtime.background.setCostumeByName(e.name);
                                IDE.selectAsset(null);
                                g && g(k);
                                IDE.Clipboard.undoAddCostume(Runtime.background, e)
                            } else ObjectIO.deserializeSprite(JSON.parse(e.sprite), function (b) {
                                var c = $("#stage-canvas");
                                h = h - c.offset().left;
                                j = j - c.offset().top;
                                h = h * Runtime.stage.getWidth() / c.innerWidth();
                                j = j * Runtime.stage.getHeight() / c.innerHeight();
                                h = h / Runtime.stage.canvasScale;
                                j = j / Runtime.stage.canvasScale;
                                b.spriteObj.setPosition(h - Runtime.stage.tileLayer.scrollOffset.x, j - Runtime.stage.tileLayer.scrollOffset.y);
                                Runtime.stage.draw()
                            })
                    } else if (window.WinTools &&
                        (e.watchable || e.func == "valueVar")) {
                        b = $("#stage-canvas");
                        h = h - b.offset().left;
                        j = j - b.offset().top;
                        h = h * Runtime.stage.getWidth() / b.innerWidth() - Runtime.stage.getWidth() / 2;
                        j = Runtime.stage.getHeight() / 2 - j * Runtime.stage.getHeight() / b.innerHeight();
                        h = h / Runtime.stage.canvasScale;
                        j = j / Runtime.stage.canvasScale;
                        Runtime.addWatcher(IDE.editingActor, e, h - Runtime.stage.tileLayer.scrollOffset.x, j - Runtime.stage.tileLayer.scrollOffset.y)
                    }
            }
        },
        runtimeChanged: function (b) {
            if (b == "start") $("#win-stage").addClass("running");
            else if (b == "stop") {
                Runtime.stage.enableDragging(WinStage.enableDragging);
                Runtime.blockEvents(true);
                $("#win-stage").removeClass("running")
            }
        },
        cmdGrid: function () {
            if ($("#stagecmd-grid").hasClass("on")) {
                $("#stagecmd-grid").removeClass("on");
                Runtime.stage.showGrid(false)
            } else {
                $("#stagecmd-grid").addClass("on");
                Runtime.stage.showGrid(true)
            }
        }
    },
    WinProperties = {
        _enabled: !0,
        enableDoubleclick: !1,
        enableUnlock: !0,
        enable: function (b) {
            if (b) {
                WinProperties._enabled = true;
                $("#win-editor .info-bar").removeClass("hidden");
                $("#win-properties").css("height", window.innerHeight * 0.8);
                $("#win-properties").modal();
                WinProperties.show("looks");
                $("#win-editor").hasClass("hidden") && $("#win-editor").removeClass("hidden");
                $("#win-editor").removeClass("nodecorations")
            } else {
                WinProperties._enabled = false;
                $("#win-editor .info-bar").addClass("hidden");
                $.modal.close();
                WinCode._enabled ? $("#win-code").removeClass("hidden") : $("#win-editor").addClass("hidden");
                $("#win-editor h1").hasClass("hidden") && $("#win-editor").addClass("nodecorations")
            }
            IDE.adjustPanels()
        },
        init: function () {
            $("#win-editor .info-bar").removeClass("hidden");
            $("#win-editor h1 div").click(WinProperties.minmax);
            $("#win-properties .prop-tabs a.interfaces-tab").click(function () {
                WinProperties.show("interfaces");
                return false
            });
            $("#win-properties .prop-tabs a.looks-tab").click(function () {
                WinProperties.show("looks");
                return false
            });
            $("#win-properties .prop-tabs a.sounds-tab").click(function () {
                WinProperties.show("sounds");
                return false
            });
            $("#win-properties .prop-tabs a.advanced-tab").click(function () {
                WinProperties.show("advanced");
                return false
            });
            $(".close-property").click(function () {
                $("#win-properties").addClass("hidden")
            });
            $(".help").mouseenter(function () {
                $(this).find("p").removeClass("hidden")
            }).mouseleave(function () {
                $(this).find("p").addClass("hidden")
            });
            $("#win-editor a.reset").click(function () {
                IDE.dirty();
                var b = IDE.editingSprite;
                if (b) b.bringIntoView();
                else
                    for (b = 0; b < Runtime.sprites.length; b++) Runtime.sprites[b].bringIntoView();
                Runtime.stage.draw();
                return false
            });
            $("#win-properties .buttons a.unlock").click(function () {
                IDE.confirmDialog(g_loc.getText("winproperties.confirmunlock"),
                    function () {
                        if (IDE.editingActor) {
                            IDE.dirty();
                            IDE.editingActor.locked = false;
                            for (var b = 0; b < IDE.editingActor.scripts.length; b++) IDE.editingActor.scripts[b].hidden = false;
                            for (b = 0; b < IDE.editingActor.costumes.length; b++) IDE.editingActor.costumes[b].hidden = false;
                            for (b = 0; b < IDE.editingActor.sounds.length; b++) IDE.editingActor.sounds[b].hidden = false;
                            WinTools.reset();
                            IDE.selectAsset(IDE.editingActor)
                        }
                    });
                return false
            });
            $("#win-properties .buttons a.save").click(function () {
                IDE.editingActor && IDE.cmdActorSave(IDE.editingActor);
                return false
            });
            if (window.WinSpine) {
                $("#win-properties .tab-container.looks .avatar").click(function () {
                    var b = IDE.editingActor;
                    b && WinSpine.showCreator(function (d, e) {
                        b.loadSkeleton(d, e)
                    }, b.skeleton.type, b.skeleton.parts)
                });
                Runtime.stage.addListener("doubleclicked", function () {
                    if (WinProperties.enableDoubleClick) {
                        var b = IDE.editingActor;
                        b && (b.skeleton && b.skeleton.skeletonData) && WinSpine.showCreator(function (d, e) {
                            b.loadSkeleton(d, e)
                        }, b.skeleton.type, b.skeleton.parts)
                    }
                })
            }
            $("#win-properties .tab-container.looks .add").click(WinProperties._addCostumeButton);
            $("#win-properties .tab-container.looks .draw").click(function () {
                if (!$(this).hasClass("disabled")) {
                    window.WinPaint && WinPaint.edit(g_loc.getText("title.paint_create_actor"), null, null, null, function (b, d, e) {
                        WinProperties._addAssetAsCostume([{
                            url: b,
                            name: "drawing",
                            cx: d,
                            cy: e
                        }])
                    });
                    $.modal.close()
                }
                return false
            });
            $("#win-properties .tab-container.looks .url input").keypress(function (b) {
                var d = $("#win-properties .looks .url input").val();
                b.which == 13 && generateImageFromUrl(d, function () {
                    WinProperties._addAssetAsCostume([{
                        url: d,
                        name: "URL"
                    }])
                })
            });
            $("#win-properties .tab-container.sounds .url input").keypress(function (b) {
                var d = $("#win-properties .sounds .url input").val();
                b.which == 13 && (IDE.editingActor ? IDE.addResourceTo(d, "Audio", IDE.editingActor) : IDE.addResourceTo(d, "Audio", Runtime.background))
            });
            $("#win-properties .tab-container.sounds .add").click(WinProperties._addSoundButton);
            $("#bg-tilemap").click(function () {
                IDE.dirty();
                this.checked ? Runtime.stage.tileLayer.enableTiles(true) : Runtime.stage.tileLayer.enableTiles(false)
            });
            $("#bg-scrollbg").click(function () {
                IDE.dirty();
                if (this.checked) {
                    Runtime.stage.tileLayer.scrollBgOffset = true;
                    IDE.dirty();
                    Runtime.stage.setStageExpand(false);
                    WinProperties._updateCanvas();
                    $("#bgexpand")[0].checked = false
                } else Runtime.stage.tileLayer.scrollBgOffset = false
            });
            $("#bg-tilemap-width").blur(function () {
                IDE.dirty();
                var b = parseInt($("#bg-tilemap-width").val());
                b < Runtime.stage.getWidth() / Runtime.stage.tileLayer.tileSize ? b = Math.ceil(Runtime.stage.getWidth() / Runtime.stage.tileLayer.tileSize) : b > 100 &&
                    (b = 100);
                var d = parseInt($("#bg-tilemap-height").val());
                d < Runtime.stage.getHeight() / Runtime.stage.tileLayer.tileSize ? d = Math.ceil(Runtime.stage.getHeight() / Runtime.stage.tileLayer.tileSize) : d > 100 && (d = 100);
                $("#bg-tilemap-width").val(b);
                $("#bg-tilemap-height").val(d);
                Runtime.stage.tileLayer.setSize(b, d)
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#bg-tilemap-height").blur(function () {
                IDE.dirty();
                var b = parseInt($("#bg-tilemap-width").val());
                b < Runtime.stage.getWidth() / Runtime.stage.tileLayer.tileSize ?
                    b = Math.ceil(Runtime.stage.getWidth() / Runtime.stage.tileLayer.tileSize) : b > 100 && (b = 100);
                var d = parseInt($("#bg-tilemap-height").val());
                d < Runtime.stage.getHeight() / Runtime.stage.tileLayer.tileSize ? d = Math.ceil(Runtime.stage.getHeight() / Runtime.stage.tileLayer.tileSize) : d > 100 && (d = 100);
                $("#bg-tilemap-width").val(b);
                $("#bg-tilemap-height").val(d);
                Runtime.stage.tileLayer.setSize(b, d)
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#bg-physics").click(function () {
                IDE.dirty();
                this.checked ? Physics.isSimulationRunning() ||
                    Physics.runSimulation() : Physics.isSimulationRunning() && Physics.stopSimulation()
            });
            $("#bg-gravity-x").blur(function () {
                IDE.dirty();
                Physics.updateGravity(parseFloat($("#bg-gravity-x").val()), parseFloat($("#bg-gravity-y").val()))
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#bg-gravity-y").blur(function () {
                IDE.dirty();
                Physics.updateGravity(parseFloat($("#bg-gravity-y").val()), parseFloat($("#bg-gravity-y").val()))
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $(".stage input[type=radio]").click(function () {
                IDE.dirty();
                Runtime.stage.setBackgroundType($(this).val());
                WinProperties._updateCanvas()
            });
            $("#bgfixed-width").blur(function () {
                IDE.dirty();
                WinProperties._updateCanvas()
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#bgfixed-height").blur(function () {
                IDE.dirty();
                WinProperties._updateCanvas()
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#bgexpand").click(function () {
                IDE.dirty();
                Runtime.stage.setStageExpand(this.checked);
                WinProperties._updateCanvas()
            });
            $("#project-name").blur(function () {
                IDE.dirty();
                IDE.setTitle($(this).val())
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#win-properties .tab-container.advanced .stage textarea").blur(function () {
                IDE.dirty();
                IDE.currentProjectDescription = $(this).val()
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $(".sprite-rotate input").click(function () {
                IDE.dirty();
                if (IDE.editingActor) {
                    $(this).val() == "rotate" ? IDE.editingActor.spriteObj.setRotateLock(0) : $(this).val() == "flip" ? IDE.editingActor.spriteObj.setRotateLock(1) : $(this).val() == "norotate" &&
                        IDE.editingActor.spriteObj.setRotateLock(2);
                    Runtime.stage.draw()
                }
            });
            $("input.sprite-dragging").click(function () {
                IDE.dirty();
                IDE.editingActor && IDE.editingActor.spriteObj.setDraggable(this.checked)
            });
            $("#sprite-name span").click(function () {
                $(this).addClass("hidden");
                var b = $(this).text();
                if (IDE.editingActor) b = IDE.editingActor.label;
                $(this).parent().find("input").removeClass("hidden").val(b).focus()
            });
            $("#sprite-name input").blur(function () {
                if (IDE.editingActor) {
                    IDE.dirty();
                    var b = IDE.editingActor.changeSpriteName($(this).val());
                    $(this).addClass("hidden");
                    $("#sprite-name span").text(b).removeClass("hidden")
                }
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#win-code .sprite-position .toggle").click(function () {
                $("#win-code .sprite-position .details").toggleClass("show");
                return false
            });
            $("#sprite-x span").click(function () {
                $(this).addClass("hidden");
                var b = $(this).text();
                IDE.editingActor && (b = IDE.editingActor.spriteObj.x - Runtime.stage.getWidth() / 2);
                $(this).parent().find("input").removeClass("hidden").val(b).focus()
            });
            $("#sprite-x input").blur(function () {
                if (IDE.editingActor) {
                    IDE.dirty();
                    var b = parseFloat($(this).val());
                    isNaN(b) && (b = 0);
                    var d = Runtime.stage.getWidth() / 2 + b;
                    IDE.editingActor.spriteObj.setPosition(d, IDE.editingActor.spriteObj.y);
                    Runtime.stage.draw();
                    $(this).addClass("hidden");
                    $("#sprite-x span").text(Math.round(b * 10) / 10).removeClass("hidden")
                }
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#sprite-y span").click(function () {
                $(this).addClass("hidden");
                var b = $(this).text();
                IDE.editingActor && (b =
                    Runtime.stage.getHeight() / 2 - IDE.editingActor.spriteObj.y);
                $(this).parent().find("input").removeClass("hidden").val(b).focus()
            });
            $("#sprite-y input").blur(function () {
                if (IDE.editingActor) {
                    IDE.dirty();
                    var b = IDE.editingActor.spriteObj.x,
                        d = parseFloat($(this).val());
                    isNaN(d) && (d = 0);
                    var e = Runtime.stage.getHeight() / 2 - d;
                    IDE.editingActor.spriteObj.setPosition(b, e);
                    Runtime.stage.draw();
                    $(this).addClass("hidden");
                    $("#sprite-y span").text(Math.round(d * 10) / 10).removeClass("hidden")
                }
            }).keypress(function (b) {
                b.which ==
                    13 && $(this)[0].blur()
            });
            $("#sprite-angle span").click(function () {
                $(this).addClass("hidden");
                var b = $(this).text();
                if (IDE.editingActor) {
                    b = (Math.floor(IDE.editingActor.spriteObj.rotation) + 90) % 360;
                    b > 180 && (b = b - 360)
                }
                $(this).parent().find("input").removeClass("hidden").val(b).focus()
            });
            $("#sprite-angle input").blur(function () {
                if (IDE.editingActor) {
                    IDE.dirty();
                    var b = parseFloat($(this).val());
                    isNaN(b) && (b = 90);
                    IDE.editingActor.spriteObj.setRotation(-(90 - b));
                    b = (Math.floor(IDE.editingActor.spriteObj.rotation) +
                        90) % 360;
                    b > 180 && (b = b - 360);
                    Runtime.stage.draw();
                    $(this).addClass("hidden");
                    $("#sprite-angle span").text(b).removeClass("hidden")
                }
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#sprite-scale span").click(function () {
                $(this).addClass("hidden");
                var b = $(this).text();
                IDE.editingActor && (b = IDE.editingActor.spriteObj.scale.x * 100);
                $(this).parent().find("input").removeClass("hidden").val(b).focus()
            });
            $("#sprite-scale input").blur(function () {
                if (IDE.editingActor) {
                    IDE.dirty();
                    var b = parseFloat($(this).val()) /
                        100;
                    isNaN(b) && (b = 1);
                    IDE.editingActor.spriteObj.setScale(b);
                    Runtime.stage.draw();
                    $(this).addClass("hidden");
                    $("#sprite-scale span").text(Math.round(b * 1E3) / 10).removeClass("hidden")
                }
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#sprite-layer span").click(function () {
                $(this).addClass("hidden");
                $(this).parent().find("input").removeClass("hidden").val(IDE.editingActor.spriteObj.zIndex).focus()
            });
            $("#sprite-layer input").blur(function () {
                if (IDE.editingActor) {
                    IDE.dirty();
                    var b = parseInt($(this).val());
                    IDE.editingActor.spriteObj.setZIndex(b);
                    Runtime.stage.draw();
                    $(this).addClass("hidden");
                    $("#sprite-layer span").text(b).removeClass("hidden")
                }
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            var b = function () {
                IDE.editingActor && Physics.updateFixture(IDE.editingActor.spriteObj, parseFloat($("#sprite-density").val()), parseFloat($("#sprite-friction").val()), parseFloat($("#sprite-restitution").val()))
            };
            $("#sprite-matpreset").change(function () {
                var b = $(this).val().split(",");
                $("#sprite-friction").val(b[0]).blur();
                $("#sprite-restitution").val(b[1]).blur()
            });
            $("#sprite-density").blur(function () {
                IDE.dirty();
                b()
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#sprite-friction").blur(function () {
                IDE.dirty();
                b()
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#sprite-restitution").blur(function () {
                IDE.dirty();
                b()
            }).keypress(function (b) {
                b.which == 13 && $(this)[0].blur()
            });
            $("#sprite-geometry input").click(function () {
                if (IDE.editingActor) {
                    IDE.dirty();
                    Physics.updateBody(IDE.editingActor.spriteObj, {
                        geometry: $(this).val()
                    })
                }
            });
            $("#sprite-static").click(function () {
                if (IDE.editingActor) {
                    IDE.dirty();
                    IDE.editingActor.spriteObj.physicsBody.SetType(this.checked ? b2Body.b2_staticBody : b2Body.b2_dynamicBody)
                }
            });
            $("#sprite-active").click(function () {
                if (IDE.editingActor) {
                    IDE.dirty();
                    IDE.editingActor.spriteObj.physicsBody.SetActive(this.checked)
                }
            });
            window.setInterval(WinProperties.periodicUpdate, 1E3);
            WinProperties.adjustWindow()
        },
        _addCostumeButton: function () {
            var b = "";
            if (IDE.editingActor && IDE.editingActor != Runtime.background) {
                b = g_loc.getText("winmedialib.addcostume");
                WinMediaAssets.showPicker(b, WinProperties._addAssetAsCostume, {
                    backgrounds: true,
                    actors: false,
                    images: true,
                    sounds: false,
                    charStudio: false
                })
            } else {
                b = g_loc.getText("winmedialib.addscene");
                WinMediaAssets.showPicker(b, WinProperties._addAssetAsCostume, {
                    backgrounds: true,
                    actors: false,
                    images: false,
                    sounds: false,
                    charStudio: false
                })
            }
        },
        _addSoundButton: function () {
            WinProperties._soundsAddSound()
        },
        minmax: function () {
            var b = $(this);
            if (b.hasClass("maximize")) {
                b.removeClass("maximize").addClass("minimize");
                WinProperties._minState = {
                    properties: WinProperties._enabled,
                    assets: !$("#win-assets").hasClass("hidden"),
                    toolbar: !$(".toolbar-top").hasClass("hidden"),
                    stage: !$("#win-stage").hasClass("hidden")
                };
                WinAssets.enable(false);
                WinProperties.enable(false);
                WinToolbar.enable(false);
                WinStage.enable(false)
            } else {
                b.addClass("maximize").removeClass("minimize");
                $("#win-stage").css("width", window.innerWidth * 0.4);
                if (WinStage._minState) {
                    WinProperties.enable(WinStage._minState.properties);
                    WinCode.enable(true);
                    WinAssets.enable(WinStage._minState.assets);
                    WinToolbar.enable(WinStage._minState.toolbar);
                    WinStage.enable(WinStage._minState.stage)
                } else {
                    WinProperties.enable(true);
                    WinCode.enable(true);
                    WinAssets.enable(true);
                    WinToolbar.enable(true);
                    WinStage.enable(true)
                }
            }
        },
        _looksCreateCostume: function () {
            var b = IDE.editingActor ? g_loc.formatText("title.paint_create_costume", IDE.editingActor.label) : g_loc.getText("title.paint_create_bg");
            window.WinPaint && WinPaint.edit(b, null, null, null, function (b) {
                IDE.editingActor ? IDE.addResourceTo(b, g_loc.getText("wincontent.defaultlabel"),
                    IDE.editingActor) : IDE.addResourceTo(b, g_loc.getText("wincontent.defaultlabel"), Runtime.background)
            });
            $.modal.close();
            return false
        },
        _addAssetAsCostume: function (b) {
            IDE._ignoreUpdates = true;
            for (var c = 0; c < b.length; c++) IDE.editingActor ? IDE.addResourceTo(b[c].url, b[c].name, IDE.editingActor) : IDE.addResourceTo(b[c].url, b[c].name, Runtime.background);
            IDE._ignoreUpdates = false;
            WinProperties.update()
        },
        _soundsAddSound: function () {
            var b = "";
            if (IDE.editingActor) {
                root = "Sounds";
                b = g_loc.getText("winmedialib.addsoundtoactor")
            } else {
                root =
                    "Sounds";
                b = g_loc.getText("winmedialib.addsoundtostage")
            }
            WinMediaAssets.showPicker(b, WinProperties._addAssetAsCostume, {
                backgrounds: false,
                actors: false,
                images: false,
                sounds: true,
                charStudio: false
            });
            return false
        },
        _addAssetAsSound: function (b) {
            IDE._ignoreUpdates = true;
            for (var c = 0; c < b.length; c++) IDE.editingActor ? IDE.addResourceTo(b[c].url, b[c].name, IDE.editingActor) : IDE.addResourceTo(b[c].url, b[c].name, Runtime.background);
            IDE._ignoreUpdates = false;
            WinProperties.update()
        },
        _soundsRecordSound: function () {
            WinMediaCapture.showAudioRecorder(function (b) {
                IDE.editingActor ?
                    IDE.addResourceTo(b, "Recording", IDE.editingActor) : IDE.addResourceTo(b, "Recording", Runtime.background)
            });
            return false
        },
        adjustWindow: function () {
            $("#win-editor > div.container").css("top", $("#win-editor h1:visible").outerHeight() + 0);
            $("#win-editor").hasClass("docked") ? $("#win-code .code canvas").css("top", 0).attr("height", $("#win-code .code").innerHeight()) : WinCode.adjustWindow()
        },
        displayTab: function (b) {
            $("#win-properties").removeClass("looks").removeClass("sounds").removeClass("advanced").removeClass("interfaces").removeClass("notes").addClass(b)
        },
        show: function (b) {
            $("#win-properties").css("height", window.innerHeight * 0.8);
            $("#win-properties").modal();
            $("#win-properties").removeClass("hidden").removeClass("looks").removeClass("sounds").removeClass("advanced").removeClass("interfaces").removeClass("notes").addClass(b);
            b == "looks" && (IDE.editingActor && IDE.editingActor != Runtime.background) && WinProperties.updateCostumes(IDE.editingActor);
            return false
        },
        hide: function () {
            $.modal.close();
            return false
        },
        periodicUpdate: function () {
            if (IDE.editingActor == null) {
                $("#win-editor .stage-properties").removeClass("hidden");
                $("#win-editor .lockedactor-properties").addClass("hidden");
                $("#win-editor .actor-properties").addClass("hidden");
                WinProperties.updateBackgroundDetails()
            } else if (IDE.editingActor.spriteObj) {
                $("#win-editor .stage-properties").addClass("hidden");
                IDE.editingActor.locked ? $("#win-editor .lockedactor-properties").removeClass("hidden") : $("#win-editor .actor-properties").removeClass("hidden");
                WinProperties.updateSpriteDetails(IDE.editingActor)
            } else {
                $("#win-editor .stage-properties").removeClass("hidden");
                $("#win-editor .lockedactor-properties").addClass("hidden");
                $("#win-editor .actor-properties").addClass("hidden");
                WinProperties.updateLibraryDetails(IDE.editingActor)
            }
        },
        updateLibraryDetails: function (b) {
            WinProperties.updateBackgroundDetails();
            $("#sprite-name span").text(g_loc.formatText("wincode.codeforlabel", b.label))
        },
        showLibrary: function (b) {
            WinProperties.showBackground();
            $("#sprite-name span").text(g_loc.formatText("wincode.codeforlabel", b.label))
        },
        update: function () {
            if (IDE.editingActor == null) {
                WinProperties.updateCostumes(Runtime.background);
                WinProperties.updateSounds(Runtime.background);
                WinProperties.updateBackgroundDetails()
            } else if (IDE.editingActor.spriteObj) {
                WinProperties.updateCostumes(IDE.editingActor);
                WinProperties.updateSounds(IDE.editingActor);
                WinProperties.updateSpriteDetails(IDE.editingActor);
                IDE.editingActor.locked && WinProperties.updateInterfaces(IDE.editingActor)
            } else WinProperties.updateLibraryDetails(IDE.editingActor)
        },
        _updateCanvas: function () {
            var b = parseInt($("#bgfixed-width").val()),
                c = parseInt($("#bgfixed-height").val());
            b <= 100 && (b = 600);
            c <= 100 && (c = 400);
            Runtime.stage.setSize(b, c);
            Runtime.background.filtersChanged = true;
            Runtime.background.updateCostume();
            IDE.adjustPanels();
            Runtime.stage.draw();
            return false
        },
        showBackground: function () {
            $("#win-properties").removeClass("tblock");
            $("#win-properties").hasClass("interfaces") && WinProperties.displayTab("looks");
            $("#win-properties .prop-tabs .looks-tab span").text(g_loc.getText("button.tab_scenes"));
            $("#win-properties .tab-container.looks a.add").text(g_loc.getText("dialog.btnaddscene"));
            $("#win-properties .stage").removeClass("hidden");
            $("#win-properties .actors").addClass("hidden");
            WinProperties.updateBackgroundDetails();
            WinProperties.updateCostumes(Runtime.background);
            WinProperties.updateSounds(Runtime.background);
            $("#win-editor .sprite-position").addClass("hidden");
            $("#win-editor").hasClass("docked") ? $("#win-code .code canvas").css("top", 0).attr("height", $("#win-code .code").innerHeight()) : WinCode.adjustWindow();
            WinCode.draw();
            $("#win-editor a.reset").addClass("hidden");
            $("#win-properties .buttons a.unlock").addClass("hidden");
            $("#win-properties .buttons a.clone").addClass("hidden");
            $("#win-properties .buttons a.save").addClass("hidden")
        },
        updateBackgroundDetails: function () {
            $("#win-properties .tab-container.advanced .stage h3").text("Properties for Stage");
            $("#bg-tilemap")[0].checked = Runtime.stage.tileLayer.isTilesEnabled();
            try {
                if (!$("#bg-tilemap-width").is(":focus") && !$("#bg-tilemap-height").is(":focus")) {
                    $("#bg-tilemap-width").val(Runtime.stage.tileLayer.getWidth());
                    $("#bg-tilemap-height").val(Runtime.stage.tileLayer.getHeight())
                }
            } catch (b) { }
            $("#bg-scrollbg")[0].checked =
                Runtime.stage.tileLayer.scrollBgOffset;
            $("#bg-physics")[0].checked = Physics.isSimulationRunning();
            var c = $("#win-properties .stage input[type=radio]");
            if (Runtime.stage.bgtype == "stretch") {
                c[0].checked = false;
                c[1].checked = true;
                c[2].checked = false
            } else if (Runtime.stage.bgtype == "tile") {
                c[0].checked = false;
                c[1].checked = false;
                c[2].checked = true
            } else {
                c[0].checked = true;
                c[1].checked = false;
                c[2].checked = false
            }
            try {
                if (!$("#bgfixed-width").is(":focus") && !$("#bgfixed-height").is(":focus")) {
                    $("#bgfixed-width").attr("disabled",
                        null).val(Runtime.stage.width);
                    $("#bgfixed-height").attr("disabled", null).val(Runtime.stage.height);
                    IDE.adjustPanels()
                }
                $("#bgexpand")[0].checked = Runtime.stage.expand;
                var d = $("#project-name");
                d.is(":focus") || d.val(IDE.currentProjectName ? IDE.currentProjectName : IDE.defaultProjectName);
                d = $("#win-properties .tab-container.advanced .stage textarea");
                d.is(":focus") || d.val(IDE.currentProjectDescription ? IDE.currentProjectDescription : g_loc.getText("dialog.defaultprojdesc"));
                d = $("#bg-gravity-x");
                d.is(":focus") ||
                    d.val(Physics.getGravity().x);
                d = $("#bg-gravity-y");
                d.is(":focus") || d.val(Physics.getGravity().y)
            } catch (e) { }
            WinProperties.updateCostumeSelection(Runtime.background)
        },
        updateCostumeSelection: function (b) {
            var c = $("#win-properties .tab-container.looks ul li"),
                b = b.currentCostume - 1;
            if (b >= 0 && b < c.length) {
                c.removeClass("selected");
                $(c[b]).addClass("selected")
            }
        },
        showSprite: function (b) {
            if (b.locked) {
                $("#win-properties").addClass("tblock");
                WinProperties.displayTab("interfaces")
            } else {
                $("#win-properties").removeClass("tblock");
                $("#win-properties").hasClass("interfaces") && WinProperties.displayTab("looks")
            }
            $("#win-properties .prop-tabs .looks-tab span").text(g_loc.getText("button.tab_costumes"));
            $("#win-properties .tab-container.looks a.add").text(g_loc.getText("dialog.btnaddcostume"));
            $("#win-properties .stage").addClass("hidden");
            $("#win-properties .actors").removeClass("hidden");
            WinProperties.updateCostumes(b);
            WinProperties.updateSounds(b);
            WinProperties.updateSpriteDetails(b);
            IDE.editingActor.locked && WinProperties.updateInterfaces(b);
            $("#win-editor .sprite-position").removeClass("hidden");
            $("#win-editor").hasClass("docked") && $("#win-code .code canvas").css("top", 0).attr("height", $("#win-code .code").innerHeight());
            WinCode.adjustWindow();
            WinCode.draw();
            $("#win-editor a.reset").removeClass("hidden");
            if (b.locked) {
                if (WinProperties.enableUnlock) {
                    $("#win-properties .buttons a.unlock").removeClass("hidden");
                    $("#win-properties .buttons a.clone").removeClass("hidden")
                } else {
                    $("#win-properties .buttons a.unlock").addClass("hidden");
                    $("#win-properties .buttons a.clone").addClass("hidden")
                }
                $("#win-properties .buttons a.save").addClass("hidden")
            } else {
                $("#win-properties .buttons a.unlock").addClass("hidden");
                if (WinProperties.enableUnlock) {
                    $("#win-properties .buttons a.clone").removeClass("hidden");
                    $("#win-properties .buttons a.save").removeClass("hidden")
                } else {
                    $("#win-properties .buttons a.clone").addClass("hidden");
                    $("#win-properties .buttons a.save").addClass("hidden")
                }
            }
        },
        updateSpriteDetails: function (b) {
            b && b != Runtime.stage ? $("#win-properties .tab-container.advanced .actors h3 span:first").text("Properties for " + b.label) : $("#win-properties .tab-container.advanced .actors h3 span:first").text("Properties for Stage");
            $(".sprite-rotate").each(function (c, d) {
                var e = $(d).find("input");
                e[0].checked = b.spriteObj.rotateLock == 0;
                e[1].checked = b.spriteObj.rotateLock == 1;
                e[2].checked = b.spriteObj.rotateLock == 2
            });
            $("input.sprite-dragging").each(function (c, d) {
                d.checked = b.spriteObj.draggable
            });
            b.getCostumeByName(b.currentCostume);
            if (b.id && b.classname)
                for (var c = 0, d = 0; d < Runtime.sprites.length; d++) {
                    var e = Runtime.sprites[d];
                    e.id == b.id && e.classname == b.classname && c++
                }
            $("#sprite-name span").text(b.label);
            $("#sprite-x span").text(Math.round((b.spriteObj.x -
                Runtime.stage.getWidth() / 2) * 10) / 10);
            $("#sprite-y span").text(Math.round((Runtime.stage.getHeight() / 2 - b.spriteObj.y) * 10) / 10);
            d = Math.floor(b.spriteObj.rotation);
            c = $("#sprite-angle").parent().find("em");
            c.css("-webkit-transform", "rotate(" + d + "deg)");
            c.css("-moz-transform", "rotate(" + d + "deg)");
            c.css("-ms-transform", "rotate(" + d + "deg)");
            c = (d + 90) % 360;
            c > 180 && (c = c - 360);
            $("#sprite-angle span").text(c);
            $("#sprite-scale span").text(Math.round(b.spriteObj.scale.x * 1E3) / 10);
            $("#sprite-layer span").text(b.spriteObj.zIndex);
            d = Physics.getSpriteProperties(b.spriteObj);
            c = $("#sprite-density");
            c.is(":focus") || c.val(d.density);
            c = $("#sprite-friction");
            c.is(":focus") || c.val(d.friction);
            c = $("#sprite-restitution");
            c.is(":focus") || c.val(d.restitution);
            c = $("#sprite-geometry input");
            if (d.geometry == "circular") {
                c[0].checked = true;
                c[1].checked = false
            } else {
                c[0].checked = false;
                c[1].checked = true
            }
            $("#sprite-static")[0].checked = d.isStatic;
            $("#sprite-active")[0].checked = d.isActive;
            WinProperties.updateCostumeSelection(b)
        },
        updateCostumes: function (b) {
            b &&
                b != Runtime.stage ? $("#win-properties .tab-container.looks h3").text("Costumes for " + b.label) : $("#win-properties .tab-container.looks h3").text("Costumes for Stage");
            var c = $("#win-properties .looks ul");
            c.empty();
            $("#win-properties .tab-container.looks .avatar").addClass("hidden");
            var d;
            IDE.editingActor && IDE.editingActor.avatarid && (d = RegExp(/avatar:\/\/([0-9a-zA-Z]+)\/([0-9a-zA-Z ]+)\/([0-9]+)/));
            b.skeleton.skeletonData && $("#win-properties .tab-container.looks .avatar").removeClass("hidden");
            $.each(b.costumes,
                function (e, f) {
                    if (!f.hidden) {
                        if (f.imgObj) {
                            var g = $('<li class="costume"><div class="img"></div><div class="costume-details"><div><span><input type="text"/></div> <a class="icon-brush edit"></a> <a class="icon-copy-2-2 copy"></a></span></div><a href="#" class="button delete icon-cancel-2"></a></li>');
                            if (f.imgPreview) {
                                var h = new Image;
                                h.src = f.imgPreview;
                                g.find(".img").append(h);
                                g.find(".costume-details").css("visibility", "hidden");
                                g.find("a.delete").detach();
                                g.find("a.edit").detach();
                                g.find("a.copy").detach()
                            } else {
                                g.find(".img").append($(f.imgObj).clone());
                                h = f.img;
                                if (d)
                                    if ((h = d.exec(h)) && h.length == 4) {
                                        avatarid = h[1];
                                        IDE.editingActor.avatarid = avatarid;
                                        g.find("a.edit").detach();
                                        g.find("a.copy").detach()
                                    }
                            }
                        } else if ((h = f.img) && h.substring(0, 9) != "avatar://" && h.substring(0, 8) != "block://") g = $('<li class="costume"><div class="img"><img src="' + h + '"/></div><div class="costume-details"><div><span><input type="text"/></span></div><a class="icon-brush edit"></a> <a class="icon-copy-2-2 copy"></a></span></div><a href="#" class="button delete icon-cancel-2"></a></li>');
                        else {
                            g = $('<li class="costume"><div class="img"><img src="ide/imgs/blank.png"/></div><div class="costume-details"><div><span><input type="text"/></span></div><a class="icon-brush edit"></a> <a class="icon-copy-2-2 copy"></a></span></div><a href="#" class="button delete icon-cancel-2"></a></li>');
                            if (d)
                                if ((h = d.exec(h)) && h.length == 4) {
                                    avatarid = h[1];
                                    IDE.editingActor.avatarid = avatarid;
                                    g.find("a.edit").detach();
                                    g.find("a.copy").detach()
                                }
                        }
                        if (b.skeleton.skeletonData && f.imgPreview) {
                            $("#win-properties .tab-container.looks .avatar").removeClass("hidden");
                            $.each(b.skeleton.skeletonData.animations, function (d, e) {
                                var g = $('<li class="animation"><div class="img"><img src="ide/imgs/blank.png"/></div><div class="costume-details"><div>Preview: <em>' + e.name + "</em></div></li>");
                                g.find("img")[0].src = f.imgPreview;
                                c.append(g);
                                g.click(function () {
                                    b.setCostumeByName(1);
                                    $("#win-properties .tab-container.looks li").removeClass("selected");
                                    $(this).addClass("selected");
                                    b.addAnimation({
                                        animation: "costume",
                                        name: "",
                                        startTime: 0,
                                        timeout: e.duration * 1E3,
                                        fps: 30,
                                        costumePrefix: e.name,
                                        numCostumes: -1,
                                        lastFrame: 0,
                                        easing: Easing.easeLinear
                                    });
                                    window.requestAnimFrame(Runtime.runner);
                                    return false
                                })
                            })
                        } else {
                            c.append(g);
                            g.data("costume", f)
                        }
                        b.currentCostume - 1 == e && g.addClass("selected");
                        h = g.find("input");
                        f.imgPreview || g.click(function () {
                            IDE.dirty();
                            var c = $(this).find("input").val();
                            b.setCostumeByName(c);
                            $("#win-properties .tab-container.looks li").removeClass("selected");
                            $(this).addClass("selected");
                            return false
                        });
                        $(h[0]).val(f.name);
                        $(h[0]).blur(function () {
                            IDE.dirty();
                            for (var c = $(this).val(),
                                    d = false, e = 0; e < b.costumes[e]; e++)
                                if (b.costumes[e].name == c) {
                                    d = true;
                                    break
                                }
                            d ? $(this).val(f.name) : f.name = $(this).val()
                        }).keypress(function (b) {
                            b.which == 13 && $(this)[0].blur()
                        });
                        g.find("a.edit").click(function () {
                            var b = $(this).parent().parent(),
                                c = $(this).parent().parent().data("costume"),
                                d = c.imgObj ? c.imgObj.origSrc ? c.imgObj.origSrc : c.imgObj.src : c.img,
                                e = IDE.editingActor ? g_loc.formatText("title.paint_edit_costume", IDE.editingActor.label) : g_loc.getText("title.paint_edit_bg");
                            window.WinPaint && WinPaint.edit(e,
                                d, c.cx, c.cy,
                                function (d, e, f) {
                                    IDE.dirty();
                                    var g;
                                    g = IDE.editingActor != null ? IDE.editingActor : Runtime.background;
                                    c.img = d;
                                    c.cx = e;
                                    c.cy = f;
                                    generateImageFromUrl(c.img, function (d) {
                                        c.imgObj = d;
                                        g && g != Runtime.background ? g.spriteObj.setSpriteImg(c.imgObj, e, f) : Runtime.stage.setBackgroundImg(d);
                                        b.find("img").attr("src", $(d).attr("src"))
                                    })
                                });
                            $.modal.close();
                            return false
                        });
                        g.find("a.copy").click(function () {
                            IDE.dirty();
                            $(this).parent().parent();
                            var b = $(this).parent().parent().data("costume"),
                                c = b.img;
                            if (IDE.editingActor ==
                                null) {
                                b = Runtime.background.addCostume({
                                    img: c,
                                    cx: b.cx,
                                    cy: b.cy
                                });
                                Runtime.background.setCostumeByName(b.name);
                                WinProperties.updateCostumes(Runtime.background)
                            } else {
                                var d = IDE.editingActor,
                                    b = d.addCostume({
                                        img: c,
                                        cx: b.cx,
                                        cy: b.cy
                                    });
                                d.setCostumeByName(b.name);
                                WinProperties.updateCostumes(d)
                            }
                        });
                        g.find("a.delete").click(function () {
                            var c = $(this).parent().find("input").val();
                            (b == Runtime.background || b.costumes.length > 1) && IDE.confirmDialog(g_loc.formatText("winproperties.confirmdeletecostume", c), function () {
                                IDE.dirty();
                                var d = b.getCostumeByName(c);
                                b.deleteCostumeByName(c);
                                WinProperties.updateCostumes(b);
                                IDE.Clipboard.undoDeleteCostume(b, d[1], d[0])
                            });
                            return false
                        })
                    }
                });
            c.sortable({
                items: "li.costume",
                stop: function () {
                    IDE.dirty();
                    b.costumes = b.skeleton.skeletonData ? [b.costumes[0]] : [];
                    $("#win-properties .tab-container.looks li.costume").each(function (c, d) {
                        var g = $(d).data("costume");
                        b.costumes.push(g)
                    });
                    b.currentCostume = b.currentCostume + 1;
                    b.setCostumeByName(b.currentCostume - 1)
                }
            });
            b != Runtime.background && b.costumes.length <=
                1 && $("#win-properties .tab-container.looks li a.delete").detach()
        },
        updateSounds: function (b) {
            b && b != Runtime.stage ? $("#win-properties .tab-container.sounds h3").text("Sounds for " + b.label) : $("#win-properties .tab-container.sounds h3").text("Sounds for Stage");
            var c = $("#win-properties .tab-container.sounds ul");
            c.empty().sortable({
                stop: function () {
                    IDE.dirty();
                    b.sounds = [];
                    $("#win-properties .tab-container.sounds li").each(function (c, e) {
                        var f = $(e).data("sound");
                        b.sounds.push(f)
                    })
                }
            });
            $.each(b.sounds, function (d,
                e) {
                if (!e.hidden) {
                    var f = $('<li><span class="icon-volume-high"></span><div class="sound-details"><input type="text"/> <a class="buttons play icon-play-2" href="#"></a><a href="#" class="buttons stop icon-stop"></div></a> <a href="#" class="button delete icon-cancel-2"></a></li>');
                    c.append(f);
                    f.data("sound", e);
                    var g = f.find("input")[0];
                    $(g).val(e.name);
                    $(g).blur(function () {
                        IDE.dirty();
                        for (var c = $(this).val(), d = false, f = 0; f < b.sounds[f]; f++)
                            if (b.sounds[f].name == c) {
                                d = true;
                                break
                            }
                        d ? $(this).val(e.name) : e.name =
                            $(this).val()
                    }).keypress(function (b) {
                        b.which == 13 && $(this)[0].blur()
                    });
                    g = f.find("a.buttons");
                    f.find("a.play").click(function () {
                        if (!e.soundObj) e.soundObj = soundManager.createSound({
                            id: "s" + Math.random(),
                            url: e.sound
                        });
                        e.soundObj && e.soundObj.play();
                        return false
                    });
                    f.find("a.stop").click(function () {
                        e.soundObj.stop();
                        return false
                    });
                    f.find("a.delete").click(function () {
                        var c = $(this).parent().find("input").val();
                        IDE.confirmDialog(g_loc.formatText("winproperties.confirmdeletesound", c), function () {
                            IDE.dirty();
                            var d =
                                b.getSoundByName(c);
                            b.deleteSoundByName(c);
                            WinProperties.updateSounds(b);
                            IDE.Clipboard.undoDeleteSound(b, d[1], d[0])
                        });
                        return false
                    });
                    f.click(function () {
                        IDE.dirty();
                        $("#win-properties .tab-container.sounds li").removeClass("selected");
                        $(this).addClass("selected");
                        return false
                    })
                }
            })
        },
        updateInterfaces: function (b) {
            WinProperties.makeInterfacesFor(b);
            $("#win-properties .tab-container.interfaces .inbound h3").text(g_loc.formatText("interfaces.receive", b.label));
            $("#win-properties .tab-container.interfaces .inbound p").html(g_loc.formatText("interfaces.receivehelp",
                b.label));
            $("#win-properties .tab-container.interfaces .outbound h3").text(g_loc.formatText("interfaces.send", b.label));
            b.documentation.description ? $("#win-properties .tab-container.interfaces .description p").text(b.documentation.description).parent().removeClass("hidden") : $("#win-properties .tab-container.interfaces .description").addClass("hidden");
            var c = b.documentation.inboundEvents,
                d = $("#win-properties .tab-container.interfaces .inbound ul");
            d.empty();
            for (var e = 0, f = null, g = 0; g < c.length; g++)
                if (c[g].visible ===
                    void 0 || c[g].visible) {
                    e++;
                    var h = $("<li><p>" + c[g].description + "</p><span></span></li>");
                    d.append(h);
                    if (c[g].name.charAt(0) == "[") {
                        var f = c[g].name.substring(1, c[g].name.length - 1),
                            j = f.indexOf("|"),
                            k;
                        if (j > 0) {
                            k = f.substring(j + 1);
                            f = f.substring(0, j)
                        }
                        if (j = findStepByFunc(f)) {
                            l = new Block(j);
                            if (k) {
                                l.label.setValue(0, k);
                                h.attr("param", k)
                            }
                            h.attr("func", f)
                        }
                    } else {
                        l = new Block({
                            cat: "flow",
                            label: "when I receive {events}",
                            hasFlap: false,
                            func: "registerBroadcastTrigger"
                        });
                        l.label.setValue(0, c[g].name);
                        h.attr("func", "registerBroadcastTrigger");
                        h.attr("param", c[g].name)
                    } (f = l.getImage()) && h.find("span").append(f);
                    h.css("cursor", "pointer").mouseenter(function () {
                        $(this).find("p").addClass("selected")
                    }).mouseleave(function () {
                        $(this).find("p").removeClass("selected")
                    }).click(function () {
                        $(this).parent().find("li p").removeClass("playing");
                        $(this).find("p").addClass("playing");
                        var b = $(this).attr("func"),
                            c = $(this).attr("param");
                        b == "registerFlagTrigger" ? Runtime.triggerFlag(IDE.editingActor) : b == "registerSpriteTrigger" ? Runtime.spriteClicked(IDE.editingActor) :
                            b == "registerKeyTrigger" ? Runtime.triggerKeyDown(c) : b == "registerBroadcastTrigger" && Runtime.sendEvent(c, IDE.editingActor.label, "hello");
                        WinStage.showStarted()
                    })
                }
            e <= 0 ? d.parent().addClass("hidden") : d.parent().removeClass("hidden");
            c = b.documentation.outboundEvents;
            d = $("#win-properties .tab-container.interfaces .outbound ul");
            d.empty();
            e = 0;
            f = null;
            for (g = 0; g < c.length; g++)
                if (c[g].visible === void 0 || c[g].visible) {
                    e++;
                    h = $("<li><p>" + c[g].description + "</p><span></span></li>");
                    d.append(h);
                    var l = new Block({
                        cat: "flow",
                        label: "broadcast {events}",
                        func: "blockControlBroadcast"
                    });
                    l.label.setValue(0, c[g].name);
                    (f = l.getImage()) && h.find("span").append(f)
                }
            e <= 0 ? d.parent().addClass("hidden") : d.parent().removeClass("hidden");
            l = b.documentation.properties;
            d = $("#win-properties .tab-container.interfaces .objprops ul");
            d.empty();
            e = 0;
            f = null;
            for (g = 0; g < l.length; g++)
                if (l[g].visible === void 0 || l[g].visible) {
                    e++;
                    h = $("<li><em>" + l[g].name + "</em><span>" + (l[g].description ? l[g].description : "&nbsp;") + '</span><span><input name="' + l[g].name +
                        '" type="text"/></span></li>');
                    h.attr("name", l[g].name);
                    d.append(h);
                    if (b.varDefaults && b.varDefaults[l[g].name] !== void 0) var m = b.varDefaults[l[g].name];
                    b.variables && b.variables[l[g].name] !== void 0 && (m = b.variables[l[g].name]);
                    h.find("input").val(m).blur(function () {
                        IDE.dirty();
                        var c = $(this).val();
                        if (c == "true") c = true;
                        else if (c == "false") c = false;
                        else {
                            var d = "" + c,
                                c = parseFloat(c);
                            "" + c != d && (c = d)
                        }
                        b.variables[$(this).attr("name")] = c;
                        b.locked || (b.varDefaults[$(this).attr("name")] = c)
                    }).keydown(function (b) {
                        if (b.keyCode ==
                            13) {
                            $(".choice-chooser").detach();
                            $(this)[0].blur()
                        } else if (b.keyCode == 9) {
                            $(".choice-chooser").detach();
                            $(this)[0].blur()
                        }
                    }).click(function () {
                        var b = $(this).val(),
                            c = [];
                        if (parseFloat(b) == "" + b) return false;
                        if (b == "true" || b == "false") {
                            c.push("true");
                            c.push("false")
                        } else {
                            c.push("mouse-pointer");
                            for (b = 0; b < Runtime.sprites.length; b++) c.push(Runtime.sprites[b].label)
                        }
                        var d = $('<div class="choice-chooser"><ul></ul></div>');
                        d.css("left", $(this).offset().left).css("top", $(this).offset().top + $(this).outerHeight() +
                            4).css("z-index", "30000").mouseleave(function () {
                                $(".choice-chooser").detach()
                            });
                        $("body").append(d);
                        for (var d = d.find("ul"), e = this, b = 0; b < c.length; b++) {
                            var f = $("<li>" + c[b] + "</li>");
                            d.append(f);
                            f.click(function () {
                                $(e)[0].focus();
                                $(e).val($(this).text());
                                $(e)[0].blur();
                                $(".choice-chooser").detach()
                            })
                        }
                        d = $(".choice-chooser");
                        d.offset().top + d.outerHeight() > window.innerHeight && d.css("top", $(this).offset().top - 4 - d.outerHeight())
                    })
                }
            e <= 0 ? d.parent().addClass("hidden") : d.parent().removeClass("hidden")
        },
        makeInterfacesFor: function (b) {
            var c;
            if (b == null) {
                c = "stage";
                b = Runtime.background
            } else c = b.label;
            var d = Runtime.findInboundEventsOf(c),
                e = Runtime.findOutboundEventsOf(c);
            c = Runtime.findVariablesOf(c);
            if (!b.documentation) b.documentation = {
                description: "",
                inboundEvents: [],
                outboundEvents: [],
                properties: []
            };
            b = b.documentation;
            if (!b.inboundEvents) b.inboundEvents = [];
            for (var f = 0; f < b.inboundEvents.length; f++) d.indexOf(b.inboundEvents[f].name) < 0 && b.inboundEvents.splice(f, 1);
            for (f = 0; f < d.length; f++) {
                for (var g = false, h = 0; h < b.inboundEvents.length; h++)
                    if (d[f] ==
                        b.inboundEvents[h].name) {
                        g = true;
                        break
                    }
                g || b.inboundEvents.push({
                    name: d[f],
                    description: "",
                    visible: true
                })
            }
            if (!b.outboundEvents) b.outboundEvents = [];
            for (f = 0; f < b.outboundEvents.length; f++) e.indexOf(b.outboundEvents[f].name) < 0 && b.outboundEvents.splice(f, 1);
            for (f = 0; f < e.length; f++) {
                g = false;
                for (h = 0; h < b.outboundEvents.length; h++)
                    if (e[f] == b.outboundEvents[h].name) {
                        g = true;
                        break
                    }
                g || b.outboundEvents.push({
                    name: e[f],
                    description: "",
                    visible: true
                })
            }
            if (!b.properties) b.properties = [];
            for (f = 0; f < b.properties.length; f++) c.indexOf(b.properties[f].name) <
                0 && b.properties.splice(f, 1);
            for (f = 0; f < c.length; f++) {
                g = false;
                for (h = 0; h < b.properties.length; h++)
                    if (c[f] == b.properties[h].name) {
                        g = true;
                        break
                    }
                g || b.properties.push({
                    name: c[f],
                    description: "",
                    visible: true
                })
            }
        },
        showInterfacesFor: function (b) {
            if (b == null) b = Runtime.background;
            if (b.locked) {
                WinProperties.makeInterfacesFor(b);
                var c = b.documentation.inboundEvents,
                    d = b.documentation.outboundEvents,
                    e = b.documentation.properties;
                $("#win-properties .tab-container.notes .description textarea").detach();
                $("#win-properties .tab-container.notes .description").append("<textarea></textarea>");
                $("#win-properties .tab-container.notes .description textarea").val(b.documentation.description).blur(function () {
                    IDE.dirty();
                    b.documentation.description = $(this).val()
                }).keypress(function (b) {
                    b.which == 13 && $(this).blur()
                });
                if (c.length == 0) $("#win-properties .tab-container.notes .inbound").addClass("hidden");
                else {
                    var f = $("#win-properties .tab-container.notes .inbound").removeClass("hidden").find("ul");
                    f.empty();
                    for (var g = 0; g < c.length; g++) {
                        var h = $('<li><p><input class="description" idx="' + g + '" type="text"/></p><span></span></li>');
                        f.append(h);
                        var j;
                        if (c[g].name.charAt(0) == "[") {
                            var k = c[g].name.substring(1, c[g].name.length - 1),
                                l = k.indexOf("|"),
                                m;
                            if (l > 0) {
                                m = k.substring(l + 1);
                                k = k.substring(0, l)
                            }
                            if (k = findStepByFunc(k)) {
                                j = new Block(k);
                                m && j.label.setValue(0, m)
                            }
                        } else {
                            j = new Block({
                                cat: "flow",
                                label: "when I receive {events}",
                                hasFlap: false,
                                func: "registerBroadcastTrigger"
                            });
                            j.label.setValue(0, c[g].name)
                        }
                        if (j) {
                            h.find("span").append(j.getImage());
                            h.find("input").val(c[g].description).blur(function () {
                                IDE.dirty();
                                c[parseInt($(this).attr("idx"))].description =
                                    $(this).val()
                            }).keypress(function (b) {
                                b.which == 13 && $(this).blur()
                            })
                        }
                    }
                }
                if (d.length == 0) $("#win-properties .tab-container.notes .outbound").addClass("hidden");
                else {
                    f = $("#win-properties .tab-container.notes .outbound").removeClass("hidden").find("ul");
                    f.empty();
                    for (g = 0; g < d.length; g++) {
                        h = $('<li><span></span><input class="description" idx="' + g + '" type="text"/></li>');
                        f.append(h);
                        j = new Block({
                            cat: "flow",
                            label: "broadcast {events}",
                            func: "blockControlBroadcast"
                        });
                        j.label.setValue(0, d[g].name);
                        h.find("span").append(j.getImage());
                        h.find("input").val(d[g].description).blur(function () {
                            IDE.dirty();
                            d[parseInt($(this).attr("idx"))].description = $(this).val()
                        }).keypress(function (b) {
                            b.which == 13 && $(this).blur()
                        })
                    }
                }
                if (e.length == 0) $("#win-properties .tab-container.notes .objprops").addClass("hidden");
                else {
                    f = $("#win-properties .tab-container.notes .objprops").removeClass("hidden").find("ul");
                    f.empty();
                    for (g = 0; g < e.length; g++) {
                        h = $('<li><span></span><input class="smalldescription" idx="' + g + '" type="text"/> = <input class="default" idx="' +
                            g + '" type="text"/></li>');
                        f.append(h);
                        j = new Label({
                            cat: "var",
                            label: e[g].name
                        });
                        h.find("span").append(j.getImage());
                        h.find("input.smalldescription").val(e[g].description).blur(function () {
                            IDE.dirty();
                            e[parseInt($(this).attr("idx"))].description = $(this).val()
                        }).keypress(function (b) {
                            b.which == 13 && $(this).blur()
                        });
                        h.find("input.default").val(b.variables[e[g].name]).blur(function () {
                            IDE.dirty();
                            var c = $(this).val();
                            if (c == "true") c = true;
                            else if (c == "false") c = false;
                            else {
                                var d = "" + c,
                                    c = parseFloat(c);
                                "" + c != d && (c =
                                    d)
                            }
                            b.variables[e[parseInt($(this).attr("idx"))].name] = c
                        }).keypress(function (b) {
                            b.which == 13 && $(this).blur()
                        })
                    }
                }
            }
        }
    },
    WinTools = {
        hidden: !1,
        container: null,
        hideInlineHelp: !1,
        hideGeneralHelp: !1,
        maxWidth: 0,
        maxHeight: 0,
        maxImgWidth: 80,
        maxImgHeight: 80,
        _skipCodeSearch: !1,
        _objects: [],
        _helpTimeoutId: -1,
        _helpTimeout: 5E3,
        _helpClicked: !1,
        _searchTimeout: 0,
        tblockTab: new Image,
        _searchTimeoutId: 0,
        _lastSearchTerm: "",
        enable: function (b) {
            b ? $("#win-code").addClass("hastools") : $("#win-code").removeClass("hastools");
            WinCode.adjustWindow();
            WinTools.adjustWindow()
        },
        enableSearch: function (b) {
            b ? $("#win-tools .palette .tools-code").addClass("hassearch") : $("#win-tools .palette .tools-code").removeClass("hassearch")
        },
        enableCat: function (b) {
            b ? $("#win-tools .tools-code").addClass("hascat") : $("#win-tools .tools-code").removeClass("hascat")
        },
        init: function () {
            $("#win-tools").removeClass("hidden");
            WinTools.tblockTab.src = "ide/imgs/tblock_tab.png";
            $("#win-tools .palette .blocks").bind("dragstart", function () {
                return false
            }).bind("click", WinTools._mouseClick);
            $("#win-tools > .tools .tab.notes").click(function () {
                $("#win-tools").addClass("showannotations");
                return false
            });
            $("#win-tools > .tools .tab.blocks").click(function () {
                $("#win-tools").removeClass("showannotations");
                WinTools.adjustWindow();
                return false
            });
            $("#win-tools a.toolsshow").click(function () {
                $("#win-code").toggleClass("mintools");
                WinCode.adjustWindow();
                WinTools.adjustWindow();
                IDE.adjustPanels();
                return false
            });
            $("#win-tools .search input").focus(function () {
                if (!$(this).val()) {
                    WinCode._searchIndex = -1;
                    WinCode._searchTerm = "";
                    WinCode.clearSelection();
                    FocusManager.clearFocus();
                    $("#win-tools .palette .tools-code").removeClass("searchstatus");
                    WinTools.adjustWindow()
                }
            }).click(function () {
                $(this).focus().select()
            }).keyup(function (b) {
                window.clearTimeout(WinTools._searchTimeoutId);
                b.keyCode == 13 ? WinTools.handleShowSearch(b) : WinTools._searchTimeoutId = window.setTimeout(function () {
                    WinTools.handleShowSearch(b)
                }, 1E3)
            });
            $("#win-tools .search .search-clear").click(function () {
                WinTools.hideSearch();
                return false
            });
            $("#win-tools .searchshow a.prev").click(function () {
                WinCode._handlePreviousSearch();
                WinTools._updateSearchButtons();
                return false
            });
            $("#win-tools .searchshow a.next").click(function () {
                WinCode._handleNextSearch();
                WinTools._updateSearchButtons();
                return false
            });
            $("#win-tools .blocks").mousemove(WinTools._mouseMove);
            $("#win-tools .palette .blocks").bind("mouseleave", function () {
                $(".tooltip").detach();
                window.clearTimeout(WinTools._helpTimeoutId);
                WinTools._helpClicked || $("#win-tools .palette .blocks > div.selected").removeClass("selected")
            });
            $("#win-tools .tabs .common").click(function () {
                $("#win-tools .tabs .tab").removeClass("active");
                $(this).addClass("active");
                $("#win-tools .categories").removeClass("hover");
                WinTools.showCategory("common");
                return false
            });
            $("#win-tools .tabs .category").click(function () {
                if ($(this).hasClass("active")) $("#win-tools .categories").addClass("hover");
                else {
                    $("#win-tools .tabs .tab").removeClass("active");
                    $(this).addClass("active");
                    $("#win-tools .categories").removeClass("hover");
                    var b = $(this).attr("cat");
                    b ==
                        "variables" ? WinTools.showVariables() : b == "functions" ? WinTools.showFunctions() : WinTools.showCategory(b)
                }
                return false
            });
            $("#win-tools .tabs .pin").click(function () {
                $("#win-tools").toggleClass("pin").find(".categories").removeClass("hover");
                $("#win-tools").hasClass("pin") ? setPreference("category-pin", "on") : setPreference("category-pin", "off");
                WinTools.adjustWindow();
                return false
            }).bind("mouseenter", function () {
                $("#win-tools .categories").addClass("hover");
                WinTools.adjustWindow()
            });
            $("#win-tools .categories").bind("mouseleave",
                function () {
                    $("#win-tools .categories").removeClass("hover");
                    WinTools.adjustWindow()
                });
            WinTools.reset();
            WinTools.adjustWindow();
            WinCode.addChangeListener(WinTools.updateFunctions);
            $("#win-tools .tabs a.search").click(function () {
                $("#win-tools .tools-code").toggleClass("hassearch");
                WinTools.adjustWindow();
                return false
            })
        },
        minimize: function (b) {
            if (b) $("#win-code").addClass("mintools");
            else {
                $("#win-code").removeClass("mintools");
                WinTools.reset();
                WinTools.adjustWindow()
            }
        },
        _handleBlockHelp: function (b, c) {
            if (!window.RenderCode ||
                !RenderCode.isCode()) {
                var d = $("#win-tools .palette .blocks"),
                    e = null;
                if (c.note) e = [c.note];
                else if (c.func == "blockControlCall" || c.func == "valueControlCall") {
                    var f = IDE.editingActor;
                    if (!f) f = Runtime.background;
                    for (var g = 0; g < f.scripts.length; g++) {
                        var h = f.scripts[g];
                        if (h.func == "registerFunction" && h.name == c.name) {
                            e = [];
                            WinTools._getFunctionDocs(e, h.next);
                            e.length <= 0 && (e = null);
                            break
                        }
                    }
                } else if (c.func == "blockControlCallLibrary" || c.func == "valueControlCallLibrary") {
                    g = c.name.split("::");
                    if (g.length > 1) {
                        var f = g[1],
                            g = g[0],
                            j = Runtime.getLibraryByName(g);
                        if (j)
                            for (g = 0; g < j.scripts.length; g++) {
                                h = j.scripts[g];
                                if (h.func == "registerFunction" && h.name == f) {
                                    e = [];
                                    WinTools._getFunctionDocs(e, h.next);
                                    e.length <= 0 && (e = null);
                                    break
                                }
                            }
                    }
                }
                if (e) {
                    d.find(">div").removeClass("selected").find(".info").detach();
                    b.remove("div.info");
                    h = $('<div class="info"></div>');
                    f = $('<div class="description"></div>');
                    for (g = 0; g < e.length; g++) f.append("<p>" + e[g] + "</p>");
                    f.find("span.script q").each(function () {
                        var b = $(this).text(),
                            b = JSON.parse(b),
                            b = ObjectIO.deserializeScriptStep(b);
                        $(this).css("display", "none").parent().append(b.getImage())
                    });
                    h.append(f);
                    b.append(h).addClass("selected")
                } else if (!IDE.isMC && c.func == "valueVar") {
                    d.find(">div").removeClass("selected").find(".info").detach();
                    h = $('<div class="info"></div>');
                    h.append('<span class="value">Value: ' + propertyGet(c.labelText, IDE.editingActor ? IDE.editingActor.label : "") + "</span>");
                    if (!WinTools.hideGeneralHelp && IDE.editingActor && IDE.editingActor.classname != "watcher") {
                        f = $('<div class="buttons"></div>');
                        $addWatcher = $('<a href="#" class="btn-round micro action">Add Watcher</a>');
                        $addWatcher.click(function () {
                            c.watchable == "global" ? Runtime.addWatcher(null, c) : Runtime.addWatcher(IDE.editingActor, c);
                            return false
                        });
                        f.append($addWatcher);
                        h.append(f);
                        b.remove("div.info");
                        f = $('<div class="description"></div>');
                        h.append(f);
                        b.append(h);
                        b.addClass("selected")
                    }
                } else $.ajax({
                    url: "ide/help/blockhelp",
                    data: {
                        t: IDE.isMC ? "minecraft" : "",
                        f: c.func,
                        n: c.name ? c.name : ""
                    },
                    success: function (e) {
                        d.find(">div").removeClass("selected").find(".info").detach();
                        var f = $('<div class="info"></div>'),
                            g = null;
                        if (c.watchable ||
                            c.func == "valueVar") {
                            f.append('<span class="value">Value: ' + propertyGet(c.labelText, IDE.editingActor ? IDE.editingActor.label : "") + "</span>");
                            if (!WinTools.hideGeneralHelp && IDE.editingActor && IDE.editingActor.classname != "watcher") {
                                var h = $('<div class="buttons"></div>'),
                                    g = $('<a href="#" class="btn-round micro action">Add Watcher</a>');
                                g.click(function () {
                                    c.watchable == "global" ? Runtime.addWatcher(null, c) : Runtime.addWatcher(IDE.editingActor, c);
                                    return false
                                });
                                h.append(g);
                                f.append(h)
                            }
                        }
                        if (e != "error") {
                            e = JSON.parse(e);
                            b.remove("div.info");
                            h = $('<div class="description"></div>');
                            h.append(e.answer);
                            h.find("span.script q").each(function () {
                                var b = $(this).text(),
                                    b = JSON.parse(b),
                                    b = ObjectIO.deserializeScriptStep(b);
                                $(this).css("display", "none").parent().append(b.getImage())
                            });
                            if (!WinTools.hideGeneralHelp) {
                                e = $('<a href="#" class="more">More in Help</a>');
                                e.click(function () {
                                    Help.cmdHelp("@question " + c.func);
                                    f.parent().removeClass("selected");
                                    f.detach();
                                    return false
                                });
                                h.append(e)
                            }
                            f.append(h);
                            b.append(f);
                            b.addClass("selected")
                        } else if (g) {
                            b.append(f);
                            b.addClass("selected")
                        }
                    }
                })
            }
        },
        _mouseMove: function (b) {
            window.clearTimeout(WinTools._helpTimeoutId);
            var c = b.pageX,
                d = b.pageY;
            if ($("#win-code").hasClass("hastools") && !$("#win-tools").hasClass("hidden")) {
                var e = $("#win-tools .palette .blocks");
                if (c >= e.offset().left && c <= e.offset().left + e.outerWidth() && d >= e.offset().top && d <= e.offset().top + e.outerHeight()) {
                    var f = null;
                    e.find(".draggable").each(function (b, e) {
                        var g = $(e),
                            h = g.offset();
                        if (c >= h.left && c < h.left + g.outerWidth() && d >= h.top && d < h.top + g.outerHeight()) {
                            f = g;
                            return false
                        }
                    });
                    if (f) {
                        var g = f.data("draggable");
                        if (g.disabled) {
                            var h = true,
                                e = $(".tooltip");
                            if (e.length == 0) {
                                e = $('<div class="tooltip">' + g_loc.getText("wintools.disabledtooltip") + "</div>");
                                $("body").append(e)
                            }
                            e.css("top", b.pageY).css("left", b.pageX)
                        } else if (g instanceof Label && g.func == "valueVar") {
                            h = true;
                            e = $(".tooltip");
                            if (e.length == 0) {
                                e = '<div class="tooltip">';
                                if (g.isGlobal) var j = Runtime.background.varDefaults[g.name],
                                    e = Runtime.background.cloudVariables && Runtime.background.cloudVariables[g.name] ? typeof j ==
                                    "string" ? e + ('[Cloud] Default: "' + j + '" - ') : typeof j == "number" ? e + ("[Cloud] Default: " + j + " - ") : e + "[Cloud] " : typeof j == "string" ? e + ('[Global] Default: "' + j + '" - ') : typeof j == "number" ? e + ("[Global] Default: " + j + " - ") : e + "[Global] ";
                                else if (IDE.editingActor) {
                                    j = IDE.editingActor.varDefaults[g.name];
                                    e = typeof j == "string" ? e + ('[Local] Default: "' + j + '" - ') : typeof j == "number" ? e + ("[Local] Default: " + j + " - ") : e + "[Local] "
                                }
                                j = g.isGlobal ? Runtime.background.variables[g.name] : IDE.editingActor.variables[g.name];
                                typeof j ==
                                    "string" ? e = e + ('Current: "' + j + '"') : typeof j == "number" && (e = e + ("Current: " + j));
                                e = $(e + "</div>");
                                $("body").append(e)
                            }
                            e.css("top", b.pageY).css("left", b.pageX)
                        } else if (!WinTools.hideInlineHelp) WinTools._helpTimeoutId = window.setTimeout(function () {
                            WinTools._handleBlockHelp(f, g);
                            WinTools._helpClicked = false
                        }, WinTools._helpTimeout);
                        h || $(".tooltip").detach();
                        $("#tools-code").css("cursor", "pointer")
                    } else $(".tooltip").detach()
                } else $(".tooltip").detach()
            } else $(".tooltip").detach()
        },
        reset: function () {
            WinTools.container =
                $("#win-tools .categories ul");
            WinTools.container.empty();
            var b = null;
            g_palette.length < 2 ? $("#win-tools .palette .tools-code").removeClass("hascat") : $("#win-tools .palette .tools-code").addClass("hascat");
            for (var c = 0; c < g_palette.length; c++)
                if (!g_palette[c].hidden) {
                    var d = g_palette[c].cat,
                        e = g_palette[c].label;
                    b || (b = d);
                    d = $('<li cat="' + d + '" class="' + d + '">' + e + "</li>");
                    WinTools.container.append(d)
                }
            WinTools.container.find("li").click(WinTools.handleShowCategory);
            for (c = 0; c < Runtime.sprites.length; c++) WinTools.trackActor(Runtime.sprites[c]);
            for (c = 0; c < Runtime.libs.length; c++) WinTools.trackLibrary(Runtime.libs[c]);
            WinTools.showCategory(b);
            WinTools.adjustWindow()
        },
        showCat: function (b, c) {
            for (var d = false, e = 0; e < g_palette.length; e++)
                if (g_palette[e].cat == b) {
                    g_palette[e].hidden = !c;
                    d = true
                }
            d && WinTools.reset()
        },
        adjustWindow: function () {
            var b = $(".tools-resize-handle").offset().top - $(".toolbar-top").outerHeight(),
                b = b - $("#win-annotation").position().top;
            b < 0 && (b = 0);
            if (!$("#win-media-sidebar").is(":visible")) {
                $("#win-annotation .expanded").removeClass("hidden");
                $("#win-annotation .collapsed").addClass("hidden")
            }
            b > window.innerHeight - $(".toolbar-top").outerHeight() - 8 && (b = window.innerHeight - $(".toolbar-top").outerHeight() - 8);
            $("#win-annotation").parents("#win-tools").length > 0 && $("#win-annotation").css("height", b);
            b = b + $("#win-annotation").position().top;
            $("#win-tools .palette").css("top", b);
            $("#win-annotation").hasClass("editmode") ? $(".deletemask").css("top", b) : $(".deletemask").css("top", "");
            b = $("#win-tools .palette div.categories:visible").outerHeight();
            b =
                b + $("#win-tools .palette div.search:visible").outerHeight();
            b = b + $("#win-tools .palette div.searchshow:visible").outerHeight();
            $("#win-tools .palette .blocks").css("top", b)
        },
        show: function () { },
        hide: function () { },
        trackLibrary: function (b) {
            var c;
            c = $('<li class="library" cat="library" library="' + b.classname + '">' + b.label + "</li>");
            c.data("library", b);
            WinTools.container.find("hr").length == 0 && WinTools.container.append("<hr/>");
            WinTools.container.append(c);
            c.click(WinTools.handleShowLibrary)
        },
        trackActor: function (b) {
            if (b !=
                Runtime.background && b.locked) {
                var c = false;
                WinTools.container.find("li.actor").each(function (d, f) {
                    if ($(f).data("sprite") == b) {
                        $(f).attr("cat", b.label);
                        $(f).find("img").attr("alt", b.classname ? b.classname : b.label).attr("title", b.classname ? b.classname : b.label);
                        WinTools.showActor(null);
                        c = true;
                        return false
                    }
                    if (b.classname && $(f).attr("classname") == b.classname) {
                        c = true;
                        return false
                    }
                });
                if (!c) {
                    var d = b.costumes[0].img,
                        d = b.classname ? $('<li class="actor" cat="' + b.label + '" classname="' + b.classname + '"><img src="' +
                            d + '" alt="' + b.classname + '" title="' + b.classname + '"/>' + b.classname + "</li>") : $('<li class="actor" cat="' + b.label + '"><img src="' + d + '" alt="' + b.label + '" title="' + b.label + '"/>' + b.label + "</li>");
                    d.data("sprite", b);
                    WinTools.container.find("hr").length == 0 && WinTools.container.append("<hr/>");
                    WinTools.container.append(d);
                    d.click(WinTools.handleShowActor)
                }
            }
        },
        unregisterActor: function (b) {
            if (b.classname)
                for (var c = 0; c < Runtime.sprites.length; c++)
                    if (Runtime.sprites[c].classname == b.classname) return;
            WinTools.container.find("li.actor").each(function (c,
                e) {
                if (b.classname && $(e).attr("classname") == b.classname || $(e).find("img").attr("title") == b.label) {
                    $(e).detach();
                    WinTools.container.find("hr").next().length == 0 && WinTools.container.find("hr").detach();
                    return false
                }
            })
        },
        showSearch: function () {
            $("#win-tools .search input").focus().val("");
            WinCode._searchIndex = -1;
            WinCode._searchTerm = "";
            WinCode.clearSelection();
            FocusManager.clearFocus();
            $("#win-tools .palette .tools-code").removeClass("searchstatus")
        },
        hideSearch: function () {
            $("#win-tools .search input").val("").blur();
            $("#win-tools .palette .tools-code").addClass("hascat").removeClass("searchstatus");
            WinTools.showCategory("common");
            WinTools.adjustWindow();
            WinTools._lastSearchTerm = ""
        },
        _updateSearchButtons: function () {
            WinCode._hasPreviousSearch() ? $("#win-tools .searchshow a.prev").removeClass("disabled") : $("#win-tools .searchshow a.prev").addClass("disabled");
            WinCode._hasNextSearch() ? $("#win-tools .searchshow a.next").removeClass("disabled") : $("#win-tools .searchshow a.next").addClass("disabled");
            var b = WinCode._getSearchIndex(),
                c = WinCode._getTotalCount();
            b >= 0 && c > 0 ? $("#win-tools .searchshow .index").text(b + 1 + " / " + c) : $("#win-tools .searchshow .index").text("")
        },
        handleShowSearch: function (b) {
            var c = $("#win-tools .search input").val().toLowerCase(),
                c = $.trim(c);
            if (!WinTools._skipCodeSearch && c == WinTools._lastSearchTerm && (b.keyCode == 13 || (b.metaKey || b.ctrlKey) && b.which == 70)) {
                WinCode._handleNextSearch();
                WinTools._updateSearchButtons()
            } else if (b.keyCode == 27) WinTools.hideSearch();
            else {
                WinTools._lastSearchTerm = c;
                $("#win-code").removeClass("mintools");
                $("#win-tools .categories li").removeClass("selected");
                if (c) {
                    $("#win-tools .tools-code").removeClass("hascat").addClass("searchstatus");
                    WinCode._searchIndex = -1;
                    WinCode._searchTerm = c;
                    WinCode.clearSelection();
                    FocusManager.clearFocus();
                    if (!WinTools._skipCodeSearch) {
                        b = WinCode.countSearch(c);
                        b == 1 ? $("#win-tools .palette .tools-code").addClass("searchstatus").find(".searchshow .count").text(g_loc.formatText("wintools.blocksused", b)) : b > 0 ? $("#win-tools .palette .tools-code").addClass("searchstatus").find(".searchshow .count").text(g_loc.formatText("wintools.blocksusedplural",
                            b)) : $("#win-tools .palette .tools-code").removeClass("searchstatus")
                    }
                    WinTools._updateSearchButtons();
                    WinTools.adjustWindow();
                    b = RegExp(/{([a-zA-Z0-9 ]+):?([-a-zA-Z0-9#_./!? ]+)?}/g);
                    $("#win-tools .blocks").scrollTop(0);
                    var d = $("#win-tools .palette .blocks");
                    d.empty();
                    if ("variables".indexOf(c) >= 0) {
                        for (var e in Runtime.background.variables) {
                            var f = new Label({
                                cat: "var",
                                watchable: "global",
                                name: e,
                                value: "string",
                                func: "valueVar"
                            });
                            f.isGlobal = true;
                            var g = $('<div class="draggable"></div>');
                            g.data("draggable",
                                f);
                            d.append(g)
                        }
                        if (IDE.editingActor)
                            for (e in IDE.editingActor.variables) {
                                f = new Label({
                                    cat: "var",
                                    watchable: "local",
                                    name: e,
                                    value: "string",
                                    func: "valueVar"
                                });
                                f.isGlobal = false;
                                g = $('<div class="draggable"></div>');
                                g.data("draggable", f);
                                d.append(g)
                            }
                        for (e in Runtime.background.lists) {
                            f = new Label({
                                cat: "list",
                                watchable: null,
                                name: e,
                                value: "string",
                                func: "valueList"
                            });
                            f.isGlobal = true;
                            g = $('<div class="draggable"></div>');
                            g.data("draggable", f);
                            d.append(g)
                        }
                        if (IDE.editingActor)
                            for (e in IDE.editingActor.lists) {
                                f = new Label({
                                    cat: "list",
                                    watchable: null,
                                    name: e,
                                    value: "string",
                                    func: "valueList"
                                });
                                f.isGlobal = false;
                                g = $('<div class="draggable"></div>');
                                g.data("draggable", f);
                                d.append(g)
                            }
                    } else {
                        for (e in Runtime.background.variables)
                            if (e.indexOf(c) >= 0) {
                                f = new Label({
                                    cat: "var",
                                    watchable: "global",
                                    name: e,
                                    value: "string",
                                    func: "valueVar"
                                });
                                g = $('<div class="draggable"></div>');
                                g.data("draggable", f);
                                d.append(g)
                            }
                        if (IDE.editingActor)
                            for (e in IDE.editingActor.variables)
                                if (e.indexOf(c) >= 0) {
                                    f = new Label({
                                        cat: "var",
                                        watchable: "local",
                                        name: e,
                                        value: "string",
                                        func: "valueVar"
                                    });
                                    g = $('<div class="draggable"></div>');
                                    g.data("draggable", f);
                                    d.append(g)
                                }
                        for (e in Runtime.background.lists)
                            if (e.indexOf(c) >= 0) {
                                f = new Label({
                                    cat: "list",
                                    watchable: null,
                                    name: e,
                                    value: "string",
                                    func: "valueList"
                                });
                                g = $('<div class="draggable"></div>');
                                g.data("draggable", f);
                                d.append(g)
                            }
                        if (IDE.editingActor)
                            for (e in IDE.editingActor.lists)
                                if (e.indexOf(c) >= 0) {
                                    f = new Label({
                                        cat: "list",
                                        watchable: null,
                                        name: e,
                                        value: "string",
                                        func: "valueList"
                                    });
                                    g = $('<div class="draggable"></div>');
                                    g.data("draggable", f);
                                    d.append(g)
                                }
                    }
                    var h;
                    h = IDE.editingActor ? IDE.editingActor.scripts : Runtime.background.scripts;
                    for (var j = 0; j < h.length; j++)
                        if (h[j].func == "registerFunction") {
                            f = h[j].name;
                            if ("functions".indexOf(c) === 0 || f.toLowerCase().replace(b, "").indexOf(c) >= 0) {
                                for (var g = h[j].label._children, k = 0; k < g.length; k++) g[k] instanceof LabelInput && (f = f + (" {string:" + g[k].defaultLabel + "}"));
                                f = new Block({
                                    cat: "functions",
                                    name: h[j].name,
                                    label: f,
                                    func: "blockControlCall"
                                });
                                g = $('<div class="draggable"></div>');
                                g.data("draggable", f);
                                d.append(g)
                            }
                        }
                    for (j = 0; j < Runtime.libs.length; j++) {
                        var l =
                            Runtime.libs[j];
                        h = l.scripts;
                        for (k = 0; k < h.length; k++)
                            if (h[k].func == "registerFunction") {
                                f = h[k].name;
                                if ("library".indexOf(c) === 0 || f.toLowerCase().replace(b, "").indexOf(c) >= 0) {
                                    for (var g = h[k].label._children, m = 0; m < g.length; m++) g[m] instanceof LabelInput && (f = f + (" {string:" + g[m].defaultLabel + "}"));
                                    f = new Block({
                                        cat: "library",
                                        name: l.classname + "::" + h[k].name,
                                        label: f,
                                        func: "blockControlCallLibrary"
                                    });
                                    g = $('<div class="draggable"></div>');
                                    g.data("draggable", f);
                                    d.append(g)
                                }
                            }
                    }
                    h = [];
                    for (e in g_steps) {
                        k = g_steps[e];
                        if (!k.hidden &&
                            k.label) {
                            l = false;
                            if (k.tags) {
                                for (j = 0; j < k.tags.length; j++)
                                    if (k.tags[j].indexOf(c) >= 0) {
                                        l = true;
                                        break
                                    }
                                if (l) {
                                    h.push(k.func);
                                    f = k.value ? new Label(k) : new Block(k);
                                    if (k.hidden || !(WinTools._showingToolsFor && k.omitActor || !WinTools._showingToolsFor && k.omitbg)) {
                                        g = $('<div class="draggable"></div>');
                                        g.data("draggable", f);
                                        d.append(g)
                                    }
                                }
                            }
                        }
                    }
                    for (e in g_steps) {
                        k = g_steps[e];
                        if (h.indexOf(k.func) < 0 && !k.hidden && k.label) {
                            f = k.label.toLowerCase().replace(b, "");
                            j = f.indexOf(c);
                            if (j === 0 && f.length == c.length || j > 0 && j + c.length < f.length &&
                                f[j - 1] == " " || j === 0 && j + c.length + 1 < f.length && f[j + c.length + 1] == " ") {
                                h.push(k.func);
                                f = k.value ? new Label(k) : new Block(k);
                                if (k.hidden || !(WinTools._showingToolsFor && k.omitActor || !WinTools._showingToolsFor && k.omitbg)) {
                                    g = $('<div class="draggable"></div>');
                                    g.data("draggable", f);
                                    d.append(g)
                                }
                            }
                        }
                    }
                    for (e in g_steps) {
                        k = g_steps[e];
                        if (h.indexOf(k.func) < 0 && !k.hidden && k.label) {
                            l = false;
                            f = k.label.toLowerCase().replace(b, "");
                            f.indexOf(c) >= 0 ? l = true : k.cat.indexOf(c) === 0 ? l = true : k.concept && k.concept.indexOf(c) === 0 && (l = true);
                            if (l) {
                                h.push(k.func);
                                f = k.value ? new Label(k) : new Block(k);
                                if (k.hidden || !(WinTools._showingToolsFor && k.omitActor || !WinTools._showingToolsFor && k.omitbg)) {
                                    g = $('<div class="draggable"></div>');
                                    g.data("draggable", f);
                                    d.append(g)
                                }
                            }
                        }
                    }
                    WinTools.render()
                } else {
                    $("#win-tools .tools-code").addClass("hascat").removeClass("searchstatus");
                    WinTools.showCategory();
                    WinTools.adjustWindow()
                }
            }
        },
        handleShowCategory: function () {
            var b = $(this).attr("cat"),
                c = $(this).text();
            if (b == "common") {
                $("#win-tools .tabs .tab").removeClass("active");
                $("#win-tools .tabs .tab.common").addClass("active")
            } else {
                $("#win-tools .tabs .tab").removeClass("active");
                $("#win-tools .tabs .tab.category").addClass("active").find("span.label").text(c)
            }
            $("#win-tools .categories").removeClass("hover");
            $("#win-tools .tabs .category").attr("cat", b);
            b == "variables" ? WinTools.showVariables() : b == "functions" ? WinTools.showFunctions() : WinTools.showCategory(b);
            return false
        },
        handleShowActor: function () {
            var b = $(this).attr("cat");
            $("#win-tools .categories li").removeClass("selected").each(function (c,
                d) {
                d = $(d);
                if (d.attr("cat") == b) {
                    d.addClass("selected");
                    return false
                }
            });
            WinTools.showActor(b)
        },
        showActor: function (b) {
            var c = false;
            $("#win-tools .categories li.actor").each(function (d, e) {
                if ($(e).hasClass("selected")) {
                    b = $(e).attr("cat");
                    c = true;
                    return false
                }
            });
            if (c && Sprites.getSpriteByName(b)) {
                $("#win-tools .blocks").scrollTop(0);
                var d = $("#win-tools .palette .blocks");
                d.empty();
                for (var e = Runtime.findInboundEventsOf(b), f = 0; f < e.length; f++)
                    if (e[f].charAt(0) != "[") {
                        var g = new Block({
                            cat: "events",
                            label: "send message {events:" +
                                e[f] + "} to {actor:self} with {string}",
                            func: "blockControlPostMessage"
                        }),
                            h = $('<div class="draggable"></div>');
                        h.data("draggable", g);
                        d.append(h);
                        g = new Block({
                            cat: "events",
                            label: "send message {events:" + e[f] + "} to {actor:self} with {string} and wait",
                            func: "blockControlPostMessageAndWait"
                        });
                        h = $('<div class="draggable"></div>');
                        h.data("draggable", g);
                        d.append(h)
                    }
                e = Runtime.findOutboundEventsOf(b);
                for (f = 0; f < e.length; f++) {
                    g = new Block({
                        cat: "events",
                        label: "when I receive {events:" + e[f] + "}",
                        hasFlap: false,
                        func: "registerBroadcastTrigger"
                    });
                    h = $('<div class="draggable"></div>');
                    h.data("draggable", g);
                    d.append(h)
                }
                e = Runtime.findVariablesOf(b);
                for (f = 0; f < e.length; f++) {
                    g = new Block({
                        cat: "var",
                        label: "set {properties:" + e[f] + "} of {actor:self} to {string:0}",
                        func: "blockVarPropSet"
                    });
                    h = $('<div class="draggable"></div>');
                    h.data("draggable", g);
                    d.append(h);
                    g = new Label({
                        cat: "var",
                        label: "property {properties:" + e[f] + "} of {actor:self}",
                        value: "string",
                        func: "valueVarPropGet"
                    });
                    h = $('<div class="draggable"></div>');
                    h.data("draggable", g);
                    d.append(h)
                }
                WinTools.render()
            }
        },
        handleShowLibrary: function () {
            var b = $(this).attr("library");
            $("#win-tools .categories li").removeClass("selected");
            $(this).addClass("selected");
            WinTools.showLibrary(b)
        },
        showLibrary: function (b) {
            for (var c = null, d = 0; d < Runtime.libs.length; d++)
                if (Runtime.libs[d].classname == b) {
                    c = Runtime.libs[d];
                    break
                }
            if (c) {
                $("#win-tools .blocks").scrollTop(0);
                b = $("#win-tools .palette .blocks");
                b.empty();
                if (c.ownerid == prefs.userid) {
                    var e = $('<div><a href="#" class="btn-round small action">' + g_loc.getText("wintools.savebtn") +
                        "</a></div>");
                    e.find("a").click(function () {
                        WinTools.saveLibrary(c)
                    });
                    b.append(e);
                    e = $('<div><a href="#" class="btn-round small action">' + g_loc.getText("wintools.editbtn") + "</a></div>");
                    e.find("a").click(function () {
                        IDE.selectAsset(null);
                        IDE.selectAsset(c)
                    });
                    b.append(e);
                    e = $('<div><a href="#" class="btn-round small secondary">' + g_loc.getText("wintools.deletebtn") + "</a></div>");
                    e.find("a").click(function () {
                        IDE.confirmDialog(g_loc.getText("wintools.deleteconfirm"), function () {
                            WinTools.purgeLibrary(c)
                        })
                    });
                    b.append(e)
                }
                e = $('<div><a href="#" class="btn-round small secondary">' + g_loc.getText("wintools.removebtn") + "</a></div>");
                e.find("a").click(function () {
                    IDE.confirmDialog(g_loc.getText("wintools.removeconfirm"), function () {
                        WinTools.removeLibrary(c)
                    })
                });
                b.append(e);
                for (var f = c.scripts, g = [], d = 0; d < f.length; d++)
                    if (f[d].func == "registerFunction" && !f[d].hidden) {
                        var h = false;
                        if (c.ownerid == prefs.userid || !f[d].hiddenInSandbox) {
                            for (e = 0; e < g.length; e++)
                                if (f[d].name < g[e].name) {
                                    g.splice(e, 0, f[d]);
                                    h = true;
                                    break
                                }
                            h || g.push(f[d])
                        }
                    }
                for (d =
                    0; d < g.length; d++) {
                    f = g[d].name;
                    h = g[d].label._children;
                    for (e = 0; e < h.length; e++) h[e] instanceof LabelInput && (f = f + (" {string:" + h[e].defaultLabel + "}"));
                    f = new Block({
                        cat: "library",
                        name: c.classname + "::" + g[d].name,
                        label: f,
                        func: "blockControlCallLibrary"
                    });
                    e = $('<div class="draggable"></div>');
                    e.data("draggable", f);
                    b.append(e)
                }
                WinTools.render()
            }
        },
        reRender: function () {
            $("#win-tools .palette .blocks .draggable").each(function (b, c) {
                $(c).data("draggable").reRender()
            });
            WinTools.render()
        },
        showCategory: function (b) {
            if (!$("#win-tools").hasClass("simplified")) {
                var c =
                    $("#win-tools .categories li.selected");
                if (!b) {
                    if (c.length > 0 && IDE.editingActor == WinTools._showingToolsFor) return;
                    b = c.attr("cat")
                }
                if (!(c.length > 0 && c.attr("cat") == b && IDE.editingActor == WinTools._showingToolsFor)) {
                    $("#win-tools .blocks").scrollTop(0);
                    WinTools._showingToolsFor = IDE.editingActor;
                    for (var c = -1, d = 0; d < g_palette.length; d++)
                        if (g_palette[d].cat == b) {
                            c = d;
                            break
                        }
                    if (c < 0) {
                        c = 0;
                        b = g_palette[0].cat
                    }
                    $("#win-tools .categories li").removeClass("selected").each(function (c, d) {
                        d = $(d);
                        if (d.attr("cat") == b) {
                            d.addClass("selected");
                            return false
                        }
                    });
                    var e = $("#win-tools .palette .blocks");
                    e.empty();
                    for (var f, d = 0; d < g_palette[c].items.length; d++) {
                        var g = g_palette[c].items[d];
                        if (g instanceof Block || g instanceof Label) {
                            var h = $('<div class="draggable"></div>');
                            h.data("draggable", g);
                            e.append(h)
                        } else if (g.items) {
                            e.append("<h2>" + g.label + "</h2>");
                            for (var j = g.items, k = 0; k < j.length; k++) {
                                g = j[k];
                                if (g instanceof Block || g instanceof Label) {
                                    h = $('<div class="draggable"></div>');
                                    h.data("draggable", g);
                                    e.append(h)
                                } else if (g.cat == "code") {
                                    f = IDE.editingActor ?
                                        ObjectIO.deserializeScriptStep(g, IDE.editingActor) : ObjectIO.deserializeScriptStep(g, Runtime.background);
                                    h = $('<div class="draggable"></div>');
                                    h.data("draggable", g);
                                    e.append(h)
                                } else if (!g.hidden && (!WinTools._showingToolsFor || !g.omitActor) && (WinTools._showingToolsFor || !g.omitbg)) {
                                    f = g.value ? new Label(g) : new Block(g);
                                    h = $('<div class="draggable"></div>');
                                    h.data("draggable", f);
                                    e.append(h)
                                }
                            }
                            for (k = 0; k < j.length; k++) {
                                g = j[k];
                                if (!(g instanceof Block || g instanceof Label))
                                    if (g.cat != "code" && !g.hidden && (WinTools._showingToolsFor &&
                                            g.omitActor || !WinTools._showingToolsFor && g.omitbg)) {
                                        f = g.value ? new Label(g) : new Block(g);
                                        f.setDisabled(true);
                                        h = $('<div class="draggable"></div>');
                                        h.data("draggable", f);
                                        e.append(h)
                                    }
                            }
                        } else if (g.cat == "code") {
                            f = IDE.editingActor ? ObjectIO.deserializeScriptStep(g, IDE.editingActor) : ObjectIO.deserializeScriptStep(g, Runtime.background);
                            h = $('<div class="draggable"></div>');
                            h.data("draggable", f);
                            e.append(h)
                        } else if (!g.hidden && (!WinTools._showingToolsFor || !g.omitActor) && (WinTools._showingToolsFor || !g.omitbg)) {
                            f =
                                g.value ? new Label(g) : new Block(g);
                            h = $('<div class="draggable"></div>');
                            h.data("draggable", f);
                            e.append(h)
                        }
                    }
                    WinTools.render()
                }
            }
        },
        spriteEvent: function () { },
        _removeAll: function () { },
        blocksChanged: function (b, c) {
            b == "delete" && WinTools._removeAll(c)
        },
        _mouseClick: function (b) {
            var c = b.pageX,
                d = b.pageY;
            window.clearTimeout(WinTools._helpTimeoutId);
            if (WinTools.hideInlineHelp || $("#win-tools").hasClass("simplified")) return false;
            var e = $("#win-tools .palette .blocks");
            e.find(">div").removeClass("selected");
            c >= e.offset().left &&
                (c <= e.offset().left + e.outerWidth() && d >= e.offset().top && d <= e.offset().top + e.outerHeight()) && e.find(">div").each(function (b, g) {
                    var h = $(g),
                        j = h.offset();
                    if (c >= j.left && c < j.left + h.outerWidth() && d >= j.top && d < j.top + h.outerHeight()) {
                        if (h.hasClass("selected")) h.removeClass("selected");
                        else if (h.hasClass("draggable")) {
                            WinTools._helpClicked = true;
                            j = h.data("draggable");
                            WinTools._handleBlockHelp(h, j)
                        } else if (h.hasClass("article")) {
                            e.find(">div").removeClass("selected");
                            h.addClass("selected")
                        }
                        return false
                    }
                })
        },
        _getFunctionDocs: function (b,
            c) {
            if (c && c.func == "blockInlineComment") {
                b.push(c.label._children[1].label);
                for (var d = 0; d < c._containers.length; d++) WinTools._getFunctionDocs(b, c._containers[d]);
                WinTools._getFunctionDocs(b, c.next)
            }
        },
        showSimplified: function (b, c, d) {
            if (b) {
                $("#win-tools .palette .blocks").bind("mousewheel", function () {
                    return false
                }).bind("DOMMouseScroll", function () {
                    return false
                });
                Sprites.addSpriteListener(WinTools);
                WinCode.addChangeListener(WinTools.blocksChanged);
                $("#win-tools").addClass("simplified");
                WinTools.adjustWindow();
                $("#win-tools .blocks").scrollTop(0);
                var e = $("#win-tools .palette .blocks");
                e.empty();
                if (c)
                    for (b = 0; b < c.length; b++) {
                        var f;
                        f = c[b];
                        if (f = f.func ? f.func == "registerFunction" ? new Block({
                            cat: "functions",
                            name: f.name,
                            label: f.label,
                            hasFlap: false,
                            func: "registerFunction"
                        }) : f.func == "blockControlCall" ? new Block({
                            cat: "functions",
                            name: f.name,
                            label: f.label,
                            func: "blockControlCall"
                        }) : f.func == "valueControlCall" ? new Block({
                            cat: "functions",
                            name: f.name,
                            label: f.label,
                            func: "valueControlCall"
                        }) : f.func == "valueParam" ? new Label({
                            cat: "functions",
                            name: f.name,
                            value: "string",
                            func: "valueParam"
                        }) : f.func == "valueVar" ? new Label({
                            cat: "var",
                            name: f.name,
                            value: "string",
                            func: "valueVar"
                        }) : f.func == "valueList" ? new Label({
                            cat: "list",
                            label: f.name,
                            value: "string",
                            func: "valueList"
                        }) : makeBlockByName(f.func) : makeBlockByName(f)) {
                            var g = $('<div class="draggable"></div>');
                            g.data("draggable", f);
                            e.append(g)
                        }
                    } else if (g_palette.length > 0)
                        for (b = 0; b < g_palette[0].items.length; b++) {
                            f = makeBlockByName(g_palette[0].items[b].func);
                            g = $('<div class="draggable"></div>');
                            g.data("draggable",
                                f);
                            e.append(g)
                        }
                if (d)
                    for (b = 0; b < d.length; b++) {
                        c = d[b];
                        if (c.actor) {
                            c.thumbnail = c.img;
                            c.path = "/code/" + c.actor + ".actor"
                        } else if (c.sound) c.thumbnail = "ide/imgs/content/sound.png";
                        else if (c.img) {
                            c.path = c.img;
                            c.thumbnail = c.img;
                            c.raw = true
                        }
                    }
                WinTools.render()
            } else {
                $("#win-tools").removeClass("simplified");
                WinTools.adjustWindow();
                Sprites.removeSpriteListener(WinTools);
                WinCode.removeChangeListener(WinTools.blocksChanged);
                $("#win-tools .palette .blocks").unbind("mousewheel").unbind("DOMMouseScroll")
            }
        },
        showVariables: function () {
            $("#win-tools .categories li").removeClass("selected");
            $("#win-tools .categories li[cat=variables]").addClass("selected");
            $("#win-tools .blocks").scrollTop(0);
            var b = $("#win-tools .palette .blocks");
            b.empty();
            b.append("<h2>创建变量</h2>");
            var c = new Block(g_steps.blockControlScriptVar),
                d = $('<div class="draggable"></div>');
            d.data("draggable", c);
            b.append(d);
            if (g_steps.valueNetworkParse && !g_steps.valueNetworkParse.hidden) {
                c = new Label(g_steps.valueNetworkParse);
                d = $('<div class="draggable"></div>');
                d.data("draggable", c);
                b.append(d)
            } else if (g_steps.valueControlParse &&
                !g_steps.valueControlParse.hidden) {
                c = new Label(g_steps.valueControlParse);
                d = $('<div class="draggable"></div>');
                d.data("draggable", c);
                b.append(d)
            }
            d = $('<div><a href="#" class="btn-round small action">添加变量</a></div>');
            d.find("a").click(WinTools.cmdCreateVar);
            b.append(d);
            d = $('<div><a href="#" class="btn-round small secondary">删除变量</a></div>');
            d.find("a").click(WinTools.cmdDeleteVar);
            b.append(d);
            var e = false,
                f;
            for (f in Runtime.background.variables) {
                if (!e) {
                    b.append("<h2>Global Variables</h2>");
                    e = true
                }
                c = new Label({
                    cat: "var",
                    watchable: "global",
                    name: f,
                    value: "string",
                    func: "valueVar"
                });
                c.isGlobal = true;
                d = $('<div class="draggable"></div>');
                d.data("draggable", c);
                b.append(d)
            }
            e = false;
            if (IDE.editingActor)
                for (f in IDE.editingActor.variables) {
                    if (!e) {
                        b.append("<h2>Local Variables</h2>");
                        e = true
                    }
                    c = new Label({
                        cat: "var",
                        watchable: "local",
                        name: f,
                        value: "string",
                        func: "valueVar"
                    });
                    c.isGlobal = false;
                    d = $('<div class="draggable"></div>');
                    d.data("draggable", c);
                    b.append(d)
                }
            b.append("<h2>变量操作</h2>");
            WinTools._objects.push(new WinTools.TextLabel("Variable Operators"));
            for (e = 0; e < g_varBlocks.length; e++) {
                c = g_varBlocks[e];
                c = c.value ? new Label(c) : new Block(c);
                d = $('<div class="draggable"></div>');
                d.data("draggable", c);
                b.append(d)
            }
            b.append("<h2>创建列表</h2>");
            d = $('<div><a href="#" class="btn-round small action">添加列表</a></div>');
            d.find("a").click(WinTools.cmdCreateList);
            b.append(d);
            d = $('<div><a href="#" class="btn-round small secondary">删除列表</a></div>');
            d.find("a").click(WinTools.cmdDeleteList);
            b.append(d);
            e = false;
            for (f in Runtime.background.lists) {
                if (!e) {
                    b.append("<h2>Global Lists</h2>");
                    e = true
                }
                c = new Label({
                    cat: "list",
                    watchable: null,
                    name: f,
                    value: "string",
                    func: "valueList"
                });
                c.isGlobal = true;
                d = $('<div class="draggable"></div>');
                d.data("draggable", c);
                b.append(d)
            }
            if (IDE.editingActor) {
                e = false;
                for (f in IDE.editingActor.lists) {
                    if (!e) {
                        b.append("<h2>Local Lists</h2>");
                        e = true
                    }
                    c = new Label({
                        cat: "list",
                        watchable: null,
                        name: f,
                        value: "string",
                        func: "valueList"
                    });
                    c.isGlobal = false;
                    d = $('<div class="draggable"></div>');
                    d.data("draggable", c);
                    b.append(d)
                }
            }
            b.append("<h2>列表操作</h2>");
            for (e = 0; e < g_listBlocks.length; e++) {
                c = g_listBlocks[e];
                c = c.value ? new Label(c) : new Block(c);
                d = $('<div class="draggable"></div>');
                d.data("draggable", c);
                b.append(d)
            }
            b.append("<h2>对象操作</h2>");
            for (e = 0; e < g_objBlocks.length; e++) {
                c = g_objBlocks[e];
                c = c.value ? new Label(c) : new Block(c);
                d = $('<div class="draggable"></div>');
                d.data("draggable", c);
                b.append(d)
            }
            WinTools.render()
        },
        showFunctions: function () {
            var b;
            b = IDE.editingActor ? IDE.editingActor.scripts :
                Runtime.background.scripts;
            $("#win-tools .categories li").removeClass("selected");
            $("#win-tools .categories li[cat=functions]").addClass("selected");
            $("#win-tools .blocks").scrollTop(0);
            var c = $("#win-tools .palette .blocks");
            c.empty();
            if (g_steps.blockControlCallMember) {
                var d = new Block(g_steps.blockControlCallMember),
                    e = $('<div class="draggable"></div>');
                e.data("draggable", d);
                c.append(e)
            }
            if (g_steps.valueControlCallMember) {
                d = new Label(g_steps.valueControlCallMember);
                e = $('<div class="draggable"></div>');
                e.data("draggable", d);
                c.append(e)
            }
            d = new Block(g_steps.blockControlReturn);
            e = $('<div class="draggable"></div>');
            e.data("draggable", d);
            c.append(e);
            c.append("<h2>函数</h2>");
            e = $('<div><a href="#" class="btn-round small action">添加函数</a></div>');
            e.find("a").click(WinTools.cmdCreateFunction);
            c.append(e);
            for (var f = [], g = 0; g < b.length; g++)
                if (b[g].func == "registerFunction") {
                    e = false;
                    for (d = 0; d < f.length; d++)
                        if (b[g].name < f[d].name) {
                            f.splice(d, 0, b[g]);
                            e = true;
                            break
                        }
                    e || f.push(b[g])
                }
            for (g = WinTools.maxWidth =
                0; g < f.length; g++) {
                b = f[g].name;
                e = f[g].label._children;
                for (d = 0; d < e.length; d++) e[d] instanceof LabelInput && (b = b + (" {string:" + e[d].defaultLabel + "}"));
                d = new Block({
                    cat: "functions",
                    name: f[g].name,
                    label: b,
                    func: "blockControlCall"
                });
                e = $('<div class="draggable"></div>');
                e.data("draggable", d);
                c.append(e)
            }
            WinTools.render()
        },
        cmdCreateFunction: function () {
            var b = $("#func-create");
            b.find("ul").empty();
            b.find("a.addBtn").unbind().click(function () {
                var c = $('<li><input type="text"/> <a class="delete icon-cancel" href="#"></a></li>');
                b.find("ul").append(c);
                c.find("a").click(function () {
                    $(this).parent().detach();
                    return false
                });
                return false
            });
            b.find("input");
            b.find(".error").addClass("hidden");
            b.modal();
            b.find(".createBtn").text(g_loc.getText("dialog.btncreate")).unbind().click(function () {
                var c = true,
                    d = b.find("input"),
                    e = $.trim($(d[0]).val());
                if (e == "") {
                    c = false;
                    b.find(".error").removeClass("hidden").text(g_loc.getText("func.err_fnblank"))
                }
                if (c)
                    for (var f = 0; f < WinCode._scripts.length; f++)
                        if (WinCode._scripts[f].func == "registerFunction" &&
                            WinCode._scripts[f].name == e) {
                            c = false;
                            b.find(".error").removeClass("hidden").text(g_loc.getText("func.err_fndup"));
                            break
                        }
                if (c) {
                    var g = [];
                    d.each(function (d, e) {
                        if ($(e).val() == "") {
                            c = false;
                            b.find(".error").removeClass("hidden").text(g_loc.getText("func.err_paramblank"));
                            return false
                        }
                        if (d > 0)
                            if (g.indexOf($(e).val()) >= 0) {
                                c = false;
                                b.find(".error").removeClass("hidden").text(g_loc.getText("func.err_paramdup"))
                            } else g.push($(e).val())
                    })
                }
                if (c) {
                    WinTools.createFunction(e, g);
                    $.modal.close()
                }
                return false
            });
            b.find(".cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            })
        },
        createFunction: function (b, c) {
            for (var d = b, e = 0; e < c.length; e++) d = d + (" {param:" + c[e] + "}");
            d = new Block({
                hasFlap: false,
                cat: "functions",
                name: b,
                label: d,
                func: "registerFunction"
            });
            e = WinCode.findBlankSpace();
            d.x = e.x;
            d.y = e.y;
            d._computeBlockBounds();
            WinCode._scripts.push(d);
            WinTools.updateFunctions()
        },
        cmdEditFunction: function (b) {
            if (b.func == "registerFunction") {
                var c = $("#func-create"),
                    d = c.find("ul").empty();
                c.find("input").val(b.name);
                for (var e = b.label.getNumSockets(), f = 0; f < e; f++) {
                    var g = b.label.getSocketAtChild(f),
                        h = $('<li><input type="text"/> <a class="delete icon-cancel" href="#"></a></li>');
                    d.append(h);
                    h.find("input").val(g._child.name);
                    h.find("a").click(function () {
                        IDE.dirty();
                        $(this).parent().detach();
                        return false
                    })
                }
                c.find("a.addBtn").unbind().click(function () {
                    var b = $('<li><input type="text"/> <a class="delete icon-cancel" href="#"></a></li>');
                    c.find("ul").append(b);
                    b.find("a").click(function () {
                        IDE.dirty();
                        $(this).parent().detach();
                        return false
                    });
                    return false
                });
                c.find(".error").addClass("hidden");
                c.modal();
                c.find(".createBtn").text(g_loc.getText("dialog.btnok")).unbind().click(function () {
                    IDE.dirty();
                    var d = true,
                        e = c.find("input"),
                        f = $(e[0]).val();
                    if (f == "") {
                        d = false;
                        c.find(".error").removeClass("hidden").text(g_loc.getText("func.err_fnblank"))
                    }
                    if (d)
                        for (var g = 0; g < WinCode._scripts.length; g++)
                            if (WinCode._scripts[g] != b && WinCode._scripts[g].func == "registerFunction" && WinCode._scripts[g].name == f) {
                                d = false;
                                c.find(".error").removeClass("hidden").text(g_loc.getText("func.err_fndup"));
                                break
                            }
                    if (d) {
                        var h = [];
                        e.each(function (b,
                            e) {
                            if ($(e).val() == "") {
                                d = false;
                                c.find(".error").removeClass("hidden").text(g_loc.getText("func.err_paramblank"));
                                return false
                            }
                            if (b > 0)
                                if (h.indexOf($(e).val()) >= 0) {
                                    d = false;
                                    c.find(".error").removeClass("hidden").text(g_loc.getText("func.err_paramdup"))
                                } else h.push($(e).val())
                        })
                    }
                    if (d) {
                        WinCode.updateFunction(b, f, h);
                        $.modal.close()
                    }
                    return false
                });
                c.find(".cancelBtn").unbind().click(function () {
                    $.modal.close();
                    return false
                })
            }
        },
        updateFunctions: function () {
            var b = $("#win-tools .palette .categories li.selected");
            b.length == 1 && $(b[0]).attr("cat") == "functions" && WinTools.showFunctions()
        },
        cmdEditScriptVars: function (b) {
            if (b.func == "blockControlScriptVar") {
                for (var c = $("#var-script"), d = c.find("ul").empty(), e = b.label.getNumSockets(), f = 0; f < e; f++) {
                    var g = b.label.getSocketAtChild(f),
                        h = $('<li><input type="text"/> <a class="delete icon-cancel" href="#"></a></li>');
                    d.append(h);
                    h.find("input").val(g._child.name);
                    h.find("a").click(function () {
                        $(this).parent().detach();
                        return false
                    })
                }
                c.find("a.addBtn").unbind().click(function () {
                    var b =
                        $('<li><input type="text"/> <a class="delete icon-cancel" href="#"></a></li>');
                    c.find("ul").append(b);
                    b.find("a").click(function () {
                        $(this).parent().detach();
                        return false
                    });
                    return false
                });
                c.find(".error").addClass("hidden");
                c.modal();
                c.find(".okBtn").unbind().click(function () {
                    var d = true,
                        e = [];
                    c.find("input").each(function (b, f) {
                        if ($(f).val() == "") {
                            d = false;
                            c.find(".error").removeClass("hidden").text(g_loc.getText("func.err_paramblank"));
                            return false
                        }
                        if (e.indexOf($(f).val()) >= 0) {
                            d = false;
                            c.find(".error").removeClass("hidden").text(g_loc.getText("func.err_paramdup"))
                        } else e.push($(f).val())
                    });
                    if (d) {
                        WinCode.updateScriptVars(b, e);
                        $.modal.close()
                    }
                    return false
                });
                c.find(".cancelBtn").unbind().click(function () {
                    $.modal.close();
                    return false
                })
            }
        },
        cloneBlock: function (b) {
            var c = null;
            $("#win-tools .palette .blocks .draggable").each(function (d, e) {
                var f = $(e),
                    g = f.data("draggable");
                if (g.func == b) {
                    c = g.copy();
                    c.x = f.offset().left;
                    c.y = f.offset().top;
                    c._computeBlockBounds();
                    return false
                }
            });
            return c
        },
        cloneResource: function () { },
        getHilightedAsset: function () {
            var b = null;
            if (WinTools._objects != null)
                for (var c = 0; c < WinTools._objects.length; c++) {
                    var d =
                        WinTools._objects[c];
                    if (d.hilight) {
                        b = {
                            obj: d,
                            x: 0,
                            y: 0,
                            width: d.width,
                            height: d.height
                        };
                        break
                    }
                }
            return b
        },
        hilightAsset: function (b) {
            var c = null;
            if (WinTools._objects != null)
                for (var d = 0; d < WinTools._objects.length; d++) {
                    var e = WinTools._objects[d];
                    if (e instanceof WinTools.Resource && e.path == b) {
                        e.hilight = true;
                        c = {
                            x: 0,
                            y: 0,
                            width: e.width,
                            height: e.height
                        }
                    } else e.hilight = false
                }
            return c
        },
        hilightBlock: function (b, c) {
            var d = null,
                e = $("#win-tools .palette .blocks");
            e.find("div.draggable").each(function (f, g) {
                var h = $(g),
                    j = h.data("draggable");
                if ((j instanceof Block || j instanceof Label) && j.func == b && (!c || j.name == c)) {
                    e.scrollTop(0).scrollLeft(0);
                    e.scrollTop(h.offset().top - e.innerHeight() / 2);
                    d = {
                        x: h.offset().left,
                        y: h.offset().top,
                        width: h.outerWidth(),
                        height: h.outerHeight()
                    };
                    return false
                }
            });
            return d
        },
        cmdCreateVar: function () {
            var b = $("#var-create");
            b.find(".error").addClass("hidden");
            b.find("input[name=name]").val("");
            b.find("input[name=doreset]")[0].checked = false;
            b.find("input[name=default]").val("");
            b.find("input[name=scope]").unbind().click(function () {
                $(this).val() ==
                    "global" ? b.find("input[name=cloud]").attr("disabled", null) : b.find("input[name=cloud]").attr("disabled", "disabled")
            });
            b.find("input[name=scope]:first")[0].checked = false;
            b.find("input[name=scope]:last")[0].checked = true;
            b.find("input[name=cloud]").attr("disabled", "disabled")[0].checked = false;
            b.modal();
            b.find(".createBtn").unbind().click(function () {
                var c = $.trim(b.find("input[name=name]").val()),
                    d = null;
                b.find("input[name=doreset]")[0].checked && (d = b.find("input[name=default]").val());
                var e = b.find("input[name=scope]:first")[0].checked,
                    f = b.find("input[name=cloud]")[0].checked;
                c != "" && WinTools.createVar(c, d, e, f);
                $.modal.close();
                return false
            });
            b.find(".cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            })
        },
        createVar: function (b, c, d, e) {
            IDE.dirty();
            var f = "";
            c !== null && (f = valueToNative(c));
            if (d || !IDE.editingActor) {
                Runtime.background.variables[b] = f;
                Runtime.background.varDefaults[b] = c === null ? null : f;
                if (e) {
                    if (!Runtime.background.cloudVariables) Runtime.background.cloudVariables = {};
                    Runtime.background.cloudVariables[b] = true
                }
            } else {
                IDE.editingActor.variables[b] =
                    f;
                IDE.editingActor.varDefaults[b] = c === null ? null : f
            }
            WinTools.updateVariables()
        },
        cmdDeleteVar: function () {
            $(".choice-chooser").detach();
            var b = $('<div class="choice-chooser"></div>');
            b.css("left", $(this).offset().left + $(this).outerWidth());
            b.css("top", $(this).offset().top);
            $("body").append(b);
            var c = false,
                d;
            for (d in Runtime.background.variables) {
                c = true;
                break
            }
            if (c) {
                b.append("<h1>Globals</h1>");
                var e = $("<ul></ul>");
                b.append(e);
                for (d in Runtime.background.variables) {
                    var f = $("<li>" + d + "</li>");
                    f.click(WinTools.cmdDeleteGlobalVar);
                    e.append(f)
                }
            }
            if (IDE.editingActor) {
                e = false;
                for (d in IDE.editingActor.variables) {
                    e = true;
                    break
                }
                if (e) {
                    c = true;
                    b.append("<h1>Locals</h1>");
                    e = $("<ul></ul>");
                    b.append(e);
                    for (d in IDE.editingActor.variables) {
                        f = $("<li>" + d + "</li>");
                        f.click(WinTools.cmdDeleteLocalVar);
                        e.append(f)
                    }
                }
            }
            c || b.append("<h1>No Variables</h1>")
        },
        cmdDeleteGlobalVar: function () {
            IDE.dirty();
            var b = $(this).text();
            delete Runtime.background.variables[b];
            Runtime.background.varDefaults && delete Runtime.background.varDefaults[b];
            Runtime.background.cloudVariables &&
                delete Runtime.background.cloudVariables[b];
            $(".choice-chooser").detach();
            WinTools.updateVariables()
        },
        cmdDeleteLocalVar: function () {
            IDE.dirty();
            if (IDE.editingActor) {
                var b = $(this).text();
                delete IDE.editingActor.variables[b];
                IDE.editingActor.varDefaults && delete IDE.editingActor.varDefaults[b];
                IDE.editingActor.cloudVariables && delete IDE.editingActor.cloudVariables[b]
            }
            $(".choice-chooser").detach();
            WinTools.updateVariables()
        },
        cmdCreateList: function () {
            var b = $("#list-create");
            b.find(".error").addClass("hidden");
            b.find("input[name=name]").val("");
            b.find("input[name=scope]").unbind().click(function () {
                $(this).val() == "global" ? b.find("input[name=cloud]").attr("disabled", null) : b.find("input[name=cloud]").attr("disabled", "disabled")
            });
            b.find("input[name=scope]:first")[0].checked = false;
            b.find("input[name=scope]:last")[0].checked = true;
            b.find("input[name=cloud]").attr("disabled", "disabled")[0].checked = false;
            b.modal();
            b.find(".createBtn").unbind().click(function () {
                var c = $.trim(b.find("input[name=name]").val()),
                    d = b.find("input[name=scope]:first")[0].checked,
                    e = b.find("input[name=cloud]")[0].checked;
                c != "" && WinTools.createList(c, d, e);
                $.modal.close();
                return false
            });
            b.find(".cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            })
        },
        createList: function (b, c, d) {
            IDE.dirty();
            if (c || !IDE.editingActor) {
                Runtime.background.lists[b] === void 0 && (Runtime.background.lists[b] = []);
                if (d) {
                    if (!Runtime.background.cloudLists) Runtime.background.cloudLists = {};
                    Runtime.background.cloudLists[b] = true
                }
            } else IDE.editingActor.lists[b] === void 0 && (IDE.editingActor.lists[b] = []);
            WinTools.updateVariables()
        },
        cmdDeleteList: function () {
            $(".choice-chooser").detach();
            var b = $('<div class="choice-chooser"></div>');
            b.css("left", $(this).offset().left + $(this).outerWidth());
            b.css("top", $(this).offset().top);
            $("body").append(b);
            var c = false,
                d;
            for (d in Runtime.background.lists) {
                c = true;
                break
            }
            if (c) {
                b.append("<h1>Globals</h1>");
                var e = $("<ul></ul>");
                b.append(e);
                for (d in Runtime.background.lists) {
                    var f = $("<li>" + d + "</li>");
                    f.click(WinTools.cmdDeleteGlobalList);
                    e.append(f)
                }
            }
            if (IDE.editingActor) {
                e =
                    false;
                for (d in IDE.editingActor.lists) {
                    e = true;
                    break
                }
                if (e) {
                    c = true;
                    b.append("<h1>Locals</h1>");
                    e = $("<ul></ul>");
                    b.append(e);
                    for (d in IDE.editingActor.lists) {
                        f = $("<li>" + d + "</li>");
                        f.click(WinTools.cmdDeleteLocalList);
                        e.append(f)
                    }
                }
            }
            c || b.append("<h1>No Lists</h1>")
        },
        cmdDeleteGlobalList: function () {
            IDE.dirty();
            delete Runtime.background.lists[$(this).text()];
            Runtime.background.cloudLists && delete Runtime.background.cloudLists[$(this).text()];
            $(".choice-chooser").detach();
            WinTools.updateVariables()
        },
        cmdDeleteLocalList: function () {
            IDE.dirty();
            IDE.editingActor && delete IDE.editingActor.lists[$(this).text()];
            $(".choice-chooser").detach();
            WinTools.updateVariables()
        },
        updateVariables: function () {
            var b = $("#win-tools .categories li.selected");
            b.length == 1 && $(b[0]).attr("cat") == "variables" && WinTools.showVariables()
        },
        cmdEditVar: function (b) {
            var c = b.name,
                d;
            d = b.isGlobal ? Runtime.background.varDefaults[c] : IDE.editingActor.varDefaults[c];
            if (d === null || d === void 0) d = null;
            var e = $("#var-edit");
            e.find(".error").addClass("hidden");
            e.find("input[name=name]").val(c);
            if (d === null) {
                e.find("input[name=doreset]")[0].checked = false;
                e.find("input[name=default]").val("")
            } else {
                e.find("input[name=doreset]")[0].checked = true;
                e.find("input[name=default]").val(d)
            }
            e.modal();
            e.find(".okBtn").unbind().click(function () {
                IDE.dirty();
                var c = $.trim($("#var-edit input[name=name]").val()),
                    d = "",
                    d = $("#var-edit input[name=doreset]")[0].checked ? valueToNative($("#var-edit input[name=default]").val()) : null,
                    h = false;
                if (c && c != b.name)
                    if (b.isGlobal)
                        if (Runtime.background.variables[c] !== void 0) h =
                            true;
                        else {
                            Runtime.background.variables[c] = Runtime.background.variables[b.name];
                            Runtime.background.varDefaults[c] = d;
                            Runtime.background.cloudVariables && Runtime.background.cloudVariables[b.name] && (Runtime.background.cloudVariables[c] = true);
                            delete Runtime.background.variables[b.name];
                            Runtime.background.varDefaults && delete Runtime.background.varDefaults[b.name];
                            Runtime.background.cloudVariables && delete Runtime.background.cloudVariables[b.name]
                        }
                    else if (IDE.editingActor.variables[c] !== void 0) h = true;
                    else {
                        IDE.editingActor.variables[c] =
                            IDE.editingActor.variables[b.name];
                        IDE.editingActor.varDefaults[c] = d;
                        IDE.editingActor.cloudVariables && IDE.editingActor.cloudVariables[b.name] && (IDE.editingActor.cloudVariables[c] = true);
                        delete IDE.editingActor.variables[b.name];
                        IDE.editingActor.varDefaults && delete IDE.editingActor.varDefaults[b.name];
                        IDE.editingActor.cloudVariables && delete IDE.editingActor.cloudVariables[b.name]
                    } else if (b.isGlobal) {
                        Runtime.background.varDefaults[b.name] = d;
                        d != null && (Runtime.background.variables[b.name] = d)
                    } else {
                        IDE.editingActor.varDefaults[b.name] =
                            d;
                        d != null && (IDE.editingActor.variables[b.name] = d)
                    }
                if (h) e.find(".error").removeClass("hidden").text('Oops, the variable "' + c + '" already exists');
                else {
                    WinTools.updateVariables();
                    $.modal.close()
                }
                return false
            });
            e.find(".deleteBtn").unbind().click(function () {
                if (b.isGlobal) {
                    delete Runtime.background.variables[b.name];
                    Runtime.background.varDefaults && delete Runtime.background.varDefaults[b.name];
                    Runtime.background.cloudVariables && delete Runtime.background.cloudVariables[b.name]
                } else {
                    delete IDE.editingActor.variables[b.name];
                    IDE.editingActor.varDefaults && delete IDE.editingActor.varDefaults[b.name];
                    IDE.editingActor.cloudVariables && delete IDE.editingActor.cloudVariables[b.name]
                }
                WinTools.updateVariables();
                $.modal.close();
                return false
            });
            e.find(".cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            })
        },
        cmdEditList: function (b) {
            var c = b.name,
                d = $("#list-edit");
            d.find(".error").addClass("hidden");
            d.find("input[name=name]").val(c);
            d.find("input[name=value]").val("");
            var e = d.find("ul").empty(),
                f = null;
            IDE.editingActor &&
                IDE.editingActor.lists[c] !== void 0 ? f = IDE.editingActor.lists[c] : Runtime.background.lists[c] !== void 0 && (f = Runtime.background.lists[c]);
            for (c = 0; c < f.length; c++) e.append("<li><b>" + (c + 1) + "</b><span>" + f[c] + "</span></li>");
            d.modal();
            d.find(".okBtn").unbind().click(function () {
                var c = $.trim(d.find("input[name=name]").val()),
                    e = false;
                if (c && c != b.name) {
                    IDE.dirty();
                    if (b.isGlobal)
                        if (Runtime.background.lists[c] !== void 0) e = true;
                        else {
                            Runtime.background.lists[c] = Runtime.background.lists[b.name];
                            delete Runtime.background.lists[b.name]
                        }
                    else if (IDE.editingActor.lists[c] !==
                        void 0) e = true;
                    else {
                        IDE.editingActor.lists[c] = IDE.editingActor.lists[b.name];
                        delete IDE.editingActor.lists[b.name]
                    }
                    if (e) d.find(".error").removeClass("hidden").text('Oops, the list "' + c + '" already exists');
                    else {
                        WinTools.updateVariables();
                        $.modal.close()
                    }
                    return false
                }
            });
            d.find(".importBtn").unbind().click(function () {
                var c = $.trim(d.find("input[name=value]").val());
                try {
                    c = JSON.parse(c);
                    b.isGlobal ? Runtime.background.lists[b.name] = c : IDE.editingActor.lists[b.name] = c
                } catch (e) { }
                $.modal.close();
                return false
            });
            d.find(".deleteBtn").unbind().click(function () {
                b.isGlobal ? delete Runtime.background.lists[b.name] : delete IDE.editingActor.lists[b.name];
                WinTools.updateVariables();
                $.modal.close();
                return false
            });
            d.find(".cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            })
        },
        canDrop: function (b, c, d, e) {
            if (WinCode._enableDragToDelete && (WinCode._enableDeleteStart || !WinCode._enableDeleteStart && e.hasFlap) && !WinCode._readOnly && !$("#win-code").hasClass("hidden") && !$("#win-tools").hasClass("hidden")) {
                d = $("#win-tools .tools-code");
                if (b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight()) return true
            }
            return false
        },
        drop: function (b, c, d, e, f) {
            if (f == WinCode && (e instanceof Block || e instanceof Label)) {
                WinTools._removeAll(e);
                WinCode._broadcastChange("delete", e)
            }
            return true
        },
        hilightAccept: function (b, c) {
            if (b && c != WinTools && c != WinAnnotation) {
                $("#win-annotation");
                b instanceof Block || b instanceof Label ? $("#win-tools .deletemask").fadeIn(150) : $("#win-tools .deletemask").fadeOut(150)
            } else $("#win-tools .deletemask").fadeOut(150)
        },
        canDrag: function (b, c) {
            if (!$("#win-tools").hasClass("hidden")) {
                var d = $("#win-tools .palette .blocks");
                if (b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight()) {
                    var e = null;
                    d.find(".draggable").each(function (d, g) {
                        var h = $(g),
                            j = h.offset();
                        if (b >= j.left && b < j.left + h.outerWidth() && c >= j.top && c < j.top + h.outerHeight()) {
                            h = h.data("draggable");
                            if (!h.disabled) {
                                e = h;
                                return false
                            }
                        }
                    });
                    if (e) return true
                }
            }
            return false
        },
        getDragObj: function (b, c) {
            WinTools.hideHelpHover ||
                window.clearTimeout(WinTools._showBlockTimer);
            if (!$("#win-tools").hasClass("hidden")) {
                var d = $("#win-tools .palette .blocks");
                if (b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight()) {
                    var e = null;
                    d.find(".draggable").each(function (d, f) {
                        var j = $(f),
                            k = j.offset();
                        if (b >= k.left && (b < k.left + j.outerWidth() && c >= k.top && c < k.top + j.outerHeight()) && !j.data("draggable").disabled) {
                            e = j;
                            return false
                        }
                    });
                    if (e) {
                        $(".tooltip").detach();
                        d.find(".draggable").removeClass("selected").find("div.info").detach();
                        var d = e.data("draggable"),
                            f = d.copy();
                        f.x = e.offset().left - b;
                        f.y = e.offset().top - c;
                        (f instanceof Block || f instanceof Label) && f._computeBlockBounds();
                        f.obj = d;
                        return f
                    }
                }
            }
            return null
        },
        doubleClick: function (b, c) {
            WinTools.hideHelpHover || window.clearTimeout(WinTools._showBlockTimer);
            if (!$("#win-tools").hasClass("hidden")) {
                var d = $("#win-tools .palette .blocks");
                if (b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight()) {
                    var e = null;
                    d.find(".draggable").each(function (d,
                        g) {
                        var h = $(g),
                            j = h.offset();
                        if (b >= j.left && (b < j.left + h.outerWidth() && c >= j.top && c < j.top + h.outerHeight()) && !h.data("draggable").disabled) {
                            e = h;
                            return false
                        }
                    });
                    if (e) {
                        $(".tooltip").detach();
                        d = e.data("draggable");
                        if (d != null && d instanceof Label) {
                            d.func == "valueVar" && WinTools.cmdEditVar(d);
                            d.func == "valueList" && WinTools.cmdEditList(d)
                        }
                    }
                }
            }
        },
        dragCanceled: function () { },
        loadLibrary: function () {
            var b = $("#library-list");
            $.ajax({
                url: "api/librarylist.aspx",
                success: function (c) {
                    var c = JSON.parse(c),
                        d = b.find("ul");
                    d.empty();
                    for (var e = 0; e < c.length; e++) {
                        var f = $('<li libid="' + c[e]._id.$id + '"><span class="name"></span><span class="description"></span><span class="user"></span></li>');
                        f.find(".name").text(c[e].name);
                        f.find(".description").text(c[e].description);
                        f.find(".user").text(c[e].username);
                        f.click(function () {
                            Runtime.requireLibraryId($(this).attr("libid"), function () {
                                WinTools.reset()
                            });
                            $.modal.close();
                            return false
                        });
                        d.append(f)
                    }
                    b.modal()
                }
            })
        },
        purgeLibrary: function (b) {
            $.ajax({
                url: "api/librarydelete.aspx",
                data: {
                    id: b.classname
                },
                success: function () {
                    WinTools.removeLibrary(b)
                }
            })
        },
        removeLibrary: function (b) {
            for (var c = 0; c < Runtime.libs.length; c++)
                if (Runtime.libs[c] == b) {
                    Runtime.libs.splice(c, 1);
                    WinTools.reset();
                    break
                }
        },
        saveLibrary: function (b) {
            var c = $("#library-save");
            c.find(".title").text(g_loc.getText("libsavedlg.titlesave"));
            c.find(".error").text("").addClass("hidden");
            $("#lib-name").val(b.label);
            $("#lib-namespace").val(b.classname).attr("disabled", "disabled");
            $("#lib-description").val(b.description);
            c.find(".saveBtn .spinner").detach();
            c.modal();
            c.find(".saveBtn").unbind().click(function () {
                var c = $.trim($("#lib-name").val()),
                    e = $.trim($("#lib-description").val());
                if (!c || !e) $("#library-save .error").text("Please enter a name and description").removeClass("hidden");
                else {
                    $("#library-save .saveBtn").prepend('<img class="spinner" src="image/loaders/loader16.gif"/>');
                    b.label = c;
                    $.ajax({
                        url: "api/librarysave.aspx",
                        type: "POST",
                        data: {
                            id: b.dbid,
                            d: e,
                            pb: $("#lib-ispublic")[0].checked,
                            data: JSON.stringify(ObjectIO.serializeLibrary(b))
                        },
                        success: function (c) {
                            c =
                                JSON.parse(c);
                            if (c.result) {
                                b.description = e;
                                WinTools.reset();
                                $.modal.close()
                            } else $("#library-save .error").text("Please enter a unique namespace").removeClass("hidden")
                        }
                    })
                }
                return false
            });
            c.find(".cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            })
        },
        createLibrary: function () {
            var b = $("#library-save");
            b.find(".title").text(g_loc.getText("libsavedlg.titlecreate"));
            b.find(".error").text("").addClass("hidden");
            $("#lib-name").val("");
            $("#lib-namespace").val("").attr("disabled", null);
            $("#lib-description").val("");
            b.modal();
            b.find(".saveBtn").unbind().click(function () {
                var b = $.trim($("#lib-name").val()),
                    d = $.trim($("#lib-description").val()),
                    e = $.trim($("#lib-namespace").val());
                if (b)
                    if (e) {
                        var f = new Sprite({
                            label: b,
                            classname: e,
                            isHidden: true
                        });
                        f.description = d;
                        f.ownerid = prefs.userid;
                        $.ajax({
                            url: "api/librarysave.aspx",
                            type: "POST",
                            data: {
                                id: "",
                                ns: e,
                                d: d,
                                pb: false,
                                data: JSON.stringify(ObjectIO.serializeLibrary(f))
                            },
                            success: function (b) {
                                b = JSON.parse(b);
                                if (b.result) {
                                    f.dbid = b.id;
                                    Runtime.libs.push(f);
                                    WinTools.reset();
                                    $.modal.close()
                                } else $("#library-save .error").text("Please enter a unique namespace").removeClass("hidden")
                            }
                        })
                    } else $("#library-save .error").text("Please enter a unique namespace").removeClass("hidden");
                else $("#library-save .error").text("Please enter a name and description").removeClass("hidden");
                return false
            });
            b.find(".cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            })
        },
        showDebugger: function () {
            var b = $("#debugger");
            b.find(".variables").empty();
            b.find(".title a.refresh").unbind().click(function () {
                WinTools.refreshDebugger();
                return false
            });
            b.find("a.window-close").unbind().click(function () {
                b.addClass("hidden");
                return false
            });
            WinTools.refreshDebugger();
            b.removeClass("hidden").resizable().draggable({})
        },
        refreshDebugger: function () {
            var b = $("#debugger").find(".actors ul").empty(),
                c = $('<li><a href="#">stage</a></li>');
            b.append(c);
            (!IDE.editingActor || IDE.editingActor == Runtime.background) && c.addClass("selected");
            c.find("a").click(function () {
                WinTools.showDebugVariables(Runtime.background);
                b.find("li").removeClass("selected");
                $(this).parent().addClass("selected");
                return false
            });
            $(Runtime.sprites).each(function () {
                c = $('<li><a href="#"></a></li>');
                IDE.editingActor == this && c.addClass("selected");
                var d = this;
                c.find("a").text(d.label).click(function () {
                    WinTools.showDebugVariables(d);
                    b.find("li").removeClass("selected");
                    $(this).parent().addClass("selected");
                    return false
                });
                b.append(c)
            });
            WinTools.showDebugVariables(IDE.editingActor)
        },
        _showDebugVariables: function (b, c, d) {
            if (b instanceof Array)
                if (b.length > 0) {
                    d && c.append("<h2>" + d + "</h2>");
                    $container = $('<div class="container"></div>');
                    c.append($container);
                    c = $('<a href="#"><span class="icon-arrow-down"></span><span class="icon-arrow-up"></span></a>');
                    c.click(function () {
                        $(this).parent().toggleClass("expanded");
                        return false
                    });
                    $container.append(c);
                    $container.append('<span class="type">list</span>');
                    $container.find(">.type").text(b.join(","));
                    var e = $("<table></table>");
                    $container.append(e);
                    for (c = 0; c < b.length; c++) {
                        var f = $('<tr><td class="name"></td><td class="value"></td></tr>');
                        f.find(">.name").text(c + ":");
                        WinTools._showDebugVariables(b[c], f.find(">.value"));
                        e.append(f)
                    }
                } else d || c.text("<empty list>");
            else if (b instanceof Number || b instanceof String || b instanceof Boolean) c.text(b);
            else if (b instanceof Object) {
                var f = false,
                    e = $("<table></table>"),
                    g;
                for (g in b) {
                    f = $('<tr><td class="name"></td><td class="value"></td></tr>');
                    f.find(">.name").text(g + ":");
                    WinTools._showDebugVariables(b[g], f.find(">.value"));
                    e.append(f);
                    f = true
                }
                if (f) {
                    d && c.append("<h2>" + d + "</h2>");
                    $container = $('<div class="container"></div>');
                    c.append($container);
                    c = $('<a href="#"><span class="icon-arrow-down"></span><span class="icon-arrow-up"></span></a>');
                    c.click(function () {
                        $(this).parent().toggleClass("expanded");
                        return false
                    });
                    $container.append(c);
                    $container.append('<span class="type">object</span>');
                    $container.append(e)
                } else d || c.text("<empty object>")
            } else b ? c.text(b) : c.text("<empty>")
        },
        showDebugVariables: function (b) {
            var c, d = "Local";
            if (!b || b == Runtime.background) {
                b = Runtime.background;
                d = "Global";
                c = ["background #", "scene #", "scene name", "x gravity", "y gravity", "background offset x", "background offset y", "viewport offset x", "viewport offset y"]
            } else c = ["x position", "y position", "direction", "angle", "layer", "rotation style", "label", "costume #", "costume name", "say", "visible", "size", "volume", "width",
                "height", "density", "friction", "restitution", "angular velocity", "angular damping", "inertia", "awake", "linear damping", "x linear velocity", "y linear velocity"
            ];
            var e = $("#debugger .variables").empty();
            WinTools._showDebugVariables(b.variables, e, d);
            WinTools._showDebugVariables(b.lists, e, "    ");
            for (d = 0; d < Runtime.runningScripts.length; d++) {
                var f = Runtime.runningScripts[d];
                if (f.sprite == b) {
                    WinTools._showDebugVariables(f.fnArgs, e, "Script " + (d + 1) + " Function Arguments");
                    e.find(">div").addClass("expanded").find(">a").addClass("hidden");
                    WinTools._showDebugVariables(f.scriptVars, e, "Script " + (d + 1) + " Variables");
                    e.find(">div").addClass("expanded").find(">a").addClass("hidden")
                }
            }
            if (b != Runtime.background) {
                WinTools._showDebugVariables(Runtime.background.variables, e, "Global");
                WinTools._showDebugVariables(Runtime.background.lists, e, "    ")
            }
            e.find(">div").addClass("expanded").find(">a").addClass("hidden");
            e.append("<h2>Properties</h2>");
            d = $('<div class="container"></div>');
            e.append(d);
            e = $('<a href="#"><span class="icon-arrow-down"></span><span class="icon-arrow-up"></span></a>');
            e.click(function () {
                $(this).parent().toggleClass("expanded");
                return false
            });
            d.append(e);
            d.append('<span class="type">properties</span>');
            var g = $("<table></table>");
            d.append(g);
            $(c).each(function (c, d) {
                var e = $('<tr><td class="name"></td><td class="value"></td></tr>');
                e.find(">.name").text(d);
                e.find(">.value").text(propertyGet(d, b.label));
                g.append(e)
            })
        },
        render: function () {
            $("#win-tools .palette .blocks .draggable").each(function (b, c) {
                var d = $(c);
                d.data("draggable").getImage(function (b) {
                    d.empty();
                    d.append(b);
                    b.width = (b.naturalWidth ? b.naturalWidth : b.width) / 2
                }, 2)
            })
        },
        Button: function (b, c) {
            this.label = b;
            this.callback = c;
            this.fontSize = defaultLabelFontSize;
            this.fontColor = defaultInputFontColor;
            this.height = this.width = this.y = this.x = 0
        }
    };
WinTools.Button.prototype.getText = function () {
    return this.label
};
WinTools.Button.prototype._computeBlockBounds = function () {
    if (window.WinCode) {
        WinCode.context.font = "bold " + this.fontSize + "px Arial";
        this.width = WinCode.context.measureText(this.label).width + 6 + labelRadius * 2;
        this.height = this.fontSize + 20
    }
};
WinTools.Button.prototype.copy = function () {
    return this
};
WinTools.Button.prototype.getChildAtPoint = function (b, c) {
    return b >= this.x && b <= this.x + this.width && c >= this.y && c <= this.y + this.height ? this : null
};
WinTools.Button.prototype.draw = function (b) {
    b.save();
    b.textAlign = "left";
    b.textBaseline = "middle";
    b.font = "bold " + this.fontSize + "px Arial";
    b.strokeStyle = "#000";
    b.fillStyle = "#fff";
    var c = this.fontSize + 20;
    b.translate(this.x, this.y + (this.height - c) / 2);
    b.beginPath();
    b.moveTo(0, labelRadius);
    b.arcTo(0, 0, labelRadius, 0, labelRadius);
    b.lineTo(this.width - labelRadius, 0);
    b.arcTo(this.width, 0, this.width, labelRadius, labelRadius);
    b.lineTo(this.width, this.height - labelRadius);
    b.arcTo(this.width, this.height, this.width - labelRadius,
        this.height, labelRadius);
    b.lineTo(labelRadius, this.height);
    b.arcTo(0, this.height, 0, this.height - labelRadius, labelRadius);
    b.closePath();
    b.fill();
    b.stroke();
    b.strokeStyle = this.fontColor;
    b.fillStyle = this.fontColor;
    b.fillText(this.label, 3 + labelRadius, c / 2);
    b.restore()
};
WinTools.TextLabel = function (b) {
    this.label = b;
    this.fontSize = 20;
    this.fontColor = "#fff";
    this.height = this.width = this.y = this.x = 0
};
WinTools.TextLabel.prototype.getText = function () {
    return this.label
};
WinTools.TextLabel.prototype._computeBlockBounds = function () {
    if (window.WinCode && window.WinCode.context) {
        WinCode.context.font = "bold " + this.fontSize + "px Arial";
        this.width = WinCode.context.measureText(this.label).width + 6 + labelRadius * 2;
        this.height = this.fontSize + 20
    }
};
WinTools.TextLabel.prototype.copy = function () {
    return this
};
WinTools.TextLabel.prototype.getChildAtPoint = function () {
    return null
};
WinTools.TextLabel.prototype.draw = function (b) {
    b.save();
    b.textAlign = "left";
    b.textBaseline = "middle";
    b.font = "normal " + this.fontSize + "px Open Sans";
    b.strokeStyle = "#000";
    b.fillStyle = "#aaa";
    var c = this.fontSize + 18;
    b.translate(this.x, this.y + (this.height - c) / 2);
    b.strokeStyle = this.fontColor;
    b.fillStyle = this.fontColor;
    b.fillText(this.label, 0, c / 2);
    b.beginPath();
    b.moveTo(0, c - this.fontSize * 0.25);
    b.lineTo(WinTools.canvas.width - 20, c - this.fontSize * 0.25);
    b.stroke();
    b.restore()
};
WinTools.Resource = function (b, c, d) {
    this.path = b;
    this.imgSrc = c;
    this.name = d;
    this.img = new Image;
    this.img.src = c;
    this.hilight = false;
    this.height = this.width = this.y = this.x = 0
};
WinTools.Resource.prototype._computeBlockBounds = function () {
    this.width = this.img.width;
    this.height = this.img.height;
    if (this.width > this.height) {
        this.height = WinTools.maxImgWidth * this.height / this.width;
        this.width = WinTools.maxImgWidth
    } else {
        this.width = WinTools.maxImgHeight * this.width / this.height;
        this.height = WinTools.maxImgHeight
    }
    this.width = this.width + (resBorder + resMargin + resPadding) * 2;
    this.height = this.height + (resBorder + resMargin + resPadding) * 2
};
WinTools.Resource.prototype.copy = function () {
    return new WinMediaAssets.DragObject(this.path, this.imgSrc, this.name)
};
WinTools.Resource.prototype.getChildAtPoint = function (b, c) {
    return b >= this.x && b <= this.x + this.width && c >= this.y && c <= this.y + this.height ? this : null
};
WinTools.Resource.prototype.draw = function (b) {
    b.save();
    if (this.hilight) {
        b.strokeStyle = "#0f0";
        b.fillStyle = "#0f0";
        b.shadowColor = "#0f0";
        b.shadowBlur = 20
    } else {
        b.strokeStyle = "#777";
        b.fillStyle = "rgba(0, 0, 0, .3)"
    }
    var c = this.width - (resBorder + resPadding + resMargin) * 2,
        d = this.height - (resBorder + resPadding + resMargin) * 2;
    b.beginPath();
    b.moveTo(this.x + resMargin, this.y + resMargin);
    b.lineTo(this.x + this.width - resMargin, this.y + resMargin);
    b.lineTo(this.x + this.width - resMargin, this.y + this.height - resMargin);
    b.lineTo(this.x +
        resMargin, this.y + this.height - resMargin);
    b.closePath();
    b.fill();
    b.stroke();
    b.drawImage(this.img, this.x + resMargin + resPadding + resBorder, this.y + resMargin + resPadding + 1, c, d);
    this.path.substring(this.path.length - 6) == ".actor" && b.drawImage(WinTools.tblockTab, this.x + this.width - resMargin - WinTools.tblockTab.width, this.y + this.height - resMargin - WinTools.tblockTab.height);
    b.restore()
};
var FocusManager = {
    currentFocus: null,
    setFocus: function (b, c) {
        FocusManager.currentFocus = b.setFocus && b.setFocus(true, WinCode.context, findPos(WinCode.canvas), c) ? b : null
    },
    clearFocus: function () {
        if (FocusManager.currentFocus) {
            FocusManager.currentFocus.setFocus && FocusManager.currentFocus.setFocus(false, WinCode.context, findPos(WinCode.canvas));
            FocusManager.currentFocus = null;
            WinCode.clearSelection()
        }
    },
    getFocusedElement: function () {
        return FocusManager.currentFocus
    },
    _onKeyPress: function (b, c) {
        if (FocusManager.currentFocus) {
            if (b ==
                38 || b == 40 || b == 37 || b == 39) return FocusManager.currentFocus.keyPressed(b, c);
            if (b == 27 || b == 13 || b == 9) {
                FocusManager.clearFocus();
                return true
            }
            if (FocusManager.currentFocus.keyPressed(b, c)) {
                FocusManager.currentFocus.getRoot()._computeBlockBounds();
                return true
            }
        }
        return false
    }
},
    WinCode = {
        _scripts: [],
        _changeListeners: [],
        _saveParent: null,
        _convertFuncValue: !0,
        _convertLibValue: !0,
        lockedUnlockedSeparator: 100,
        blocksSpacing: 20,
        lockedSeparatorTop: 0,
        rightExtreme: 0,
        bottomExtreme: 0,
        canvas: null,
        context: null,
        _searchIndex: 0,
        _allowCodeEdit: !1,
        _enabled: !0,
        _readOnly: !1,
        _showHidden: !1,
        _hilightStep: !1,
        _enableInspector: !1,
        _enableHideInSandbox: !1,
        _enableLockInSandbox: !1,
        _enableSearch: !0,
        _enableContextMenu: !0,
        _enableRun: !0,
        _enableDelete: !0,
        _enableDeleteStart: !0,
        _enableFieldEdit: !0,
        _enableDragToDelete: !0,
        _enableCutCopyPaste: !0,
        _enableDoubleClick: !0,
        _enableScrolling: !0,
        _enableSandbox: !1,
        _zoomMode: "static",
        _world: null,
        _worldLeft: null,
        _worldTop: null,
        _worldTimestamp: 0,
        _worldScale: 30,
        _worldPadding: 10,
        _autoLayoutMethod: "box",
        _languages: ["JavaScript"],
        _defaultLang: 0,
        _changeListeners: [],
        isEnabled: function () {
            return WinCode._enabled
        },
        enable: function (b) {
            if (b) {
                WinCode._enabled = true;
                $("#win-code").removeClass("hidden");
                $("#win-editor .info-bar a.code").removeClass("hidden");
                $("#win-editor").hasClass("hidden") && $("#win-editor").removeClass("hidden");
                !WinProperties._enabled && $("#win-editor h1").hasClass("hidden") ? $("#win-editor").addClass("nodecorations") : $("#win-editor").removeClass("nodecorations")
            } else {
                WinCode._enabled = false;
                $("#win-code").addClass("hidden");
                $("#win-editor .info-bar a.code").addClass("hidden");
                WinProperties._enabled ? $("#win-editor h1").hasClass("hidden") && $("#win-editor").removeClass("nodecorations") : $("#win-editor").addClass("hidden")
            }
            IDE.adjustPanels()
        },
        enableDecorations: function (b) {
            b ? $("#win-editor").removeClass("nodecorations") : $("#win-editor").addClass("nodecorations");
            WinProperties.adjustWindow();
            WinCode.adjustWindow();
            IDE.adjustPanels()
        },
        enableDocked: function (b) {
            b ? $("#win-editor").addClass("docked") : $("#win-editor").removeClass("docked");
            WinProperties.adjustWindow();
            WinCode.adjustWindow();
            IDE.adjustPanels()
        },
        enableSandbox: function (b) {
            WinCode._enableSandbox = b;
            WinCode.draw()
        },
        dockedSize: function (b) {
            b == "minimized" ? $("#win-editor").removeClass("maximized").addClass("minimized").removeClass("runmode") : b == "maximized" ? $("#win-editor").addClass("maximized").removeClass("minimized").removeClass("runmode") : b == "overlay" ? $("#win-editor").removeClass("maximized").removeClass("minimized").addClass("runmode") : $("#win-editor").removeClass("maximized").removeClass("minimized").removeClass("runmode");
            WinProperties.adjustWindow();
            WinCode.adjustWindow();
            IDE.adjustPanels()
        },
        enableBlockView: function (b) {
            if (b) {
                $("#win-code .blockview").removeClass("hidden");
                WinTools.reset();
                if ($("#win-code .codeview").hasClass("hidden")) {
                    $("#win-code .blockview").css("right", "0px");
                    $("#win-code .blockview .switchview").removeClass("hidden")
                } else {
                    $("#win-code .codeview").css("left", "50%");
                    $("#win-code .blockview").css("right", "50%");
                    $("#win-code .blockview .switchview").addClass("hidden");
                    $("#win-stage").outerWidth() >
                        250 && $("#win-stage").css("width", $("#win-stage").outerWidth() * 0.6).css("height", $("#win-stage").outerHeight() * 0.6);
                    $("#win-stage").css("left", window.innerWidth - $("#win-stage").outerWidth()).css("top", window.innerHeight - $("#win-stage").outerHeight());
                    WinStage.adjustWindow()
                }
            } else {
                $("#win-code .blockview").addClass("hidden");
                if (!$("#win-code .codeview").hasClass("hidden")) {
                    $("#win-code .codeview").css("left", "0px");
                    $("#win-code .blockview .switchview").removeClass("hidden")
                }
            }
            IDE.adjustPanels()
        },
        enableCodeView: function (b) {
            if (b) {
                WinCode._generateCode();
                $("#win-code .codeview").removeClass("hidden");
                if ($("#win-code .blockview").hasClass("hidden")) {
                    $("#win-code .codeview").css("left", "0px");
                    $("#win-code .blockview .switchview").removeClass("hidden")
                } else {
                    $("#win-code .codeview").css("left", "50%");
                    $("#win-code .blockview").css("right", "50%");
                    $("#win-code .blockview .switchview").addClass("hidden");
                    $("#win-stage").outerWidth() > 250 && $("#win-stage").css("width", $("#win-stage").outerWidth() * 0.6).css("height", $("#win-stage").outerHeight() * 0.6);
                    $("#win-stage").css("left",
                        window.innerWidth - $("#win-stage").outerWidth()).css("top", window.innerHeight - $("#win-stage").outerHeight());
                    WinStage.adjustWindow()
                }
            } else {
                $("#win-code .codeview").addClass("hidden");
                if (!$("#win-code .blockview").hasClass("hidden")) {
                    $("#win-code .blockview").css("right", "0px");
                    $("#win-code .blockview .switchview").removeClass("hidden")
                }
            }
            WinCode.adjustWindow()
        },
        _generateBlocks: function () {
            if (WinCode._languages[WinCode._defaultLang] == "JavaScript") {
                var b = IDE.editingActor ? IDE.editingActor : Runtime.background;
                try {
                    var c = g_parser.parse(WinCode.editor.getValue());
                    BlockGen.generate(c);
                    Runtime.unregisterScripts(b);
                    var d = WinCode.context.offsetX,
                        e = WinCode.context.offsetY,
                        f = BlockGen.getBackground();
                    if (f.state) {
                        var g = Sprites._broadcastSpriteListeners;
                        Sprites._broadcastSpriteListeners = function () { };
                        Runtime.unregisterScripts(Runtime.background);
                        Runtime.background.update(f.state);
                        Runtime.background.variables = f.variables;
                        Runtime.background.lists = {};
                        Runtime.background.scripts = f.scripts;
                        Runtime.registerScripts(Runtime.background);
                        Sprites._broadcastSpriteListeners = g;
                        WinCode._scripts = Runtime.background.scripts;
                        WinCode._editBlocks(WinCode._scripts);
                        WinCode.relayoutBlocks()
                    } else if (IDE.editingActor) {
                        var h = BlockGen.getAllSprites();
                        if (h.length > 0) {
                            g = Sprites._broadcastSpriteListeners;
                            Sprites._broadcastSpriteListeners = function () { };
                            Runtime.unregisterScripts(IDE.editingActor);
                            IDE.editingActor.update(h[0].state);
                            IDE.editingActor.variables = h[0].variables;
                            IDE.editingActor.lists = {};
                            IDE.editingActor.scripts = h[0].scripts;
                            Runtime.registerScripts(IDE.editingActor);
                            Sprites._broadcastSpriteListeners = g;
                            WinCode._scripts = IDE.editingActor.scripts;
                            WinCode._editBlocks(WinCode._scripts);
                            WinCode.relayoutBlocks()
                        }
                    }
                    WinCode.scrollTo(-d, -e)
                } catch (j) {
                    console.log("Parse error from " + g_parser.yy.lexer.yylloc.first_line + ":" + g_parser.yy.lexer.yylloc.first_column + " to " + g_parser.yy.lexer.yylloc.last_line + ":" + g_parser.yy.lexer.yylloc.last_column);
                    console.log(j.message);
                    console.log(j.stack)
                }
            }
        },
        _generateCode: function () {
            var b = "",
                c = WinCode._languages[WinCode._defaultLang] == "Swift" ?
                new SwiftCodeGen : new CodeGen,
                b = !IDE.editingActor || IDE.editingActor == Runtime.background ? b + c.generateScene(!WinCode._allowCodeEdit) : b + c.generateActor(IDE.editingActor, !WinCode._allowCodeEdit),
                c = WinCode.editor.getSession().getScrollLeft(),
                d = WinCode.editor.getSession().getScrollTop(),
                e = WinCode.context.offsetX,
                f = WinCode.context.offsetY;
            WinCode.editor.setValue(b);
            if (val = RegExp(/}, function\s*\(\s*\)/g).exec(b))
                for (var b = val.index, g = WinCode.editor.session.getDocument().$lines, h = WinCode.editor.session.doc.getNewLineCharacter(),
                        j = 0, k = 0; k < g.length; k++) {
                    var l = WinCode.editor.session.getLine(k).length;
                    if (j + l >= b) {
                        WinCode.editor.session.foldAll(1, k);
                        break
                    }
                    j = j + (l + h.length)
                }
            WinCode.editor.clearSelection();
            WinCode.editor.gotoLine(0, 0, false);
            WinCode.clearSelection();
            WinCode.editor.getSession().setScrollLeft(c);
            WinCode.editor.getSession().setScrollTop(d);
            WinCode.scrollTo(-e, -f)
        },
        init: function () {
            $("#win-code .code canvas").bind("mousewheel", WinCode.onScroll).bind("DOMMouseScroll", WinCode.onScroll);
            $("#win-code .zoom .zoomin").click(function () {
                Blocks._scale =
                    Blocks._scale + 0.1;
                if (Blocks._scale > 2) Blocks._scale = 2;
                WinCode.draw();
                return false
            });
            $("#win-code .zoom .zoomout").click(function () {
                Blocks._scale = Blocks._scale - 0.1;
                if (Blocks._scale < 0.1) Blocks._scale = 0.1;
                WinCode.draw();
                return false
            });
            $("#win-code .zoom .zoomfit").click(function () {
                WinCode.showZoomMenu();
                return false
            });
            WinCode.canvas = $("#win-code .code canvas")[0];
            WinCode.context = WinCode.canvas.getContext("2d");
            WinCode.canvas.width = $("#win-code").innerWidth() - (!$("#win-tools").hasClass("hidden") ? $("#win-tools").outerWidth() :
                0) - 2;
            WinCode.canvas.height = $("#win-code").innerHeight() - 2;
            WinCode.canvas.width = WinCode.canvas.width * 2;
            $(WinCode.canvas).css("width", WinCode.canvas.width / 2);
            WinCode.canvas.height = WinCode.canvas.height * 2;
            WinCode.context.offsetX = 0;
            WinCode.context.offsetY = 0;
            WinCode.context.translateX = 0;
            WinCode.context.translateY = 0;
            WinCode.rightExtreme = WinCode.canvas.width;
            WinCode.bottomExtreme = WinCode.canvas.height;
            $("#win-code .code canvas").mousedown(WinCode.mousedown).mouseup(WinCode.mouseup).mousemove(WinCode.mouseover);
            $("#win-code .codeview a.switchview").click(function () {
                WinCode.enableCodeView(false);
                WinCode.enableBlockView(true);
                WinCode._generateBlocks();
                return false
            });
            $("#win-code .blockview a.switchview").click(function () {
                WinStage._isLegacyMode ? WinCode.enableBlockView(false) : WinCode.enableBlockView(true);
                WinCode.enableCodeView(true);
                return false
            });
            WinCode._languages.length > 1 && $("#win-code .codeview a.switchlang").removeClass("hidden").click(function () {
                WinCode._defaultLang = (WinCode._defaultLang + 1) % WinCode._languages.length;
                $("#win-code .codeview a.switchlang").text(WinCode._languages[WinCode._defaultLang]);
                WinCode._generateCode();
                return false
            });
            if ($("#codeview").length > 0) {
                var b = ace.require("ace/ext/language_tools");
                WinCode.editor = ace.edit("codeview");
                WinCode.editor.getSession().setMode("ace/mode/tynkerscript");
                WinCode.editor.renderer.setShowGutter(true);
                WinCode.editor.renderer.setPrintMarginColumn(false);
                WinCode.editor.setTheme("ace/theme/ambiance");
                WinCode.editor.on("change", function () {
                    if (WinCode._codeGenTimeoutId) {
                        window.clearTimeout(WinCode._codeGenTimeoutId);
                        WinCode._codeGenTimeoutId = 0
                    }
                    if (WinCode.editor.isFocused() && !$("#win-code .blockview").hasClass("hidden")) WinCode._codeGenTimeoutId = window.setTimeout(function () {
                        WinCode._allowCodeEdit && WinCode._generateBlocks()
                    }, 150)
                });
                WinCode.editor.getSession().selection.on("changeCursor", function () {
                    var b = WinCode.editor.session.getTextRange({
                        start: {
                            column: 0,
                            row: 0
                        },
                        end: WinCode.editor.getCursorPosition()
                    }),
                        c = b.length,
                        f = RegExp(/this\s*\.\s*[a-zA-Z0-9_]+.*function\s*\(\s*\)\s*{/g),
                        b = WinCode.editor.getValue(),
                        g, h = 0;
                    do
                        if (g =
                            f.exec(b)) {
                            var j = g.index;
                            f.lastIndex = g.index + g[0].length;
                            if (j > c) break;
                            h++
                        }
                    while (g);
                    if (WinCode._scripts.length > 0 && h >= 0 && h <= WinCode._scripts.length) {
                        --h < 0 && (h = 0);
                        c = WinCode._sortScripts(WinCode._scripts);
                        b = -c[h].x + (WinCode.canvas.width - c[h].width) / 2;
                        b > 0 && (b = 0);
                        h = -c[h].y + 20;
                        h > 0 && (h = 0);
                        WinCode.scrollTo(-b, -h, true, function () { })
                    }
                });
                WinCode.editor.setOptions({
                    enableBasicAutocompletion: true,
                    enableSnippets: true
                });
                WinCode.setCodeReadOnly(!WinCode._allowCodeEdit);
                var c = ace.require("ace/autocomplete/util");
                ID_REGEX =
                    /[a-zA-Z_0-9\$-\.]/;
                c.retrievePrecedingIdentifier = function (b, c, f) {
                    for (var f = f || ID_REGEX, g = [], c = c - 1; c >= 0; c--)
                        if (f.test(b[c])) g.push(b[c]);
                        else break;
                    return g.reverse().join("")
                };
                c.retrieveFollowingIdentifier = function (b, c, f) {
                    for (var f = f || ID_REGEX, g = []; c < b.length; c++)
                        if (f.test(b[c])) g.push(b[c]);
                        else break;
                    return g
                };
                b.addCompleter({
                    getCompletions: function (b, c, f, g, h) {
                        var j = [];
                        if (g) {
                            g_fnCompletion.forEach(function (b) {
                                b.indexOf(g) >= 0 && j.push({
                                    name: b,
                                    value: b,
                                    score: 1,
                                    meta: "library"
                                })
                            });
                            g_builtinsCompletion.forEach(function (b) {
                                b.indexOf(g) >=
                                    0 && j.push({
                                        name: b,
                                        value: b,
                                        score: 1,
                                        meta: "library"
                                    })
                            })
                        }
                        h(null, j)
                    }
                })
            }
            if (window.RenderCode) {
                $(".code-selector li.tynker").on("click", function (b) {
                    RenderCode.setCodeType("tynker");
                    b.preventDefault();
                    return false
                });
                $(".code-selector li.javascript").on("click", function (b) {
                    RenderCode.setCodeType("javascript");
                    b.preventDefault();
                    return false
                });
                $(".code-selector li.python").on("click", function (b) {
                    RenderCode.setCodeType("python");
                    b.preventDefault();
                    return false
                });
                $(".code-selector li.swift").on("click", function (b) {
                    RenderCode.setCodeType("swift");
                    b.preventDefault();
                    return false
                })
            }
            WinCode._world = new b2World(new b2Vec2(0, 0), true);
            WinCode._autoLayoutMethod == "box" ? WinCode.updateSimulation(true) : WinCode._autoLayoutMethod == "linear" && WinCode.relayoutBlocks(false, true)
        },
        updateSimulation: function (b) {
            var c = Date.now();
            WinCode._world.Step((c - WinCode._worldTimestamp) / 1E3, 10, 10);
            WinCode._worldTimestamp = c;
            WinCode._world.ClearForces();
            for (var c = false, d = WinCode._world.GetBodyList() ; d;) {
                if (b === true || d.IsAwake() && d.IsActive()) {
                    var e = d.GetUserData();
                    if (e && WinCode._scripts.indexOf(e) >=
                        0) {
                        b === true && d.SetAwake(true);
                        var c = true,
                            f = d.GetPosition();
                        e.x = f.x * WinCode._worldScale - e.getMaxWidth() / 2;
                        e.y = f.y * WinCode._worldScale - (e.totalHeight ? e.totalHeight : e.height) / 2;
                        e._computeBounds()
                    }
                }
                d = d.GetNext()
            }
            WinCode.draw();
            c && window.setTimeout(WinCode.updateSimulation, 1E3 / 30)
        },
        addBody: function (b) {
            var c = new b2BodyDef;
            c.type = b2Body.b2_dynamicBody;
            c.fixedRotation = true;
            c.position.x = (b.x + b.getMaxWidth() / 2) / this._worldScale;
            c.position.y = (b.y + (b.totalHeight ? b.totalHeight : b.height) / 2) / this._worldScale;
            c.angle =
                0;
            c.userData = b;
            var d = new b2FixtureDef;
            d.density = 1;
            d.friction = 1;
            d.restitution = 0.2;
            d.shape = new b2PolygonShape;
            d.shape.SetAsBox((b.getMaxWidth() + this._worldPadding) / this._worldScale / 2, ((b.totalHeight ? b.totalHeight : b.height) + this._worldPadding) / this._worldScale / 2);
            c = this._world.CreateBody(c);
            c.CreateFixture(d);
            b = b.getRoot();
            b instanceof Block && !b.hasFlap ? c.SetActive(true) : c.SetActive(false);
            WinCode._autoLayoutMethod == "box" ? WinCode.updateSimulation(true) : WinCode._autoLayoutMethod == "linear" && WinCode.relayoutBlocks(false,
                true)
        },
        updateWorldBody: function (b, c) {
            for (var d = [], e = this._world.GetBodyList() ; e;) {
                var f = e.GetUserData();
                if (f) {
                    var g = f.getRoot();
                    if (g instanceof Block && !g.hasFlap) {
                        e.SetActive(true);
                        e.SetAwake(true)
                    } else {
                        e.SetActive(false);
                        e.SetAwake(false)
                    }
                    for (var g = false, h = 0; h < this._scripts.length; h++)
                        if (this._scripts[h] == f) {
                            g = true;
                            break
                        }
                    g || d.push(e);
                    f && (b && b == f) && d.push(e)
                }
                e = e.GetNext()
            }
            for (h = 0; h < d.length; h++) this._world.DestroyBody(d[h]);
            if (!(b instanceof Block && b.func == "blockComment")) {
                e = new b2BodyDef;
                e.type =
                    b2Body.b2_dynamicBody;
                e.fixedRotation = true;
                e.position.x = (b.x + b.getMaxWidth() / 2) / this._worldScale;
                e.position.y = (b.y + (b.totalHeight ? b.totalHeight : b.height) / 2) / this._worldScale;
                e.angle = 0;
                e.userData = b;
                d = new b2FixtureDef;
                d.density = 1;
                d.friction = 1;
                d.restitution = 0.2;
                d.shape = new b2PolygonShape;
                d.shape.SetAsBox((b.getMaxWidth() + this._worldPadding) / this._worldScale / 2, ((b.totalHeight ? b.totalHeight : b.height) + this._worldPadding) / this._worldScale / 2);
                e = this._world.CreateBody(e);
                e.CreateFixture(d);
                g = b.getRoot();
                g instanceof
                Block && !g.hasFlap ? e.SetActive(true) : e.SetActive(false)
            }
            c || (WinCode._autoLayoutMethod == "box" ? WinCode.updateSimulation(true) : WinCode._autoLayoutMethod == "linear" && WinCode.relayoutBlocks(false, true))
        },
        flashBlocks: function (b, c) {
            if (c >= 0) {
                b.setSelected(!b.showSelected, true);
                WinCode.draw();
                window.setTimeout(function () {
                    WinCode.flashBlocks(b, c - 1)
                }, 100)
            }
        },
        exportScript: function () {
            for (var b = '<!DOCTYPE html>\n<html>\n<head>\n    <link href="/css/reset.css" rel="stylesheet"/>\n    <link href="ide/css/player.css" rel="stylesheet"/>\n    <script src="ide/code/runtime.js"><\/script>\n    <script src="ide/js/characters?t=standalone"><\/script>\n<script type="text/javascript">\n',
                    c = new CodeGen, b = b + c.generateScene(), d = 0; d < Runtime.sprites.length; d++) {
                c.reset();
                b = b + c.generateActor(Runtime.sprites[d])
            }
            b = b + "<\/script>\n</head>\n<body>\n</body>\n</html>\n";
            c = $("#importexportdlg");
            c.find("textarea").val(b);
            c.find(".importBtn").addClass("hidden");
            c.find(".cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            });
            c.modal()
        },
        importScript: function () {
            var b = $("#importexportdlg");
            b.find("textarea").val("");
            b.find(".importBtn").removeClass("hidden").unbind().click(function () {
                IDE.Clipboard.clear();
                var b = $("#importexportdlg textarea").val();
                IDE.setTitle(null);
                IDE.reset();
                Runtime.reset();
                try {
                    var d = g_parser.parse(b);
                    BlockGen.generate(d);
                    var e = BlockGen.getBackground();
                    Runtime.background.update(e.state);
                    Runtime.background.variables = e.variables;
                    Runtime.background.lists = {};
                    Runtime.background.scripts = e.scripts;
                    Runtime.registerScripts(Runtime.background);
                    WinCode._scripts = Runtime.background.scripts;
                    WinCode.relayoutBlocks();
                    var f = BlockGen.getAllSprites(),
                        g = f.length;
                    f.forEach(function (b) {
                        Sprites.addSprite({},
                            function (c) {
                                c.update(b.state, function (c) {
                                    c.variables = b.variables;
                                    c.lists = {};
                                    c.scripts = b.scripts;
                                    Runtime.registerScripts(c);
                                    WinCode._scripts = c.scripts;
                                    WinCode.relayoutBlocks();
                                    --g <= 0 && IDE.selectAsset(null)
                                })
                            })
                    });
                    g || IDE.selectAsset(null)
                } catch (h) {
                    console.log("Parse error from " + g_parser.yy.lexer.yylloc.first_line + ":" + g_parser.yy.lexer.yylloc.first_column + " to " + g_parser.yy.lexer.yylloc.last_line + ":" + g_parser.yy.lexer.yylloc.last_column);
                    console.log(h);
                    console.log("parse error");
                    console.log(h.message);
                    console.log(h.stack);
                    b = $('<textarea style="display:block;position:absolute;top:10px;left:10px;"></textarea>');
                    b.text("Parse error from " + g_parser.yy.lexer.yylloc.first_line + ":" + g_parser.yy.lexer.yylloc.first_column + " to " + g_parser.yy.lexer.yylloc.last_line + ":" + g_parser.yy.lexer.yylloc.last_column + "\n\n" + h.message);
                    b.css("height", window.innerHeight - 20).css("width", window.innerWidth - 20);
                    $("body").append(b)
                }
                $.modal.close();
                return false
            });
            b.find(".cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            });
            b.modal();
            return false
        },
        setReadOnly: function (b) {
            (WinCode._readOnly = b) ? $("#win-editor").css("pointer-events", "none") : $("#win-editor").css("pointer-events", "auto")
        },
        setCodeReadOnly: function (b) {
            WinCode._allowCodeEdit = !b;
            if (WinCode._allowCodeEdit) {
                $("#codeview").removeClass("noselection");
                if (WinCode.editor) {
                    WinCode.editor.setReadOnly(false);
                    WinCode.editor.setHighlightActiveLine(true)
                }
            } else {
                $("#codeview").addClass("noselection");
                if (WinCode.editor) {
                    WinCode.editor.setReadOnly(true);
                    WinCode.editor.setHighlightActiveLine(false)
                }
            }
        },
        _handleShowSearch: function (b) {
            if (b.keyCode == 13 || (b.metaKey || b.ctrlKey) && b.which == 70) {
                var c = $(this).val();
                if (c != WinCode._searchTerm) {
                    WinCode._searchIndex = 0;
                    WinCode._searchTerm = c;
                    c = WinCode.searchBlock(WinCode._searchTerm, 0)
                } else {
                    WinCode._searchIndex++;
                    (c = WinCode.searchBlock(WinCode._searchTerm, WinCode._searchIndex)) || WinCode._searchIndex--
                }
                WinCode.clearSelection();
                FocusManager.clearFocus();
                if (c) {
                    c.setSelected(true, false);
                    WinCode.centerBlock(c);
                    c instanceof LabelInput && FocusManager.setFocus(c);
                    WinCode.draw()
                }
                b.preventDefault();
                b.stopPropagation();
                return true
            }
        },
        _hasPreviousSearch: function () {
            return WinCode._searchIndex > 0
        },
        _hasNextSearch: function () {
            return WinCode._searchIndex < WinCode._codeCount - 1
        },
        _getSearchIndex: function () {
            return WinCode._searchIndex
        },
        _getTotalCount: function () {
            return WinCode._codeCount
        },
        _handlePreviousSearch: function () {
            WinCode._searchIndex--;
            if (WinCode._searchIndex < 0) WinCode._searchIndex = 0;
            else {
                if (!WinCode._searchTerm) {
                    WinCode._searchIndex = 0;
                    WinCode._searchTerm = $("#win-tools .search input").val()
                }
                var b = WinCode.searchBlock(WinCode._searchTerm,
                    WinCode._searchIndex);
                if (b) {
                    WinCode.clearSelection();
                    FocusManager.clearFocus();
                    b.setSelected(true, false);
                    WinCode.centerBlock(b);
                    b instanceof LabelInput && FocusManager.setFocus(b);
                    WinCode.draw()
                }
            }
            return false
        },
        _handleNextSearch: function () {
            WinCode._searchIndex++;
            if (!WinCode._searchTerm) {
                WinCode._searchIndex = 0;
                WinCode._searchTerm = $("#win-tools .search input").val()
            }
            var b = WinCode.searchBlock(WinCode._searchTerm, WinCode._searchIndex);
            if (b) {
                WinCode.clearSelection();
                FocusManager.clearFocus();
                b.setSelected(true,
                    false);
                WinCode.centerBlock(b);
                b instanceof LabelInput && FocusManager.setFocus(b);
                WinCode.draw()
            } else WinCode._searchIndex--;
            return false
        },
        reset: function () {
            FocusManager.clearFocus();
            WinCode._scripts = [];
            WinCode.context.offsetX = 0;
            WinCode.context.offsetY = 0;
            WinCode.draw()
        },
        adjustWindow: function () {
            if (WinCode.canvas) {
                var b = $("#win-code .code").innerHeight();
                WinCode.canvas.width = $("#win-code .code").innerWidth() * 2;
                $(WinCode.canvas).css("width", WinCode.canvas.width / 2);
                $("#win-code .infobar").length > 0 && (b = b -
                    $("#win-code .infobar").outerHeight());
                WinCode.canvas.height = b * 2;
                WinCode.rightExtreme = WinCode.canvas.width;
                WinCode.bottomExtreme = WinCode.canvas.height;
                WinCode._getScrollBounds();
                $("#win-code .trash").addClass("hidden");
                if (WinCode._zoomMode == "width") {
                    var b = WinCode.rightExtreme,
                        c = WinCode.bottomExtreme,
                        d = WinCode.canvas.width / 2,
                        e = WinCode.canvas.height / 2;
                    WinCode.context.offsetX = 0;
                    WinCode.context.offsetY = 0;
                    if (b <= d) Blocks._scale = 1;
                    else {
                        Blocks._scale = d / b;
                        if (Blocks._scale > 1) Blocks._scale = 1
                    }
                } else if (WinCode._zoomMode ==
                    "all") {
                    b = WinCode.rightExtreme;
                    c = WinCode.bottomExtreme;
                    d = WinCode.canvas.width / 2;
                    e = WinCode.canvas.height / 2;
                    WinCode.context.offsetX = 0;
                    WinCode.context.offsetY = 0;
                    if (b <= d && c <= e) Blocks._scale = 1;
                    else {
                        Blocks._scale = d / b;
                        if (c * Blocks._scale > e) Blocks._scale = e / c;
                        if (Blocks._scale > 1) Blocks._scale = 1
                    }
                }
                WinCode.draw()
            }
        },
        show: function () {
            $("#win-editor a.tabbutton").removeClass("selected");
            $("#win-editor a.code").addClass("selected")
        },
        hide: function () { },
        computeAll: function () {
            for (var b = 0; b < WinCode._scripts.length; b++) WinCode._scripts[b]._computeBounds();
            WinCode._getScrollBounds()
        },
        scrollTo: function (b, c, d, e) {
            b < 0 && (b = 0);
            c < 0 && (c = 0);
            var f = WinCode.rightExtreme + WinCode.canvas.width / 2,
                g = WinCode.bottomExtreme + WinCode.canvas.height / 2;
            if (d) {
                var h = WinCode.context.offsetX,
                    j = WinCode.context.offsetY,
                    k = -b,
                    l = -c;
                k > 0 && (k = 0);
                f > WinCode.canvas.width ? f + k < WinCode.canvas.width && (k = WinCode.canvas.width - f) : k = 0;
                l > 0 && (l = 0);
                g > WinCode.canvas.height ? g + l < WinCode.canvas.height && (l = WinCode.canvas.height - g) : l = 0;
                animate(250, function (b, c) {
                    WinCode.context.offsetX = h + (k - h) * b / c;
                    WinCode.context.offsetY =
                        j + (l - j) * b / c;
                    WinCode.draw()
                }, e)
            } else {
                WinCode.context.offsetX = -b;
                WinCode.context.offsetY = -c;
                if (WinCode.context.offsetX > 0) WinCode.context.offsetX = 0;
                if (f > WinCode.canvas.width) {
                    if (f + WinCode.context.offsetX < WinCode.canvas.width) WinCode.context.offsetX = WinCode.canvas.width - f
                } else WinCode.context.offsetX = 0;
                if (WinCode.context.offsetY > 0) WinCode.context.offsetY = 0;
                if (g > WinCode.canvas.height) {
                    if (g + WinCode.context.offsetY < WinCode.canvas.height) WinCode.context.offsetY = WinCode.canvas.height - g
                } else WinCode.context.offsetY =
                    0;
                WinCode.draw();
                e && e()
            }
        },
        centerBlock: function (b, c) {
            var d = -b.x + (WinCode.canvas.width - b.width) / 2;
            d > 0 && (d = 0);
            d < -b.x && (d = -b.x);
            var e = -b.y + (WinCode.canvas.height - b.height) / 2;
            e > 0 && (e = 0);
            e < -b.y && (e = -b.y);
            WinCode.scrollTo(-d, -e, false, c)
        },
        showAnnotation: function (b, c, d) {
            WinCode.centerBlock(b, function () {
                var e = $("#win-code .code canvas");
                IDE.showAnnotation({
                    pos: {
                        x: e.offset().left + WinCode.context.offsetX + b.x,
                        y: e.offset().top + WinCode.context.offsetY + b.y,
                        width: b.width,
                        height: b.height
                    },
                    closeCallback: d,
                    preferOffset: 30,
                    text: c
                })
            })
        },
        findBlankSpace: function () {
            var b = {};
            if (WinCode._scripts.length > 0) {
                b.x = 20;
                b.y = WinCode.bottomExtreme
            } else {
                b.x = 20;
                b.y = 20
            }
            return b
        },
        findSelected: function (b) {
            if (b) {
                if (b.showSelected) return b;
                if (b instanceof Block) {
                    if (b.label)
                        if (d = WinCode.findSelected(b.label)) return d;
                    for (c = 0; c < b._containers.length; c++)
                        if (b._containers[c] != null)
                            if (d = WinCode.findSelected(b._containers[c])) return d;
                    if (b.next != null)
                        if (d = WinCode.findSelected(b.next)) return d
                } else if (b instanceof Label)
                    for (c = 0; c < b._children.length; c++) {
                        if (b._children[c] !=
                            null)
                            if (d = WinCode.findSelected(b._children[c])) return d
                    } else if (b instanceof LabelInput && b._child != null)
                        if (d = WinCode.findSelected(b._child)) return d
            } else
                for (var c = 0; c < WinCode._scripts.length; c++) {
                    var d = WinCode.findSelected(WinCode._scripts[c]);
                    if (d) return d
                }
            return null
        },
        findEndSelected: function (b) {
            if (b instanceof Block) {
                for (var c = 0; c < b._containers.length; c++)
                    if (b._containers[c] != null) {
                        var d = WinCode.findEndSelected(b._containers[c]);
                        if (d) return d
                    }
                if (b.next != null && b.next.showSelected)
                    if (d = WinCode.findEndSelected(b.next)) return d
            } else if (b instanceof Label)
                for (c = 0; c < b._children.length; c++) {
                    if (b._children[c] != null)
                        if (d = WinCode.findEndSelected(b._children[c])) return d
                } else if (b instanceof LabelInput && b._child != null)
                    if (d = WinCode.findEndSelected(b._child)) return d;
            return b
        },
        hilightBlock: function (b, c) {
            FocusManager.clearFocus();
            b != null && WinCode.centerBlock(b, c);
            for (var d = 0; d < WinCode._scripts.length; d++) WinCode._hilightBlock(WinCode._scripts[d], b);
            WinCode.draw()
        },
        _hilightBlock: function (b, c) {
            b.hilight = b == c ? true : false;
            if (b instanceof Block) {
                WinCode._hilightBlock(b.label,
                    c);
                for (var d = 0; d < b._containers.length; d++) b._containers[d] != null && WinCode._hilightBlock(b._containers[d], c);
                b.next != null && WinCode._hilightBlock(b.next, c)
            } else if (b instanceof Label)
                for (d = 0; d < b._children.length; d++) WinCode._hilightBlock(b._children[d], c);
            else b instanceof LabelInput && b._child != null ? WinCode._hilightBlock(b._child, c) : b == c && WinCode._enableFieldEdit && FocusManager.setFocus(b)
        },
        findBlockWithId: function (b) {
            for (var c = WinCode._scripts.length - 1; c >= 0; c--) {
                var d = Blocks.findBlockWithId(WinCode._scripts[c],
                    b);
                if (d != null) return d
            }
            return null
        },
        _doAssignIds: function (b) {
            if (b instanceof Block) {
                if (!b.id) b.id = WinLessons._getId();
                WinCode._doAssignIds(b.label);
                for (var c = 0; c < b._containers.length; c++) b._containers[c] != null && WinCode._doAssignIds(b._containers[c]);
                b.next != null && WinCode._doAssignIds(b.next)
            } else if (b instanceof Label) {
                if (!b.id && (!b.parent || !(b.parent instanceof Block))) b.id = WinLessons._getId();
                for (c = 0; c < b._children.length; c++) WinCode._doAssignIds(b._children[c])
            } else b instanceof LabelInput && b._child !=
                null && WinCode._doAssignIds(b._child)
        },
        _assignIds: function () {
            WinLessons.initializeLargestId();
            for (var b = 0; b < Runtime.background.scripts.length; b++) WinCode._doAssignIds(Runtime.background.scripts[b]);
            for (b = 0; b < Runtime.sprites.length; b++)
                for (var c = Runtime.sprites[b].scripts, d = 0; d < c.length; d++) WinCode._doAssignIds(c[d])
        },
        countSearch: function (b) {
            WinCode._codeCount = 0;
            if (b = $.trim(b))
                for (; WinCode.searchBlock(b, WinCode._codeCount) ;) WinCode._codeCount++;
            return WinCode._codeCount
        },
        searchBlock: function (b, c) {
            for (var b =
                    b.toLowerCase(), d = [0], e = WinCode._scripts.length - 1; e >= 0; e--) {
                var f = WinCode._searchBlock(WinCode._scripts[e], b, c, d);
                if (f != null) return f
            }
            return null
        },
        _searchBlock: function (b, c, d, e) {
            if (b) {
                var f = g_steps[b.func];
                if (f)
                    if (("" + f.label).toLowerCase().indexOf(c) >= 0) {
                        if (d == e[0]) return b;
                        e[0]++
                    } else {
                        if (f.cat.indexOf(c) >= 0) {
                            if (d == e[0]) return b;
                            e[0]++
                        }
                    }
                else if (b.name && b.name.indexOf(c) >= 0) {
                    if (d == e[0]) return b;
                    e[0]++
                }
                if (b instanceof Block) {
                    f = WinCode._searchBlock(b.label, c, d, e);
                    if (f != null) {
                        if (d == e[0]) return f;
                        e[0]++
                    }
                    for (var g =
                            0; g < b._containers.length; g++) {
                        f = WinCode._searchBlock(b._containers[g], c, d, e);
                        if (f != null) {
                            if (d == e[0]) return f;
                            e[0]++
                        }
                    }
                    if (b.next != null) {
                        f = WinCode._searchBlock(b.next, c, d, e);
                        if (f != null) {
                            if (d == e[0]) return f;
                            e[0]++
                        }
                    }
                } else if (b instanceof Label)
                    for (g = 0; g < b._children.length; g++) {
                        f = WinCode._searchBlock(b._children[g], c, d, e);
                        if (f != null) {
                            if (d == e[0]) return f;
                            e[0]++
                        }
                    } else if (b instanceof LabelInput)
                        if (b._child != null) {
                            f = WinCode._searchBlock(b._child, c, d, e);
                            if (f != null) {
                                if (d == e[0]) return f;
                                e[0]++
                            }
                        } else if (("" + b.label).toLowerCase().indexOf(c) >=
                    0) {
                            if (d == e[0]) return b;
                            e[0]++
                        }
            }
            return null
        },
        _makeLocalVarIfMissing: function (b) {
            if ((b = $.trim(b)) && b != "_empty_") {
                var c = IDE.editingActor ? IDE.editingActor : Runtime.background,
                    d = false;
                c.variables[b] !== void 0 && (d = true);
                !d && (c != Runtime.background && Runtime.background.variables[b] !== void 0) && (d = true);
                d || (c.variables[b] = "")
            }
        },
        _makeLocalListIfMissing: function (b) {
            if ((b = $.trim(b)) && b != "_empty_") {
                var c = IDE.editingActor ? IDE.editingActor : Runtime.background,
                    d = false;
                c.lists[b] !== void 0 && (d = true);
                !d && (c != Runtime.background &&
                    Runtime.background.lists[b] !== void 0) && (d = true);
                d || (c.lists[b] = [])
            }
        },
        isScriptVariable: function (b, c) {
            if (b) {
                if (b.func == "blockControlScriptVar")
                    for (var d = b.label.getNumSockets(), e = 0; e < d; e++) {
                        var f = b.label.getSocketAtChild(e);
                        if (f._child && f._child.name == c) return true
                    }
                if (b._containers)
                    for (e = 0; e < b._containers.length; e++)
                        if (WinCode.isScriptVariable(b._containers[e], c)) return true;
                if (WinCode.isScriptVariable(b.next, c)) return true
            }
            return false
        },
        _ensureVarExists: function () { },
        refresh: function () {
            for (var b = 0; b <
                WinCode._scripts.length; b++) WinCode._scripts[b]._computeBounds();
            WinCode.draw()
        },
        reRender: function () {
            for (var b = 0; b < WinCode._scripts.length; b++) {
                var c = WinCode._scripts[b];
                c.hidden || c.reRender()
            }
            WinCode.draw()
        },
        draw: function () {
            WinCode.context.mozImageSmoothingEnabled = false;
            WinCode.context.clearRect(0, 0, WinCode.canvas.width, WinCode.canvas.height);
            WinCode.context.font = defaultLabelFontWeight + " " + defaultLabelFontSize + "px " + defaultLabelFont;
            WinCode.context.save();
            WinCode.context.scale(Blocks._scale * 2, Blocks._scale *
                2);
            WinCode.context.translate(WinCode.context.offsetX + 0.5, WinCode.context.offsetY + 0.5);
            for (var b = 0; b < WinCode._scripts.length; b++)
                if (!WinCode._enableSandbox || !WinCode._scripts[b].hiddenInSandbox) WinCode._scripts[b].hidden || WinCode._scripts[b].draw(WinCode.context);
            WinCode.context.restore()
        },
        drawExclude: function (b) {
            WinCode.context.clearRect(0, 0, WinCode.canvas.width, WinCode.canvas.height);
            WinCode.context.save();
            WinCode.context.translate(WinCode.context.offsetX + 0.5, WinCode.context.offsetY + 0.5);
            for (var c =
                    0; c < this._scripts.length; c++) WinCode._scripts[c] != b && WinCode._scripts[c].draw(WinCode.context);
            WinCode.context.restore()
        },
        editBlocksForSprite: function (b) {
            var c = false;
            if (b != null) {
                if (b.scripts != WinCode._scripts) {
                    WinCode.reset();
                    WinCode._scripts = b.scripts;
                    c = true
                }
                WinCode._editBlocks(b.scripts)
            } else {
                if (Runtime.background.scripts != WinCode._scripts) {
                    WinCode.reset();
                    WinCode._scripts = Runtime.background.scripts;
                    c = true
                }
                WinCode._editBlocks(Runtime.background.scripts)
            }
            if (c)
                if ($("#win-code .codeview:visible").length >
                    0 && $("#win-code .blockview:visible")) WinCode._generateCode();
                else {
                    $("#win-code .codeview").addClass("hidden").css("left", "0px");
                    $("#win-code .blockview").removeClass("hidden").css("right", "0px")
                }
            WinCode.draw()
        },
        _editBlocks: function (b) {
            WinCode.clearSelection();
            WinCode.reset();
            WinCode._scripts = b;
            for (var c = 0; c < b.length; c++) b[c]._computeBounds();
            $("#win-code .code canvas").outerHeight();
            WinCode._getScrollBounds();
            WinCode.draw();
            this._world = new b2World(new b2Vec2(0, 0), true);
            this._worldTimestamp = Date.now();
            var d = new b2BodyDef;
            d.type = b2Body.b2_staticBody;
            d.fixedRotation = true;
            d.position.x = 0;
            d.position.y = 0;
            d.angle = 0;
            c = new b2FixtureDef;
            c.density = 1;
            c.friction = 0.5;
            c.restitution = 0.2;
            c.shape = new b2PolygonShape;
            c.shape.SetAsBox(2E7 / WinCode._worldScale, 1 / WinCode._worldScale);
            d.position.Set(2E6 / WinCode._worldScale / 2, 0);
            var e = WinCode._world.CreateBody(d);
            e.CreateFixture(c);
            e.SetActive(true);
            c.shape.SetAsBox(1 / WinCode._worldScale, 2E7 / WinCode._worldScale);
            d.position.Set(0, 2E6 / WinCode._worldScale / 2);
            d = WinCode._world.CreateBody(d);
            d.CreateFixture(c);
            d.SetActive(true);
            WinCode._scripts = b;
            for (c = 0; c < b.length; c++) {
                d = b[c];
                !d.hidden && (!d.hiddenInSandbox && !(d instanceof Block && d.func == "blockComment")) && WinCode.addBody(b[c])
            }
        },
        onScroll: function (b) {
            var c = WinCode.rightExtreme + WinCode.canvas.width / 2,
                d = WinCode.bottomExtreme + WinCode.canvas.height / 2;
            if (WinCode._enableScrolling && $("div.choice-chooser:visible").length == 0) {
                b.preventDefault();
                b = getScrollVectors(b);
                WinCode.context.offsetX = WinCode.context.offsetX + b.x;
                if (WinCode.context.offsetX >
                    0) WinCode.context.offsetX = 0;
                if (c > WinCode.canvas.width) {
                    if (c + WinCode.context.offsetX < WinCode.canvas.width) WinCode.context.offsetX = WinCode.canvas.width - c
                } else WinCode.context.offsetX = 0;
                WinCode.context.offsetY = WinCode.context.offsetY + b.y;
                if (WinCode.context.offsetY > 0) WinCode.context.offsetY = 0;
                if (d > WinCode.canvas.height) {
                    if (d + WinCode.context.offsetY < WinCode.canvas.height) WinCode.context.offsetY = WinCode.canvas.height - d
                } else WinCode.context.offsetY = 0;
                WinCode.draw()
            }
        },
        _getScrollBounds: function () {
            var b = WinCode.findExtremes(true,
                true);
            WinCode.rightExtreme = b.right + 50;
            WinCode.bottomExtreme = b.bottom + 50
        },
        _findExtremes: function (b, c, d) {
            var e = d.x,
                f = d.y,
                g = d.x + d.width,
                h = d.y + d.height;
            if (d instanceof Block) {
                for (var j = 0; j < d._containers.length; j++)
                    if (d._containers[j] != null) {
                        var k = WinCode._findExtremes(b, c, d._containers[j]);
                        if (k.left < e) e = k.left;
                        if (k.right > g) g = k.right;
                        if (k.top < f) f = k.top;
                        if (k.bottom > h) h = k.bottom
                    }
                if (d.next != null) {
                    k = WinCode._findExtremes(b, c, d.next);
                    if (k.left < e) e = k.left;
                    if (k.right > g) g = k.right;
                    if (k.top < f) f = k.top;
                    if (k.bottom >
                        h) h = k.bottom
                }
            }
            return {
                left: e,
                right: g,
                top: f,
                bottom: h
            }
        },
        findExtremes: function (b, c) {
            var d = 1E7,
                e = 1E7,
                f = 0,
                g = 0;
            if (WinCode._scripts.length > 0)
                for (var h = 0; h < WinCode._scripts.length; h++) {
                    if (c && WinCode._scripts[h].hidden || b && !WinCode._scripts[h].hidden) {
                        var j = WinCode._findExtremes(b, c, WinCode._scripts[h]);
                        if (j.left < e) e = j.left;
                        if (j.right > f) f = j.right;
                        if (j.top < d) d = j.top;
                        if (j.bottom > g) g = j.bottom
                    }
                } else e = d = 0;
            return {
                left: e,
                right: f,
                top: d,
                bottom: g
            }
        },
        _sortScripts: function (b) {
            for (var c = [], d = 0; d < b.length; d++) c.push({
                block: b[d],
                bounds: WinCode._findExtremes(true, true, b[d])
            });
            c.sort(function (b, c) {
                return (b.block.hidden || b.block.hiddenInSandbox) && (!c.block.hidden || !c.block.hiddenInSandbox) ? 1 : (!b.block.hidden || !b.block.hiddenInSandbox) && (c.block.hidden || c.block.hiddenInSandbox) ? -1 : b.block.value && !c.block.value ? 1 : !b.block.value && c.block.value ? -1 : b.block.hasFlap && !c.block.hasFlap ? 1 : !b.block.hasFlap && c.block.hasFlap || b.block.y < c.block.y ? -1 : b.block.y > c.block.y ? 1 : b.block.x < c.block.x ? -1 : b.block.y > c.block.y ? 1 : 0
            });
            b = [];
            for (d = 0; d < c.length; d++) b.push(c[d].block);
            return b
        },
        relayoutBlocks: function (b, c) {
            IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
            var d = [],
                d = WinCode._scripts;
            b || (d = WinCode._sortScripts(WinCode._scripts));
            for (var e = WinCode.blocksSpacing * 2, f = 0; f < d.length; f++) {
                var g = d[f];
                if (!(g instanceof Block && g.func == "blockComment") && (!c || g instanceof Block && !g.hasFlap)) {
                    g.x = WinCode.blocksSpacing * 2;
                    g.y = e;
                    g._computeBounds();
                    WinCode.updateWorldBody(g, true);
                    e = e + (WinCode.blocksSpacing + (g.totalHeight ? g.totalHeight : g.height))
                }
            }
            WinCode.draw();
            WinCode._getScrollBounds();
            WinCode.scrollTo(-WinCode.context.offsetX, -WinCode.context.offsetY);
            IDE.dirty();
            WinCode._autoLayoutMethod == "box" && WinCode.updateSimulation(true)
        },
        setLayoutMethod: function (b) {
            switch (b) {
                case "none":
                    WinCode._autoLayoutMethod = "none";
                    break;
                case "box":
                    WinCode._autoLayoutMethod = "box";
                    WinCode.updateSimulation(true);
                    break;
                case "linear":
                    WinCode._autoLayoutMethod = "linear";
                    WinCode.relayoutBlocks(false, true)
            }
        },
        adjustBlocks: function (b, c, d, e) {
            for (var f = 0; f < WinCode._scripts.length; f++)
                if (e &&
                    WinCode._scripts[f].hidden || d && !WinCode._scripts[f].hidden) {
                    var g = WinCode._scripts[f];
                    g.x = g.x + b;
                    g.y = g.y + c;
                    g._computeBounds();
                    for (var h = this._world.GetBodyList() ; h;) {
                        var j = h.GetUserData();
                        if (j && j == g) {
                            h.SetTransform({
                                position: new b2Vec2(g.x / WinCode._worldScale, g.y / Blocks._scale),
                                GetAngle: function () {
                                    return 0
                                }
                            });
                            break
                        }
                        h = h.GetNext()
                    }
                }
            WinCode.draw()
        },
        addChangeListener: function (b) {
            WinCode._changeListeners.indexOf(b) < 0 && WinCode._changeListeners.push(b)
        },
        removeChangeListener: function (b) {
            b = WinCode._changeListeners.indexOf(b);
            b >= 0 && WinCode._changeListeners.splice(b, 1)
        },
        removeAllChangeListeners: function () {
            WinCode._mouseListeners = []
        },
        _broadcastChange: function (b, c) {
            b == "valueChange" && IDE.dirty();
            for (var d = 0; d < WinCode._changeListeners.length; d++) WinCode._changeListeners[d](b, c);
            !WinCode.editor.isFocused() && !$("#win-code .codeview").hasClass("hidden") && WinCode._generateCode()
        },
        getBlockAt: function (b, c) {
            for (var d, e = WinCode._scripts.length - 1; e >= 0; e--)
                if (!WinCode._scripts[e].hidden && (!WinCode._enableSandbox || !WinCode._scripts[e].hiddenInSandbox)) {
                    d =
                        WinCode._scripts[e].getChildAtPoint(b / Blocks._scale - WinCode.context.offsetX, c / Blocks._scale - WinCode.context.offsetY);
                    if (d != null) return d
                }
            return null
        },
        showContextMenu: function (b, c, d, e) {
            WinCode._mousedown = false;
            WinCode._scrolling = null;
            WinCode._resizing = null;
            if (!WinCode._readOnly && WinCode._enableContextMenu) {
                $(".choice-chooser").detach();
                var f = b,
                    g = c,
                    b = $('<div class="choice-chooser"><ul></ul></div>');
                $("body").append(b);
                b = b.find("ul");
                c = $("<li>" + g_loc.getText("menu.addannotation") + "</li>");
                c.click(function () {
                    $(".choice-chooser").detach();
                    WinAnnotation.isVisible || WinAnnotation.show();
                    WinAnnotation.switchEditMode();
                    var b = WinCode.findSelected();
                    if (b) {
                        IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                        b.detachSelected();
                        var c = $('<p><a class="link" href="#"></a></p>');
                        !IDE.editingActor || IDE.editingActor == Runtime.background ? c.find("a").attr("data-stage", "Stage") : IDE.editingActor && c.find("a").attr("data-actor", IDE.editingActor.label);
                        b instanceof Block ? c.find("a").attr("data-block", JSON.stringify(ObjectIO.genScriptObj(b))) :
                            b instanceof Label && c.find("a").attr("data-block", JSON.stringify(ObjectIO.genValueObj(b)));
                        c.find("a").attr("data-blockid", b.id);
                        c.find("a").attr("data-endblockid", WinAnnotation._getLastBlock(b).id);
                        var d = b.x,
                            e = b.y;
                        b.x = 0;
                        b.y = 0;
                        b.showDragHandle = false;
                        b.setSelected(false, true);
                        b._computeBounds();
                        c.find("a").append($(b.getImage()));
                        b.x = d;
                        b.y = e;
                        b._computeBounds();
                        WinAnnotation.addNote(c);
                        IDE.Clipboard.doUndo()
                    } else WinAnnotation.addNote("")
                });
                b.append(c);
                c = $("<li>" + g_loc.getText("menu.rearrange") + "</li>");
                c.click(function () {
                    $(".choice-chooser").detach();
                    WinCode.relayoutBlocks()
                });
                b.append(c);
                c = $('<li class="disabled">' + g_loc.getText("menu.edit") + "</li>");
                if (e && e.func == "registerFunction") c.removeClass("disabled").click(function () {
                    $(".choice-chooser").detach();
                    WinTools.cmdEditFunction(e)
                });
                else if (e && e.func == "blockControlScriptVar") c.removeClass("disabled").click(function () {
                    $(".choice-chooser").detach();
                    WinTools.cmdEditScriptVars(e)
                });
                else if (e && e.func == "blockControlCall")
                    for (d = 0; d < WinCode._scripts.length; d++) {
                        if (WinCode._scripts[d].func ==
                            "registerFunction" && WinCode._scripts[d].name == e.name) {
                            var h = WinCode._scripts[d];
                            c.removeClass("disabled").click(function () {
                                $(".choice-chooser").detach();
                                WinTools.cmdEditFunction(h)
                            });
                            break
                        }
                    } else if (e && e.func == "valueParam") {
                        if (e.parent instanceof LabelInput && e.parent.parent instanceof Label && e.parent.parent.parent instanceof Block && e.parent.parent.parent.func == "registerFunction") {
                            h = e.parent.parent.parent;
                            c.removeClass("disabled").click(function () {
                                $(".choice-chooser").detach();
                                WinTools.cmdEditFunction(h)
                            })
                        }
                    } else if (e &&
                    e.func == "valueScriptVar" && e.parent instanceof LabelInput && e.parent.parent instanceof Label && e.parent.parent.parent instanceof Block && e.parent.parent.parent.func == "blockControlScriptVar") {
                        h = e.parent.parent.parent;
                        c.removeClass("disabled").click(function () {
                            $(".choice-chooser").detach();
                            WinTools.cmdEditScriptVars(h)
                        })
                    }
                b.append(c);
                c = $('<li class="disabled">' + g_loc.getText("menu.cut") + "<span>ctrl-x</span></li>");
                e && c.removeClass("disabled").click(function () {
                    $(".choice-chooser").detach();
                    WinCode.cutSelection()
                });
                b.append(c);
                c = $('<li class="disabled">' + g_loc.getText("menu.copy") + "<span>ctrl-c</span></li>");
                e && c.removeClass("disabled").click(function () {
                    $(".choice-chooser").detach();
                    WinCode.copySelection()
                });
                b.append(c);
                c = $('<li class="disabled">' + g_loc.getText("menu.paste") + "<span>ctrl-v</span></li>");
                IDE.Clipboard.get("blocks") && c.removeClass("disabled").click(function () {
                    $(".choice-chooser").detach();
                    var b = findPos(WinCode.canvas);
                    f = f - (b.left + WinCode.context.offsetX);
                    g = g - (b.top + WinCode.context.offsetY);
                    WinCode.pasteSelection({
                        x: f,
                        y: g
                    })
                });
                b.append(c);
                if (e) {
                    c = $("<li>Tag</li>");
                    c.click(function () {
                        $(".choice-chooser").detach();
                        WinCode.tagBlock(e)
                    });
                    b.append(c)
                }
                if (e && WinCode._enableInspector) {
                    c = $("<li>Inspect Script</li>");
                    c.click(function () {
                        $(".choice-chooser").detach();
                        WinCode.inspectBlock(e)
                    });
                    b.append(c)
                }
                if (e && WinCode._enableHideInSandbox) {
                    c = e.hiddenInSandbox ? $("<li>Show in Sandbox</li>") : $("<li>Hide in Sandbox</li>");
                    c.click(function () {
                        $(".choice-chooser").detach();
                        WinCode.toggleHideInSandbox(e)
                    });
                    b.append(c)
                }
                if (e && WinCode._enableLockInSandbox) {
                    c =
                        e.lockedInSandbox ? $("<li>Unlock in Sandbox</li>") : $("<li>Lock in Sandbox</li>");
                    c.click(function () {
                        $(".choice-chooser").detach();
                        WinCode.toggleLockInSandbox(e)
                    });
                    b.append(c)
                }
                b = b.parent();
                b.css("left", f);
                if (g + b.outerHeight() > window.innerHeight)
                    if (g - b.outerHeight() > 0) b.css("top", g - b.outerHeight());
                    else {
                        c = $(".toolbar-top").outerHeight() + windowPadding;
                        if (g - c > window.innerHeight - g) {
                            b.css("top", c);
                            b.css("height", g - c)
                        } else {
                            b.css("top", g);
                            b.css("height", window.innerHeight - g)
                        }
                    }
                else b.css("top", g)
            }
        },
        showZoomMenu: function () {
            WinCode._mousedown =
                false;
            WinCode._scrolling = null;
            WinCode._resizing = null;
            $(".choice-chooser").detach();
            var b = $('<div class="choice-chooser"><ul></ul></div>');
            $("body").append(b);
            var b = b.find("ul"),
                c = $("<li>10%</li>");
            c.click(function () {
                $(".choice-chooser").detach();
                Blocks._scale = 0.1;
                WinCode.draw();
                return false
            });
            b.append(c);
            c = $("<li>25%</li>");
            c.click(function () {
                $(".choice-chooser").detach();
                WinCode._zoomMode = "static";
                Blocks._scale = 0.25;
                WinCode.draw();
                return false
            });
            b.append(c);
            c = $("<li>50%</li>");
            c.click(function () {
                $(".choice-chooser").detach();
                WinCode._zoomMode = "static";
                Blocks._scale = 0.5;
                WinCode.draw();
                return false
            });
            b.append(c);
            c = $("<li>75%</li>");
            c.click(function () {
                $(".choice-chooser").detach();
                WinCode._zoomMode = "static";
                Blocks._scale = 0.75;
                WinCode.draw();
                return false
            });
            b.append(c);
            c = $('<li><span class="icon-checkbox-unchecked"></span> 100%</li>');
            c.click(function () {
                $(".choice-chooser").detach();
                WinCode._zoomMode = "static";
                Blocks._scale = 1;
                WinCode.draw();
                return false
            });
            b.append(c);
            c = $("<li>150%</li>");
            c.click(function () {
                $(".choice-chooser").detach();
                WinCode._zoomMode = "static";
                Blocks._scale = 1.5;
                WinCode.draw();
                return false
            });
            b.append(c);
            c = $("<li>200%</li>");
            c.click(function () {
                $(".choice-chooser").detach();
                WinCode._zoomMode = "static";
                Blocks._scale = 2;
                WinCode.draw();
                return false
            });
            b.append(c);
            c = $('<li><span class="icon-expand-3"></span> Fit Width</li>');
            c.click(function () {
                $(".choice-chooser").detach();
                WinCode._zoomMode = "width";
                WinCode.adjustWindow();
                return false
            });
            b.append(c);
            c = $('<li><span class="icon-full-screen"></span> Fit All</li>');
            c.click(function () {
                $(".choice-chooser").detach();
                WinCode._zoomMode = "all";
                WinCode.adjustWindow();
                return false
            });
            b.append(c);
            var c = $("#win-code .zoom .zoomfit"),
                d = c.offset().left,
                e = c.offset().top,
                b = b.parent();
            b.css("left", d + (c.outerWidth() - b.outerWidth()) / 2);
            if (e + c.outerHeight() + b.outerHeight() > window.innerHeight)
                if (e - b.outerHeight() > 0) b.css("top", e - b.outerHeight());
                else {
                    d = $(".toolbar-top").outerHeight() + windowPadding;
                    if (e - d > window.innerHeight - e) {
                        b.css("top", d);
                        b.css("height", e - d)
                    } else {
                        b.css("top", e + c.outerHeight());
                        b.css("height", window.innerHeight -
                            e - c.outerHeight())
                    }
                }
            else b.css("top", e + c.outerHeight())
        },
        markBlockChildren: function (b, c) {
            b.marked = c;
            if (b instanceof Label)
                for (var d = 0; d < b._children.length; d++) b._children[d] instanceof LabelInput && WinCode.markBlockChildren(b._children[d], c);
            else if (b instanceof LabelInput) b._child && WinCode.markBlockChildren(b._child, c);
            else if (b instanceof Block) {
                for (d = 0; d < b.label._children.length; d++) b.label._children[d] instanceof LabelInput && WinCode.markBlockChildren(b.label._children[d], c);
                for (d = 0; d < b._containers.length; d++) b._containers[d] &&
                    WinCode.markBlockChildren(b._containers[d], c);
                b.next && WinCode.markBlockChildren(b.next, c)
            }
        },
        changeParams: function (b, c) {
            if (b)
                if (b instanceof LabelInput) {
                    if (b._child && b._child instanceof Label)
                        if (b._child.func == "valueParam") {
                            if (c[b._child.name]) {
                                b._child.name = c[b._child.name];
                                b._child.label = b._child.name;
                                b._child._children[0].label = b._child.name
                            }
                        } else WinCode.changeParams(b._child, c)
                } else if (b instanceof Label)
                    for (var d = b.getNumSockets(), e = 0; e < d; e++) WinCode.changeParams(b.getSocketAtChild(e), c);
                else if (b instanceof Block) {
                    d = b.label.getNumSockets();
                    for (e = 0; e < d; e++) WinCode.changeParams(b.label.getSocketAtChild(e), c);
                    if (b._containers)
                        for (e = 0; e < b._containers.length; e++) WinCode.changeParams(b._containers[e], c);
                    b.next && WinCode.changeParams(b.next, c)
                }
        },
        changeFuncs: function (b, c, d, e) {
            if (b) {
                if (b.func == "blockControlCall" && b.labelText == c) {
                    for (var f = [], g = b.label.getNumSockets(), h = 0; h < g; h++) f.push(b.label.getSocketAtChild(h));
                    b.labelText = e;
                    b.name = d;
                    b.label = new Label({
                        label: e,
                        cat: b.cat
                    });
                    b.label.parent = b;
                    b.label.draggable =
                        false;
                    for (var j = b.label.getNumSockets(), h = 0; h < g && h < j; h++) {
                        b.label.setValue(h, f[h]._child);
                        b.label.setValue(h, f[h].label)
                    }
                }
                if (b._containers)
                    for (h = 0; h < b._containers.length; h++) WinCode.changeFuncs(b._containers[h], c, d, e);
                b.next && WinCode.changeFuncs(b.next, c, d, e)
            }
        },
        updateFunction: function (b, c, d) {
            IDE.dirty();
            IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
            for (var e = {}, f = b.name, g = b.label.getNumSockets(), h = 0; h < g; h++) {
                var j = b.label.getSocketAtChild(h)._child.name;
                e[j] =
                    d[h];
                f = f + (" {string:" + j + "}")
            }
            WinCode.changeParams(b.next, e);
            g = e = c;
            for (h = 0; h < d.length; h++) {
                e = e + (" {param:" + d[h] + "}");
                g = g + (" {string:" + d[h] + "}")
            }
            for (h = 0; h < WinCode._scripts.length; h++) {
                WinCode.changeFuncs(WinCode._scripts[h], f, c, g);
                WinCode._scripts[h]._computeBounds()
            }
            b.labelText = e;
            b.name = c;
            b.label = new Label({
                label: e + " {button:editfn}",
                cat: b.cat
            });
            b.label.parent = b;
            b.label.draggable = false;
            b._computeBounds();
            WinCode.draw();
            WinTools.updateFunctions()
        },
        changeScriptVars: function (b, c) {
            if (b instanceof LabelInput) {
                if (b._child &&
                    b._child instanceof Label && b._child.func == "valueScriptVar" && c[b._child.name]) {
                    b._child.name = c[b._child.name];
                    b._child.label = b._child.name;
                    b._child._children[0].label = b._child.name
                }
            } else if (b) {
                for (var d = b.label.getNumSockets(), e = 0; e < d; e++) WinCode.changeScriptVars(b.label.getSocketAtChild(e), c);
                if (b._containers)
                    for (e = 0; e < b._containers.length; e++) WinCode.changeScriptVars(b._containers[e], c);
                b.next && WinCode.changeScriptVars(b.next, c)
            }
        },
        updateScriptVars: function (b, c) {
            IDE.dirty();
            IDE.Clipboard.undoBlockAction(IDE.editingActor ?
                IDE.editingActor : Runtime.background);
            for (var d = {}, e = b.label.getNumSockets(), f = 0; f < e; f++) {
                var g = b.label.getSocketAtChild(f)._child.name;
                d[g] = c[f]
            }
            WinCode.changeScriptVars(b.next, d);
            d = "script variables";
            for (f = 0; f < c.length; f++) d = d + (" {scriptvar:" + c[f] + "}");
            d = d + "{varargs:valueScriptVar}";
            b.labelText = d;
            b.label = new Label({
                label: d,
                cat: b.cat
            });
            b.label.parent = b;
            b.label.draggable = false;
            b._computeBounds();
            WinCode.draw()
        },
        tagBlock: function (b) {
            var c = $("#edit-tags");
            c.find("input[type=text]").val(b.tags ? b.tags.join(",") :
                "");
            c.modal();
            c.find(".okBtn").unbind().click(function () {
                IDE.dirty();
                b.tags = c.find("input[type=text]").val();
                b.tags = b.tags.split(",");
                for (var d = 0; d < b.tags.length; d++) b.tags[d] = $.trim(b.tags[d]);
                b.tags.length == 0 && delete b.tags;
                WinCode.draw();
                $.modal.close();
                return false
            });
            c.find(".cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            })
        },
        _cleanScript: function (b) {
            if (b.values)
                if (b.values.length == 0) delete b.values;
                else
                    for (var c = 0; c < b.values.length; c++) WinCode._cleanScript(b.values[c]);
            if (b.containers)
                if (b.containers.length ==
                    0) delete b.containers;
                else
                    for (c = 0; c < b.containers.length; c++) b.containers[c] && WinCode._cleanScript(b.containers[c]);
            b.id && delete b.id;
            b.next && WinCode._cleanScript(b.next);
            return b
        },
        inspectBlock: function (b) {
            b = b.getRoot();
            if (b instanceof Block) var c = ObjectIO.genScriptObj(b);
            else b instanceof Label && (c = ObjectIO.genValueObj(b));
            c = WinCode._cleanScript(c);
            c = JSON.stringify(c);
            b = $("#importexportdlg");
            b.find(".importBtn").addClass("hidden");
            b.find("textarea").val(c);
            b.modal();
            b.find(".cancelBtn").unbind().click(function () {
                $.modal.close();
                return false
            });
            return false
        },
        toggleHideInSandbox: function (b) {
            b.hiddenInSandbox = !b.hiddenInSandbox;
            IDE.dirty();
            return false
        },
        toggleLockInSandbox: function (b) {
            WinCode._lockInSandbox(b, !b.lockedInSandbox);
            IDE.dirty();
            return false
        },
        _lockInSandbox: function (b, c) {
            b.lockedInSandbox = c;
            for (var d = 0; d < b._containers.length; d++) WinCode._lockInSandbox(b._containers[d], c);
            b.next && WinCode._lockInSandbox(b.next, c)
        },
        editComment: function (b) {
            if (b.func == "blockComment") {
                var c = $("#edit-comment");
                c.find("textarea").val(b.labelText);
                c.modal();
                c.find(".okBtn").unbind().click(function () {
                    IDE.dirty();
                    b.labelText = c.find("textarea").val();
                    WinCode.draw();
                    $.modal.close();
                    return false
                });
                c.find(".cancelBtn").unbind().click(function () {
                    $.modal.close();
                    return false
                })
            }
        },
        doubleClick: function (b, c) {
            if (WinCode._enableDoubleClick && !$("#win-code").hasClass("hidden") && !$("#win-code .blockview").hasClass("hidden")) {
                var d = b,
                    e = c,
                    f = $("#win-code"),
                    g = f.find(".zoom");
                if (!(d > g.offset().left && d < g.offset().left + g.outerWidth() && e > g.offset().top && e < g.offset().top +
                        g.outerHeight()) && d >= f.offset().left && d <= f.offset().left + f.outerWidth() && e >= f.offset().top && e <= f.offset().top + f.outerHeight()) {
                    f = findPos(WinCode.canvas);
                    d = d - f.left;
                    e = e - f.top;
                    if (d >= 0 && d < WinCode.canvas.width && e >= 0 && e < WinCode.canvas.height)
                        if (f = WinCode.getBlockAt(d, e))
                            if (WinCode._enableFieldEdit && f.func == "registerFunction") WinTools.cmdEditFunction(f);
                            else if (WinCode._enableFieldEdit && f.func == "valueParam") f.parent instanceof LabelInput && (f.parent.parent instanceof Label && f.parent.parent.parent instanceof Block && f.parent.parent.parent.func == "registerFunction") && WinTools.cmdEditFunction(f.parent.parent.parent);
                            else if (WinCode._enableFieldEdit && f.func == "blockControlScriptVar") WinTools.cmdEditScriptVars(f);
                            else if (WinCode._enableFieldEdit && f.func == "valueScriptVar") f.parent instanceof LabelInput && (f.parent.parent instanceof Label && f.parent.parent.parent instanceof Block && f.parent.parent.parent.func == "blockControlScriptVar") && WinTools.cmdEditScriptVars(f.parent.parent.parent);
                            else if (WinCode._enableFieldEdit &&
                                f.func == "blockComment") WinCode.editComment(f);
                            else {
                                if (WinCode._enableRun) {
                                    d = f.getRoot();
                                    d = new Script({
                                        sprite: IDE.editingActor ? IDE.editingActor : Runtime.background,
                                        scriptBlock: d
                                    });
                                    Runtime.scheduleToRun(d)
                                }
                            } else if (Blocks._scale != 1) {
                                d = d / Blocks._scale - WinCode.context.offsetX;
                                e = e / Blocks._scale - WinCode.context.offsetY;
                                Blocks._scale = 1;
                                WinCode.context.offsetX = WinCode.canvas.width / 2 - d;
                                if (WinCode.context.offsetX > 0) WinCode.context.offsetX = 0;
                                WinCode.context.offsetY = WinCode.canvas.height / 2 - e;
                                if (WinCode.context.offsetY >
                                    0) WinCode.context.offsetY = 0;
                                WinCode.draw()
                            }
                }
            }
        },
        canDrag: function (b, c, d) {
            if (!WinCode._resizing && !$("#win-code").hasClass("hidden") && !$("#win-code .blockview").hasClass("hidden")) {
                var e = b,
                    f = c,
                    g = $("#win-code");
                if (e >= g.offset().left && e <= g.offset().left + g.outerWidth() && f >= g.offset().top && f <= g.offset().top + g.outerHeight()) {
                    if (FocusManager.getFocusedElement()) {
                        g = FocusManager.getFocusedElement().getPopup();
                        if (g != null && g.length > 0 && e >= g.offset().left && e < g.offset().left + g.width() && f >= g.offset().top && f < g.offset().top +
                            g.height()) return false
                    }
                    g = findPos(WinCode.canvas);
                    e = e - g.left;
                    f = f - g.top;
                    if (e >= 0 && e < WinCode.canvas.width && f >= 0 && f < WinCode.canvas.height) {
                        FocusManager.clearFocus();
                        e = WinCode.getBlockAt(e, f);
                        if (WinCode._readOnly)
                            if (e) WinCode._broadcastChange("select", e);
                            else return true;
                        else if (e == null)
                            if (d == 3) WinCode.showContextMenu(b, c, d, null);
                            else return true;
                        else {
                            if (d == 3) {
                                WinCode.showContextMenu(b, c, d, e);
                                return false
                            }
                            return WinCode._enableSandbox && (e.getRoot().hiddenInSandbox || e.lockedInSandbox) ? false : true
                        }
                    }
                }
            }
            return false
        },
        getDragObj: function (b, c) {
            if (!WinCode._readOnly && !$("#win-code").hasClass("hidden") && !$("#win-code .blockview").hasClass("hidden")) {
                var d = b,
                    e = c,
                    f = $("#win-code");
                if (d >= f.offset().left && d <= f.offset().left + f.outerWidth() && e >= f.offset().top && e <= f.offset().top + f.outerHeight()) {
                    f = findPos(WinCode.canvas);
                    d = d - f.left;
                    e = e - f.top;
                    if (d >= 0 && d < WinCode.canvas.width && e >= 0 && e < WinCode.canvas.height) {
                        var g = WinCode.getBlockAt(d, e);
                        if (g != null) {
                            var h = null;
                            IDE.dirty();
                            g.id || WinCode._assignIds();
                            if (g.showSelected) {
                                g = WinCode.findSelected();
                                (h = g.getRoot()) && Runtime.stopBlock(h);
                                IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                                if (g instanceof Label && g.parent instanceof LabelInput && g.parent.parent instanceof Label && g.parent.parent.parent instanceof Block && (!g.parent.parent.parent.hasFlap && g.func == "valueParam" || g.parent.parent.parent.func == "blockControlScriptVar" && g.func == "valueScriptVar")) {
                                    IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                                    g = g.copy()
                                } else if (g instanceof Block) g.detachSelected();
                                else {
                                    g.detach();
                                    g.setSelected(false, true)
                                }
                                var j = WinCode._scripts.indexOf(g);
                                if (j >= 0) {
                                    WinCode._scripts.splice(j, 1);
                                    Runtime.unregisterBlock(g)
                                }
                                h && WinCode.updateWorldBody(h)
                            } else {
                                WinCode.clearSelection();
                                if (g instanceof Label && g.parent instanceof LabelInput && g.parent.parent instanceof Label && g.parent.parent.parent instanceof Block && (!g.parent.parent.parent.hasFlap && g.func == "valueParam" || g.parent.parent.parent.func == "blockControlScriptVar" && g.func == "valueScriptVar")) {
                                    IDE.Clipboard.undoBlockAction(IDE.editingActor ?
                                        IDE.editingActor : Runtime.background);
                                    g = g.copy()
                                } else {
                                    IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                                    j = g.x + slotBegin + slotWidth;
                                    if (g instanceof Block && g.label) {
                                        var k = g.label.getSocketAtChild(0);
                                        if (k && k.x > j) j = k.x
                                    } else if (g instanceof Label)
                                        if ((k = g.getSocketAtChild(0)) && k.x > j) j = k.x;
                                    if (g instanceof Block && (d / Blocks._scale - WinCode.context.offsetX < g.x || d / Blocks._scale - WinCode.context.offsetX > j)) {
                                        if (g.parent) (h = g.getRoot()) && Runtime.stopBlock(h);
                                        j = null;
                                        if (g.next) {
                                            g.next.parent =
                                                g.parent;
                                            j = g.next;
                                            if (g.next.parent == null) {
                                                WinCode._scripts.push(g.next);
                                                WinCode.updateWorldBody(g.next)
                                            }
                                        }
                                        if (g.parent) {
                                            for (var j = g.parent, k = false, l = 0; l < g.parent._containers.length; l++)
                                                if (g.parent._containers[l] == g) {
                                                    g.parent._containers[l] = g.next;
                                                    k = true;
                                                    break
                                                }
                                            if (!k) g.parent.next = g.next
                                        }
                                        j && j._computeBounds();
                                        g.next = null;
                                        g.parent = null
                                    } else {
                                        if (g.parent) (h = g.getRoot()) && Runtime.stopBlock(h);
                                        g.detach()
                                    }
                                    j = WinCode._scripts.indexOf(g);
                                    j >= 0 && WinCode._scripts.splice(j, 1);
                                    Runtime.unregisterBlock(g)
                                }
                            }
                            g.x = g.x + (f.left +
                                WinCode.context.offsetX - (d / Blocks._scale + f.left));
                            g.y = g.y + (f.top + WinCode.context.offsetY - (e / Blocks._scale + f.top));
                            g._computeBlockBounds();
                            WinCode.draw();
                            h && WinCode.updateWorldBody(h);
                            return g
                        }
                    }
                }
            }
            return null
        },
        canDrop: function (b, c, d, e) {
            if (!WinCode._readOnly && !$("#win-code").hasClass("hidden") && !$("#win-code .blockview").hasClass("hidden")) {
                d = $("#win-code");
                if (b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight()) {
                    d = findPos(WinCode.canvas);
                    b = b - d.left;
                    c = c - d.top;
                    if ((e instanceof Block || e instanceof Label) && b >= 0 && b < WinCode.canvas.width && c >= 0 && c < WinCode.canvas.height) {
                        FocusManager.clearFocus();
                        return true
                    }
                }
            }
            return false
        },
        clearSelection: function () {
            for (var b = Runtime.background, c = 0; c < b.scripts.length; c++) b.scripts[c].setSelected(false, true);
            for (var d = 0; d < Runtime.sprites.length; d++) {
                b = Runtime.sprites[d];
                for (c = 0; c < b.scripts.length; c++) b.scripts[c].setSelected(false, true)
            }
            for (d = 0; d < Runtime.libs.length; d++) {
                b = Runtime.libs[d];
                for (c = 0; c < b.scripts.length; c++) b.scripts[c].setSelected(false,
                    true)
            }
            WinCode.draw()
        },
        getSelection: function () {
            for (var b = [], c = 0; c < WinCode._scripts.length; c++) WinCode._getStartSelection(WinCode._scripts[c], b);
            return b
        },
        _getStartSelection: function (b, c) {
            if (b instanceof Label)
                if (b.showSelected) c.push(b);
                else
                    for (var d = b.getNumSockets(), e = 0; e < d; e++) {
                        var f = b.getSocketAtChild(e);
                        f._child && WinCode._getStartSelection(f._child, c)
                    } else if (b.showSelected) c.push(b);
                    else {
                        WinCode._getStartSelection(b.label, c);
                        if (b._containers)
                            for (e = 0; e < b._containers.length; e++) b._containers[e] !=
                                null && WinCode._getStartSelection(b._containers[e], c);
                        b.next && WinCode._getStartSelection(b.next, c)
                    }
        },
        deleteSelection: function () {
            IDE.dirty();
            IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
            for (var b = WinCode.getSelection(), c = 0; c < b.length; c++) {
                var d = b[c];
                if (!(d instanceof Label && d.parent instanceof LabelInput && d.parent.parent instanceof Label && d.parent.parent.parent instanceof Block && (d.parent.parent.parent.func == "registerFunction" && d.func == "valueParam" || d.parent.parent.parent.func ==
                        "blockControlScriptVar" && d.func == "valueScriptVar"))) {
                    var e = d.getRoot();
                    e && Runtime.stopBlock(e);
                    if (d instanceof Block) {
                        var f = d.detachSelected();
                        if (f) {
                            WinCode._scripts.push(f);
                            WinCode.updateWorldBody(f)
                        }
                    } else {
                        d.detach();
                        d.setSelected(false, true)
                    }
                    f = WinCode._scripts.indexOf(d);
                    if (f >= 0) {
                        WinCode._scripts.splice(f, 1);
                        Runtime.unregisterBlock(d)
                    }
                    WinCode._broadcastChange("delete", d);
                    e && WinCode.updateWorldBody(e)
                }
            }
            WinCode.computeAll();
            WinCode.draw()
        },
        cutSelection: function () {
            if (WinCode._enableCutCopyPaste) {
                IDE.dirty();
                IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                for (var b = WinCode.getSelection(), c = [], d = 0; d < b.length; d++)
                    if (b[d] instanceof Block) c.push(b[d].copySelection());
                    else {
                        b[d].setSelected(false, true);
                        c.push(b[d].copy())
                    }
                IDE.Clipboard.clear();
                IDE.Clipboard.add("blocks", c);
                for (d = 0; d < b.length; d++) {
                    c = b[d];
                    if (!(c instanceof Label && c.parent instanceof LabelInput && c.parent.parent instanceof Label && c.parent.parent.parent instanceof Block && (c.parent.parent.parent.func == "registerFunction" &&
                            c.func == "valueParam" || c.parent.parent.parent.func == "blockControlScriptVar" && c.func == "valueScriptVar"))) {
                        var e = c.getRoot();
                        e && Runtime.stopBlock(e);
                        if (c instanceof Block) {
                            var f = c.detachSelected();
                            if (f) {
                                WinCode._scripts.push(f);
                                WinCode.updateWorldBody(f)
                            }
                        } else {
                            c.detach();
                            c.setSelected(false, true)
                        }
                        f = WinCode._scripts.indexOf(c);
                        if (f >= 0) {
                            WinCode._scripts.splice(f, 1);
                            Runtime.unregisterBlock(c)
                        }
                        WinCode._broadcastChange("delete", c);
                        e && WinCode.updateWorldBody(e)
                    }
                }
                WinCode.computeAll();
                WinCode.draw()
            }
        },
        copySelection: function () {
            if (WinCode._enableCutCopyPaste) {
                for (var b =
                        WinCode.getSelection(), c = [], d = 0; d < b.length; d++)
                    if (b[d] instanceof Block) c.push(b[d].copySelection());
                    else {
                        b[d].setSelected(false, true);
                        c.push(b[d].copy())
                    }
                IDE.Clipboard.clear();
                IDE.Clipboard.add("blocks", c)
            }
        },
        pasteSelection: function () {
            if (WinCode._enableCutCopyPaste) {
                IDE.dirty();
                IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                var b = IDE.Clipboard.get("blocks");
                if (b)
                    for (var c = 0; c < b.length; c++) {
                        var d = b[c].copy();
                        d.x = -WinCode.context.offsetX + WinCode.canvas.width / 4;
                        d.y = -WinCode.context.offsetY + WinCode.canvas.height / 4;
                        d._computeBounds();
                        WinCode._scripts.push(d);
                        WinCode.updateWorldBody(d);
                        if (b[c].func.substring(0, 8) == "register") {
                            var e = IDE.editingActor ? IDE.editingActor : Runtime.background;
                            if (e.id && e.classname)
                                for (c = 0; c < Runtime.sprites.length; c++) {
                                    var f = Runtime.sprites[c];
                                    if (f.id == e.id && f.classname == e.classname) {
                                        Runtime.unregisterScripts(f);
                                        Runtime.registerScripts(f)
                                    }
                                } else {
                                e = new Script({
                                    sprite: e,
                                    scriptBlock: d
                                });
                                e.currentBlock = e.scriptBlock;
                                e.invokeStep()
                            }
                        }
                        WinCode._broadcastChange("attachTo",
                            d);
                        WinCode._getScrollBounds()
                    }
                WinCode.computeAll();
                WinCode.draw()
            }
        },
        mousedown: function (b) {
            var c = findPos(WinCode.canvas),
                d = b.pageX - c.left,
                c = b.pageY - c.top;
            WinCode._xStart = d - WinCode.context.offsetX;
            WinCode._yStart = c - WinCode.context.offsetY;
            var e = WinCode.getBlockAt(d, c);
            if (e) {
                if (e.func == "blockComment" && WinCode._xStart >= (e.x + e.width - 20) * Blocks._scale && WinCode._yStart >= (e.y + e.height - 20) * Blocks._scale) WinCode._resizing = {
                    block: e,
                    x: b.pageX,
                    y: b.pageY
                }
            } else {
                WinCode.clearSelection();
                WinCode.draw();
                WinCode._scrolling = {
                    scrollX: WinCode.context.offsetX,
                    scrollY: WinCode.context.offsetY,
                    x: d,
                    y: c
                }
            }
        },
        mouseup: function (b) {
            if (b.which != 3) {
                b.shiftKey || WinCode.clearSelection();
                WinCode._mousedown = false;
                WinCode._resizing = null;
                WinCode._scrolling = null;
                var c = findPos(WinCode.canvas),
                    d = b.pageX - c.left,
                    e = b.pageY - c.top;
                WinCode._xStart = d / Blocks._scale - WinCode.context.offsetX;
                WinCode._yStart = e / Blocks._scale - WinCode.context.offsetY;
                c = WinCode.getBlockAt(d, e);
                if (!WinCode._readOnly && c != null && (!WinCode._enableSandbox || !c.getRoot().hiddenInSandbox &&
                        !c.lockedInSandbox)) {
                    var f;
                    c instanceof Label ? f = c.getInputAtPoint(d / Blocks._scale - WinCode.context.offsetX, e / Blocks._scale - WinCode.context.offsetY) : c instanceof Block && (f = c.getInputAtPoint(d / Blocks._scale - WinCode.context.offsetX, e / Blocks._scale - WinCode.context.offsetY));
                    if (f != null && WinCode._enableFieldEdit) {
                        FocusManager.setFocus(f, {
                            x: d - WinCode.context.offsetX,
                            y: e - WinCode.context.offsetY
                        });
                        WinCode.context.save();
                        WinCode.context.translate(WinCode.context.offsetX + 0.5, WinCode.context.offsetY + 0.5);
                        f.draw(WinCode.context);
                        WinCode.context.restore()
                    }
                    if (c) {
                        d = c.x + slotBegin + slotWidth;
                        if (c instanceof Block && c.label) {
                            if ((f = c.label.getSocketAtChild(0)) && f.x > d) d = f.x
                        } else if (c instanceof Label)
                            if ((f = c.getSocketAtChild(0)) && f.x > d) d = f.x;
                        if (b.shiftKey) {
                            WinCode._assignIds();
                            (b = WinCode.findSelected()) ? b.setSelected(true, c.id) : c instanceof Block && WinCode._xStart >= c.x && WinCode._xStart <= d ? c.setSelected(true, true) : c.setSelected(true, false)
                        } else {
                            c instanceof Block && WinCode._xStart >= c.x && WinCode._xStart <= d ? c.setSelected(true, true) : c.setSelected(true,
                                false);
                            if (!$("#win-code .codeview").hasClass("hidden")) {
                                c = c.getRoot();
                                b = -1;
                                d = WinCode._sortScripts(WinCode._scripts);
                                for (f = 0; f < d.length; f++)
                                    if (d[f] == c) {
                                        b = f;
                                        break
                                    }
                                if (b >= 0) {
                                    c = RegExp(/this\s*\.\s*[a-zA-Z0-9_]+.*function\s*\(\s*\)\s*{/g);
                                    d = WinCode.editor.getValue();
                                    e = 0;
                                    do
                                        if (f = c.exec(d)) {
                                            var g = f.index;
                                            c.lastIndex = f.index + f[0].length;
                                            if (b == e)
                                                for (var h = WinCode.editor.session.getDocument().$lines, j = WinCode.editor.session.doc.getNewLineCharacter(), k = 0, l = 0; l < h.length; l++) {
                                                    var m = WinCode.editor.session.getLine(l).length;
                                                    if (k + m >= g) {
                                                        WinCode.editor.gotoLine(l + 1, 0, true);
                                                        break
                                                    }
                                                    k = k + (m + j.length)
                                                }
                                            e++
                                        }
                                    while (f)
                                }
                            }
                        }
                        WinCode.draw()
                    }
                }
            }
        },
        mouseover: function (b) {
            var c = b.pageX,
                b = b.pageY,
                d = findPos(WinCode.canvas);
            if (WinCode._resizing) {
                c = c - (d.left + WinCode.context.offsetX);
                b = b - (d.top + WinCode.context.offsetY);
                d = WinCode._resizing.block;
                d.width = c - d.x;
                if (d.width < 20) d.width = 20;
                d.height = b - d.y;
                if (d.height < 20) d.height = 20;
                WinCode.draw();
                WinCode._getScrollBounds()
            } else if (WinCode._scrolling) {
                if (WinCode._enableScrolling) {
                    c = c - d.left;
                    b = b - d.top;
                    WinCode.context.offsetX =
                        WinCode._scrolling.scrollX - (WinCode._scrolling.x - c) / Blocks._scale;
                    WinCode.context.offsetY = WinCode._scrolling.scrollY - (WinCode._scrolling.y - b) / Blocks._scale;
                    if (WinCode.context.offsetX > 0) WinCode.context.offsetX = 0;
                    if (WinCode.rightExtreme > 0 && -WinCode.context.offsetX > WinCode.rightExtreme) WinCode.context.offsetX = -WinCode.rightExtreme / Blocks._scale;
                    if (WinCode.context.offsetY > 0) WinCode.context.offsetY = 0;
                    if (WinCode.bottomExtreme > 0 && -WinCode.context.offsetY > WinCode.bottomExtreme) WinCode.context.offsetY = -WinCode.bottomExtreme /
                        Blocks._scale;
                    WinCode.draw()
                }
            } else if (!DragLayer._draggingObj && !WinCode._readOnly && !$("#win-code").hasClass("hidden")) {
                var e = $("#win-code");
                if (c >= e.offset().left && c <= e.offset().left + e.outerWidth() && b >= e.offset().top && b <= e.offset().top + e.outerHeight()) {
                    c = c - d.left;
                    b = b - d.top;
                    c = WinCode.getBlockAt(c, b);
                    if (c != null && (c instanceof Block || c instanceof Label) && (!WinCode._enableSandbox || !c.getRoot().hiddenInSandbox && !c.lockedInSandbox)) {
                        if (WinCode._lastHoverBlock) WinCode._lastHoverBlock.showDragHandle = false;
                        WinCode._lastHoverBlock = c;
                        c.showDragHandle = true;
                        WinCode.draw();
                        $("#win-code").css("cursor", "pointer")
                    } else if (WinCode._lastHoverBlock) {
                        WinCode._lastHoverBlock.showDragHandle = false;
                        WinCode._lastHoverBlock = null;
                        WinCode.draw();
                        $("#win-code").css("cursor", "pointer")
                    } else $("#win-code").css("cursor", "move")
                }
            }
        },
        dragOver: function (b, c, d, e) {
            if (!WinCode._readOnly && !$("#win-code").hasClass("hidden") && !$("#win-code .blockview").hasClass("hidden")) {
                var d = $("#win-code"),
                    f = b + e.x,
                    g = c + e.y,
                    h = b + e.x + e.width,
                    j = e instanceof
                Label ? c + e.y + e.height : c + e.y + e.totalHeight, k = d.find(".trash");
                if (WinCode._enableDragToDelete && (WinCode._enableDeleteStart || !WinCode._enableDeleteStart && e.hasFlap) && !k.hasClass("hidden") && h >= k.offset().left && f <= k.offset().left + k.outerWidth() && j >= k.offset().top && g <= k.offset().top + k.outerHeight()) k.addClass("hover");
                else if (b >= d.offset().left && b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight()) {
                    k.removeClass("hover");
                    d = findPos(WinCode.canvas);
                    b = b - d.left;
                    c = c - d.top;
                    if (WinCode._enableScrolling &&
                        c < 20) {
                        WinCode.context.offsetY = WinCode.context.offsetY + 20;
                        if (WinCode.context.offsetY > 0) WinCode.context.offsetY = 0;
                        WinCode.draw()
                    } else if (WinCode._enableScrolling && b < 20) {
                        WinCode.context.offsetX = WinCode.context.offsetX + 20;
                        if (WinCode.context.offsetX > 0) WinCode.context.offsetX = 0;
                        WinCode.draw()
                    } else if (WinCode._enableScrolling && b > WinCode.canvas.width - 20) {
                        WinCode.context.offsetX = WinCode.context.offsetX - 20;
                        WinCode.draw()
                    }
                    if ((e instanceof Block || e instanceof Label) && b >= 0 && b < WinCode.canvas.width && c >= 0 && c < WinCode.canvas.height) {
                        WinCode.draw();
                        d = e.x;
                        f = e.y;
                        e.x = e.x + (b / Blocks._scale - WinCode.context.offsetX);
                        e.y = e.y + (c / Blocks._scale - WinCode.context.offsetY);
                        if (e instanceof Label)
                            for (g = 0; g < WinCode._scripts.length; g++) {
                                if (!WinCode._scripts[g].hidden && (!WinCode._enableSandbox || !WinCode._scripts[g].hiddenInSandbox)) {
                                    b = WinCode._scripts[g].objNearValue(e);
                                    if (b != null) {
                                        e.setDisabled(true);
                                        g = b._child;
                                        b._child = e;
                                        e.parent = b;
                                        b._computeBounds();
                                        WinCode.draw();
                                        e.setDisabled(false);
                                        b._child = g;
                                        e.parent = null;
                                        b._computeBounds();
                                        break
                                    }
                                }
                            } else if (e instanceof Block) {
                                c =
                                    false;
                                if (e.hasFlap)
                                    for (g = 0; g < WinCode._scripts.length; g++)
                                        if (WinCode._scripts[g] instanceof Block && !WinCode._scripts[g].hidden && (!WinCode._enableSandbox || !WinCode._scripts[g].hiddenInSandbox)) {
                                            b = WinCode._scripts[g].blockNearSlot(e);
                                            if (b != null) {
                                                c = true;
                                                if (b[0] < 0) {
                                                    e.setDisabled(true);
                                                    g = b[1].next;
                                                    b[1].next = e;
                                                    e.parent = b[1];
                                                    h = e.getLastBlock();
                                                    if (h.next = g) g.parent = h;
                                                    b[1]._computeBounds();
                                                    WinCode.draw();
                                                    e.setDisabled(false);
                                                    b[1].next = g
                                                } else {
                                                    e.setDisabled(true);
                                                    g = b[1]._containers[b[0]];
                                                    b[1]._containers[b[0]] =
                                                        e;
                                                    e.parent = b[1];
                                                    h = e.getLastBlock();
                                                    if (h.next = g) g.parent = h;
                                                    b[1]._computeBounds();
                                                    WinCode.draw();
                                                    e.setDisabled(false);
                                                    b[1]._containers[b[0]] = g
                                                }
                                                e.parent = null;
                                                h.next = null;
                                                if (g) g.parent = b[1];
                                                b[1]._computeBounds();
                                                break
                                            }
                                            if (!e.next && (WinCode._convertFuncValue && e.func == "blockControlCall" || WinCode._convertLibValue && e.func == "blockControlCallLibrary" || e.func == "blockControlJS")) {
                                                b = WinCode._scripts[g].objNearValue(e);
                                                if (b != null) {
                                                    h = e.convertToLabel();
                                                    h.func = e.func == "blockControlJS" ? "valueControlJS" : e.func == "blockControlCall" ?
                                                        "valueControlCall" : "valueControlCallLibrary";
                                                    h.setDisabled(true);
                                                    g = b._child;
                                                    b._child = h;
                                                    h.parent = b;
                                                    b._computeBounds();
                                                    WinCode.draw();
                                                    h.setDisabled(false);
                                                    b._child = g;
                                                    h.parent = null;
                                                    b._computeBounds();
                                                    break
                                                }
                                            }
                                        }
                                if (!c && e.hasSlot)
                                    for (g = 0; g < WinCode._scripts.length; g++)
                                        if (WinCode._scripts[g] instanceof Block && !WinCode._scripts[g].hidden && (!WinCode._enableSandbox || !WinCode._scripts[g].hiddenInSandbox)) {
                                            b = WinCode._scripts[g].blockNearFlap(e);
                                            if (b != null) {
                                                if (b[0] < 0 && !b[1].parent) {
                                                    e.setDisabled(true);
                                                    WinCode.draw();
                                                    WinCode.context.save();
                                                    WinCode.context.scale(Blocks._scale * 2, Blocks._scale * 2);
                                                    WinCode.context.translate(WinCode.context.offsetX + 0.5, WinCode.context.offsetY + 0.5);
                                                    e.x = b[2];
                                                    e.y = b[3] - e.totalHeight;
                                                    e._computeBounds();
                                                    e.draw(WinCode.context);
                                                    WinCode.context.restore();
                                                    e.setDisabled(false)
                                                }
                                                break
                                            }
                                        }
                            }
                        e.x = d;
                        e.y = f;
                        e._computeBounds();
                        return true
                    }
                } else k.removeClass("hover")
            }
            return false
        },
        drop: function (b, c, d, e, f) {
            if (!WinCode._readOnly && !$("#win-code").hasClass("hidden") && !$("#win-code .blockview").hasClass("hidden")) {
                var d =
                    $("#win-code"),
                    g = b + e.x,
                    h = c + e.y,
                    j = b + e.x + e.width,
                    k = e instanceof Label ? c + e.y + e.height : c + e.y + e.totalHeight,
                    l = d.find(".trash");
                if (WinCode._enableDragToDelete && (WinCode._enableDeleteStart || !WinCode._enableDeleteStart && e.hasFlap) && !l.hasClass("hidden") && j >= l.offset().left && g <= l.offset().left + l.outerWidth() && k >= l.offset().top && h <= l.offset().top + l.outerHeight()) {
                    Runtime.unregisterBlock(e);
                    WinCode.updateWorldBody(null);
                    WinCode._broadcastChange("delete", e);
                    l.removeClass("hover")
                } else if (b >= d.offset().left &&
                    b <= d.offset().left + d.outerWidth() && c >= d.offset().top && c <= d.offset().top + d.outerHeight()) {
                    d = findPos(WinCode.canvas);
                    b = b - d.left;
                    c = c - d.top;
                    if ((e instanceof Block || e instanceof Label) && b >= 0 && b < WinCode.canvas.width && c >= 0 && c < WinCode.canvas.height) {
                        IDE.dirty();
                        e.x = e.x + (b / Blocks._scale - WinCode.context.offsetX);
                        e.y = e.y + (c / Blocks._scale - WinCode.context.offsetY);
                        if (e.x < 0) e.x = 0;
                        if (e.y < 0) e.y = 0;
                        g = e.hidden = false;
                        if (e instanceof Label)
                            for (b = 0; b < WinCode._scripts.length; b++) {
                                if (!WinCode._scripts[b].hidden && (!WinCode._enableSandbox ||
                                        !WinCode._scripts[b].hiddenInSandbox)) {
                                    c = WinCode._scripts[b].objNearValue(e);
                                    if (c != null) {
                                        f != WinCode && IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                                        if (c._child != null) {
                                            c._child.x = c._child.x + 20;
                                            c._child.y = c._child.y + 20;
                                            c._child.parent = null;
                                            c._child._computeBounds();
                                            WinCode.hilightBlock();
                                            WinCode._broadcastChange("detach", c._child);
                                            WinCode._scripts.push(c._child);
                                            WinCode.updateWorldBody(c._child);
                                            WinCode.hilightBlock();
                                            WinCode._broadcastChange("attachTo", c._child)
                                        } else if (e.func ==
                                            "valueControlLanguageWithDefault" && e._children[3].label == e._children[3].defaultLabel) {
                                            e._children[1].label = "<enter ID>";
                                            e._children[3].label = c.label
                                        }
                                        c._child = e;
                                        c._child.parent = c;
                                        c.parent._computeBounds();
                                        WinCode.hilightBlock();
                                        WinCode._broadcastChange("attachTo", c._child);
                                        WinCode.updateWorldBody(c.getRoot());
                                        g = true;
                                        break
                                    }
                                }
                            } else if (e instanceof Block) {
                                d = false;
                                if (e.hasFlap)
                                    for (b = 0; b < WinCode._scripts.length; b++)
                                        if (WinCode._scripts[b] instanceof Block && !WinCode._scripts[b].hidden && (!WinCode._enableSandbox ||
                                                !WinCode._scripts[b].hiddenInSandbox)) {
                                            c = WinCode._scripts[b].blockNearSlot(e);
                                            if (c != null) {
                                                f != WinCode && IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                                                d = true;
                                                if (c[0] < 0) c[1].add(e);
                                                else {
                                                    c[1].getBlockAtContainer(c[0]);
                                                    c[1].addToContainer(c[0], e)
                                                }
                                                WinCode.hilightBlock();
                                                WinCode._broadcastChange("attachTo", e);
                                                g = true;
                                                WinCode.updateWorldBody(e.getRoot());
                                                break
                                            }
                                            if (!e.next && (WinCode._convertFuncValue && e.func == "blockControlCall" || WinCode._convertLibValue && e.func == "blockControlCallLibrary" ||
                                                    e.func == "blockControlJS")) {
                                                c = WinCode._scripts[b].objNearValue(e);
                                                if (c != null) {
                                                    f != WinCode && IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                                                    b = e.func;
                                                    e = e.convertToLabel();
                                                    e.func = b == "blockControlJS" ? "valueControlJS" : b == "blockControlCall" ? "valueControlCall" : "valueControlCallLibrary";
                                                    if (c._child != null) {
                                                        c._child.x = c._child.x + 20;
                                                        c._child.y = c._child.y + 20;
                                                        c._child.parent = null;
                                                        c._child._computeBounds();
                                                        WinCode.hilightBlock();
                                                        WinCode._broadcastChange("detach", c._child);
                                                        WinCode._scripts.push(c._child);
                                                        WinCode.updateWorldBody(c._child);
                                                        WinCode.hilightBlock();
                                                        WinCode._broadcastChange("attachTo", c._child)
                                                    }
                                                    c._child = e;
                                                    c._child.parent = c;
                                                    c.parent._computeBounds();
                                                    WinCode.hilightBlock();
                                                    WinCode._broadcastChange("attachTo", c._child);
                                                    WinCode.updateWorldBody(c.getRoot());
                                                    g = true;
                                                    break
                                                }
                                            }
                                        }
                                if (!d && e.hasSlot)
                                    for (b = 0; b < WinCode._scripts.length; b++)
                                        if (WinCode._scripts[b] instanceof Block && !WinCode._scripts[b].hidden && (!WinCode._enableSandbox || !WinCode._scripts[b].hiddenInSandbox)) {
                                            c = WinCode._scripts[b].blockNearFlap(e);
                                            if (c != null) {
                                                if (c[0] < 0 && !c[1].parent) {
                                                    f != WinCode && IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                                                    WinCode._scripts.splice(b, 1);
                                                    e.append(c[1]);
                                                    WinCode.updateWorldBody(e.getRoot())
                                                }
                                                break
                                            }
                                        }
                            }
                        if (!g) {
                            e._computeBounds();
                            c = false;
                            if (f != WinCode && e.func == "registerFunction") {
                                d = false;
                                for (b = 0; b < WinCode._scripts.length; b++)
                                    if (WinCode._scripts[b].func == "registerFunction" && e.name == WinCode._scripts[b].name) {
                                        d = true;
                                        break
                                    }
                                if (d) IDE.confirmDialog(g_loc.getText("wincode.funcoverwrite"),
                                    function () {
                                        f != WinCode && IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                                        for (var b = 0; b < WinCode._scripts.length; b++)
                                            if (WinCode._scripts[b].func == "registerFunction" && e.name == WinCode._scripts[b].name) {
                                                WinCode._scripts.splice(b, 1);
                                                break
                                            }
                                        WinCode._ensureVarExists(e);
                                        WinCode._scripts.push(e);
                                        var c = IDE.editingActor ? IDE.editingActor : Runtime.background;
                                        if (c.id && c.classname)
                                            for (b = 0; b < Runtime.sprites.length; b++) {
                                                var d = Runtime.sprites[b];
                                                if (d.id == c.id && d.classname == c.classname) {
                                                    Runtime.unregisterScripts(d);
                                                    Runtime.registerScripts(d)
                                                }
                                            } else {
                                            b = new Script({
                                                sprite: c,
                                                scriptBlock: e
                                            });
                                            b.currentBlock = b.scriptBlock;
                                            b.invokeStep()
                                        }
                                        WinCode._getScrollBounds();
                                        WinCode.draw()
                                    });
                                else {
                                    f != WinCode && IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                                    c = true;
                                    WinCode._scripts.push(e);
                                    d = IDE.editingActor ? IDE.editingActor : Runtime.background;
                                    if (d.id && d.classname)
                                        for (b = 0; b < Runtime.sprites.length; b++) {
                                            g = Runtime.sprites[b];
                                            if (g.id == d.id && g.classname == d.classname) {
                                                Runtime.unregisterScripts(g);
                                                Runtime.registerScripts(g)
                                            }
                                        } else {
                                        b =
                                            new Script({
                                                sprite: IDE.editingActor ? IDE.editingActor : Runtime.background,
                                                scriptBlock: e
                                            });
                                        b.currentBlock = b.scriptBlock;
                                        b.invokeStep()
                                    }
                                }
                            } else {
                                if (e.func == "valueControlCall") {
                                    b = e.convertToBlock();
                                    b.func = "blockControlCall";
                                    b.x = e.x;
                                    b.y = e.y;
                                    e = b;
                                    e._computeBounds()
                                } else if (e.func == "valueControlJS") {
                                    b = e.convertToBlock();
                                    b.func = "blockControlJS";
                                    b.x = e.x;
                                    b.y = e.y;
                                    e = b;
                                    e._computeBounds()
                                }
                                f != WinCode && IDE.Clipboard.undoBlockAction(IDE.editingActor ? IDE.editingActor : Runtime.background);
                                c = true;
                                WinCode._scripts.push(e);
                                if (e.func.substring(0, 8) == "register") {
                                    d = IDE.editingActor ? IDE.editingActor : Runtime.background;
                                    if (d.id && d.classname)
                                        for (b = 0; b < Runtime.sprites.length; b++) {
                                            g = Runtime.sprites[b];
                                            if (g.id == d.id && g.classname == d.classname) {
                                                Runtime.unregisterScripts(g);
                                                Runtime.registerScripts(g)
                                            }
                                        } else {
                                        b = new Script({
                                            sprite: IDE.editingActor ? IDE.editingActor : Runtime.background,
                                            scriptBlock: e
                                        });
                                        b.currentBlock = b.scriptBlock;
                                        b.invokeStep()
                                    }
                                }
                            }
                            if (c) {
                                WinCode._ensureVarExists(e);
                                if (f == WinCode) {
                                    WinCode.hilightBlock();
                                    WinCode._broadcastChange("move",
                                        e)
                                } else {
                                    WinCode.hilightBlock();
                                    WinCode._broadcastChange("attachTo", e)
                                }
                            }
                            WinCode.updateWorldBody(e.getRoot())
                        }
                        WinCode._getScrollBounds();
                        WinCode.draw();
                        return true
                    }
                }
            }
            return false
        },
        dragCanceled: function () {
            IDE.Clipboard.doUndo()
        },
        _onKeyPress: function (b, c) {
            var d = false;
            if (!WinCode._readOnly) {
                d = FocusManager._onKeyPress(b, c);
                if (!d && b == 8 && WinCode._enableDelete && WinCode._enableDeleteStart && WinCode.getSelection().length > 0) {
                    WinCode.deleteSelection();
                    d = true
                }
                WinCode.draw()
            }
            return d
        }
    },
    DragLayer = {
        cDragThreshold: 4,
        cDoubleClickTimeout: 500,
        cClickTimeout: 2E3,
        _draggingObj: null,
        _draggingSource: null,
        _ignoreEvents: !1,
        _listeners: [],
        init: function () {
            $(document).mousedown(DragLayer.onMouseDown);
            $(document).mouseup(DragLayer.onMouseUp);
            $(document).mousemove(DragLayer.onMouseMove)
        },
        addDragListener: function (b) {
            this._listeners.indexOf(b) < 0 && this._listeners.push(b)
        },
        removeDragListener: function (b) {
            b = this._listeners.indexOf(b);
            b >= 0 && this._listeners.splice(b, 1)
        },
        removeAllDragListeners: function () {
            this._listeners = []
        },
        _isDialogOpen: function (b) {
            var c =
                false;
            if ($.modal.isActive()) return true;
            if (!$.modal.isActive() && b) {
                $(".mask").each(function (d, f) {
                    if (!$(f).hasClass("hidden") && b.pageX > $(f).offset().left && b.pageX < $(f).offset().left + $(f).outerWidth() && b.pageY > $(f).offset().top && b.pageY < $(f).offset().top + $(f).outerHeight()) {
                        c = true;
                        return false
                    }
                });
                $(".idedialog:visible").each(function (d, f) {
                    if (b.pageX > $(f).offset().left && b.pageX < $(f).offset().left + $(f).outerWidth() && b.pageY > $(f).offset().top && b.pageY < $(f).offset().top + $(f).outerHeight()) {
                        c = true;
                        return false
                    }
                })
            }
            c ||
                $("#win-paint").hasClass("hidden") || (c = true);
            c || $("#win-spine").length > 0 && !$("#win-spine").hasClass("hidden") && (c = true);
            if (!c) {
                var d = $(".choice-chooser");
                if (d.length > 0) c = true;
                else {
                    d = $(".color-chooser");
                    $("#stage-canvas");
                    if (d.length > 0 && d.css("display") != "none") c = true;
                    else {
                        d = $(".angle-chooser");
                        if (d.length > 0 && d.css("display") != "none") c = true;
                        else {
                            d = $(".number-chooser");
                            if (d.length > 0 && d.css("display") != "none") c = true;
                            else {
                                d = $(".blockpicker");
                                d.length > 0 && d.css("display") != "none" && (c = true)
                            }
                        }
                    }
                }
            }
            return c
        },
        _dismissIfOutsideChooser: function (b) {
            var c = false;
            if (b) {
                if ($("li.wincmd-help").hasClass("active")) {
                    var d = b.pageX,
                        e = b.pageY,
                        f = $("li.wincmd-help div.popover div.helpbox");
                    if (d >= f.offset().left && d <= f.offset().left + f.outerWidth() && e >= 0 && e <= f.offset().top + f.outerHeight() || WinTools.canDrag(d, e, b.which)) return false
                }
                $(b.target).parents("#wintool-help").length == 0 && $("#wintool-help").detach();
                $("li.wincmd-help").removeClass("active");
                d = $(".choice-chooser");
                if (d.length > 0) {
                    (b.pageX < d.offset().left || b.pageX > d.offset().left +
                        d.outerWidth() || b.pageY < d.offset().top || b.pageY > d.offset().top + d.outerHeight()) && d.detach();
                    c = true
                } else {
                    d = $(".color-chooser");
                    e = $("#stage-canvas");
                    if (d.length > 0 && d.css("display") != "none") {
                        if (!(b.pageX >= d.offset().left && b.pageX <= d.offset().left + d.outerWidth() && b.pageY >= d.offset().top && b.pageY <= d.offset().top + d.outerHeight())) {
                            b.pageX >= e.offset().left && (b.pageX <= e.offset().left + e.outerWidth() && b.pageY >= e.offset().top && b.pageY <= e.offset().top + e.outerHeight()) && ColorPicker.updateColorStage(b);
                            d.css("display",
                                "none")
                        }
                        c = true
                    } else {
                        d = $(".angle-chooser");
                        if (d.length > 0 && d.css("display") != "none") {
                            b.pageX >= d.offset().left && b.pageX <= d.offset().left + d.outerWidth() && b.pageY >= d.offset().top && b.pageY <= d.offset().top + d.outerHeight() || d.css("display", "none");
                            c = true
                        } else {
                            d = $(".number-chooser");
                            if (d.length > 0 && d.css("display") != "none") {
                                c = $(".scrubber");
                                b.pageX >= c.offset().left && b.pageX <= c.offset().left + c.outerWidth() && b.pageY >= c.offset().top - 20 && b.pageY <= c.offset().top + c.outerHeight() || d.css("display", "none");
                                c = true
                            } else {
                                d =
                                    $(".blockpicker");
                                if (d.length > 0 && d.css("display") != "none") {
                                    b.pageX >= d.offset().left && b.pageX <= d.offset().left + d.outerWidth() && b.pageY >= d.offset().top && b.pageY <= d.offset().top + d.outerHeight() || d.css("display", "none");
                                    c = true
                                }
                            }
                        }
                    }
                }
            }
            return c
        },
        _showDragLayer: function () {
            if (DragLayer._canvas == null) {
                DragLayer._canvas = $("<canvas></canvas>");
                DragLayer._canvas.css("position", "absolute");
                DragLayer._canvas.css("left", "0px");
                DragLayer._canvas.css("top", "0px");
                DragLayer._canvas.css("z-index", "50000");
                DragLayer._canvas[0].width =
                    $(window).innerWidth();
                DragLayer._canvas[0].height = $(window).innerHeight();
                $("body").append(DragLayer._canvas);
                DragLayer._context = DragLayer._canvas[0].getContext("2d");
                DragLayer._context.translateX = 0;
                DragLayer._context.translateY = 0;
                DragLayer._context.offsetX = 0;
                DragLayer._context.offsetY = 0
            }
        },
        _hideDragLayer: function () {
            if (DragLayer._canvas != null) {
                DragLayer._canvas.detach();
                DragLayer._canvas = null
            }
        },
        onMouseDown: function (b) {
            if (DragLayer._ignoreEvents) return false;
            DragLayer._dismissIfOutsideChooser(b);
            if (!DragLayer._isDialogOpen(b))
                for (var c =
                        DragLayer._listeners, d = 0; d < c.length; d++) {
                    var e = c[d];
                    if (e.canDrag && e.canDrag(b.pageX, b.pageY, b.which)) {
                        if (Date.now() - DragLayer._timestamp < DragLayer.cDoubleClickTimeout) {
                            DragLayer._dragStarted = false;
                            if (e.doubleClick) {
                                e.doubleClick(b.pageX, b.pageY, b.which);
                                break
                            }
                        }
                        DragLayer._dragStarted = true;
                        DragLayer._timestamp = Date.now();
                        DragLayer._startingX = b.pageX;
                        DragLayer._startingY = b.pageY;
                        DragLayer._startingWhich = b.which;
                        break
                    }
                }
        },
        onMouseMove: function (b) {
            if (!DragLayer._ignoreEvents && !DragLayer._isDialogOpen()) {
                if (DragLayer._dragStarted &&
                    (Math.abs(b.pageX - DragLayer._startingX) > DragLayer.cDragThreshold || Math.abs(b.pageY - DragLayer._startingY) > DragLayer.cDragThreshold)) {
                    DragLayer._dragStarted = false;
                    DragLayer._timestamp = 0;
                    for (var c = DragLayer._listeners, d = 0; d < c.length; d++) {
                        var e = c[d];
                        if (e.canDrag && e.getDragObj && e.canDrag(DragLayer._startingX, DragLayer._startingY, DragLayer._startingWhich)) {
                            DragLayer._draggingObj = e.getDragObj(DragLayer._startingX, DragLayer._startingY, DragLayer._startingWhich);
                            if (DragLayer._draggingObj != null) {
                                DragLayer._draggingSource =
                                    e;
                                DragLayer._showDragLayer();
                                if (DragLayer._draggingObj instanceof Block || DragLayer._draggingObj instanceof Label) {
                                    DragLayer._context.translateX = b.pageX / Blocks._scale;
                                    DragLayer._context.translateY = b.pageY / Blocks._scale
                                } else {
                                    DragLayer._context.translateX = b.pageX;
                                    DragLayer._context.translateY = b.pageY
                                }
                                DragLayer.draw();
                                for (d = 0; d < c.length; d++) {
                                    e = c[d];
                                    e.hilightAccept && e.hilightAccept(DragLayer._draggingObj, DragLayer._draggingSource)
                                }
                            }
                            break
                        }
                    }
                }
                if (DragLayer._draggingObj != null && DragLayer._draggingSource != null) {
                    if (DragLayer._draggingObj instanceof Block || DragLayer._draggingObj instanceof Label) {
                        DragLayer._context.translateX = b.pageX / Blocks._scale;
                        DragLayer._context.translateY = b.pageY / Blocks._scale
                    } else {
                        DragLayer._context.translateX = b.pageX;
                        DragLayer._context.translateY = b.pageY
                    }
                    DragLayer.draw();
                    if (DragLayer._draggingObj != null && DragLayer._draggingSource)
                        for (d = 0; d < DragLayer._listeners.length; d++) {
                            e = DragLayer._listeners[d];
                            e.dragOver && e.dragOver(b.pageX, b.pageY, b.which, DragLayer._draggingObj, DragLayer._draggingSource)
                        }
                    b.preventDefault();
                    b.stopPropagation();
                    b.stopImmediatePropagation()
                }
            }
        },
        onMouseUp: function (b) {
            DragLayer._dragStarted = false;
            if (DragLayer._dragStarted && Date.now() - DragLayer._timestamp > DragLayer.cDoubleClickTimeout) DragLayer._dragStarted = false;
            else if (!DragLayer._ignoreEvents) {
                var c = false;
                if (!DragLayer._isDialogOpen(b) && DragLayer._draggingObj != null && DragLayer._draggingSource)
                    for (var d = 0; d < DragLayer._listeners.length; d++) {
                        var e = DragLayer._listeners[d];
                        if (e.canDrop && e.drop && e.canDrop(b.pageX, b.pageY, b.which, DragLayer._draggingObj, DragLayer._draggingSource)) {
                            c =
                                true;
                            e.drop(b.pageX, b.pageY, b.which, DragLayer._draggingObj, DragLayer._draggingSource);
                            DragLayer._draggingSource.dragCompleted != null && DragLayer._draggingSource.dragCompleted(DragLayer._draggingObj, e);
                            break
                        }
                    }
                if (DragLayer._draggingObj != null && DragLayer._draggingSource != null) {
                    DragLayer._draggingSource.dragCanceled != null && !c && DragLayer._draggingSource.dragCanceled(DragLayer._draggingObj);
                    DragLayer._hideDragLayer();
                    DragLayer._draggingObj = null;
                    DragLayer._draggingSource = null
                }
                b = DragLayer._listeners;
                for (d = 0; d <
                    b.length; d++) {
                    e = b[d];
                    e.hilightAccept && e.hilightAccept(null)
                }
            }
        },
        draw: function () {
            var b = DragLayer._canvas[0],
                c = DragLayer._context;
            c.font = defaultLabelFontWeight + " " + defaultLabelFontSize + "px " + defaultLabelFont;
            c.clearRect(0, 0, b.width, b.height);
            c.save();
            c.globalAlpha = 0.7;
            (DragLayer._draggingObj instanceof Block || DragLayer._draggingObj instanceof Label) && c.scale(Blocks._scale, Blocks._scale);
            c.translate(c.translateX, c.translateY);
            DragLayer._draggingObj.draw(c);
            c.restore()
        },
        showDragging: function (b, c, d, e, f,
            g, h) {
            DragLayer._ignoreEvents = true;
            DragLayer._showDragLayer();
            DragLayer._draggingSource = null;
            DragLayer._draggingObj = b;
            animate(g, function (b) {
                DragLayer._context.translateX = c + (e - c) * b / g;
                DragLayer._context.translateY = d + (f - d) * b / g;
                DragLayer.draw()
            }, function () {
                DragLayer._ignoreEvents = false;
                DragLayer._hideDragLayer();
                DragLayer._draggingObj = null;
                h && typeof h == "function" && h(e, f)
            })
        }
    };
"undefined" == typeof window.WinMediaAssets && (WinMediaAssets = {
    showSearch: !0,
    currentPath: "",
    init: function () { }
});
WinMediaAssets.DragObject = function (b, c, d) {
    this.path = b.substring(0, 5) == "ide/" ? b : mediaTreeRoot + b;
    this.ext = getFileExt(b).substring(1);
    this.file = getFilename(d);
    this.img = new Image;
    this.img.src = c
};
WinMediaAssets.DragObject.prototype.draw = function (b) {
    var c = this.img.width,
        d = this.img.height;
    if (c > 128) {
        d = d * 128 / c;
        c = 128
    }
    if (d > 128) {
        c = c * 128 / d;
        d = 128
    }
    b.drawImage(this.img, -c / 2, -d / 2, c, d)
};
IDE.Clipboard = {
    undoStack: [],
    redoIndex: 0,
    item: {}
};
IDE.Clipboard.init = function () {
    IDE.Clipboard.item = {}
};
IDE.Clipboard.clear = function () {
    IDE.Clipboard.item = {}
};
IDE.Clipboard.add = function (b, c) {
    IDE.Clipboard.item[b] = c
};
IDE.Clipboard.remove = function (b) {
    IDE.Clipboard.item[b] = null
};
IDE.Clipboard.get = function (b) {
    return IDE.Clipboard.item[b]
};
IDE.Clipboard.addUndo = function (b) {
    IDE.Clipboard.undoStack.length > 0 && IDE.Clipboard.redoIndex < IDE.Clipboard.undoStack.length && IDE.Clipboard.undoStack.splice(IDE.Clipboard.redoIndex, IDE.Clipboard.undoStack.length - IDE.Clipboard.redoIndex);
    IDE.Clipboard.undoStack.push(b);
    IDE.Clipboard.undoStack.length > undoLimit ? IDE.Clipboard.undoStack.splice(0, 1) : IDE.Clipboard.redoIndex++
};
IDE.Clipboard.popUndo = function () {
    IDE.Clipboard.undoStack.length > 0 && IDE.Clipboard.redoIndex > 0 && IDE.Clipboard.redoIndex--
};
IDE.Clipboard.doUndo = function () {
    if (IDE.Clipboard.undoStack.length > 0 && IDE.Clipboard.redoIndex > 0) {
        IDE.Clipboard.undoStack[IDE.Clipboard.redoIndex - 1].doUndo();
        IDE.Clipboard.redoIndex--
    }
    $("#win-assets .actors > ul > li.stacked").each(function () {
        var b = $(this).data("sprite");
        $(this).find("li").each(function () {
            var c = $(this).data("sprite");
            Runtime.unregisterScripts(c);
            c.scripts = b.scripts;
            Runtime.registerScripts(c)
        })
    })
};
IDE.Clipboard.doRedo = function () {
    if (IDE.Clipboard.undoStack.length > 0 && IDE.Clipboard.redoIndex < IDE.Clipboard.undoStack.length) {
        IDE.Clipboard.undoStack[IDE.Clipboard.redoIndex].doRedo();
        IDE.Clipboard.redoIndex++
    }
    $("#win-assets .actors > ul > li.stacked").each(function () {
        var b = $(this).data("sprite");
        $(this).find("li").each(function () {
            var c = $(this).data("sprite");
            Runtime.unregisterScripts(c);
            c.scripts = b.scripts;
            Runtime.registerScripts(c)
        })
    })
};
IDE.Clipboard.undoDeleteActor = function (b) {
    IDE.Clipboard.addUndo({
        sprite: b,
        doRedo: function () {
            this.sprite.deleteActor()
        },
        doUndo: function () {
            Runtime.sprites.push(this.sprite);
            Runtime.registerScripts(this.sprite);
            Runtime.stage.add(this.sprite.spriteObj);
            Runtime.stage.draw();
            Physics.addBody({}, this.sprite.spriteObj);
            Sprites._broadcastSpriteListeners("add", this.sprite);
            IDE.selectAsset(this.sprite)
        }
    })
};
IDE.Clipboard.undoCloneActor = function (b) {
    IDE.Clipboard.addUndo({
        sprite: b,
        doRedo: function () {
            Runtime.sprites.push(this.sprite);
            Runtime.registerScripts(this.sprite);
            Runtime.stage.add(this.sprite.spriteObj);
            Runtime.stage.draw();
            Physics.addBody({}, this.sprite.spriteObj);
            WinAssets.trackActor(this.sprite);
            WinTools.trackActor(this.sprite);
            IDE.selectAsset(this.sprite);
            Sprites._broadcastSpriteListeners("add", this.sprite)
        },
        doUndo: function () {
            this.sprite.deleteActor()
        }
    })
};
IDE.Clipboard.undoAddActor = function (b) {
    IDE.Clipboard.addUndo({
        sprite: b,
        doRedo: function () {
            Runtime.sprites.push(this.sprite);
            Runtime.registerScripts(this.sprite);
            Runtime.stage.add(this.sprite.spriteObj);
            Runtime.stage.draw();
            Physics.addBody({}, this.sprite.spriteObj);
            WinAssets.trackActor(this.sprite);
            WinTools.trackActor(this.sprite);
            IDE.selectAsset(this.sprite);
            Sprites._broadcastSpriteListeners("add", this.sprite)
        },
        doUndo: function () {
            this.sprite.deleteActor()
        }
    })
};
IDE.Clipboard.undoAddSound = function (b, c) {
    IDE.Clipboard.addUndo({
        sprite: b,
        sound: c,
        doRedo: function () {
            this.soundIndex !== void 0 && this.soundIndex < this.sprite.sounds.length ? this.sprite.sounds.splice(this.soundIndex, 0, this.sound) : this.sprite.sounds.push(this.sound);
            Sprites._broadcastSpriteListeners("updateAddSound", this.sprite, this.sound)
        },
        doUndo: function () {
            for (var b = 0; b < this.sprite.sounds.length; b++)
                if (this.sprite.sounds[b] == this.sound) {
                    this.soundIndex = b;
                    this.sprite.sounds.splice(b, 1);
                    Sprites._broadcastSpriteListeners("updateDeleteSound",
                        this.sprite, this.sound);
                    break
                }
        }
    })
};
IDE.Clipboard.undoDeleteSound = function (b, c, d) {
    IDE.Clipboard.addUndo({
        sprite: b,
        sound: c,
        soundIndex: d,
        doRedo: function () {
            for (var b = 0; b < this.sprite.sounds.length; b++)
                if (this.sprite.sounds[b] == this.sound) {
                    this.soundIndex = b;
                    this.sprite.sounds.splice(b, 1);
                    Sprites._broadcastSpriteListeners("updateDeleteSound", this.sprite, this.sound);
                    break
                }
        },
        doUndo: function () {
            this.soundIndex !== void 0 && this.soundIndex < this.sprite.sounds.length ? this.sprite.sounds.splice(this.soundIndex, 0, this.sound) : this.sprite.sounds.push(this.sound);
            this.sprite == Runtime.background ? IDE.selectAsset(null) : IDE.selectAsset(this.sprite);
            Sprites._broadcastSpriteListeners("updateAddSound", this.sprite, this.sound)
        }
    })
};
IDE.Clipboard.undoAddCostume = function (b, c) {
    IDE.Clipboard.addUndo({
        sprite: b,
        costume: c,
        doRedo: function () {
            if (this.costumeIndex !== void 0 && this.costumeIndex < this.sprite.costumes.length) this.sprite.costumes.splice(this.costumeIndex, 0, this.costume);
            else {
                this.sprite.costumes.push(this.costume);
                this.sprite.setCostumeByName(this.costume.name)
            }
            this.sprite == Runtime.background ? IDE.selectAsset(null) : IDE.selectAsset(this.sprite);
            Sprites._broadcastSpriteListeners("updateAddCostume", this.sprite, this.costume)
        },
        doUndo: function () {
            for (var b =
                    0; b < this.sprite.costumes.length; b++)
                if (this.sprite.costumes[b] == this.costume) {
                    this.costumeIndex = b;
                    this.sprite.costumes.splice(b, 1);
                    b > 0 ? this.sprite.setCostumeByName(this.sprite.costumes[b - 1].name) : this.sprite.setCostumeByName("");
                    Sprites._broadcastSpriteListeners("updateDeleteCostume", this.sprite, this.costume);
                    break
                }
        }
    })
};
IDE.Clipboard.undoDeleteCostume = function (b, c, d) {
    IDE.Clipboard.addUndo({
        sprite: b,
        costume: c,
        costumeIndex: d,
        doRedo: function () {
            for (var b = 0; b < this.sprite.costumes.length; b++)
                if (this.sprite.costumes[b] == this.costume) {
                    this.costumeIndex = b;
                    this.sprite.costumes.splice(b, 1);
                    b > 0 ? this.sprite.setCostumeByName(this.sprite.costumes[b - 1].name) : this.sprite.setCostumeByName("");
                    Sprites._broadcastSpriteListeners("updateDeleteCostume", this.sprite, this.costume);
                    break
                }
        },
        doUndo: function () {
            if (this.costumeIndex !== void 0 &&
                this.costumeIndex < this.sprite.costumes.length) this.sprite.costumes.splice(this.costumeIndex, 0, this.costume);
            else {
                this.sprite.costumes.push(this.costume);
                this.sprite.setCostumeByName(this.costume.name)
            }
            this.sprite == Runtime.background ? IDE.selectAsset(null) : IDE.selectAsset(this.sprite);
            Sprites._broadcastSpriteListeners("updateAddCostume", this.sprite, this.costume)
        }
    })
};
IDE.Clipboard.undoStage = function (b) {
    IDE.Clipboard.addUndo({
        sprite: b.sprite,
        x: b.x,
        y: b.y,
        scale: b.scale,
        rotation: b.rotation,
        newX: b.sprite.spriteObj.x,
        newY: b.sprite.spriteObj.y,
        newScale: b.sprite.spriteObj.scale.x,
        newRotation: b.sprite.spriteObj.rotation,
        doRedo: function () {
            this.sprite.spriteObj.setPosition(this.newX, this.newY);
            this.sprite.spriteObj.setScale(this.newScale);
            this.sprite.spriteObj.setRotation(this.newRotation);
            Runtime.stage.draw()
        },
        doUndo: function () {
            this.sprite.spriteObj.setPosition(this.x,
                this.y);
            this.sprite.spriteObj.setScale(this.scale);
            this.sprite.spriteObj.setRotation(this.rotation);
            Runtime.stage.draw()
        }
    })
};
IDE.Clipboard.undoBlockAction = function (b) {
    var c = ObjectIO.serializeScripts(b);
    IDE.Clipboard.addUndo({
        sprite: b,
        scripts: c,
        current: null,
        doRedo: function () {
            for (var b = 0; b < this.sprite.scripts.length; b++) Runtime.unregisterBlock(this.sprite.scripts[b]);
            var b = WinCode.context.offsetX,
                c = WinCode.context.offsetY;
            this.sprite.scripts = [];
            ObjectIO.deserializeScripts(this.sprite, this.current, this.sprite.locked);
            WinCode._editBlocks(this.sprite.scripts);
            WinCode.computeAll();
            WinCode.context.offsetX = b;
            WinCode.context.offsetY =
                c;
            WinCode.draw()
        },
        doUndo: function () {
            this.current = ObjectIO.serializeScripts(this.sprite);
            for (var b = 0; b < this.sprite.scripts.length; b++) Runtime.unregisterBlock(this.sprite.scripts[b]);
            var b = WinCode.context.offsetX,
                c = WinCode.context.offsetY;
            this.sprite.scripts = [];
            ObjectIO.deserializeScripts(this.sprite, this.scripts, this.sprite.locked);
            WinCode._editBlocks(this.sprite.scripts);
            WinCode.computeAll();
            WinCode.context.offsetX = b;
            WinCode.context.offsetY = c;
            WinCode.draw()
        }
    })
};
IDE.Clipboard.undoBlockAttach = function (b, c, d, e) {
    IDE.Clipboard.addUndo({
        sprite: b,
        from: c,
        to: d,
        block: e,
        doRedo: function () {
            IDE.Clipboard._blockDetach(this.sprite, this.block, this.from.next !== void 0);
            IDE.Clipboard._blockAttach(this.sprite, this.to, this.block)
        },
        doUndo: function () {
            IDE.Clipboard._blockDetach(this.sprite, this.block, this.from.next !== void 0);
            IDE.Clipboard._blockAttach(this.sprite, this.from, this.block)
        }
    })
};
IDE.Clipboard.undoBlockDelete = function (b, c, d) {
    IDE.Clipboard.addUndo({
        sprite: b,
        save: c,
        block: d,
        doRedo: function () {
            IDE.Clipboard._blockDetach(this.sprite, this.block)
        },
        doUndo: function () {
            IDE.Clipboard._blockAttach(this.sprite, this.save, this.block)
        }
    })
};
IDE.Clipboard._saveAttachment = function (b) {
    var c = {};
    c.parent = b.parent;
    c.containerIdx = -1;
    if (b instanceof Block)
        if (b.parent != null) {
            if (b.parent.next != b) {
                b = b.parent.indexForBlockInContainer(b);
                if (b >= 0) c.containerIdx = b
            }
        } else {
            c.x = b.x;
            c.y = b.y
        }
    else if (b.parent == null) {
        c.x = b.x;
        c.y = b.y
    }
    return c
};
IDE.Clipboard._saveAttachmentMiddle = function (b) {
    var c = {};
    c.parent = b.parent;
    c.next = b.next;
    c.containerIdx = -1;
    if (b instanceof Block)
        if (b.parent != null) {
            if (b.parent.next != b) {
                b = b.parent.indexForBlockInContainer(b);
                if (b >= 0) c.containerIdx = b
            }
        } else {
            c.x = b.x;
            c.y = b.y
        }
    else if (b.parent == null) {
        c.x = b.x;
        c.y = b.y
    }
    return c
};
IDE.Clipboard._blockDetach = function (b, c, d) {
    if (d) {
        d = null;
        if (c.next) {
            c.next.parent = c.parent;
            d = c.next
        }
        if (c.parent) {
            for (var d = c.parent, e = false, f = 0; f < c.parent._containers.length; f++)
                if (c.parent._containers[f] == c) {
                    c.parent._containers[f] = c.next;
                    e = true;
                    break
                }
            if (!e) c.parent.next = c.next
        }
        d && d._computeBounds();
        c.next = null;
        c.parent = null
    } else c.detach();
    d = b.scripts.indexOf(c);
    d >= 0 && b.scripts.splice(d, 1);
    Runtime.unregisterBlock(c);
    WinCode.computeAll();
    WinCode.draw()
};
IDE.Clipboard._blockAttach = function (b, c, d) {
    IDE.Clipboard._blockDetach(b, d);
    if (c)
        if (c.parent) {
            d.parent = c.parent;
            if (d instanceof Block) {
                c.containerIdx < 0 ? d.parent.next = d : d.parent.addToContainer(c.containerIdx, d);
                if (c.next) {
                    d.next = c.next;
                    c.next.parent = d;
                    var e = b.scripts.indexOf(c.next);
                    e >= 0 && b.scripts.splice(e, 1);
                    Runtime.unregisterBlock(c.next)
                }
            } else {
                d.parent = c.parent;
                c.parent._child = d
            }
        } else {
            d.x = c.x;
            d.y = c.y;
            b.scripts.push(d);
            if (c.next) {
                d.next = c.next;
                c.next.parent = d;
                e = b.scripts.indexOf(c.next);
                e >= 0 && b.scripts.splice(e,
                    1);
                Runtime.unregisterBlock(c.next)
            }
            if (d.func.substring(0, 8) == "register") {
                b = new Script({
                    sprite: b,
                    scriptBlock: d
                });
                b.currentBlock = b.scriptBlock;
                b.invokeStep()
            }
        }
    WinCode.computeAll();
    WinCode.draw()
};
var AnglePicker = {
    init: function () {
        AnglePicker.angles = $('<canvas class="angle-chooser" style="display:none;width:100px;height:100px;" width="100" height="100"></canvas>');
        $("body").append(AnglePicker.angles);
        AnglePicker.ctx = AnglePicker.angles[0].getContext("2d");
        AnglePicker.angle = 0;
        AnglePicker.angles.mousedown(function (b) {
            AnglePicker.mousedown = true;
            AnglePicker.updateAngle(b)
        });
        AnglePicker.angles.mouseup(function () {
            if (AnglePicker.mousedown) {
                AnglePicker.mousedown = false;
                AnglePicker.hide();
                if (AnglePicker.fnDone) {
                    if (AnglePicker.isMath) var b =
                        (360 - Math.round(AnglePicker.angle * 180 / Math.PI) + 360) % 360;
                    else {
                        b = (Math.round(AnglePicker.angle * 180 / Math.PI) + 90) % 360;
                        b > 180 && (b = b - 360)
                    }
                    AnglePicker.fnDone(b)
                }
            }
        });
        $(AnglePicker.angles).mousemove(function (b) {
            AnglePicker.updateAngle(b)
        })
    },
    draw: function () {
        AnglePicker.ctx.strokeStyle = "#000000";
        AnglePicker.ctx.fillStyle = "#ffffff";
        AnglePicker.ctx.clearRect(0, 0, AnglePicker.ctx.canvas.width, AnglePicker.ctx.canvas.height);
        var b = AnglePicker.ctx.canvas.width / 2,
            c = AnglePicker.ctx.canvas.height / 2;
        AnglePicker.ctx.save();
        AnglePicker.ctx.translate(b, c);
        AnglePicker.ctx.beginPath();
        AnglePicker.ctx.arc(0, 0, AnglePicker.ctx.canvas.width / 2, 0, 2 * Math.PI, false);
        AnglePicker.ctx.fill();
        AnglePicker.ctx.stroke();
        AnglePicker.ctx.closePath();
        AnglePicker.ctx.restore();
        AnglePicker.ctx.save();
        AnglePicker.ctx.font = "bold 10px Arial";
        AnglePicker.ctx.strokeStyle = "#000";
        AnglePicker.ctx.fillStyle = "#000";
        for (var d = 0; d < 360; d = d + 10) {
            AnglePicker.ctx.save();
            AnglePicker.ctx.beginPath();
            AnglePicker.ctx.translate(b, c);
            AnglePicker.ctx.rotate(-(90 -
                d) * Math.PI / 180);
            AnglePicker.ctx.moveTo(b, 0);
            AnglePicker.ctx.lineTo(b - 4, 0);
            AnglePicker.ctx.stroke();
            AnglePicker.ctx.closePath();
            AnglePicker.ctx.restore()
        }
        if (AnglePicker.isMath) {
            AnglePicker.ctx.textAlign = "left";
            AnglePicker.ctx.textBaseline = "middle";
            AnglePicker.ctx.fillText("180", 6, c);
            AnglePicker.ctx.textAlign = "right";
            AnglePicker.ctx.textBaseline = "middle";
            AnglePicker.ctx.fillText("0", AnglePicker.ctx.canvas.width - 6, c);
            AnglePicker.ctx.textAlign = "center";
            AnglePicker.ctx.textBaseline = "top";
            AnglePicker.ctx.fillText("90",
                b, 6);
            AnglePicker.ctx.textAlign = "center";
            AnglePicker.ctx.textBaseline = "bottom";
            AnglePicker.ctx.fillText("270", b, AnglePicker.ctx.canvas.height - 6)
        } else {
            AnglePicker.ctx.textAlign = "left";
            AnglePicker.ctx.textBaseline = "middle";
            AnglePicker.ctx.fillText("-90", 6, c);
            AnglePicker.ctx.textAlign = "right";
            AnglePicker.ctx.textBaseline = "middle";
            AnglePicker.ctx.fillText("90", AnglePicker.ctx.canvas.width - 6, c);
            AnglePicker.ctx.textAlign = "center";
            AnglePicker.ctx.textBaseline = "top";
            AnglePicker.ctx.fillText("0", b, 6);
            AnglePicker.ctx.textAlign =
                "center";
            AnglePicker.ctx.textBaseline = "bottom";
            AnglePicker.ctx.fillText("180", b, AnglePicker.ctx.canvas.height - 6)
        }
        AnglePicker.ctx.beginPath();
        AnglePicker.ctx.translate(b, c);
        AnglePicker.ctx.rotate(AnglePicker.angle);
        AnglePicker.ctx.moveTo(0, 0);
        AnglePicker.ctx.lineTo(b - 4, 0);
        AnglePicker.ctx.stroke();
        AnglePicker.ctx.moveTo(b - 4, 0);
        AnglePicker.ctx.lineTo(b - 8, 4);
        AnglePicker.ctx.lineTo(b - 8, -4);
        AnglePicker.ctx.lineTo(b - 4, 0);
        AnglePicker.ctx.fill();
        AnglePicker.ctx.closePath();
        AnglePicker.ctx.restore()
    },
    show: function (b,
        c, d, e, f, g, h) {
        c = c - $(AnglePicker.angles).outerWidth() / 2;
        c + $(AnglePicker.angles).outerWidth() > window.innerWidth && (c = window.innerWidth - $(AnglePicker.angles).outerWidth());
        d + $(AnglePicker.angles).outerHeight() > window.innerHeight && (d = e - $(AnglePicker.angles).outerHeight());
        AnglePicker.isMath = h === true;
        AnglePicker.angle = h ? (360 - parseFloat(b)) * Math.PI / 180 : -(90 - parseFloat(b)) * Math.PI / 180;
        AnglePicker.angles.css("left", c + "px");
        AnglePicker.angles.css("top", d + "px");
        AnglePicker.angles.css("display", "block");
        AnglePicker.draw();
        AnglePicker.fnUpdate = f;
        AnglePicker.fnDone = g;
        AnglePicker.mousedown = false
    },
    hide: function () {
        AnglePicker.angles.css("display", "none")
    },
    updateAngle: function (b) {
        if (AnglePicker.mousedown) {
            var c = b.pageX - AnglePicker.angles.offset().left,
                b = b.pageY - AnglePicker.angles.offset().top;
            AnglePicker.angle = Math.atan2(b - AnglePicker.ctx.canvas.height / 2, c - AnglePicker.ctx.canvas.width / 2);
            c = Math.round(AnglePicker.angle * 180 / Math.PI / 5) * 5;
            AnglePicker.angle = c * Math.PI / 180;
            AnglePicker.draw();
            if (AnglePicker.fnUpdate) {
                if (AnglePicker.isMath) c =
                    (360 - Math.round(AnglePicker.angle * 180 / Math.PI) + 360) % 360;
                else {
                    c = (Math.round(AnglePicker.angle * 180 / Math.PI) + 90) % 360;
                    c > 180 && (c = c - 360)
                }
                AnglePicker.fnUpdate(c)
            }
        }
    }
};
$(document).ready(function () {
    AnglePicker.init()
});
var ColorPicker = {
    init: function () {
        if ($(".color-chooser").length == 0) {
            ColorPicker.colors = $('<canvas class="color-chooser" style="display:none;cursor:crosshair;" width="320" height="220"></canvas>');
            $("body").append(ColorPicker.colors);
        } else {
            ColorPicker.colors = $(".color-chooser");
        }
        ColorPicker.ctx = ColorPicker.colors[0].getContext("2d");
        ColorPicker.ctx.fillStyle = "#ffffff";
        ColorPicker.ctx.fillRect(0, 0, ColorPicker.ctx.canvas.width, ColorPicker.ctx.canvas.height);
        var b = ColorPicker.ctx.createLinearGradient(0, 0, ColorPicker.colors.width() - 120, 0);
        b.addColorStop(0,
            "rgb(255,   0,   0)");
        b.addColorStop(0.15, "rgb(255,   0, 255)");
        b.addColorStop(0.33, "rgb(0,     0, 255)");
        b.addColorStop(0.49, "rgb(0,   255, 255)");
        b.addColorStop(0.67, "rgb(0,   255,   0)");
        b.addColorStop(0.84, "rgb(255, 255,   0)");
        b.addColorStop(1, "rgb(255,   0,   0)");
        ColorPicker.ctx.fillStyle = b;
        ColorPicker.ctx.fillRect(0, 0, ColorPicker.ctx.canvas.width - 120, ColorPicker.ctx.canvas.height);
        b = ColorPicker.ctx.createLinearGradient(0, 0, 0, ColorPicker.colors.height());
        b.addColorStop(0, "rgba(255, 255, 255, 1)");
        b.addColorStop(0.5, "rgba(255, 255, 255, 0)");
        b.addColorStop(0.5, "rgba(0,     0,   0, 0)");
        b.addColorStop(1, "rgba(0,     0,   0, 1)");
        ColorPicker.ctx.fillStyle = b;
        ColorPicker.ctx.fillRect(0, 0, ColorPicker.ctx.canvas.width - 120, ColorPicker.ctx.canvas.height);
        b = ColorPicker.ctx.createLinearGradient(0, 0, 0, ColorPicker.colors.height());
        b.addColorStop(0, "rgb(255, 255, 255)");
        b.addColorStop(1, "rgb(0,     0,   0)");
        ColorPicker.ctx.fillStyle = b;
        ColorPicker.ctx.fillRect(ColorPicker.ctx.canvas.width - 120, 0, 20, ColorPicker.ctx.canvas.height);
        b = ["#000000", "Black", "#0000ff", "Blue", "#996633", "Brown", "#00ffff", "Cyan", "#00ff00", "Green", "#ff00ff", "Magenta", "#ff8000", "Orange", "#800080", "Purple", "#ff0000", "Red", "#ffff00", "Yellow", "#ffffff", "White"];
        ColorPicker.ctx.textAlign = "left";
        ColorPicker.ctx.textBaseline = "middle";
        ColorPicker.ctx.font = "normal 14px Arial";
        for (var c = 0; c < b.length; c = c + 2) {
            ColorPicker.ctx.fillStyle = b[c];
            ColorPicker.ctx.fillRect(ColorPicker.ctx.canvas.width - 96, c * 20 / 2, 20, 20);
            ColorPicker.ctx.strokeStyle = "#000";
            ColorPicker.ctx.fillStyle =
                "#000";
            ColorPicker.ctx.fillText(b[c + 1], ColorPicker.ctx.canvas.width - 72, c * 20 / 2 + 10)
        }
        ColorPicker.ctx.strokeStyle = "#000000";
        ColorPicker.ctx.strokeRect(0, 0, ColorPicker.ctx.canvas.width, ColorPicker.ctx.canvas.height);
        ColorPicker.mousedown = false;
        ColorPicker.colors.mousedown(function (b) {
            ColorPicker.mousedown = true;
            ColorPicker.updateColor(b)
        });
        ColorPicker.colors.mouseup(function (b) {
            if (ColorPicker.mousedown) {
                ColorPicker.commitColor(b);
                ColorPicker.mousedown = false;
                ColorPicker.hide()
            }
        });
        $(ColorPicker.colors).mousemove(function (b) {
            ColorPicker.updateColor(b)
        })
    },
    show: function (b, c, d, e, f) {
        b + $(ColorPicker.colors).outerWidth() > window.innerWidth && (b = window.innerWidth - $(ColorPicker.colors).outerWidth());
        c + $(ColorPicker.colors).outerHeight() > window.innerHeight && (c = d - $(ColorPicker.colors).outerHeight());
        ColorPicker.colors.css("left", b + "px");
        ColorPicker.colors.css("top", c + "px");
        ColorPicker.colors.css("display", "block");
        ColorPicker.fnSelect = e;
        ColorPicker.fnCommit = f ? f : e
    },
    hide: function () {
        ColorPicker.colors.css("display", "none")
    },
    updateColor: function (b) {
        if (ColorPicker.mousedown) {
            var c =
                b.pageX - ColorPicker.colors.offset().left,
                b = b.pageY - ColorPicker.colors.offset().top,
                d = ColorPicker.ctx.getImageData(c, b, 1, 1),
                c = Math.floor(d.data[0]).toString(16);
            c.length < 2 && (c = "0" + c);
            b = Math.floor(d.data[1]).toString(16);
            b.length < 2 && (b = "0" + b);
            d = Math.floor(d.data[2]).toString(16);
            d.length < 2 && (d = "0" + d);
            ColorPicker.selectedColor = "#" + c + b + d;
            ColorPicker.fnSelect && ColorPicker.fnSelect(ColorPicker.selectedColor)
        }
    },
    commitColor: function (b) {
        if (ColorPicker.mousedown) {
            var c = b.pageX - ColorPicker.colors.offset().left,
                b = b.pageY - ColorPicker.colors.offset().top,
                d = ColorPicker.ctx.getImageData(c, b, 1, 1),
                c = Math.floor(d.data[0]).toString(16);
            c.length < 2 && (c = "0" + c);
            b = Math.floor(d.data[1]).toString(16);
            b.length < 2 && (b = "0" + b);
            d = Math.floor(d.data[2]).toString(16);
            d.length < 2 && (d = "0" + d);
            ColorPicker.selectedColor = "#" + c + b + d;
            ColorPicker.fnCommit && ColorPicker.fnCommit(ColorPicker.selectedColor)
        }
    },
    updateColorStage: function (b) {
        var c = Runtime.stage.getBuffer(),
            d = b.pageX - $(Runtime.stage.container).offset().left,
            b = b.pageY - $(Runtime.stage.container).offset().top,
            e = Runtime.stage.getWidth(),
            f = Runtime.stage.getHeight(),
            d = Math.floor(d * e / $("#stage-canvas").outerWidth()),
            b = Math.floor(b * f / $("#stage-canvas").outerHeight()),
            f = Math.floor(c[d * 4 + b * 4 * e]).toString(16);
        f.length < 2 && (f = "0" + f);
        var g = Math.floor(c[d * 4 + b * 4 * e + 1]).toString(16);
        g.length < 2 && (g = "0" + g);
        c = Math.floor(c[d * 4 + b * 4 * e + 2]).toString(16);
        c.length < 2 && (c = "0" + c);
        ColorPicker.selectedColor = "#" + f + g + c;
        ColorPicker.fnSelect && ColorPicker.fnSelect(ColorPicker.selectedColor)
    }
};
$(document).ready(function () {
    ColorPicker.init()
});
var System = {
    ready: 0,
    avatar: null,
    avatarid: null,
    restoreIde: function () {
        $("#wincmd-restoreide").addClass("hidden");
        WinProperties.enable(true);
        WinTools.enable(true);
        WinCode.enableDecorations(true);
        WinCode.enable(true);
        WinStage.enable(true);
        WinStage.enableDecorations(true);
        WinAssets.enable(true);
        WinAssets.enableDecorations(true);
        $(".toolbar-top .nav.left .puzzlelabel").detach();
        $(".toolbar-top .nav.right .puzzlebutton").detach();
        WinToolbar.enable(true);
        WinAssets._enableContextMenu = true;
        WinAssets.enableDelete(true);
        IDE._enableKeyboardShortcuts = true;
        WinCode._enableRun = true;
        WinCode._enableContextMenu = true;
        WinCode._enableFieldEdit = true;
        WinCode._enableDragToDelete = true;
        WinCode._enableCutCopyPaste = true;
        for (var b = 0; b < g_palette.length; b++) g_palette[b].hidden = false;
        WinTools.reset();
        IDE.adjustPanels()
    },
    loadActorInto: function (b) {
        System.ready++;
        getPreference("avatarid", function (c) {
            if (c) {
                System.avatarid = c;
                ObjectIO.loadSprite("/assets/code/" + System.avatarid + ".actor", function (c) {
                    System.avatar = c;
                    Runtime.background.variables["runtime.vars.avatarname"] =
                        c.classname;
                    var e = null;
                    b && (e = Sprites.getSpriteByName(b));
                    if (e) {
                        c.spriteObj.setPosition(e.spriteObj.x + c.costumes[0].cx, e.spriteObj.y + c.costumes[0].cy);
                        for (var f = 0; f < c.scripts.length; f++) Runtime.unregisterBlock(c.scripts[f]);
                        c.scripts = [];
                        for (f = 0; f < e.scripts.length; f++) {
                            var g = e.scripts[f].copy();
                            c.scripts.push(g);
                            if (g.func.substring(0, 8) == "register") {
                                g = new Script({
                                    sprite: c,
                                    scriptBlock: g
                                });
                                g.currentBlock = g.scriptBlock;
                                g.invokeStep()
                            }
                        }
                        e.deleteActor();
                        c.changeSpriteName(b)
                    }
                    Runtime.sendEvent("runtime.actor.initialize",
                        b, "");
                    System.ready--
                })
            }
        })
    }
};
Script.prototype.blockSystem = function (b) {
    var c = b[0],
        d = b[1];
    d == "true" ? d = "true" : d == "false" && (d = "false");
    $("#wincmd-restoreide").removeClass("hidden");
    switch (c) {
        case "runtime":
            d == "start" ? Runtime.triggerFlag() : d == "stop" && Runtime.stopScripts();
            break;
        case "toolbar":
            WinToolbar.enable(d);
            break;
        case "code":
            WinCode.enable(d);
            break;
        case "code.decorations":
            WinCode.enableDecorations(d);
            break;
        case "code.run":
            WinCode._enableRun = d;
            break;
        case "code.search":
            WinCode._enableSearch = d;
            break;
        case "code.contextmenu":
            WinCode._enableContextMenu =
                d;
            break;
        case "code.textfields":
            WinCode._enableFieldEdit = d;
            break;
        case "code.dragdelete":
            WinCode._enableDragToDelete = d;
            WinCode._enableDelete = d;
            break;
        case "code.cutcopypaste":
            WinCode._enableCutCopyPaste = d;
            break;
        case "tools":
            WinTools.enable(d);
            break;
        case "tools.showcat":
            WinTools.showCat(d, true);
            break;
        case "tools.hidecat":
            WinTools.showCat(d, false);
            break;
        case "properties":
            WinProperties.enable(d);
            break;
        case "stage":
            WinStage.enable(d);
            break;
        case "stage.toolbar":
            WinStage.enableToolbar(d);
            break;
        case "stage.decorations":
            WinStage.enableDecorations(d);
            break;
        case "assets":
            WinAssets.enable(d);
            break;
        case "assets.decorations":
            WinAssets.enableDecorations(d);
            break;
        case "assets.contextmenu":
            WinAssets._enableContextMenu = d;
            break;
        case "assets.delete":
            WinAssets.enableDelete(d);
            break;
        case "puzzle":
            if (d == "start") {
                WinPuzzle.puzzleBegin();
                WinPuzzle.toolbarRemoveButtons()
            } else {
                WinPuzzle.puzzleEnd();
                WinCode.enable(false);
                WinProperties.enable(false)
            }
            break;
        case "puzzle.toolbar.title":
            WinPuzzle.toolbarTitle(d);
            break;
        case "puzzle.toolbar.text":
            WinPuzzle.toolbarText(d);
            break;
        case "puzzle.toolbar.button":
            WinPuzzle.toolbarButton(d, function () {
                Runtime.sendEvent("runtime.puzzle.toolbar.buttonclick", "any", d)
            });
            break;
        case "story.next":
            IDE._clearDirty();
            IDE._doActorSave(System.avatar, System.avatar.classname, "Avatar", "My Avatar", false, true, function () {
                $.ajax({
                    url: "/api/projectid",
                    data: {
                        n: d
                    },
                    success: function (b) {
                        if (b) window.location = "ide/?director=" + escape("directorbook?id=" + b)
                    }
                })
            });
            break;
        case "loadavatarinto":
            System.loadActorInto(d);
            break;
        case "avatar.loadpose":
            for (b = 0; b <
                Runtime.sprites.length; b++) {
                c = Runtime.sprites[b];
                if (c.avatarid) {
                    for (var e = "avatar://" + c.avatarid + "/" + d + "/", f = false, g = 0; g < c.costumes.length; g++)
                        if (c.costumes[g].img.indexOf(e) == 0) {
                            f = true;
                            break
                        }
                    if (!f)
                        for (g = 1; g < Avatar.totalFrames; g++) c.addCostume({
                            img: e + g,
                            name: d + g
                        })
                }
            }
        case "hilighttext":
            IDE.showAnnotation({
                text: d,
                show: IDE.showAnnotation({
                    isVisible: true
                })
            });
            break;
        case "hilightblock":
            if (f = Runtime.findBlockWithTag(d)) {
                f.actor ? IDE.selectAsset(f.actor) : IDE.selectAsset(null);
                WinCode.showAnnotation(f.block,
                    null,
                    function () {
                        console.log("closed")
                    })
            }
    }
};
var RenderCode = {
    _supported: ["tynker", "javascript", "python", "swift"],
    codeType: "tynker",
    mappings: {},
    COLOR_KEYWORD: "{color:fcafff}",
    COLOR_NUMBER_CONSTANT: "{color:ffe875}",
    COLOR_STRING_CONSTANT: "{color:ffe875}",
    COLOR_IDENTIFIER: "{color:37daff}",
    COLOR_RESET: "{color:reset}",
    reIdent: RegExp(/[^a-zA-Z0-9_]/g),
    reClean: RegExp(/_+/g),
    reClean2: RegExp(/_*$/g),
    reParams: RegExp(/{((choice:)?([a-zA-Z0-9 ]+):?([-a-zA-Z0-9#_./!? ]+)?)}/g),
    setCodeType: function (b) {
        if (this._supported.indexOf(b) >= 0) {
            var c = this.codeType;
            this.codeType = b;
            if (c != b) {
                $(".code-selector li").removeClass("selected");
                $(".code-selector li." + this.codeType).addClass("selected");
                window.WinCode && WinCode.reRender();
                window.WinTools && WinTools.reRender()
            }
        }
    },
    getCodeType: function () {
        return this.codeType
    },
    startRequiresClosingBracket: function (b) {
        return this.codeType != "tynker" && !b.hasFlap
    },
    ensureIdentifier: function (b) {
        b = b.replace(this.reParams, "");
        b = b.replace(this.reIdent, "_");
        b[0] >= "0" && b[0] <= "9" && (b = "_" + b);
        b = b.replace(this.reClean, "_");
        return b = b.replace(this.reClean2,
            "")
    },
    getNamedParameters: function (b) {
        var c = [],
            d;
        do {
            d = this.reParams.exec(b);
            d != null && (d[2] == "choice:" ? d[4] ? c.push([d[3], "choice:" + d[3] + ":" + d[4], d[1]]) : c.push([d[3], "choice:" + d[3], d[1]]) : d[4] ? d[3] != "image" && c.push([d[4], d[3] + ":" + d[4], d[1]]) : d[3] == "boolean" ? c.push([d[3], d[3] + ":false", d[1]]) : d[3] == "number" ? c.push([d[3], d[3] + ":0", d[1]]) : d[3] == "color" ? d[4] ? c.push([d[3], d[3] + ":" + d[4], d[1]]) : c.push([d[3], d[3], d[1]]) : c.push([d[3], d[3], d[1]]))
        } while (d != null);
        return c
    },
    getCodeStartLabel: function (b) {
        var c = b.labelText;
        if (this.isCode()) {
            if (b.func) {
                var d = this.mappings[this.codeType];
                if (d) {
                    var e = d[b.func];
                    if (e) {
                        c = e[0];
                        if (b.name) {
                            c = b.labelText ? c.replace("%s", this.ensureIdentifier(b.labelText)) : c.replace("%s", this.ensureIdentifier(b.name));
                            d = "";
                            b = this.getNamedParameters(b.labelText);
                            for (e = 0; e < b.length; e++) {
                                var f = b[e],
                                    g = this.ensureIdentifier(f[0]),
                                    d = this.codeType == "swift" ? d + (RenderCode.COLOR_IDENTIFIER + g + RenderCode.COLOR_RESET + ":{" + f[1] + "}") : d + ("{" + f[1] + "}");
                                e < b.length - 1 && (d = d + ", ")
                            }
                            c = c.replace("%s", d)
                        }
                    } else if (b.func &&
                        b.func != "nop") {
                        e = b.value ? d.valueControlCall : d.blockControlCall;
                        c = e[0];
                        c = c.replace("%s", this.ensureIdentifier(b.labelText));
                        d = "";
                        b = this.getNamedParameters(b.labelText);
                        for (e = 0; e < b.length; e++) {
                            f = b[e];
                            g = this.ensureIdentifier(f[0]);
                            d = this.codeType == "swift" ? d + (RenderCode.COLOR_IDENTIFIER + g + RenderCode.COLOR_RESET + ":{" + f[2] + "}") : d + ("{" + f[2] + "}");
                            e < b.length - 1 && (d = d + ", ")
                        }
                        c = c.replace("%s", d)
                    }
                }
            }
        } else c = b.labelText;
        return c
    },
    getCodeEndLabel: function (b) {
        var c;
        switch (this.codeType) {
            case "javascript":
            case "swift":
                c =
                    "}";
                break;
            default:
                c = ""
        }
        if (this.isCode() && b.func) {
            var d = RenderCode.mappings[RenderCode.codeType];
            if (d) (b = d[b.func]) && (c = b[1])
        }
        return c
    },
    getElseIfLabel: function () {
        var b = "";
        switch (this.codeType) {
            case "python":
                b = RenderCode.COLOR_KEYWORD + "elif " + RenderCode.COLOR_RESET + "({boolean}) {button:remove}:";
                break;
            case "javascript":
                b = "} " + RenderCode.COLOR_KEYWORD + "else if " + RenderCode.COLOR_RESET + "({boolean}) {button:remove} {";
                break;
            case "swift":
                b = "} " + RenderCode.COLOR_KEYWORD + "else if " + RenderCode.COLOR_RESET +
                    "{boolean} {button:remove} {";
                break;
            default:
                b = "else if {boolean} then {button:remove}"
        }
        return b
    },
    getElseLabel: function () {
        var b = "";
        switch (this.codeType) {
            case "python":
                b = RenderCode.COLOR_KEYWORD + "else " + RenderCode.COLOR_RESET + "{button:add}:";
                break;
            case "javascript":
            case "swift":
                b = "} " + RenderCode.COLOR_KEYWORD + "else " + RenderCode.COLOR_RESET + "{button:add} {";
                break;
            default:
                b = "else {button:add}"
        }
        return b
    },
    isCode: function () {
        return this.codeType != "tynker"
    }
};
RenderCode.mappings.javascript = {
    registerFlagTrigger: [RenderCode.COLOR_KEYWORD + "function " + RenderCode.COLOR_IDENTIFIER + "main" + RenderCode.COLOR_RESET + "() {", "}"],
    registerSpriteTrigger: [RenderCode.COLOR_KEYWORD + "function " + RenderCode.COLOR_IDENTIFIER + "when_clicked" + RenderCode.COLOR_RESET + "() {", "}"],
    registerBroadcastTrigger: [RenderCode.COLOR_IDENTIFIER + "when_receive" + RenderCode.COLOR_RESET + '("' + RenderCode.COLOR_STRING_CONSTANT + "{events}" + RenderCode.COLOR_RESET + '", ' + RenderCode.COLOR_KEYWORD + "function" +
        RenderCode.COLOR_RESET + "() {", "});"
    ],
    registerKeyTrigger: [RenderCode.COLOR_IDENTIFIER + "when_key_pressed" + RenderCode.COLOR_RESET + '("' + RenderCode.COLOR_STRING_CONSTANT + "{choice:keys}" + RenderCode.COLOR_RESET + '", ' + RenderCode.COLOR_KEYWORD + "function" + RenderCode.COLOR_RESET + "() {", "});"],
    registerFunction: [RenderCode.COLOR_KEYWORD + "function " + RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s) {", "}"],
    blockControlIf: [RenderCode.COLOR_KEYWORD + "if " + RenderCode.COLOR_RESET + "({boolean}) {", "}"],
    blockControlIfElse: [RenderCode.COLOR_KEYWORD +
        "if " + RenderCode.COLOR_RESET + "({boolean}) {", "}"
    ],
    blockControlWhile: [RenderCode.COLOR_KEYWORD + "while " + RenderCode.COLOR_RESET + "({boolean}) {", "}"],
    blockControlRepeatUntil: [RenderCode.COLOR_KEYWORD + "while " + RenderCode.COLOR_RESET + "(!{boolean}) {", "}"],
    blockControlRepeat: [RenderCode.COLOR_KEYWORD + "for " + RenderCode.COLOR_RESET + "(" + RenderCode.COLOR_KEYWORD + "var " + RenderCode.COLOR_IDENTIFIER + "i" + RenderCode.COLOR_RESET + " = " + RenderCode.COLOR_NUMBER_CONSTANT + "0" + RenderCode.COLOR_RESET + "; " + RenderCode.COLOR_IDENTIFIER +
        "i " + RenderCode.COLOR_RESET + "< " + RenderCode.COLOR_NUMBER_CONSTANT + "{number:9}" + RenderCode.COLOR_RESET + "; " + RenderCode.COLOR_IDENTIFIER + "i" + RenderCode.COLOR_RESET + "++) {", "}"
    ],
    blockControlForever: [RenderCode.COLOR_KEYWORD + "while " + RenderCode.COLOR_RESET + "(" + RenderCode.COLOR_KEYWORD + "true" + RenderCode.COLOR_RESET + ") {", "}"],
    blockControlCall: [RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s);", ""],
    valueControlCall: [RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s)", ""],
    blockControlCallLibrary: [RenderCode.COLOR_IDENTIFIER +
        "%s" + RenderCode.COLOR_RESET + "(%s);", ""
    ],
    valueControlCallLibrary: [RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s)", ""],
    valueOpAdd: ["{number} + {number}", ""],
    valueOpSubtract: ["{number} - {number}", ""],
    valueOpMultiply: ["{number} * {number}", ""],
    valueOpDivide: ["{number} / {number}", ""],
    valueOpRandom: ["Math.randomNumber({number}, {number})", ""],
    valueOpLess: ["{string} < {string}", ""],
    valueOpEqual: ["{string} == {string}", ""],
    valueOpGreater: ["{string} > {string}", ""],
    valueOpAnd: ["{boolean} && {boolean}",
        ""
    ],
    valueOpOr: ["{boolean} || {boolean}", ""],
    valueOpNot: ["!{boolean}", ""],
    valueOpJoin: ["{string} + {string}", ""],
    valueOpLetter: ["{string}[{number}]", ""],
    valueOpLength: ["{string}.length", ""],
    valueOpMod: ["{number} % {number}", ""],
    valueOpRound: ["Math.round({number})", ""],
    valueOpMath: ["Math.{string}({number})", ""],
    valueOpMath2: ["Math.{string}({number}, {number})", ""],
    valueOpConstants: ["Math.{string}", ""],
    valueOpBinary: ["{number} {choice:operator} {number}", ""],
    valueOpBitNot: ["~{number}", ""],
    blockControlWait: [RenderCode.COLOR_IDENTIFIER +
        "wait" + RenderCode.COLOR_RESET + "({number});", ""
    ],
    blockControlBroadcast: [RenderCode.COLOR_IDENTIFIER + "broadcastMessage" + RenderCode.COLOR_RESET + "({string});", ""],
    blockControlBroadcastWait: [RenderCode.COLOR_IDENTIFIER + "broadcastMessageAndWait" + RenderCode.COLOR_RESET + "({string});", ""],
    blockControlPostMessage: [RenderCode.COLOR_IDENTIFIER + "postMessage" + RenderCode.COLOR_RESET + "({string}, {string}, {string});", ""],
    blockControlPostMessageAndWait: [RenderCode.COLOR_IDENTIFIER + "postMessageAndWait" + RenderCode.COLOR_RESET +
        "({string}, {string}, {string});", ""
    ]
};
RenderCode.mappings.python = {
    registerFlagTrigger: [RenderCode.COLOR_KEYWORD + "def " + RenderCode.COLOR_IDENTIFIER + "main" + RenderCode.COLOR_RESET + "():", ""],
    registerSpriteTrigger: [RenderCode.COLOR_KEYWORD + "def " + RenderCode.COLOR_IDENTIFIER + "clicked" + RenderCode.COLOR_RESET + "():", ""],
    registerBroadcastTrigger: [RenderCode.COLOR_KEYWORD + "if " + RenderCode.COLOR_IDENTIFIER + "msg_received " + RenderCode.COLOR_RESET + '== "' + RenderCode.COLOR_STRING_CONSTANT + "{events}" + RenderCode.COLOR_RESET + '":', ""],
    registerKeyTrigger: [RenderCode.COLOR_KEYWORD +
        "if " + RenderCode.COLOR_IDENTIFIER + "key_pressed " + RenderCode.COLOR_RESET + '== "' + RenderCode.COLOR_STRING_CONSTANT + "{choice:keys}" + RenderCode.COLOR_RESET + '":', ""
    ],
    registerFunction: [RenderCode.COLOR_KEYWORD + "def " + RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s):", ""],
    blockControlIf: [RenderCode.COLOR_KEYWORD + "if " + RenderCode.COLOR_RESET + "({boolean}):", ""],
    blockControlIfElse: [RenderCode.COLOR_KEYWORD + "if " + RenderCode.COLOR_RESET + "({boolean}):", ""],
    blockControlWhile: [RenderCode.COLOR_KEYWORD +
        "while " + RenderCode.COLOR_RESET + "({boolean}):", ""
    ],
    blockControlRepeatUntil: [RenderCode.COLOR_KEYWORD + "while " + RenderCode.COLOR_RESET + "(" + RenderCode.COLOR_KEYWORD + "not " + RenderCode.COLOR_RESET + "{boolean}):", ""],
    blockControlRepeat: [RenderCode.COLOR_KEYWORD + "for " + RenderCode.COLOR_IDENTIFIER + "i" + RenderCode.COLOR_RESET + " in " + RenderCode.COLOR_KEYWORD + "range" + RenderCode.COLOR_RESET + "(" + RenderCode.COLOR_NUMBER_CONSTANT + "0" + RenderCode.COLOR_RESET + ", " + RenderCode.COLOR_NUMBER_CONSTANT + "{number:9}" + RenderCode.COLOR_RESET +
        "):", ""
    ],
    blockControlForever: [RenderCode.COLOR_KEYWORD + "while " + RenderCode.COLOR_KEYWORD + "true" + RenderCode.COLOR_RESET + ":", ""],
    blockControlCall: [RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s)", ""],
    valueControlCall: [RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s)", ""],
    blockControlCallLibrary: [RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s)", ""],
    valueControlCallLibrary: [RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s)", ""],
    valueOpAdd: ["{number} + {number}",
        ""
    ],
    valueOpSubtract: ["{number} - {number}", ""],
    valueOpMultiply: ["{number} * {number}", ""],
    valueOpDivide: ["{number} / {number}", ""],
    valueOpRandom: ["random({number}, {number})", ""],
    valueOpLess: ["{string} < {string}", ""],
    valueOpEqual: ["{string} == {string}", ""],
    valueOpGreater: ["{string} > {string}", ""],
    valueOpAnd: ["{boolean} and {boolean}", ""],
    valueOpOr: ["{boolean} or {boolean}", ""],
    valueOpNot: ["not {boolean}", ""],
    valueOpJoin: ["{string} + {string}", ""],
    valueOpLetter: ["{string}[{number}]", ""],
    valueOpLength: ["len({string})",
        ""
    ],
    valueOpMod: ["{number} % {number}", ""],
    valueOpRound: ["round({number})", ""],
    valueOpMath: ["{string}({number})", ""],
    valueOpMath2: ["{string}({number}, {number})", ""],
    valueOpConstants: ["{string}", ""],
    valueOpBinary: ["{number} {choice:operator} {number}", ""],
    valueOpBitNot: ["~{number}", ""],
    blockControlWait: [RenderCode.COLOR_IDENTIFIER + "sleep" + RenderCode.COLOR_RESET + "({number});", ""],
    blockControlBroadcast: [RenderCode.COLOR_IDENTIFIER + "broadcastMessage" + RenderCode.COLOR_RESET + "({string});", ""],
    blockControlBroadcastWait: [RenderCode.COLOR_IDENTIFIER +
        "broadcastMessageAndWait" + RenderCode.COLOR_RESET + "({string});", ""
    ],
    blockControlPostMessage: [RenderCode.COLOR_IDENTIFIER + "postMessage" + RenderCode.COLOR_RESET + "({string}, {string}, {string});", ""],
    blockControlPostMessageAndWait: [RenderCode.COLOR_IDENTIFIER + "postMessageAndWait" + RenderCode.COLOR_RESET + "({string}, {string}, {string});", ""]
};
RenderCode.mappings.swift = {
    registerFlagTrigger: [RenderCode.COLOR_KEYWORD + "func " + RenderCode.COLOR_IDENTIFIER + "main" + RenderCode.COLOR_RESET + "() {", "}"],
    registerSpriteTrigger: [RenderCode.COLOR_KEYWORD + "func " + RenderCode.COLOR_IDENTIFIER + "when_touched" + RenderCode.COLOR_RESET + "() {", "}"],
    registerBroadcastTrigger: [RenderCode.COLOR_IDENTIFIER + "when_receive" + RenderCode.COLOR_RESET + '(event:"' + RenderCode.COLOR_STRING_CONSTANT + "{events}" + RenderCode.COLOR_RESET + '", ' + RenderCode.COLOR_IDENTIFIER + "closure" + RenderCode.COLOR_RESET +
        ": {{ () -> " + RenderCode.COLOR_STRING_CONSTANT + "Void " + RenderCode.COLOR_KEYWORD + "in" + RenderCode.COLOR_RESET, "});"
    ],
    registerKeyTrigger: [RenderCode.COLOR_IDENTIFIER + "when_key_pressed" + RenderCode.COLOR_RESET + '(keyName:"' + RenderCode.COLOR_STRING_CONSTANT + "{choice:keys}" + RenderCode.COLOR_RESET + '", ' + RenderCode.COLOR_IDENTIFIER + "closure" + RenderCode.COLOR_RESET + ": {{ () -> " + RenderCode.COLOR_STRING_CONSTANT + "Void " + RenderCode.COLOR_KEYWORD + "in" + RenderCode.COLOR_RESET, "});"],
    registerFunction: [RenderCode.COLOR_KEYWORD +
        "func " + RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s) {", "}"
    ],
    blockControlIf: [RenderCode.COLOR_KEYWORD + "if" + RenderCode.COLOR_RESET + " {boolean} {", "}"],
    blockControlIfElse: [RenderCode.COLOR_KEYWORD + "if" + RenderCode.COLOR_RESET + " {boolean} {", "}"],
    blockControlWhile: [RenderCode.COLOR_KEYWORD + "while" + RenderCode.COLOR_RESET + " {boolean} {", "}"],
    blockControlRepeatUntil: [RenderCode.COLOR_KEYWORD + "while " + RenderCode.COLOR_RESET + "(!{boolean}) {", "}"],
    blockControlRepeat: [RenderCode.COLOR_KEYWORD +
        "for" + RenderCode.COLOR_RESET + " _ " + RenderCode.COLOR_KEYWORD + "in " + RenderCode.COLOR_NUMBER_CONSTANT + "1" + RenderCode.COLOR_RESET + "..." + RenderCode.COLOR_NUMBER_CONSTANT + "{number:9} " + RenderCode.COLOR_RESET + "{", "}"
    ],
    blockControlForever: [RenderCode.COLOR_KEYWORD + "while " + RenderCode.COLOR_RESET + "(" + RenderCode.COLOR_KEYWORD + "true" + RenderCode.COLOR_RESET + ") {", "}"],
    blockControlCall: [RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s)", ""],
    valueControlCall: [RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET +
        "(%s)", ""
    ],
    blockControlCallLibrary: [RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s)", ""],
    valueControlCallLibrary: [RenderCode.COLOR_IDENTIFIER + "%s" + RenderCode.COLOR_RESET + "(%s)", ""],
    valueOpAdd: ["{number} + {number}", ""],
    valueOpSubtract: ["{number} - {number}", ""],
    valueOpMultiply: ["{number} * {number}", ""],
    valueOpDivide: ["{number} / {number}", ""],
    valueOpRandom: ["Math.randomNumber({number}, {number})", ""],
    valueOpLess: ["{string} < {string}", ""],
    valueOpEqual: ["{string} == {string}", ""],
    valueOpGreater: ["{string} > {string}",
        ""
    ],
    valueOpAnd: ["{boolean} && {boolean}", ""],
    valueOpOr: ["{boolean} || {boolean}", ""],
    valueOpNot: ["!{boolean}", ""],
    valueOpJoin: ["{string} + {string}", ""],
    valueOpLetter: ["{string}[{number}]", ""],
    valueOpLength: ["{string}.length", ""],
    valueOpMod: ["{number} % {number}", ""],
    valueOpRound: ["Math.round({number})", ""],
    valueOpMath: ["Math.{string}({number})", ""],
    valueOpMath2: ["Math.{string}({number}, {number})", ""],
    valueOpConstants: ["Math.{string}", ""],
    valueOpBinary: ["{number} {choice:operator} {number}", ""],
    valueOpBitNot: ["~{number}", ""],
    blockControlWait: [RenderCode.COLOR_IDENTIFIER + "delay" + RenderCode.COLOR_RESET + "(seconds:{number});", ""],
    blockControlBroadcast: [RenderCode.COLOR_IDENTIFIER + "broadcastMessage" + RenderCode.COLOR_RESET + "(message:{string});", ""],
    blockControlBroadcastWait: [RenderCode.COLOR_IDENTIFIER + "broadcastMessageAndWait" + RenderCode.COLOR_RESET + "(message:{string});", ""],
    blockControlPostMessage: [RenderCode.COLOR_IDENTIFIER + "postMessage" + RenderCode.COLOR_RESET + "(message:{string}, actor:{string}, withValue:{string});",
        ""
    ],
    blockControlPostMessageAndWait: [RenderCode.COLOR_IDENTIFIER + "postMessageAndWait" + RenderCode.COLOR_RESET + "(message:{string}, actor:{string}, withValue:{string});", ""]
};
var g_fnMapping = {
    "this.broadcast": "blockControlBroadcast",
    "this.broadcastAndWait": "blockControlBroadcastWait",
    "this.post": "blockControlPostMessage",
    "this.postAndWait": "blockControlPostMessageAndWait",
    "this.getMessageValue": "valueControlMessageValue",
    "this.getMessageSource": "valueControlMessageSource",
    "this.isClone": "valueControlIsClone",
    "this.wait": "blockControlWait",
    "this.waitUntil": "blockControlWaitUntil",
    "this.clone": "blockControlCloneActor",
    "this.getLastClonedActor": "valueControlLastClonedActor",
    "this.getOriginalNameFromClone": "valueControlCloneName",
    "this.deleteActor": "blockControlDeleteActor",
    "this.print": "blockControlPrint",
    "this.terminate": "blockControlStop",
    "this.motion.move": "blockMotionMove",
    "this.motion.turnCW": "blockMotionTurnCW",
    "this.motion.turnCCW": "blockMotionTurnCCW",
    "this.motion.pointDirection": "blockMotionPointDirection",
    "this.motion.setAngle": "blockMotionPointAngle",
    "this.motion.pointTowards": "blockMotionPointTowards",
    "this.motion.moveTo": "blockMotionGoTo",
    "this.motion.follow": "blockMotionGoTowards",
    "this.motion.glide": "blockMotionGlide",
    "this.motion.changeXBy": "blockMotionChangeXBy",
    "this.motion.setX": "blockMotionSetX",
    "this.motion.changeYBy": "blockMotionChangeYBy",
    "this.motion.setY": "blockMotionSetY",
    "this.motion.bounceOnEdge": "blockMotionBounceOnEdge",
    "this.motion.setRotationStyle": "blockMotionRotationStyle",
    "this.motion.getX": "valueMotionXPosition",
    "this.motion.getY": "valueMotionYPosition",
    "this.motion.getDirection": "valueMotionDirection",
    "this.motion.getAngle": "valueMotionAngle",
    "this.animation.setSpeed": "blockAnimationSetSpeed",
    "this.animation.setPart": "blockLooksSetCharacterPart",
    "this.animation.getPart": "valueLooksGetCharacterPart",
    "this.animation.waitFor": "blockAnimationWaitFor",
    "this.animation.stop": "blockAnimationStop",
    "this.animation.isRunning": "valueAnimationIsRunning",
    "this.animation.animationLength": "valueAnimationTime",
    "this.animation.whenDone": "registerAnimationDone",
    "this.animation.animate": "blockAnimationAnimate",
    "this.animation.simpleMoveTo": "blockAnimationSimpleMoveTo",
    "this.animation.simpleMoveBy": "blockAnimationSimpleMoveBy",
    "this.animation.simpleRotateTo": "blockAnimationSimpleRotateTo",
    "this.animation.simpleRotateBy": "blockAnimationSimpleRotateBy",
    "this.animation.simpleScaleTo": "blockAnimationSimpleScaleTo",
    "this.animation.simpleScaleBy": "blockAnimationSimpleScaleBy",
    "this.animation.simpleBezierTo": "blockAnimationSimpleBezierTo",
    "this.animation.simpleBezierBy": "blockAnimationSimpleBezierBy",
    "this.animation.simpleEffectTo": "blockAnimationSimpleEffectTo",
    "this.animation.simpleEffectBy": "blockAnimationSimpleEffectBy",
    "this.animation.simpleSwitchCostume": "blockAnimationSimpleSwitchCostume",
    "this.animation.simpleSwitchCostumeAndWait": "blockAnimationSimpleSwitchCostumeAndWait",
    "this.animation.rotateTo": "blockAnimationRotateTo",
    "this.animation.rotateBy": "blockAnimationRotateBy",
    "this.animation.moveTo": "blockAnimationMoveTo",
    "this.animation.moveBy": "blockAnimationMoveBy",
    "this.animation.scaleTo": "blockAnimationScaleTo",
    "this.animation.scaleBy": "blockAnimationScaleBy",
    "this.animation.bezierBy": "blockAnimationBezierBy",
    "this.animation.bezierTo": "blockAnimationBezierTo",
    "this.animation.effectBy": "blockAnimationEffectBy",
    "this.animation.effectTo": "blockAnimationEffectTo",
    "this.animation.changeCostumes": "blockAnimationSwitchCostume",
    "this.looks.setCostume": "blockLooksSwitchCostume",
    "this.looks.nextCostume": "blockLooksNextCostume",
    "this.looks.firstCostumeInGroup": "blockLooksFirstCostumeInGroup",
    "this.looks.nextCostumeInGroup": "blockLooksNextCostumeInGroup",
    "this.looks.getCostumeIndex": "valueLooksCostumeNum",
    "this.looks.getCostume": "valueLooksCostumeName",
    "this.looks.setBackgroundColor": "blockLooksBackgroundColor",
    "this.looks.setBackground": "blockLooksSwitchBackground",
    "this.looks.setBackgroundAndWait": "blockLooksSwitchBackgroundAndWait",
    "this.looks.nextBackground": "blockLooksNextBackground",
    "this.looks.firstBackgroundInGroup": "blockLooksFirstBackgroundInGroup",
    "this.looks.nextBackgroundInGroup": "blockLooksNextBackgroundInGroup",
    "this.looks.getBackgroundIndex": "valueLooksBackground",
    "this.looks.getBackground": "valueLooksBackgroundName",
    "this.looks.setLabel": "blockLooksSetLabel",
    "this.looks.setBubbleStyle": "blockLooksSetBubble",
    "this.looks.setBubbleDock": "blockLooksSetBubbleDock",
    "this.looks.setBubbleWidth": "blockLooksSetBubbleWidth",
    "this.looks.say": "blockLooksSay",
    "this.looks.sayFor": "blockLooksSayFor",
    "this.looks.think": "blockLooksThink",
    "this.looks.thinkFor": "blockLooksThinkFor",
    "this.looks.changeEffect": "blockLooksChangeEffect",
    "this.looks.setEffect": "blockLooksSetEffect",
    "this.looks.resetEffects": "blockLooksClearEffects",
    "this.looks.changeSize": "blockLooksChangeSizeBy",
    "this.looks.setSize": "blockLooksSetSize",
    "this.looks.getSize": "valueLooksSize",
    "this.looks.show": "blockLooksShow",
    "this.looks.hide": "blockLooksHide",
    "this.looks.isHidden": "valueLooksIsHidden",
    "this.looks.setLayer": "blockLooksLayer",
    "this.looks.getLayer": "valueLooksLayer",
    "this.looks.bringToFront": "blockLooksGoFront",
    "this.looks.sendToBack": "blockLooksGoBack",
    "this.looks.moveBackward": "blockLooksMoveBack",
    "this.looks.bringForward": "blockLooksMoveFront",
    "this.looks.dialog": "blockLooksDialog",
    "this.looks.prompt": "blockLooksPromptChoices",
    "this.looks.setViewportCamera": "blockLooksViewportCamera",
    "this.looks.showVideo": "blockLooksVideo",
    "this.looks.setVideoTransparency": "blockLooksVideoTransparency",
    "this.looks.setLevel": "blockLooksSetLevel",
    "this.looks.getLevel": "valueLooksGetLevel",
    "this.looks.getLevelIndex": "valueLooksGetLevelNum",
    "this.looks.getNumLevels": "valueLooksNumLevels",
    "this.looks.getTile": "valueLooksGetTileAt",
    "this.looks.getTileAtPoint": "valueLooksGetTileAtPoint",
    "this.looks.setTile": "blockLooksSetTileAt",
    "this.looks.setTileAtPoint": "blockLooksSetTileAtPoint",
    "this.sensing.getVideo": "valueSensingVideo",
    "this.sensing.isTouching": "valueSensingTouchingSprite",
    "this.sensing.isTouchingClone": "valueSensingTouchingCloneOf",
    "this.sensing.isTouchingColor": "valueSensingTouchingColor",
    "this.sensing.isColorTouchingColor": "valueSensingSeeColor",
    "this.sensing.ask": "blockSensingAskAndWait",
    "this.sensing.askChoices": "blockSensingAskChoices",
    "this.sensing.getAnswer": "valueSensingAnswer",
    "this.sensing.getTiltAngle": "valueSensingTiltAngle",
    "this.sensing.getTiltAmount": "valueSensingTiltAmount",
    "this.sensing.getTiltX": "valueSensingAccelerometerX",
    "this.sensing.getTiltY": "valueSensingAccelerometerY",
    "this.sensing.getMouseX": "valueSensingMouseX",
    "this.sensing.getMouseY": "valueSensingMouseY",
    "this.sensing.isMouseDown": "valueSensingMouseDown",
    "this.sensing.isKeyPressed": "valueSensingKeyPressed",
    "this.sensing.getDistance": "valueSensingDistanceToSprite",
    "this.sensing.resetTimer": "blockSensingResetTimer",
    "this.sensing.getTimer": "valueSensingTimer",
    "this.sensing.setSpriteProperty": "blockSensingSpriteProperty",
    "this.sensing.getSpriteProperty": "valueSensingSpriteProperty",
    "this.sensing.getActorName": "valueSensingActorName",
    "this.sensing.getActorNameAtIndex": "valueSensingActorNameAt",
    "this.sensing.getActorCount": "valueSensingNumActors",
    "this.sensing.getTouchedActorName": "valueSensingTouchedActorName",
    "this.sensing.getDateTime": "valueSensingDateTime",
    "this.sensing.getScreenLeft": "valueSensingScreenLeft",
    "this.sensing.getScreenRight": "valueSensingScreenRight",
    "this.sensing.getScreenTop": "valueSensingScreenTop",
    "this.sensing.getScreenBottom": "valueSensingScreenBottom",
    "this.sensing.getScreenProperty": "valueSensingStageProperty",
    "this.sensing.setTag": "blockSensingSetTag",
    "this.sensing.getTag": "valueSensingGetTag",
    "this.sensing.getUserId": "valueSensingUserId",
    "this.sensing.getUserFirstName": "valueSensingUserFirstName",
    "this.sound.play": "blockSoundPlay",
    "this.sound.playUntilDone": "blockSoundPlayUntilDone",
    "this.sound.stopAll": "blockSoundStopAll",
    "this.sound.playDrum": "blockSoundPlayDrum",
    "this.sound.playRest": "blockSoundRest",
    "this.sound.playNote": "blockSoundPlayNote",
    "this.sound.setInstrument": "blockSoundSetInstrument",
    "this.sound.changeVolume": "blockSoundChangeVolume",
    "this.sound.setVolume": "blockSoundSetVolume",
    "this.sound.getVolume": "valueSoundVolume",
    "this.sound.changeTempo": "blockSoundChangeTempo",
    "this.sound.setTempo": "blockSoundSetTempo",
    "this.sound.getTempo": "valueSoundTempo",
    "this.canvas.clear": "blockPenClear",
    "this.canvas.penDown": "blockPenDown",
    "this.canvas.penUp": "blockPenUp",
    "this.canvas.setColor": "blockPenSetColor",
    "this.canvas.changeHue": "blockPenChangeHue",
    "this.canvas.setHue": "blockPenSetHue",
    "this.canvas.changeShade": "blockPenChangeShade",
    "this.canvas.setShade": "blockPenSetShade",
    "this.canvas.changePenSize": "blockPenChangeSize",
    "this.canvas.setPenSize": "blockPenSetSize",
    "this.canvas.stamp": "blockPenStamp",
    "this.canvas.setFont": "blockPenSetFont",
    "this.canvas.setFontColor": "blockPenSetFontColor",
    "this.canvas.drawText": "blockPenDrawText",
    "this.canvas.redraw": "blockPenRedraw",
    "this.canvas.setFillColor": "blockPenSetFillColor",
    "this.canvas.setNoFill": "blockPenSetNoFill",
    "this.canvas.drawBezier": "blockPenDrawBezier",
    "this.canvas.drawPoint": "blockPenDrawPoint",
    "this.canvas.drawLine": "blockPenDrawLine",
    "this.canvas.drawRect": "blockPenDrawRectangle",
    "this.canvas.drawTriangle": "blockPenDrawTriangle",
    "this.canvas.drawEllipse": "blockPenDrawEllipse",
    "this.canvas.drawTextAt": "blockPenDrawTextAt",
    "this.canvas.drawLocalRect": "blockPenDrawRectangleLocal",
    "this.canvas.drawLocalEllipse": "blockPenDrawRectangleLocal",
    "this.physics.getProperty": "blockPhysicsGetProperty",
    "this.physics.apply": "blockPhysicsApply",
    "this.physics.applyXY": "blockPhysicsApplyXY",
    "this.physics.applyActive": "blockPhysicsSetActorActive",
    "this.physics.applyStatic": "blockPhysicsSetActorStatic",
    "this.physics.applyGeometry": "blockPhysicsSetActorGeometry",
    "this.physics.isCollidedWith": "valuePhysicsCollidedWithSprite",
    "this.physics.getCollidedName": "valuePhysicsCollidedWithName",
    "this.physics.applyForce": "blockPhysicsApplyForce",
    "this.physics.applyImpulse": "blockPhysicsApplyImpulse",
    "this.physics.applyForceAtAngle": "blockPhysicsApplyForceAngle",
    "this.physics.applyImpulseAtAngle": "blockPhysicsApplyImpulseAngle",
    "this.physics.applyForceAtXY": "blockPhysicsApplyForceXY",
    "this.physics.applyImpulseAtXY": "blockPhysicsApplyImpulseXY",
    "this.physics.applyTorque": "blockPhysicsApplyTorque",
    "this.physics.setActive": "blockPhysicsSetActive",
    "this.physics.setStatic": "blockPhysicsSetStatic",
    "this.physics.setGeometry": "blockPhysicsSetGeometry",
    "this.physics.setDensity": "blockPhysicsSetDensity",
    "this.physics.setFriction": "blockPhysicsSetFriction",
    "this.physics.setRestitution": "blockPhysicsSetRestitution",
    "this.physics.setAngularDamping": "blockPhysicsSetAngularDamping",
    "this.physics.setAngularVelocity": "blockPhysicsSetAngularVelocity",
    "this.physics.setLinearDamping": "blockPhysicsSetLinearDamping",
    "this.physics.setLinearVelocity": "blockPhysicsSetLinearVelocity",
    "this.physics.getDensity": "valuePhysicsDensity",
    "this.physics.getFriction": "valuePhysicsFriction",
    "this.physics.getRestitution": "valuePhysicsRestitution",
    "this.physics.getAngularVelocity": "valuePhysicsAngularVelocity",
    "this.physics.getInertia": "valuePhysicsInertia",
    "this.physics.isAwake": "valuePhysicsIsAwake",
    "this.physics.getVelocityX": "valuePhysicsXVelocity",
    "this.physics.getVelocityY": "valuePhysicsYVelocity",
    "this.physics.getAngularDamping": "valuePhysicsAngularDamping",
    "this.physics.getLinearDamping": "valuePhysicsLinearDamping",
    "this.physics.setGravity": "blockPhysicsSetGravity",
    "this.physics.getGravityX": "valuePhysicsXGravity",
    "this.physics.getGravityY": "valuePhysicsYGravity",
    "this.physics.start": "blockPhysicsStart",
    "this.physics.stop": "blockPhysicsStop",
    "this.net.saveValue": "blockNetworkSaveValue",
    "this.net.loadValue": "blockNetworkLoadValue",
    "this.net.fetch": "blockNetworkAPI",
    "this.net.parse": "valueNetworkParse",
    "this.net.getResult": "valueNetworkResult",
    "mc.onPlayerDied": "registerMCPEEventDied",
    "mc.onPlayerTravelled": "registerMCPEEventPlayer",
    "mc.onPlayerTeleported": "registerMCPEEventTeleported",
    "mc.onPlayerBounced": "registerMCPEEventBounced",
    "mc.onBlockPlaced": "registerMCPEEventBlockPlaced",
    "mc.onBlockBroken": "registerMCPEEventBlockBroken",
    "mc.onMobKilled": "registerMCPEEventMobKilled",
    "mc.onEntitySpawned": "registerMCPEEventEntitySpawned",
    "mc.onItemAcquired": "registerMCPEEventItemAcquired",
    "mc.onItemDropped": "registerMCPEEventItemDropped",
    "mc.onChat": "registerMCPEEventChat",
    "mc.onTell": "registerMCPEEventTell",
    "mc.onAnyBlockPlaced": "registerMCPEEventBlockPlacedAny",
    "mc.onAnyBlockBroken": "registerMCPEEventBlockBrokenAny",
    "mc.onAnyMobKilled": "registerMCPEEventMobKilledAny",
    "mc.onAnyEntitySpawned": "registerMCPEEventEntitySpawnedAny",
    "mc.onAnyItemAcquired": "registerMCPEEventItemAcquiredAny",
    "mc.onAnyItemDropped": "registerMCPEEventItemDroppedAny",
    "mc.bot.start": "blockMCPEBotStart",
    "mc.bot.flush": "blockMCPEBotFlush",
    "mc.bot.clear": "blockMCPEBotClear",
    "mc.bot.moveBy": "blockMCPEBotMoveBy",
    "mc.bot.moveTo": "blockMCPEBotMoveTo",
    "mc.bot.moveToPlayer": "blockMCPEBotMoveToPlayer",
    "mc.bot.testForBlock": "blockMCPEBotTestForBlock",
    "mc.bot.result": "valueMCPEResult",
    "mc.bot.move": "blockMCPEBotMove",
    "mc.bot.turnLeft": "blockMCPEBotTurnLeft",
    "mc.bot.turnRight": "blockMCPEBotTurnRight",
    "mc.bot.pointTowards": "blockMCPEBotPointDirection",
    "mc.bot.saveCheckpoint": "blockMCPEBotSaveCheckpoint",
    "mc.bot.restoreCheckpoint": "blockMCPEBotRestoreCheckpoint",
    "mc.bot.place": "blockMCPEBotPlaceBlock",
    "mc.bot.box": "blockMCPEBotBox",
    "mc.bot.summon": "blockMCPEBotSummon",
    "mc.bot.teleport": "blockMCPEBotTeleport",
    "mc.enchant": "blockMCPEEnchant",
    "mc.give": "blockMCPEGive",
    "mc.teleport": "blockMCPETeleport",
    "mc.setTime": "blockMCPESetTime",
    "mc.kill": "blockMCPEKill",
    "mc.setGameMode": "blockMCPEGameMode",
    "mc.say": "blockMCPESay",
    "mc.tell": "blockMCPETell",
    "mc.setWeather": "blockMCPESetWeather",
    "mc.summon": "blockMCPESummon",
    "mc.agent.move": "blockMCPEAgentMove",
    "mc.agent.turn": "blockMCPEAgentTurn",
    "mc.agent.place": "blockMCPEAgentPlace",
    "mc.agent.detect": "blockMCPEAgentDetect",
    "mc.agent.attack": "blockMCPEAgentAttack",
    "mc.agent.destroy": "blockMCPEAgentDestroy",
    "mc.agent.collect": "blockMCPEAgentCollect",
    "mc.agent.till": "blockMCPEAgentTill",
    "mc.agent.dropAll": "blockMCPEAgentDropall",
    "mc.agent.teleport": "blockMCPEAgentTeleport",
    "mc.agent.setFast": "blockMCPEAgentFast"
},
    g_revFnMapping = {},
    key;
for (key in g_fnMapping) g_revFnMapping[g_fnMapping[key]] = key;
var g_builtinsCompletion = ["this.setState({})", "this.onStart(function(){\n});", "this.onCondition(function(){return condition;}, function(){\n});", "this.onActorClick(function(){\n});", 'this.onKeyPress("space", function(){\n});', "this.onSceneChange(function(){\n})", "this.onMessageReceived(message, function(){\n})", "this.onClone(function(){\n})", "this.onDraw(function(){\n})", "this.onCollision(function(){\n})", "this.onAnimationDone(function(){\n})", "this.requestBlock(function(){\n})", "Math.abs(theta)",
        "Math.acos(theta)", "Math.asin(theta)", "Math.atan(theta)", "Math.atan2(y, x)", "Math.ceil(n)", "Math.cos(n)", "Math.exp(n)", "Math.floor(n)", "Math.log(n)", "Math.max(n, m)", "Math.min(n, m)", "Math.pow(x, y)", "Math.random()", "Math.randomRange(min, max)", "Math.round(n)", "Math.sin(theta)", "Math.sqrt(n)", "Math.tan(theta)", "Math.E", "Math.PI", "Math.SQRT2", "Math.SQRT1_2", "Math.LN2", "Math.LN10", "Math.LOG2E", "Math.LOG10E"
],
    g_fnCompletion = "this.broadcast(event);this.broadcastAndWait(event);this.post(event, target arg);this.postAndWait(event, target, arg);this.getMessageValue();this.getMessageSource();this.isClone();this.wait(seconds);this.waitUntil(condition);this.clone(actorName);this.getLastClonedActor();this.getOriginalNameFromClone(actorName);this.deleteActor();this.terminate(type);this.motion.move(d);this.motion.turnCW(degrees);this.motion.turnCCW(degrees);this.motion.pointDirection(degrees);this.motion.setAngle(degrees);this.motion.pointTowards(actorName);this.motion.moveTo(x, y);this.motion.follow(actorName);this.motion.glide(seconds, x, y);this.motion.changeXBy(x);this.motion.setX(x);this.motion.changeYBy(y);this.motion.setY(y);this.motion.bounceOnEdge();this.motion.setRotationStyle(style);this.motion.getX();this.motion.getY();this.motion.getDirection();this.motion.getAngle();this.animation.rotateTo(time, theta, easing, name);this.animation.rotateBy(time, theta, easing, name);this.animation.moveTo(time, x, y, easing, name);this.animation.moveBy(time, x, y, easing, name);this.animation.scaleTo(time, scale, easing, name);this.animation.scaleBy(time, scale, easing, name);this.animation.bezierBy(time, x, y, cx1, cy1, cx2, cy2, easing, name);this.animation.bezierTo(time, x, y, cx1, cy1, cx2, cy2, easing, name);this.animation.effectBy(time, effect, value, easing, name);this.animation.effectTo(time, effect, value, easing, name);this.animation.changeCostumes(time, fps, prefix, easing, name);this.animation.waitFor(name);this.animation.stop(name);this.animation.isRunning(name);this.looks.setCostume(name);this.looks.nextCostume();this.looks.firstCostumeInGroup(prefix);this.looks.nextCostumeInGroup(prefix);this.looks.getCostumeIndex();this.looks.getCostume();this.looks.setBackground(scene);this.looks.setBackgroundAndWait(scene);this.looks.nextBackground();this.looks.firstBackgroundInGroup(prefix);this.looks.nextBackgroundInGroup(prefix);this.looks.getBackgroundIndex();this.looks.getBackground();this.looks.setLabel(text);this.looks.setBubbleStyle(style);this.looks.setBubbleDock(dock);this.looks.say(text);this.looks.sayFor(text, seconds);this.looks.think(text);this.looks.thinkFor(text, seconds);this.looks.changeEffect(effect, n);this.looks.setEffect(effect, n);this.looks.resetEffects();this.looks.changeSize(scale);this.looks.setSize();this.looks.getSize();this.looks.show();this.looks.hide();this.looks.isHidden();this.looks.setLayer(n);this.looks.getLayer();this.looks.bringToFront();this.looks.sendToBack();this.looks.moveBackward(n);this.looks.bringForward(n);this.looks.dialog(text);this.looks.prompt(text, button1, button2);this.sensing.isTouching(actorName);this.sensing.isTouchingClone(actorName);this.sensing.isTouchingColor(color);this.sensing.isColorTouchingColor(color1, color2);this.sensing.ask(text);this.sensing.askChoices(text, choice1, choice2);this.sensing.getAnswer();this.sensing.getMouseX();this.sensing.getMouseY();this.sensing.isMouseDown();this.sensing.isKeyPressed(keyName);this.sensing.getDistance(actorName);this.sensing.resetTimer();this.sensing.getTimer();this.sensing.getSpriteProperty(prop, actorName);this.sensing.getActorName();this.sensing.getActorNameAtIndex(n);this.sensing.getActorCount();this.sensing.getTouchedActorName();this.sensing.getDateTime(which);this.sensing.getScreenLeft();this.sensing.getScreenRight();this.sensing.getScreenTop();this.sensing.getScreenBottom();this.sensing.getScreenProperty(which);this.sensing.getUserId();this.sensing.getUserFirstName();this.sound.play(name);this.sound.playUntilDone(name);this.sound.stopAll();this.sound.playDrum(drumIdx, beats);this.sound.playRest(beats);this.sound.playNote(noteIdx);this.sound.setInstrument(instrumentIdx);this.sound.changeVolume(n);this.sound.setVolume(n);this.sound.getVolume();this.sound.changeTempo(n);this.sound.setTempo(n);this.sound.getTempo();this.canvas.clear();this.canvas.penDown();this.canvas.penUp();this.canvas.setColor(color);this.canvas.changeHue(n);this.canvas.setHue(n);this.canvas.changeShade(n);this.canvas.setShade(n);this.canvas.changePenSize(n);this.canvas.setPenSize(n);this.canvas.stamp();this.canvas.setFont(size, style, fontName);this.canvas.setFontColor(color);this.canvas.drawText(text);this.canvas.redraw();this.canvas.setFillColor(color);this.canvas.setNoFill();this.canvas.drawBezier(x1, y1, x2, y2, cx1, cy1, cx2, cy2);this.canvas.drawPoint(x, y);this.canvas.drawLine(x1, y1, x2, y2);this.canvas.drawRect(x, y, width, height);this.canvas.drawTriangle(x1, y1, x2, y2, x3, y3);this.canvas.drawEllipse(x, y, width, height);this.canvas.drawTextAt(text, x, y);this.canvas.drawLocalRect(width, height);this.canvas.drawLocalEllipse(width, height);this.physics.getProperty(name, actor);this.physics.apply(name, actor, value);this.physics.applyXY(name, actor, x, y);this.physics.applyActive(actor, boolean);this.physics.applyStatic(actor, boolean);this.physics.applyGeometry(actor, geometry);this.physics.isCollidedWith(actorName);this.physics.getCollidedName();this.physics.applyForce(n);this.physics.applyImpulse(n);this.physics.applyForceAtAngle(n, degrees);this.physics.applyImpulseAtAngle(n, degrees);this.physics.applyForceAtXY(x, y);this.physics.applyImpulseAtXY(x, y);this.physics.applyTorque(n);this.physics.setActive(b);this.physics.setStatic(b);this.physics.setGeometry(geometry);this.physics.setDensity(n);this.physics.setFriction(n);this.physics.setRestitution(n);this.physics.setAngularDamping(n);this.physics.setAngularVelocity(n);this.physics.setLinearDamping(n);this.physics.setLinearVelocity(x, y);this.physics.getDensity();this.physics.getFriction();this.physics.getRestitution();this.physics.getAngularVelocity();this.physics.getInertia();this.physics.isAwake();this.physics.getVelocityX();this.physics.getVelocityY();this.physics.getAngularDamping();this.physics.getLinearDamping();this.physics.setGravity(x, y);this.physics.getGravityX();this.physics.getGravityY();this.physics.start();this.physics.stop();this.net.saveValue(name,value,access);this.net.loadValue(name);this.net.fetch(url);this.net.parse(json);this.net.getResult()".split(";"),
    g_keywords = "null true false break case catch const default finally for instanceof new var continue function return void delete if this do while else in switch throw try typeof with debugger".split(" "),
    g_properties = "background #;scene #;scene name;x gravity;y gravity;x position;y position;direction;costume #;costume name;say;visible;size;volume;density;friction;restitution;angular velocity;angular damping;linear damping;x linear velocity;y linear velocity;inertia;awake;width;height;effect/nnn".split(";"),
    g_parser = function () {
        function b() {
            this.yy = {}
        }
        var c = {
            trace: function () { },
            yy: {},
            symbols_: {
                error: 2,
                Literal: 3,
                NULL: 4,
                TRUE: 5,
                FALSE: 6,
                NUMBER: 7,
                STRING: 8,
                Property: 9,
                IDENTIFIER: 10,
                ":": 11,
                AssignmentExpr: 12,
                PropertyList: 13,
                ",": 14,
                PrimaryExpr: 15,
                PrimaryExprNoBrace: 16,
                "{": 17,
                "}": 18,
                THIS: 19,
                ArrayLiteral: 20,
                "(": 21,
                Expr: 22,
                ")": 23,
                "[": 24,
                ElisionOpt: 25,
                "]": 26,
                ElementList: 27,
                Elision: 28,
                MemberExpr: 29,
                FunctionExpr: 30,
                ".": 31,
                NEW: 32,
                Arguments: 33,
                MemberExprNoBF: 34,
                NewExpr: 35,
                NewExprNoBF: 36,
                CallExpr: 37,
                CallExprNoBF: 38,
                ArgumentList: 39,
                LeftHandSideExpr: 40,
                LeftHandSideExprNoBF: 41,
                PostfixExpr: 42,
                "++": 43,
                "--": 44,
                PostfixExprNoBF: 45,
                UnaryExprCommon: 46,
                DELETE: 47,
                UnaryExpr: 48,
                VOID: 49,
                TYPEOF: 50,
                "+": 51,
                "-": 52,
                "~": 53,
                "!": 54,
                UnaryExprNoBF: 55,
                MultiplicativeExpr: 56,
                "*": 57,
                "/": 58,
                "%": 59,
                MultiplicativeExprNoBF: 60,
                AdditiveExpr: 61,
                AdditiveExprNoBF: 62,
                ShiftExpr: 63,
                "<<": 64,
                ">>": 65,
                ">>>": 66,
                ShiftExprNoBF: 67,
                RelationalExpr: 68,
                "<": 69,
                ">": 70,
                "<=": 71,
                ">=": 72,
                INSTANCEOF: 73,
                IN: 74,
                RelationalExprNoIn: 75,
                RelationalExprNoBF: 76,
                EqualityExpr: 77,
                "==": 78,
                "!=": 79,
                "===": 80,
                "!==": 81,
                EqualityExprNoIn: 82,
                EqualityExprNoBF: 83,
                BitwiseANDExpr: 84,
                "&": 85,
                BitwiseANDExprNoIn: 86,
                BitwiseANDExprNoBF: 87,
                BitwiseXORExpr: 88,
                "^": 89,
                BitwiseXORExprNoIn: 90,
                BitwiseXORExprNoBF: 91,
                BitwiseORExpr: 92,
                "|": 93,
                BitwiseORExprNoIn: 94,
                BitwiseORExprNoBF: 95,
                LogicalANDExpr: 96,
                "&&": 97,
                LogicalANDExprNoIn: 98,
                LogicalANDExprNoBF: 99,
                LogicalORExpr: 100,
                "||": 101,
                LogicalORExprNoIn: 102,
                LogicalORExprNoBF: 103,
                ConditionalExpr: 104,
                "?": 105,
                ConditionalExprNoIn: 106,
                AssignmentExprNoIn: 107,
                ConditionalExprNoBF: 108,
                AssignmentOperator: 109,
                AssignmentExprNoBF: 110,
                "=": 111,
                "+=": 112,
                "-=": 113,
                "*=": 114,
                "/=": 115,
                "<<=": 116,
                ">>=": 117,
                ">>>=": 118,
                "&=": 119,
                "^=": 120,
                "|=": 121,
                "%=": 122,
                ExprNoIn: 123,
                ExprNoBF: 124,
                Statement: 125,
                Block: 126,
                InlineComment: 127,
                VariableStatement: 128,
                ConstStatement: 129,
                FunctionDeclaration: 130,
                EmptyStatement: 131,
                ExprStatement: 132,
                IfStatement: 133,
                IterationStatement: 134,
                ContinueStatement: 135,
                BreakStatement: 136,
                ReturnStatement: 137,
                WithStatement: 138,
                SwitchStatement: 139,
                LabelledStatement: 140,
                ThrowStatement: 141,
                TryStatement: 142,
                DebuggerStatement: 143,
                LINECOMMENT: 144,
                SourceElements: 145,
                VAR: 146,
                VariableDeclarationList: 147,
                ";": 148,
                Initializer: 149,
                VariableDeclarationListNoIn: 150,
                InitializerNoIn: 151,
                CONST: 152,
                ConstDeclarationList: 153,
                ConstDeclaration: 154,
                IF: 155,
                ELSE: 156,
                DO: 157,
                WHILE: 158,
                FOR: 159,
                ExprNoInOpt: 160,
                ExprOpt: 161,
                CONTINUE: 162,
                BREAK: 163,
                RETURN: 164,
                WITH: 165,
                SWITCH: 166,
                CaseBlock: 167,
                CaseClausesOpt: 168,
                DefaultClause: 169,
                CaseClauses: 170,
                CaseClause: 171,
                CASE: 172,
                DEFAULT: 173,
                THROW: 174,
                TRY: 175,
                FINALLY: 176,
                CATCH: 177,
                DEBUGGER: 178,
                FUNCTION: 179,
                FunctionBody: 180,
                FormalParameterList: 181,
                Program: 182,
                $accept: 0,
                $end: 1
            },
            terminals_: {
                2: "error",
                4: "NULL",
                5: "TRUE",
                6: "FALSE",
                7: "NUMBER",
                8: "STRING",
                10: "IDENTIFIER",
                11: ":",
                14: ",",
                17: "{",
                18: "}",
                19: "THIS",
                21: "(",
                23: ")",
                24: "[",
                26: "]",
                31: ".",
                32: "NEW",
                43: "++",
                44: "--",
                47: "DELETE",
                49: "VOID",
                50: "TYPEOF",
                51: "+",
                52: "-",
                53: "~",
                54: "!",
                57: "*",
                58: "/",
                59: "%",
                64: "<<",
                65: ">>",
                66: ">>>",
                69: "<",
                70: ">",
                71: "<=",
                72: ">=",
                73: "INSTANCEOF",
                74: "IN",
                78: "==",
                79: "!=",
                80: "===",
                81: "!==",
                85: "&",
                89: "^",
                93: "|",
                97: "&&",
                101: "||",
                105: "?",
                111: "=",
                112: "+=",
                113: "-=",
                114: "*=",
                115: "/=",
                116: "<<=",
                117: ">>=",
                118: ">>>=",
                119: "&=",
                120: "^=",
                121: "|=",
                122: "%=",
                144: "LINECOMMENT",
                146: "VAR",
                148: ";",
                152: "CONST",
                155: "IF",
                156: "ELSE",
                157: "DO",
                158: "WHILE",
                159: "FOR",
                162: "CONTINUE",
                163: "BREAK",
                164: "RETURN",
                165: "WITH",
                166: "SWITCH",
                172: "CASE",
                173: "DEFAULT",
                174: "THROW",
                175: "TRY",
                176: "FINALLY",
                177: "CATCH",
                178: "DEBUGGER",
                179: "FUNCTION"
            },
            productions_: [0, [3, 1],
                [3, 1],
                [3, 1],
                [3, 1],
                [3, 1],
                [9, 3],
                [9, 3],
                [9, 3],
                [13, 1],
                [13, 3],
                [15, 1],
                [15, 2],
                [15, 3],
                [15, 4],
                [16, 1],
                [16, 1],
                [16, 1],
                [16, 1],
                [16, 3],
                [20, 3],
                [20, 3],
                [20, 5],
                [27, 2],
                [27, 4],
                [25, 0],
                [25, 1],
                [28, 1],
                [28, 2],
                [29, 1],
                [29, 1],
                [29, 4],
                [29, 3],
                [29, 3],
                [34, 1],
                [34, 4],
                [34, 3],
                [34, 3],
                [35, 1],
                [35, 2],
                [36, 1],
                [36, 2],
                [37, 2],
                [37, 2],
                [37, 4],
                [37, 3],
                [38, 2],
                [38, 2],
                [38, 4],
                [38, 3],
                [33, 2],
                [33, 3],
                [39, 1],
                [39, 3],
                [40, 1],
                [40, 1],
                [41, 1],
                [41, 1],
                [42, 1],
                [42, 2],
                [42, 2],
                [45, 1],
                [45, 2],
                [45, 2],
                [46, 2],
                [46, 2],
                [46, 2],
                [46, 2],
                [46, 2],
                [46, 2],
                [46, 2],
                [46, 2],
                [46, 2],
                [48, 1],
                [48, 1],
                [55, 1],
                [55, 1],
                [56, 1],
                [56, 3],
                [56, 3],
                [56, 3],
                [60, 1],
                [60, 3],
                [60, 3],
                [60, 3],
                [61, 1],
                [61,
                    3
                ],
                [61, 3],
                [62, 1],
                [62, 3],
                [62, 3],
                [63, 1],
                [63, 3],
                [63, 3],
                [63, 3],
                [67, 1],
                [67, 3],
                [67, 3],
                [67, 3],
                [68, 1],
                [68, 3],
                [68, 3],
                [68, 3],
                [68, 3],
                [68, 3],
                [68, 3],
                [75, 1],
                [75, 3],
                [75, 3],
                [75, 3],
                [75, 3],
                [75, 3],
                [76, 1],
                [76, 3],
                [76, 3],
                [76, 3],
                [76, 3],
                [76, 3],
                [76, 3],
                [77, 1],
                [77, 3],
                [77, 3],
                [77, 3],
                [77, 3],
                [82, 1],
                [82, 3],
                [82, 3],
                [82, 3],
                [82, 3],
                [83, 1],
                [83, 3],
                [83, 3],
                [83, 3],
                [83, 3],
                [84, 1],
                [84, 3],
                [86, 1],
                [86, 3],
                [87, 1],
                [87, 3],
                [88, 1],
                [88, 3],
                [90, 1],
                [90, 3],
                [91, 1],
                [91, 3],
                [92, 1],
                [92, 3],
                [94, 1],
                [94, 3],
                [95, 1],
                [95, 3],
                [96, 1],
                [96, 3],
                [98, 1],
                [98, 3],
                [99, 1],
                [99, 3],
                [100,
                    1
                ],
                [100, 3],
                [102, 1],
                [102, 3],
                [103, 1],
                [103, 3],
                [104, 1],
                [104, 5],
                [106, 1],
                [106, 5],
                [108, 1],
                [108, 5],
                [12, 1],
                [12, 3],
                [107, 1],
                [107, 3],
                [110, 1],
                [110, 3],
                [109, 1],
                [109, 1],
                [109, 1],
                [109, 1],
                [109, 1],
                [109, 1],
                [109, 1],
                [109, 1],
                [109, 1],
                [109, 1],
                [109, 1],
                [109, 1],
                [22, 1],
                [22, 3],
                [123, 1],
                [123, 3],
                [124, 1],
                [124, 3],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [125, 1],
                [127, 1],
                [126, 2],
                [126, 3],
                [128, 3],
                [128, 3],
                [147, 1],
                [147, 2],
                [147, 3],
                [147, 4],
                [150, 1],
                [150, 2],
                [150, 3],
                [150, 4],
                [129, 3],
                [129, 3],
                [153, 1],
                [153, 3],
                [154, 1],
                [154, 2],
                [149, 2],
                [151, 2],
                [131, 1],
                [132, 2],
                [132, 2],
                [133, 5],
                [133, 7],
                [134, 7],
                [134, 7],
                [134, 5],
                [134, 9],
                [134, 10],
                [134, 7],
                [134, 8],
                [134, 9],
                [161, 0],
                [161, 1],
                [160, 0],
                [160, 1],
                [135, 2],
                [135, 2],
                [135, 3],
                [135, 3],
                [136, 2],
                [136, 2],
                [136, 3],
                [136, 3],
                [137, 2],
                [137, 2],
                [137, 3],
                [137, 3],
                [138, 5],
                [139, 5],
                [167, 3],
                [167, 5],
                [168, 0],
                [168, 1],
                [170, 1],
                [170, 2],
                [171, 3],
                [171, 4],
                [169, 2],
                [169, 3],
                [140, 3],
                [141, 3],
                [141, 3],
                [142, 4],
                [142, 7],
                [142, 9],
                [143, 2],
                [143, 2],
                [130, 7],
                [130, 8],
                [30,
                    6
                ],
                [30, 7],
                [30, 7],
                [30, 8],
                [181, 1],
                [181, 3],
                [180, 0],
                [180, 1],
                [182, 0],
                [182, 1],
                [145, 1],
                [145, 2]
            ],
            performAction: function (b, c, d, h, j, k) {
                b = k.length - 1;
                switch (j) {
                    case 1:
                        this.$ = new Node("null");
                        break;
                    case 2:
                        this.$ = new Node("true");
                        break;
                    case 3:
                        this.$ = new Node("false");
                        break;
                    case 4:
                        this.$ = new Node("number", k[b]);
                        break;
                    case 5:
                        this.$ = new Node("string", k[b].substring(1, k[b].length - 1).replace(/\\"/g, '"'));
                        break;
                    case 6:
                        this.$ = new Node("JsonProperty", k[b - 2], k[b]);
                        break;
                    case 7:
                        this.$ = new Node("JsonProperty", k[b - 2].substring(1,
                            k[b - 2].length - 1).replace(/\\"/g, '"'), k[b]);
                        break;
                    case 8:
                        this.$ = new Node("JsonProperty", k[b - 2], k[b]);
                        break;
                    case 9:
                        this.$ = [k[b]];
                        break;
                    case 10:
                        if (k[b - 2] instanceof Array) {
                            k[b - 2].push(k[b]);
                            this.$ = k[b - 2]
                        } else this.$ = [k[b - 2], k[b]];
                        break;
                    case 12:
                        this.$ = new Node("Json");
                        break;
                    case 13:
                        this.$ = new Node("Json");
                        this.$.children = k[b - 1];
                        break;
                    case 14:
                        this.$ = new Node("Json");
                        this.$.children = k[b - 2];
                        break;
                    case 15:
                        this.$ = new Node("this");
                        break;
                    case 18:
                        this.$ = new Node("identifier", k[b]);
                        break;
                    case 19:
                        this.$ = k[b - 1];
                        break;
                    case 20:
                        this.$ = new Node("ArrayLiteral");
                        break;
                    case 21:
                        if (k[b - 1].name == "ArrayLiteral") this.$ = k[b - 1];
                        else {
                            this.$ = new Node("ArrayLiteral");
                            this.$.addChild(k[b - 1])
                        }
                        break;
                    case 22:
                        if (k[b - 3].name == "ArrayLiteral") this.$ = k[b - 3];
                        else {
                            this.$ = new Node("ArrayLiteral");
                            this.$.addChild(k[b - 3])
                        }
                        break;
                    case 23:
                        this.$ = new Node("ArrayLiteral");
                        this.$.addChild(k[b]);
                        break;
                    case 24:
                        if (k[b - 3].name == "ArrayLiteral") {
                            k[b - 3].addChild(k[b]);
                            this.$ = k[b - 3]
                        }
                        break;
                    case 26:
                        this.$ = "";
                        break;
                    case 27:
                        this.$ = "";
                        break;
                    case 28:
                        this.$ =
                            "";
                        break;
                    case 31:
                        this.$ = new Node("ArrayProperty", k[b - 3], k[b - 1]);
                        break;
                    case 32:
                        this.$ = new Node("Property", k[b - 2], new Node("identifier", k[b]));
                        break;
                    case 33:
                        this.$ = new Node("New", k[b - 1], k[b]);
                        break;
                    case 35:
                        this.$ = new Node("ArrayProperty", k[b - 3], k[b - 1]);
                        break;
                    case 36:
                        this.$ = new Node("Property", k[b - 2], new Node("identifier", k[b]));
                        break;
                    case 37:
                        this.$ = new Node("New", k[b - 1], k[b]);
                        break;
                    case 39:
                        this.$ = new Node("New", k[b], new Node("FunctionArguments"));
                        break;
                    case 41:
                        this.$ = new Node("New", k[b], new Node("FunctionArguments"));
                        break;
                    case 42:
                        this.$ = new Node("FunctionCall", k[b - 1], k[b]);
                        break;
                    case 43:
                        this.$ = new Node("FunctionCall", k[b - 1], k[b]);
                        break;
                    case 44:
                        this.$ = new Node("ArrayProperty", k[b - 3], k[b - 1]);
                        break;
                    case 45:
                        this.$ = new Node("Property", k[b - 2], new Node("identifier", k[b]));
                        break;
                    case 46:
                        this.$ = new Node("FunctionCall", k[b - 1], k[b]);
                        break;
                    case 47:
                        this.$ = new Node("FunctionCall", k[b - 1], k[b]);
                        break;
                    case 48:
                        this.$ = new Node("ArrayProperty", k[b - 3], k[b - 1]);
                        break;
                    case 49:
                        this.$ = new Node("Property", k[b - 2], new Node("identifier",
                            k[b]));
                        break;
                    case 50:
                        this.$ = new Node("FunctionArguments");
                        break;
                    case 51:
                        this.$ = new Node("FunctionArguments");
                        this.$.children = k[b - 1];
                        break;
                    case 52:
                        this.$ = [k[b]];
                        break;
                    case 53:
                        if (k[b - 2] instanceof Array) {
                            k[b - 2].push(k[b]);
                            this.$ = k[b - 2]
                        } else this.$ = [k[b - 2], k[b]];
                        break;
                    case 59:
                        this.$ = new Node("PostIncrement", k[b - 1]);
                        break;
                    case 60:
                        this.$ = new Node("PostIncrement", k[b - 1]);
                        break;
                    case 62:
                        this.$ = new Node("PostIncrement", k[b - 1]);
                        break;
                    case 63:
                        this.$ = new Node("PostDecrement", k[b - 1]);
                        break;
                    case 64:
                        this.$ = new Node("Delete",
                            k[b - 1]);
                        break;
                    case 65:
                        this.$ = new Node("Void", k[b - 1]);
                        break;
                    case 66:
                        this.$ = new Node("TypeOf", k[b - 1]);
                        break;
                    case 67:
                        this.$ = new Node("PreIncrement", k[b]);
                        break;
                    case 68:
                        this.$ = new Node("PreDecrement", k[b]);
                        break;
                    case 69:
                        this.$ = k[b];
                        break;
                    case 70:
                        this.$ = k[b].name == "number" ? new Node("number", -k[b].getChild(0)) : new Node("Negative", k[b]);
                        break;
                    case 71:
                        this.$ = new Node("BitwiseNot", k[b]);
                        break;
                    case 72:
                        this.$ = new Node("LogicalNot", k[b]);
                        break;
                    case 78:
                        this.$ = new Node("Multiply", k[b - 2], k[b]);
                        break;
                    case 79:
                        this.$ =
                            new Node("Divide", k[b - 2], k[b]);
                        break;
                    case 80:
                        this.$ = new Node("Remainder", k[b - 2], k[b]);
                        break;
                    case 82:
                        this.$ = new Node("Multiply", k[b - 2], k[b]);
                        break;
                    case 83:
                        this.$ = new Node("Divide", k[b - 2], k[b]);
                        break;
                    case 84:
                        this.$ = new Node("Remainder", k[b - 2], k[b]);
                        break;
                    case 86:
                        this.$ = new Node("Add", k[b - 2], k[b]);
                        break;
                    case 87:
                        this.$ = new Node("Subtract", k[b - 2], k[b]);
                        break;
                    case 89:
                        this.$ = new Node("Add", k[b - 2], k[b]);
                        break;
                    case 90:
                        this.$ = new Node("Subtract", k[b - 2], k[b]);
                        break;
                    case 92:
                        this.$ = new Node("ShiftLeft", k[b - 2],
                            k[b]);
                        break;
                    case 93:
                        this.$ = new Node("ShiftRight", k[b - 2], k[b]);
                        break;
                    case 94:
                        this.$ = new Node("UnsignedShiftRight", k[b - 2], k[b]);
                        break;
                    case 96:
                        this.$ = new Node("ShiftLeft", k[b - 2], k[b]);
                        break;
                    case 97:
                        this.$ = new Node("ShiftRight", k[b - 2], k[b]);
                        break;
                    case 98:
                        this.$ = new Node("UnsignedShiftRight", k[b - 2], k[b]);
                        break;
                    case 100:
                        this.$ = new Node("LessThan", k[b - 2], k[b]);
                        break;
                    case 101:
                        this.$ = new Node("GreaterThan", k[b - 2], k[b]);
                        break;
                    case 102:
                        this.$ = new Node("LessThanOrEqual", k[b - 2], k[b]);
                        break;
                    case 103:
                        this.$ = new Node("GreaterThanOrEqual",
                            k[b - 2], k[b]);
                        break;
                    case 104:
                        this.$ = new Node("InstanceOf", k[b - 2], k[b]);
                        break;
                    case 105:
                        this.$ = new Node("In", k[b - 2], k[b]);
                        break;
                    case 107:
                        this.$ = new Node("LessThan", k[b - 2], k[b]);
                        break;
                    case 108:
                        this.$ = new Node("GreaterThan", k[b - 2], k[b]);
                        break;
                    case 109:
                        this.$ = new Node("LessThanOrEqual", k[b - 2], k[b]);
                        break;
                    case 110:
                        this.$ = new Node("GreaterThanOrEqual", k[b - 2], k[b]);
                        break;
                    case 111:
                        this.$ = new Node("InstanceOf", k[b - 2], k[b]);
                        break;
                    case 113:
                        this.$ = new Node("LessThan", k[b - 2], k[b]);
                        break;
                    case 114:
                        this.$ = new Node("GreaterThan",
                            k[b - 2], k[b]);
                        break;
                    case 115:
                        this.$ = new Node("LessThanOrEqual", k[b - 2], k[b]);
                        break;
                    case 116:
                        this.$ = new Node("GreaterThanOrEqual", k[b - 2], k[b]);
                        break;
                    case 117:
                        this.$ = new Node("InstanceOf", k[b - 2], k[b]);
                        break;
                    case 118:
                        this.$ = new Node("In", k[b - 2], k[b]);
                        break;
                    case 120:
                        this.$ = new Node("Equal", k[b - 2], k[b]);
                        break;
                    case 121:
                        this.$ = new Node("NotEqual", k[b - 2], k[b]);
                        break;
                    case 122:
                        this.$ = new Node("StrictEqual", k[b - 2], k[b]);
                        break;
                    case 123:
                        this.$ = new Node("StrictNotEqual", k[b - 2], k[b]);
                        break;
                    case 125:
                        this.$ = new Node("Equal",
                            k[b - 2], k[b]);
                        break;
                    case 126:
                        this.$ = new Node("NotEqual", k[b - 2], k[b]);
                        break;
                    case 127:
                        this.$ = new Node("StrictEqual", k[b - 2], k[b]);
                        break;
                    case 128:
                        this.$ = new Node("StrictNotEqual", k[b - 2], k[b]);
                        break;
                    case 130:
                        this.$ = new Node("Equal", k[b - 2], k[b]);
                        break;
                    case 131:
                        this.$ = new Node("NotEqual", k[b - 2], k[b]);
                        break;
                    case 132:
                        this.$ = new Node("StrictEqual", k[b - 2], k[b]);
                        break;
                    case 133:
                        this.$ = new Node("StrictNotEqual", k[b - 2], k[b]);
                        break;
                    case 135:
                        this.$ = new Node("BitwiseAnd", k[b - 2], k[b]);
                        break;
                    case 137:
                        this.$ = new Node("BitwiseAnd",
                            k[b - 2], k[b]);
                        break;
                    case 139:
                        this.$ = new Node("BitwiseAnd", k[b - 2], k[b]);
                        break;
                    case 141:
                        this.$ = new Node("BitwiseXor", k[b - 2], k[b]);
                        break;
                    case 143:
                        this.$ = new Node("BitwiseXor", k[b - 2], k[b]);
                        break;
                    case 145:
                        this.$ = new Node("BitwiseXor", k[b - 2], k[b]);
                        break;
                    case 147:
                        this.$ = new Node("BitwiseOr", k[b - 2], k[b]);
                        break;
                    case 149:
                        this.$ = new Node("BitwiseOr", k[b - 2], k[b]);
                        break;
                    case 151:
                        this.$ = new Node("BitwiseOr", k[b - 2], k[b]);
                        break;
                    case 153:
                        this.$ = new Node("LogicalAnd", k[b - 2], k[b]);
                        break;
                    case 155:
                        this.$ = new Node("LogicalAnd",
                            k[b - 2], k[b]);
                        break;
                    case 157:
                        this.$ = new Node("LogicalAnd", k[b - 2], k[b]);
                        break;
                    case 159:
                        this.$ = new Node("LogicalOr", k[b - 2], k[b]);
                        break;
                    case 161:
                        this.$ = new Node("LogicalOr", k[b - 2], k[b]);
                        break;
                    case 163:
                        this.$ = new Node("LogicalOr", k[b - 2], k[b]);
                        break;
                    case 165:
                        this.$ = new Node("Conditional", k[b - 4], k[b - 2], k[b]);
                        break;
                    case 167:
                        this.$ = new Node("Conditional", k[b - 4], k[b - 2], k[b]);
                        break;
                    case 169:
                        this.$ = new Node("Conditional", k[b - 4], k[b - 2], k[b]);
                        break;
                    case 171:
                        this.$ = new Node("Assignment", k[b - 2], k[b - 1], k[b]);
                        break;
                    case 173:
                        this.$ = new Node("Assignment", k[b - 2], k[b - 1], k[b]);
                        break;
                    case 175:
                        this.$ = new Node("Assignment", k[b - 2], k[b - 1], k[b]);
                        break;
                    case 189:
                        this.$ = new Node(",", k[b - 2], k[b]);
                        break;
                    case 191:
                        this.$ = new Node(",", k[b - 2], k[b]);
                        break;
                    case 193:
                        this.$ = new Node(",", k[b - 2], k[b]);
                        break;
                    case 212:
                        this.$ = new Node("linecomment", k[b].substring(2));
                        break;
                    case 213:
                        this.$ = new Node("Block");
                        break;
                    case 214:
                        this.$ = new Node("Block", k[b - 1]);
                        break;
                    case 215:
                        this.$ = new Node("Block");
                        this.$.children = k[b - 1];
                        break;
                    case 216:
                        console.log("error at var statement");
                        break;
                    case 217:
                        this.$ = [new Node("VarDeclaration", k[b])];
                        break;
                    case 218:
                        this.$ = [new Node("VarDeclarationAssignment", k[b - 1], k[b])];
                        break;
                    case 219:
                        j = new Node("VarDeclaration", k[b]);
                        if (k[b - 2] instanceof Array) {
                            k[b - 2].push(j);
                            this.$ = k[b - 2]
                        } else this.$ = [k[b - 2], j];
                        break;
                    case 220:
                        j = new Node("VarDeclarationAssignment", k[b - 1], k[b]);
                        if (k[b - 3] instanceof Array) {
                            k[b - 3].push(j);
                            this.$ = k[b - 3]
                        } else this.$ = [k[b - 3], j];
                        break;
                    case 221:
                        this.$ = [new Node("VarDeclaration", k[b])];
                        break;
                    case 222:
                        this.$ = [new Node("VarDeclarationAssignment",
                            k[b - 1], k[b])];
                        break;
                    case 223:
                        j = new Node("VarDeclaration", k[b]);
                        if (k[b - 2] instanceof Array) {
                            k[b - 2].push(j);
                            this.$ = k[b - 2]
                        } else this.$ = [k[b - 2], j];
                        break;
                    case 224:
                        j = new Node("VarDeclarationAssignment", k[b - 1], k[b]);
                        if (k[b - 3] instanceof Array) {
                            k[b - 3].push(j);
                            this.$ = k[b - 3]
                        } else this.$ = [k[b - 3], j];
                        break;
                    case 225:
                        this.$ = new Node("ConstList");
                        this.$.children = k[b - 1];
                        break;
                    case 226:
                        console.log("error at const statement");
                        break;
                    case 227:
                        this.$ = [k[b]];
                        break;
                    case 228:
                        if (k[b - 2] instanceof Array) {
                            k[b - 2].push(k[b]);
                            this.$ =
                                k[b - 2]
                        } else this.$ = [k[b - 2], k[b]];
                        break;
                    case 229:
                        this.$ = new Node("Const");
                        this.$.addChild(k[b]);
                        break;
                    case 230:
                        this.$ = new Node("ConstAssignment");
                        this.$.addChild(k[b - 1]);
                        this.$.addChild(k[b]);
                        break;
                    case 231:
                        this.$ = k[b];
                        break;
                    case 232:
                        this.$ = k[b];
                        break;
                    case 233:
                        this.$ = new Node("EmptyStatement");
                        break;
                    case 235:
                        console.log("error at ExprNoBF");
                        break;
                    case 236:
                        this.$ = new Node("If", k[b - 2], k[b]);
                        break;
                    case 237:
                        this.$ = new Node("IfElse", k[b - 4], k[b - 2], k[b]);
                        break;
                    case 238:
                        this.$ = new Node("DoWhile", k[b - 2], k[b -
                            5]);
                        break;
                    case 239:
                        console.log("error at do-while statement");
                        break;
                    case 240:
                        this.$ = new Node("While", k[b - 2], k[b]);
                        break;
                    case 241:
                        this.$ = new Node("For", k[b - 6], k[b - 4], k[b - 2], k[b]);
                        break;
                    case 242:
                        this.$ = new Node("ForScoped", k[b - 6], k[b - 4], k[b - 2], k[b]);
                        break;
                    case 243:
                        this.$ = new Node("ForIn", k[b - 4], k[b - 2], k[b]);
                        break;
                    case 244:
                        this.$ = new Node("ForInScoped", new Node("identifier", k[b - 4]), k[b - 2], k[b]);
                        break;
                    case 245:
                        this.$ = new Node("ForInScoped", new Node("identifier", k[b - 5]), k[b - 2], k[b]);
                        break;
                    case 250:
                        this.$ =
                            new Node("Continue");
                        break;
                    case 251:
                        console.log("error at continue statement");
                        break;
                    case 252:
                        this.$ = new Node("Continue", new Node("identifier", k[b - 1]));
                        break;
                    case 253:
                        console.log("error at continue with identifier statement");
                        break;
                    case 254:
                        this.$ = new Node("Break");
                        break;
                    case 255:
                        console.log("error at break statement");
                        break;
                    case 256:
                        this.$ = new Node("Break", new Node("identifier", k[b - 1]));
                        break;
                    case 257:
                        console.log("error at break with identifier statement");
                        break;
                    case 258:
                        this.$ = new Node("Return");
                        break;
                    case 259:
                        console.log("error at return statement");
                        break;
                    case 260:
                        this.$ = new Node("Return", k[b - 1]);
                        break;
                    case 261:
                        console.log("error at return with expr statement");
                        break;
                    case 262:
                        this.$ = new Node("With", k[b - 2], k[b]);
                        break;
                    case 263:
                        this.$ = new Node("Switch", k[b - 2], k[b]);
                        break;
                    case 264:
                        this.$ = new Node("CaseBlock");
                        this.$.children = k[b - 1];
                        break;
                    case 265:
                        j = [];
                        if (k[b - 3] instanceof Array) {
                            j = k[b - 3];
                            j.push(k[b - 2]);
                            j = j.concat(k[b - 1]);
                            this.$ = new Node("CaseBlock", j)
                        } else console.log("could not construct case list");
                        break;
                    case 268:
                        this.$ = [k[b]];
                        break;
                    case 269:
                        if (k[b - 1] instanceof Array) {
                            k[b - 1].push(k[b]);
                            this.$ = k[b - 1]
                        } else this.$ = [k[b - 1], k[b]];
                        break;
                    case 270:
                        this.$ = new Node("Case", k[b - 1]);
                        break;
                    case 271:
                        this.$ = new Node("Case", k[b - 2], k[b]);
                        break;
                    case 272:
                        this.$ = new Node("Default");
                        break;
                    case 273:
                        this.$ = new Node("Default", k[b]);
                        break;
                    case 274:
                        this.$ = new Node("Label", k[b - 2], k[b]);
                        break;
                    case 275:
                        this.$ = new Node("Throw", k[b - 1]);
                        break;
                    case 276:
                        console.log("error at throw");
                        break;
                    case 277:
                        this.$ = new Node("TryCatch",
                            k[b - 2], null, null, k[b]);
                        break;
                    case 278:
                        this.$ = new Node("TryCatch", k[b - 5], new Node("identifier", k[b - 2]), k[b], null);
                        break;
                    case 279:
                        this.$ = new Node("TryCatch", k[b - 7], new Node("identifier", k[b - 4]), k[b - 2], k[b]);
                        break;
                    case 282:
                        this.$ = new Node("Function", k[b - 5], null, k[b - 1]);
                        break;
                    case 283:
                        this.$ = new Node("Function", k[b - 6], k[b - 4], k[b - 1]);
                        break;
                    case 284:
                        this.$ = new Node("FunctionExpr", null, null, k[b - 1]);
                        break;
                    case 285:
                        this.$ = new Node("FunctionExpr", null, k[b - 4], k[b - 1]);
                        break;
                    case 286:
                        this.$ = new Node("FunctionExpr",
                            k[b - 5], null, k[b - 1]);
                        break;
                    case 287:
                        this.$ = new Node("FunctionExpr", k[b - 6], k[b - 4], k[b - 1]);
                        break;
                    case 288:
                        this.$ = new Node("FunctionArguments", k[b]);
                        break;
                    case 289:
                        if (k[b - 2].name == "FunctionArguments") {
                            k[b - 2].addChild(k[b]);
                            this.$ = k[b - 2]
                        } else this.$ = new Node("FunctionArguments", k[b - 2], k[b]);
                        break;
                    case 291:
                        this.$ = k[b];
                        break;
                    case 293:
                        this.$ = k[b];
                        return k[b];
                    case 294:
                        this.$ = new Node("Block", k[b]);
                        break;
                    case 295:
                        if (k[b - 1].name == "Block") {
                            k[b - 1].addChild(k[b]);
                            this.$ = k[b - 1]
                        } else this.$ = new Node("Block", k[b -
                            1], k[b])
                }
            },
            table: [{
                1: [2, 292],
                3: 55,
                4: [1, 59],
                5: [1, 60],
                6: [1, 61],
                7: [1, 62],
                8: [1, 63],
                10: [1, 38],
                16: 52,
                17: [1, 22],
                19: [1, 54],
                20: 56,
                21: [1, 57],
                24: [1, 64],
                32: [1, 50],
                34: 49,
                36: 46,
                38: 47,
                41: 44,
                43: [1, 76],
                44: [1, 77],
                45: 71,
                46: 72,
                47: [1, 73],
                49: [1, 74],
                50: [1, 75],
                51: [1, 78],
                52: [1, 79],
                53: [1, 80],
                54: [1, 81],
                55: 70,
                60: 69,
                62: 68,
                67: 67,
                76: 66,
                83: 65,
                87: 58,
                91: 53,
                95: 51,
                99: 48,
                103: 45,
                108: 43,
                110: 42,
                124: 28,
                125: 3,
                126: 4,
                127: 5,
                128: 6,
                129: 7,
                130: 8,
                131: 9,
                132: 10,
                133: 11,
                134: 12,
                135: 13,
                136: 14,
                137: 15,
                138: 16,
                139: 17,
                140: 18,
                141: 19,
                142: 20,
                143: 21,
                144: [1, 23],
                145: 2,
                146: [1, 24],
                148: [1, 27],
                152: [1, 25],
                155: [1, 29],
                157: [1, 30],
                158: [1, 31],
                159: [1, 32],
                162: [1, 33],
                163: [1, 34],
                164: [1, 35],
                165: [1, 36],
                166: [1, 37],
                174: [1, 39],
                175: [1, 40],
                178: [1, 41],
                179: [1, 26],
                182: 1
            }, {
                1: [3]
            }, {
                1: [2, 293],
                3: 55,
                4: [1, 59],
                5: [1, 60],
                6: [1, 61],
                7: [1, 62],
                8: [1, 63],
                10: [1, 38],
                16: 52,
                17: [1, 22],
                19: [1, 54],
                20: 56,
                21: [1, 57],
                24: [1, 64],
                32: [1, 50],
                34: 49,
                36: 46,
                38: 47,
                41: 44,
                43: [1, 76],
                44: [1, 77],
                45: 71,
                46: 72,
                47: [1, 73],
                49: [1, 74],
                50: [1, 75],
                51: [1, 78],
                52: [1, 79],
                53: [1, 80],
                54: [1, 81],
                55: 70,
                60: 69,
                62: 68,
                67: 67,
                76: 66,
                83: 65,
                87: 58,
                91: 53,
                95: 51,
                99: 48,
                103: 45,
                108: 43,
                110: 42,
                124: 28,
                125: 82,
                126: 4,
                127: 5,
                128: 6,
                129: 7,
                130: 8,
                131: 9,
                132: 10,
                133: 11,
                134: 12,
                135: 13,
                136: 14,
                137: 15,
                138: 16,
                139: 17,
                140: 18,
                141: 19,
                142: 20,
                143: 21,
                144: [1, 23],
                146: [1, 24],
                148: [1, 27],
                152: [1, 25],
                155: [1, 29],
                157: [1, 30],
                158: [1, 31],
                159: [1, 32],
                162: [1, 33],
                163: [1, 34],
                164: [1, 35],
                165: [1, 36],
                166: [1, 37],
                174: [1, 39],
                175: [1, 40],
                178: [1, 41],
                179: [1, 26]
            }, {
                1: [2, 294],
                4: [2, 294],
                5: [2, 294],
                6: [2, 294],
                7: [2, 294],
                8: [2, 294],
                10: [2, 294],
                17: [2, 294],
                18: [2, 294],
                19: [2, 294],
                21: [2, 294],
                24: [2, 294],
                32: [2, 294],
                43: [2, 294],
                44: [2, 294],
                47: [2, 294],
                49: [2, 294],
                50: [2, 294],
                51: [2, 294],
                52: [2, 294],
                53: [2, 294],
                54: [2, 294],
                144: [2, 294],
                146: [2, 294],
                148: [2, 294],
                152: [2, 294],
                155: [2, 294],
                157: [2, 294],
                158: [2, 294],
                159: [2, 294],
                162: [2, 294],
                163: [2, 294],
                164: [2, 294],
                165: [2, 294],
                166: [2, 294],
                172: [2, 294],
                173: [2, 294],
                174: [2, 294],
                175: [2, 294],
                178: [2, 294],
                179: [2, 294]
            }, {
                1: [2, 194],
                4: [2, 194],
                5: [2, 194],
                6: [2, 194],
                7: [2, 194],
                8: [2, 194],
                10: [2, 194],
                17: [2, 194],
                18: [2, 194],
                19: [2, 194],
                21: [2, 194],
                24: [2, 194],
                32: [2, 194],
                43: [2, 194],
                44: [2, 194],
                47: [2, 194],
                49: [2, 194],
                50: [2,
                    194
                ],
                51: [2, 194],
                52: [2, 194],
                53: [2, 194],
                54: [2, 194],
                144: [2, 194],
                146: [2, 194],
                148: [2, 194],
                152: [2, 194],
                155: [2, 194],
                156: [2, 194],
                157: [2, 194],
                158: [2, 194],
                159: [2, 194],
                162: [2, 194],
                163: [2, 194],
                164: [2, 194],
                165: [2, 194],
                166: [2, 194],
                172: [2, 194],
                173: [2, 194],
                174: [2, 194],
                175: [2, 194],
                178: [2, 194],
                179: [2, 194]
            }, {
                1: [2, 195],
                4: [2, 195],
                5: [2, 195],
                6: [2, 195],
                7: [2, 195],
                8: [2, 195],
                10: [2, 195],
                17: [2, 195],
                18: [2, 195],
                19: [2, 195],
                21: [2, 195],
                24: [2, 195],
                32: [2, 195],
                43: [2, 195],
                44: [2, 195],
                47: [2, 195],
                49: [2, 195],
                50: [2, 195],
                51: [2, 195],
                52: [2, 195],
                53: [2, 195],
                54: [2, 195],
                144: [2, 195],
                146: [2, 195],
                148: [2, 195],
                152: [2, 195],
                155: [2, 195],
                156: [2, 195],
                157: [2, 195],
                158: [2, 195],
                159: [2, 195],
                162: [2, 195],
                163: [2, 195],
                164: [2, 195],
                165: [2, 195],
                166: [2, 195],
                172: [2, 195],
                173: [2, 195],
                174: [2, 195],
                175: [2, 195],
                178: [2, 195],
                179: [2, 195]
            }, {
                1: [2, 196],
                4: [2, 196],
                5: [2, 196],
                6: [2, 196],
                7: [2, 196],
                8: [2, 196],
                10: [2, 196],
                17: [2, 196],
                18: [2, 196],
                19: [2, 196],
                21: [2, 196],
                24: [2, 196],
                32: [2, 196],
                43: [2, 196],
                44: [2, 196],
                47: [2, 196],
                49: [2, 196],
                50: [2, 196],
                51: [2, 196],
                52: [2, 196],
                53: [2, 196],
                54: [2, 196],
                144: [2,
                    196
                ],
                146: [2, 196],
                148: [2, 196],
                152: [2, 196],
                155: [2, 196],
                156: [2, 196],
                157: [2, 196],
                158: [2, 196],
                159: [2, 196],
                162: [2, 196],
                163: [2, 196],
                164: [2, 196],
                165: [2, 196],
                166: [2, 196],
                172: [2, 196],
                173: [2, 196],
                174: [2, 196],
                175: [2, 196],
                178: [2, 196],
                179: [2, 196]
            }, {
                1: [2, 197],
                4: [2, 197],
                5: [2, 197],
                6: [2, 197],
                7: [2, 197],
                8: [2, 197],
                10: [2, 197],
                17: [2, 197],
                18: [2, 197],
                19: [2, 197],
                21: [2, 197],
                24: [2, 197],
                32: [2, 197],
                43: [2, 197],
                44: [2, 197],
                47: [2, 197],
                49: [2, 197],
                50: [2, 197],
                51: [2, 197],
                52: [2, 197],
                53: [2, 197],
                54: [2, 197],
                144: [2, 197],
                146: [2, 197],
                148: [2,
                    197
                ],
                152: [2, 197],
                155: [2, 197],
                156: [2, 197],
                157: [2, 197],
                158: [2, 197],
                159: [2, 197],
                162: [2, 197],
                163: [2, 197],
                164: [2, 197],
                165: [2, 197],
                166: [2, 197],
                172: [2, 197],
                173: [2, 197],
                174: [2, 197],
                175: [2, 197],
                178: [2, 197],
                179: [2, 197]
            }, {
                1: [2, 198],
                4: [2, 198],
                5: [2, 198],
                6: [2, 198],
                7: [2, 198],
                8: [2, 198],
                10: [2, 198],
                17: [2, 198],
                18: [2, 198],
                19: [2, 198],
                21: [2, 198],
                24: [2, 198],
                32: [2, 198],
                43: [2, 198],
                44: [2, 198],
                47: [2, 198],
                49: [2, 198],
                50: [2, 198],
                51: [2, 198],
                52: [2, 198],
                53: [2, 198],
                54: [2, 198],
                144: [2, 198],
                146: [2, 198],
                148: [2, 198],
                152: [2, 198],
                155: [2,
                    198
                ],
                156: [2, 198],
                157: [2, 198],
                158: [2, 198],
                159: [2, 198],
                162: [2, 198],
                163: [2, 198],
                164: [2, 198],
                165: [2, 198],
                166: [2, 198],
                172: [2, 198],
                173: [2, 198],
                174: [2, 198],
                175: [2, 198],
                178: [2, 198],
                179: [2, 198]
            }, {
                1: [2, 199],
                4: [2, 199],
                5: [2, 199],
                6: [2, 199],
                7: [2, 199],
                8: [2, 199],
                10: [2, 199],
                17: [2, 199],
                18: [2, 199],
                19: [2, 199],
                21: [2, 199],
                24: [2, 199],
                32: [2, 199],
                43: [2, 199],
                44: [2, 199],
                47: [2, 199],
                49: [2, 199],
                50: [2, 199],
                51: [2, 199],
                52: [2, 199],
                53: [2, 199],
                54: [2, 199],
                144: [2, 199],
                146: [2, 199],
                148: [2, 199],
                152: [2, 199],
                155: [2, 199],
                156: [2, 199],
                157: [2,
                    199
                ],
                158: [2, 199],
                159: [2, 199],
                162: [2, 199],
                163: [2, 199],
                164: [2, 199],
                165: [2, 199],
                166: [2, 199],
                172: [2, 199],
                173: [2, 199],
                174: [2, 199],
                175: [2, 199],
                178: [2, 199],
                179: [2, 199]
            }, {
                1: [2, 200],
                4: [2, 200],
                5: [2, 200],
                6: [2, 200],
                7: [2, 200],
                8: [2, 200],
                10: [2, 200],
                17: [2, 200],
                18: [2, 200],
                19: [2, 200],
                21: [2, 200],
                24: [2, 200],
                32: [2, 200],
                43: [2, 200],
                44: [2, 200],
                47: [2, 200],
                49: [2, 200],
                50: [2, 200],
                51: [2, 200],
                52: [2, 200],
                53: [2, 200],
                54: [2, 200],
                144: [2, 200],
                146: [2, 200],
                148: [2, 200],
                152: [2, 200],
                155: [2, 200],
                156: [2, 200],
                157: [2, 200],
                158: [2, 200],
                159: [2,
                    200
                ],
                162: [2, 200],
                163: [2, 200],
                164: [2, 200],
                165: [2, 200],
                166: [2, 200],
                172: [2, 200],
                173: [2, 200],
                174: [2, 200],
                175: [2, 200],
                178: [2, 200],
                179: [2, 200]
            }, {
                1: [2, 201],
                4: [2, 201],
                5: [2, 201],
                6: [2, 201],
                7: [2, 201],
                8: [2, 201],
                10: [2, 201],
                17: [2, 201],
                18: [2, 201],
                19: [2, 201],
                21: [2, 201],
                24: [2, 201],
                32: [2, 201],
                43: [2, 201],
                44: [2, 201],
                47: [2, 201],
                49: [2, 201],
                50: [2, 201],
                51: [2, 201],
                52: [2, 201],
                53: [2, 201],
                54: [2, 201],
                144: [2, 201],
                146: [2, 201],
                148: [2, 201],
                152: [2, 201],
                155: [2, 201],
                156: [2, 201],
                157: [2, 201],
                158: [2, 201],
                159: [2, 201],
                162: [2, 201],
                163: [2,
                    201
                ],
                164: [2, 201],
                165: [2, 201],
                166: [2, 201],
                172: [2, 201],
                173: [2, 201],
                174: [2, 201],
                175: [2, 201],
                178: [2, 201],
                179: [2, 201]
            }, {
                1: [2, 202],
                4: [2, 202],
                5: [2, 202],
                6: [2, 202],
                7: [2, 202],
                8: [2, 202],
                10: [2, 202],
                17: [2, 202],
                18: [2, 202],
                19: [2, 202],
                21: [2, 202],
                24: [2, 202],
                32: [2, 202],
                43: [2, 202],
                44: [2, 202],
                47: [2, 202],
                49: [2, 202],
                50: [2, 202],
                51: [2, 202],
                52: [2, 202],
                53: [2, 202],
                54: [2, 202],
                144: [2, 202],
                146: [2, 202],
                148: [2, 202],
                152: [2, 202],
                155: [2, 202],
                156: [2, 202],
                157: [2, 202],
                158: [2, 202],
                159: [2, 202],
                162: [2, 202],
                163: [2, 202],
                164: [2, 202],
                165: [2,
                    202
                ],
                166: [2, 202],
                172: [2, 202],
                173: [2, 202],
                174: [2, 202],
                175: [2, 202],
                178: [2, 202],
                179: [2, 202]
            }, {
                1: [2, 203],
                4: [2, 203],
                5: [2, 203],
                6: [2, 203],
                7: [2, 203],
                8: [2, 203],
                10: [2, 203],
                17: [2, 203],
                18: [2, 203],
                19: [2, 203],
                21: [2, 203],
                24: [2, 203],
                32: [2, 203],
                43: [2, 203],
                44: [2, 203],
                47: [2, 203],
                49: [2, 203],
                50: [2, 203],
                51: [2, 203],
                52: [2, 203],
                53: [2, 203],
                54: [2, 203],
                144: [2, 203],
                146: [2, 203],
                148: [2, 203],
                152: [2, 203],
                155: [2, 203],
                156: [2, 203],
                157: [2, 203],
                158: [2, 203],
                159: [2, 203],
                162: [2, 203],
                163: [2, 203],
                164: [2, 203],
                165: [2, 203],
                166: [2, 203],
                172: [2,
                    203
                ],
                173: [2, 203],
                174: [2, 203],
                175: [2, 203],
                178: [2, 203],
                179: [2, 203]
            }, {
                1: [2, 204],
                4: [2, 204],
                5: [2, 204],
                6: [2, 204],
                7: [2, 204],
                8: [2, 204],
                10: [2, 204],
                17: [2, 204],
                18: [2, 204],
                19: [2, 204],
                21: [2, 204],
                24: [2, 204],
                32: [2, 204],
                43: [2, 204],
                44: [2, 204],
                47: [2, 204],
                49: [2, 204],
                50: [2, 204],
                51: [2, 204],
                52: [2, 204],
                53: [2, 204],
                54: [2, 204],
                144: [2, 204],
                146: [2, 204],
                148: [2, 204],
                152: [2, 204],
                155: [2, 204],
                156: [2, 204],
                157: [2, 204],
                158: [2, 204],
                159: [2, 204],
                162: [2, 204],
                163: [2, 204],
                164: [2, 204],
                165: [2, 204],
                166: [2, 204],
                172: [2, 204],
                173: [2, 204],
                174: [2,
                    204
                ],
                175: [2, 204],
                178: [2, 204],
                179: [2, 204]
            }, {
                1: [2, 205],
                4: [2, 205],
                5: [2, 205],
                6: [2, 205],
                7: [2, 205],
                8: [2, 205],
                10: [2, 205],
                17: [2, 205],
                18: [2, 205],
                19: [2, 205],
                21: [2, 205],
                24: [2, 205],
                32: [2, 205],
                43: [2, 205],
                44: [2, 205],
                47: [2, 205],
                49: [2, 205],
                50: [2, 205],
                51: [2, 205],
                52: [2, 205],
                53: [2, 205],
                54: [2, 205],
                144: [2, 205],
                146: [2, 205],
                148: [2, 205],
                152: [2, 205],
                155: [2, 205],
                156: [2, 205],
                157: [2, 205],
                158: [2, 205],
                159: [2, 205],
                162: [2, 205],
                163: [2, 205],
                164: [2, 205],
                165: [2, 205],
                166: [2, 205],
                172: [2, 205],
                173: [2, 205],
                174: [2, 205],
                175: [2, 205],
                178: [2,
                    205
                ],
                179: [2, 205]
            }, {
                1: [2, 206],
                4: [2, 206],
                5: [2, 206],
                6: [2, 206],
                7: [2, 206],
                8: [2, 206],
                10: [2, 206],
                17: [2, 206],
                18: [2, 206],
                19: [2, 206],
                21: [2, 206],
                24: [2, 206],
                32: [2, 206],
                43: [2, 206],
                44: [2, 206],
                47: [2, 206],
                49: [2, 206],
                50: [2, 206],
                51: [2, 206],
                52: [2, 206],
                53: [2, 206],
                54: [2, 206],
                144: [2, 206],
                146: [2, 206],
                148: [2, 206],
                152: [2, 206],
                155: [2, 206],
                156: [2, 206],
                157: [2, 206],
                158: [2, 206],
                159: [2, 206],
                162: [2, 206],
                163: [2, 206],
                164: [2, 206],
                165: [2, 206],
                166: [2, 206],
                172: [2, 206],
                173: [2, 206],
                174: [2, 206],
                175: [2, 206],
                178: [2, 206],
                179: [2, 206]
            }, {
                1: [2,
                    207
                ],
                4: [2, 207],
                5: [2, 207],
                6: [2, 207],
                7: [2, 207],
                8: [2, 207],
                10: [2, 207],
                17: [2, 207],
                18: [2, 207],
                19: [2, 207],
                21: [2, 207],
                24: [2, 207],
                32: [2, 207],
                43: [2, 207],
                44: [2, 207],
                47: [2, 207],
                49: [2, 207],
                50: [2, 207],
                51: [2, 207],
                52: [2, 207],
                53: [2, 207],
                54: [2, 207],
                144: [2, 207],
                146: [2, 207],
                148: [2, 207],
                152: [2, 207],
                155: [2, 207],
                156: [2, 207],
                157: [2, 207],
                158: [2, 207],
                159: [2, 207],
                162: [2, 207],
                163: [2, 207],
                164: [2, 207],
                165: [2, 207],
                166: [2, 207],
                172: [2, 207],
                173: [2, 207],
                174: [2, 207],
                175: [2, 207],
                178: [2, 207],
                179: [2, 207]
            }, {
                1: [2, 208],
                4: [2, 208],
                5: [2, 208],
                6: [2, 208],
                7: [2, 208],
                8: [2, 208],
                10: [2, 208],
                17: [2, 208],
                18: [2, 208],
                19: [2, 208],
                21: [2, 208],
                24: [2, 208],
                32: [2, 208],
                43: [2, 208],
                44: [2, 208],
                47: [2, 208],
                49: [2, 208],
                50: [2, 208],
                51: [2, 208],
                52: [2, 208],
                53: [2, 208],
                54: [2, 208],
                144: [2, 208],
                146: [2, 208],
                148: [2, 208],
                152: [2, 208],
                155: [2, 208],
                156: [2, 208],
                157: [2, 208],
                158: [2, 208],
                159: [2, 208],
                162: [2, 208],
                163: [2, 208],
                164: [2, 208],
                165: [2, 208],
                166: [2, 208],
                172: [2, 208],
                173: [2, 208],
                174: [2, 208],
                175: [2, 208],
                178: [2, 208],
                179: [2, 208]
            }, {
                1: [2, 209],
                4: [2, 209],
                5: [2, 209],
                6: [2, 209],
                7: [2, 209],
                8: [2,
                    209
                ],
                10: [2, 209],
                17: [2, 209],
                18: [2, 209],
                19: [2, 209],
                21: [2, 209],
                24: [2, 209],
                32: [2, 209],
                43: [2, 209],
                44: [2, 209],
                47: [2, 209],
                49: [2, 209],
                50: [2, 209],
                51: [2, 209],
                52: [2, 209],
                53: [2, 209],
                54: [2, 209],
                144: [2, 209],
                146: [2, 209],
                148: [2, 209],
                152: [2, 209],
                155: [2, 209],
                156: [2, 209],
                157: [2, 209],
                158: [2, 209],
                159: [2, 209],
                162: [2, 209],
                163: [2, 209],
                164: [2, 209],
                165: [2, 209],
                166: [2, 209],
                172: [2, 209],
                173: [2, 209],
                174: [2, 209],
                175: [2, 209],
                178: [2, 209],
                179: [2, 209]
            }, {
                1: [2, 210],
                4: [2, 210],
                5: [2, 210],
                6: [2, 210],
                7: [2, 210],
                8: [2, 210],
                10: [2, 210],
                17: [2, 210],
                18: [2, 210],
                19: [2, 210],
                21: [2, 210],
                24: [2, 210],
                32: [2, 210],
                43: [2, 210],
                44: [2, 210],
                47: [2, 210],
                49: [2, 210],
                50: [2, 210],
                51: [2, 210],
                52: [2, 210],
                53: [2, 210],
                54: [2, 210],
                144: [2, 210],
                146: [2, 210],
                148: [2, 210],
                152: [2, 210],
                155: [2, 210],
                156: [2, 210],
                157: [2, 210],
                158: [2, 210],
                159: [2, 210],
                162: [2, 210],
                163: [2, 210],
                164: [2, 210],
                165: [2, 210],
                166: [2, 210],
                172: [2, 210],
                173: [2, 210],
                174: [2, 210],
                175: [2, 210],
                178: [2, 210],
                179: [2, 210]
            }, {
                1: [2, 211],
                4: [2, 211],
                5: [2, 211],
                6: [2, 211],
                7: [2, 211],
                8: [2, 211],
                10: [2, 211],
                17: [2, 211],
                18: [2, 211],
                19: [2, 211],
                21: [2,
                    211
                ],
                24: [2, 211],
                32: [2, 211],
                43: [2, 211],
                44: [2, 211],
                47: [2, 211],
                49: [2, 211],
                50: [2, 211],
                51: [2, 211],
                52: [2, 211],
                53: [2, 211],
                54: [2, 211],
                144: [2, 211],
                146: [2, 211],
                148: [2, 211],
                152: [2, 211],
                155: [2, 211],
                156: [2, 211],
                157: [2, 211],
                158: [2, 211],
                159: [2, 211],
                162: [2, 211],
                163: [2, 211],
                164: [2, 211],
                165: [2, 211],
                166: [2, 211],
                172: [2, 211],
                173: [2, 211],
                174: [2, 211],
                175: [2, 211],
                178: [2, 211],
                179: [2, 211]
            }, {
                3: 55,
                4: [1, 59],
                5: [1, 60],
                6: [1, 61],
                7: [1, 62],
                8: [1, 63],
                10: [1, 38],
                16: 52,
                17: [1, 22],
                18: [1, 83],
                19: [1, 54],
                20: 56,
                21: [1, 57],
                24: [1, 64],
                32: [1, 50],
                34: 49,
                36: 46,
                38: 47,
                41: 44,
                43: [1, 76],
                44: [1, 77],
                45: 71,
                46: 72,
                47: [1, 73],
                49: [1, 74],
                50: [1, 75],
                51: [1, 78],
                52: [1, 79],
                53: [1, 80],
                54: [1, 81],
                55: 70,
                60: 69,
                62: 68,
                67: 67,
                76: 66,
                83: 65,
                87: 58,
                91: 53,
                95: 51,
                99: 48,
                103: 45,
                108: 43,
                110: 42,
                124: 28,
                125: 3,
                126: 4,
                127: 5,
                128: 6,
                129: 7,
                130: 8,
                131: 9,
                132: 10,
                133: 11,
                134: 12,
                135: 13,
                136: 14,
                137: 15,
                138: 16,
                139: 17,
                140: 18,
                141: 19,
                142: 20,
                143: 21,
                144: [1, 23],
                145: 84,
                146: [1, 24],
                148: [1, 27],
                152: [1, 25],
                155: [1, 29],
                157: [1, 30],
                158: [1, 31],
                159: [1, 32],
                162: [1, 33],
                163: [1, 34],
                164: [1, 35],
                165: [1, 36],
                166: [1, 37],
                174: [1, 39],
                175: [1,
                    40
                ],
                178: [1, 41],
                179: [1, 26]
            }, {
                1: [2, 212],
                4: [2, 212],
                5: [2, 212],
                6: [2, 212],
                7: [2, 212],
                8: [2, 212],
                10: [2, 212],
                17: [2, 212],
                18: [2, 212],
                19: [2, 212],
                21: [2, 212],
                24: [2, 212],
                32: [2, 212],
                43: [2, 212],
                44: [2, 212],
                47: [2, 212],
                49: [2, 212],
                50: [2, 212],
                51: [2, 212],
                52: [2, 212],
                53: [2, 212],
                54: [2, 212],
                144: [2, 212],
                146: [2, 212],
                148: [2, 212],
                152: [2, 212],
                155: [2, 212],
                156: [2, 212],
                157: [2, 212],
                158: [2, 212],
                159: [2, 212],
                162: [2, 212],
                163: [2, 212],
                164: [2, 212],
                165: [2, 212],
                166: [2, 212],
                172: [2, 212],
                173: [2, 212],
                174: [2, 212],
                175: [2, 212],
                178: [2, 212],
                179: [2, 212]
            },
                {
                    10: [1, 86],
                    147: 85
                }, {
                    10: [1, 89],
                    153: 87,
                    154: 88
                }, {
                    10: [1, 90]
                }, {
                    1: [2, 233],
                    4: [2, 233],
                    5: [2, 233],
                    6: [2, 233],
                    7: [2, 233],
                    8: [2, 233],
                    10: [2, 233],
                    17: [2, 233],
                    18: [2, 233],
                    19: [2, 233],
                    21: [2, 233],
                    24: [2, 233],
                    32: [2, 233],
                    43: [2, 233],
                    44: [2, 233],
                    47: [2, 233],
                    49: [2, 233],
                    50: [2, 233],
                    51: [2, 233],
                    52: [2, 233],
                    53: [2, 233],
                    54: [2, 233],
                    144: [2, 233],
                    146: [2, 233],
                    148: [2, 233],
                    152: [2, 233],
                    155: [2, 233],
                    156: [2, 233],
                    157: [2, 233],
                    158: [2, 233],
                    159: [2, 233],
                    162: [2, 233],
                    163: [2, 233],
                    164: [2, 233],
                    165: [2, 233],
                    166: [2, 233],
                    172: [2, 233],
                    173: [2, 233],
                    174: [2, 233],
                    175: [2,
                        233
                    ],
                    178: [2, 233],
                    179: [2, 233]
                }, {
                    2: [1, 92],
                    14: [1, 93],
                    148: [1, 91]
                }, {
                    21: [1, 94]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 95,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    21: [1, 96]
                }, {
                    21: [1, 97]
                }, {
                    2: [1, 99],
                    10: [1, 100],
                    148: [1, 98]
                }, {
                    2: [1, 102],
                    10: [1, 103],
                    148: [1, 101]
                }, {
                    2: [1, 105],
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 106,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    148: [1, 104],
                    179: [1, 122]
                }, {
                    21: [1, 133]
                }, {
                    21: [1, 134]
                }, {
                    2: [2, 18],
                    11: [1, 135],
                    14: [2, 18],
                    21: [2, 18],
                    24: [2, 18],
                    31: [2, 18],
                    43: [2, 18],
                    44: [2, 18],
                    51: [2, 18],
                    52: [2, 18],
                    57: [2, 18],
                    58: [2, 18],
                    59: [2, 18],
                    64: [2, 18],
                    65: [2, 18],
                    66: [2, 18],
                    69: [2, 18],
                    70: [2, 18],
                    71: [2, 18],
                    72: [2, 18],
                    73: [2, 18],
                    74: [2, 18],
                    78: [2, 18],
                    79: [2, 18],
                    80: [2, 18],
                    81: [2,
                        18
                    ],
                    85: [2, 18],
                    89: [2, 18],
                    93: [2, 18],
                    97: [2, 18],
                    101: [2, 18],
                    105: [2, 18],
                    111: [2, 18],
                    112: [2, 18],
                    113: [2, 18],
                    114: [2, 18],
                    115: [2, 18],
                    116: [2, 18],
                    117: [2, 18],
                    118: [2, 18],
                    119: [2, 18],
                    120: [2, 18],
                    121: [2, 18],
                    122: [2, 18],
                    148: [2, 18]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 136,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    17: [1, 22],
                    126: 137
                }, {
                    2: [1, 139],
                    148: [1, 138]
                }, {
                    2: [2, 192],
                    14: [2, 192],
                    148: [2, 192]
                }, {
                    2: [2, 174],
                    14: [2, 174],
                    148: [2, 174]
                }, {
                    2: [2, 61],
                    14: [2, 61],
                    43: [1, 141],
                    44: [1, 142],
                    51: [2, 61],
                    52: [2, 61],
                    57: [2, 61],
                    58: [2, 61],
                    59: [2, 61],
                    64: [2, 61],
                    65: [2, 61],
                    66: [2, 61],
                    69: [2, 61],
                    70: [2, 61],
                    71: [2, 61],
                    72: [2, 61],
                    73: [2, 61],
                    74: [2, 61],
                    78: [2, 61],
                    79: [2, 61],
                    80: [2, 61],
                    81: [2, 61],
                    85: [2, 61],
                    89: [2, 61],
                    93: [2, 61],
                    97: [2, 61],
                    101: [2, 61],
                    105: [2, 61],
                    109: 140,
                    111: [1,
                        143
                    ],
                    112: [1, 144],
                    113: [1, 145],
                    114: [1, 146],
                    115: [1, 147],
                    116: [1, 148],
                    117: [1, 149],
                    118: [1, 150],
                    119: [1, 151],
                    120: [1, 152],
                    121: [1, 153],
                    122: [1, 154],
                    148: [2, 61]
                }, {
                    2: [2, 168],
                    14: [2, 168],
                    101: [1, 156],
                    105: [1, 155],
                    148: [2, 168]
                }, {
                    2: [2, 56],
                    14: [2, 56],
                    43: [2, 56],
                    44: [2, 56],
                    51: [2, 56],
                    52: [2, 56],
                    57: [2, 56],
                    58: [2, 56],
                    59: [2, 56],
                    64: [2, 56],
                    65: [2, 56],
                    66: [2, 56],
                    69: [2, 56],
                    70: [2, 56],
                    71: [2, 56],
                    72: [2, 56],
                    73: [2, 56],
                    74: [2, 56],
                    78: [2, 56],
                    79: [2, 56],
                    80: [2, 56],
                    81: [2, 56],
                    85: [2, 56],
                    89: [2, 56],
                    93: [2, 56],
                    97: [2, 56],
                    101: [2, 56],
                    105: [2, 56],
                    111: [2, 56],
                    112: [2, 56],
                    113: [2, 56],
                    114: [2, 56],
                    115: [2, 56],
                    116: [2, 56],
                    117: [2, 56],
                    118: [2, 56],
                    119: [2, 56],
                    120: [2, 56],
                    121: [2, 56],
                    122: [2, 56],
                    148: [2, 56]
                }, {
                    2: [2, 57],
                    14: [2, 57],
                    21: [1, 160],
                    24: [1, 158],
                    31: [1, 159],
                    33: 157,
                    43: [2, 57],
                    44: [2, 57],
                    51: [2, 57],
                    52: [2, 57],
                    57: [2, 57],
                    58: [2, 57],
                    59: [2, 57],
                    64: [2, 57],
                    65: [2, 57],
                    66: [2, 57],
                    69: [2, 57],
                    70: [2, 57],
                    71: [2, 57],
                    72: [2, 57],
                    73: [2, 57],
                    74: [2, 57],
                    78: [2, 57],
                    79: [2, 57],
                    80: [2, 57],
                    81: [2, 57],
                    85: [2, 57],
                    89: [2, 57],
                    93: [2, 57],
                    97: [2, 57],
                    101: [2, 57],
                    105: [2, 57],
                    111: [2, 57],
                    112: [2, 57],
                    113: [2, 57],
                    114: [2, 57],
                    115: [2,
                        57
                    ],
                    116: [2, 57],
                    117: [2, 57],
                    118: [2, 57],
                    119: [2, 57],
                    120: [2, 57],
                    121: [2, 57],
                    122: [2, 57],
                    148: [2, 57]
                }, {
                    2: [2, 162],
                    14: [2, 162],
                    97: [1, 161],
                    101: [2, 162],
                    105: [2, 162],
                    148: [2, 162]
                }, {
                    2: [2, 40],
                    14: [2, 40],
                    21: [1, 160],
                    24: [1, 163],
                    31: [1, 164],
                    33: 162,
                    43: [2, 40],
                    44: [2, 40],
                    51: [2, 40],
                    52: [2, 40],
                    57: [2, 40],
                    58: [2, 40],
                    59: [2, 40],
                    64: [2, 40],
                    65: [2, 40],
                    66: [2, 40],
                    69: [2, 40],
                    70: [2, 40],
                    71: [2, 40],
                    72: [2, 40],
                    73: [2, 40],
                    74: [2, 40],
                    78: [2, 40],
                    79: [2, 40],
                    80: [2, 40],
                    81: [2, 40],
                    85: [2, 40],
                    89: [2, 40],
                    93: [2, 40],
                    97: [2, 40],
                    101: [2, 40],
                    105: [2, 40],
                    111: [2, 40],
                    112: [2,
                        40
                    ],
                    113: [2, 40],
                    114: [2, 40],
                    115: [2, 40],
                    116: [2, 40],
                    117: [2, 40],
                    118: [2, 40],
                    119: [2, 40],
                    120: [2, 40],
                    121: [2, 40],
                    122: [2, 40],
                    148: [2, 40]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 166,
                    30: 118,
                    32: [1, 115],
                    35: 165,
                    179: [1, 122]
                }, {
                    2: [2, 156],
                    14: [2, 156],
                    93: [1, 167],
                    97: [2, 156],
                    101: [2, 156],
                    105: [2, 156],
                    148: [2, 156]
                }, {
                    2: [2, 34],
                    14: [2, 34],
                    21: [2, 34],
                    24: [2, 34],
                    31: [2, 34],
                    43: [2, 34],
                    44: [2, 34],
                    51: [2, 34],
                    52: [2, 34],
                    57: [2, 34],
                    58: [2, 34],
                    59: [2, 34],
                    64: [2,
                        34
                    ],
                    65: [2, 34],
                    66: [2, 34],
                    69: [2, 34],
                    70: [2, 34],
                    71: [2, 34],
                    72: [2, 34],
                    73: [2, 34],
                    74: [2, 34],
                    78: [2, 34],
                    79: [2, 34],
                    80: [2, 34],
                    81: [2, 34],
                    85: [2, 34],
                    89: [2, 34],
                    93: [2, 34],
                    97: [2, 34],
                    101: [2, 34],
                    105: [2, 34],
                    111: [2, 34],
                    112: [2, 34],
                    113: [2, 34],
                    114: [2, 34],
                    115: [2, 34],
                    116: [2, 34],
                    117: [2, 34],
                    118: [2, 34],
                    119: [2, 34],
                    120: [2, 34],
                    121: [2, 34],
                    122: [2, 34],
                    148: [2, 34]
                }, {
                    2: [2, 150],
                    14: [2, 150],
                    89: [1, 168],
                    93: [2, 150],
                    97: [2, 150],
                    101: [2, 150],
                    105: [2, 150],
                    148: [2, 150]
                }, {
                    2: [2, 15],
                    11: [2, 15],
                    14: [2, 15],
                    18: [2, 15],
                    21: [2, 15],
                    23: [2, 15],
                    24: [2, 15],
                    26: [2, 15],
                    31: [2, 15],
                    43: [2, 15],
                    44: [2, 15],
                    51: [2, 15],
                    52: [2, 15],
                    57: [2, 15],
                    58: [2, 15],
                    59: [2, 15],
                    64: [2, 15],
                    65: [2, 15],
                    66: [2, 15],
                    69: [2, 15],
                    70: [2, 15],
                    71: [2, 15],
                    72: [2, 15],
                    73: [2, 15],
                    74: [2, 15],
                    78: [2, 15],
                    79: [2, 15],
                    80: [2, 15],
                    81: [2, 15],
                    85: [2, 15],
                    89: [2, 15],
                    93: [2, 15],
                    97: [2, 15],
                    101: [2, 15],
                    105: [2, 15],
                    111: [2, 15],
                    112: [2, 15],
                    113: [2, 15],
                    114: [2, 15],
                    115: [2, 15],
                    116: [2, 15],
                    117: [2, 15],
                    118: [2, 15],
                    119: [2, 15],
                    120: [2, 15],
                    121: [2, 15],
                    122: [2, 15],
                    148: [2, 15]
                }, {
                    2: [2, 16],
                    11: [2, 16],
                    14: [2, 16],
                    18: [2, 16],
                    21: [2, 16],
                    23: [2, 16],
                    24: [2, 16],
                    26: [2, 16],
                    31: [2,
                        16
                    ],
                    43: [2, 16],
                    44: [2, 16],
                    51: [2, 16],
                    52: [2, 16],
                    57: [2, 16],
                    58: [2, 16],
                    59: [2, 16],
                    64: [2, 16],
                    65: [2, 16],
                    66: [2, 16],
                    69: [2, 16],
                    70: [2, 16],
                    71: [2, 16],
                    72: [2, 16],
                    73: [2, 16],
                    74: [2, 16],
                    78: [2, 16],
                    79: [2, 16],
                    80: [2, 16],
                    81: [2, 16],
                    85: [2, 16],
                    89: [2, 16],
                    93: [2, 16],
                    97: [2, 16],
                    101: [2, 16],
                    105: [2, 16],
                    111: [2, 16],
                    112: [2, 16],
                    113: [2, 16],
                    114: [2, 16],
                    115: [2, 16],
                    116: [2, 16],
                    117: [2, 16],
                    118: [2, 16],
                    119: [2, 16],
                    120: [2, 16],
                    121: [2, 16],
                    122: [2, 16],
                    148: [2, 16]
                }, {
                    2: [2, 17],
                    11: [2, 17],
                    14: [2, 17],
                    18: [2, 17],
                    21: [2, 17],
                    23: [2, 17],
                    24: [2, 17],
                    26: [2, 17],
                    31: [2, 17],
                    43: [2,
                        17
                    ],
                    44: [2, 17],
                    51: [2, 17],
                    52: [2, 17],
                    57: [2, 17],
                    58: [2, 17],
                    59: [2, 17],
                    64: [2, 17],
                    65: [2, 17],
                    66: [2, 17],
                    69: [2, 17],
                    70: [2, 17],
                    71: [2, 17],
                    72: [2, 17],
                    73: [2, 17],
                    74: [2, 17],
                    78: [2, 17],
                    79: [2, 17],
                    80: [2, 17],
                    81: [2, 17],
                    85: [2, 17],
                    89: [2, 17],
                    93: [2, 17],
                    97: [2, 17],
                    101: [2, 17],
                    105: [2, 17],
                    111: [2, 17],
                    112: [2, 17],
                    113: [2, 17],
                    114: [2, 17],
                    115: [2, 17],
                    116: [2, 17],
                    117: [2, 17],
                    118: [2, 17],
                    119: [2, 17],
                    120: [2, 17],
                    121: [2, 17],
                    122: [2, 17],
                    148: [2, 17]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 169,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    2: [2, 144],
                    14: [2, 144],
                    85: [1, 170],
                    89: [2, 144],
                    93: [2, 144],
                    97: [2, 144],
                    101: [2, 144],
                    105: [2, 144],
                    148: [2, 144]
                }, {
                    2: [2, 1],
                    11: [2, 1],
                    14: [2, 1],
                    18: [2, 1],
                    21: [2, 1],
                    23: [2, 1],
                    24: [2, 1],
                    26: [2, 1],
                    31: [2, 1],
                    43: [2, 1],
                    44: [2, 1],
                    51: [2, 1],
                    52: [2, 1],
                    57: [2, 1],
                    58: [2, 1],
                    59: [2, 1],
                    64: [2, 1],
                    65: [2, 1],
                    66: [2, 1],
                    69: [2, 1],
                    70: [2, 1],
                    71: [2, 1],
                    72: [2, 1],
                    73: [2, 1],
                    74: [2, 1],
                    78: [2, 1],
                    79: [2, 1],
                    80: [2, 1],
                    81: [2, 1],
                    85: [2, 1],
                    89: [2, 1],
                    93: [2, 1],
                    97: [2, 1],
                    101: [2, 1],
                    105: [2, 1],
                    111: [2, 1],
                    112: [2, 1],
                    113: [2, 1],
                    114: [2, 1],
                    115: [2, 1],
                    116: [2, 1],
                    117: [2, 1],
                    118: [2, 1],
                    119: [2, 1],
                    120: [2, 1],
                    121: [2, 1],
                    122: [2, 1],
                    148: [2, 1]
                }, {
                    2: [2, 2],
                    11: [2, 2],
                    14: [2, 2],
                    18: [2, 2],
                    21: [2, 2],
                    23: [2, 2],
                    24: [2, 2],
                    26: [2, 2],
                    31: [2, 2],
                    43: [2, 2],
                    44: [2, 2],
                    51: [2, 2],
                    52: [2, 2],
                    57: [2, 2],
                    58: [2, 2],
                    59: [2, 2],
                    64: [2, 2],
                    65: [2, 2],
                    66: [2, 2],
                    69: [2, 2],
                    70: [2, 2],
                    71: [2, 2],
                    72: [2, 2],
                    73: [2, 2],
                    74: [2, 2],
                    78: [2, 2],
                    79: [2, 2],
                    80: [2, 2],
                    81: [2, 2],
                    85: [2, 2],
                    89: [2, 2],
                    93: [2, 2],
                    97: [2, 2],
                    101: [2, 2],
                    105: [2, 2],
                    111: [2, 2],
                    112: [2, 2],
                    113: [2, 2],
                    114: [2, 2],
                    115: [2, 2],
                    116: [2, 2],
                    117: [2, 2],
                    118: [2, 2],
                    119: [2, 2],
                    120: [2, 2],
                    121: [2, 2],
                    122: [2, 2],
                    148: [2, 2]
                }, {
                    2: [2, 3],
                    11: [2, 3],
                    14: [2, 3],
                    18: [2, 3],
                    21: [2, 3],
                    23: [2, 3],
                    24: [2, 3],
                    26: [2, 3],
                    31: [2, 3],
                    43: [2, 3],
                    44: [2, 3],
                    51: [2, 3],
                    52: [2, 3],
                    57: [2, 3],
                    58: [2, 3],
                    59: [2, 3],
                    64: [2, 3],
                    65: [2, 3],
                    66: [2, 3],
                    69: [2, 3],
                    70: [2, 3],
                    71: [2, 3],
                    72: [2, 3],
                    73: [2, 3],
                    74: [2, 3],
                    78: [2, 3],
                    79: [2, 3],
                    80: [2, 3],
                    81: [2, 3],
                    85: [2, 3],
                    89: [2, 3],
                    93: [2, 3],
                    97: [2, 3],
                    101: [2, 3],
                    105: [2, 3],
                    111: [2, 3],
                    112: [2, 3],
                    113: [2, 3],
                    114: [2, 3],
                    115: [2, 3],
                    116: [2, 3],
                    117: [2, 3],
                    118: [2, 3],
                    119: [2, 3],
                    120: [2, 3],
                    121: [2, 3],
                    122: [2, 3],
                    148: [2, 3]
                }, {
                    2: [2, 4],
                    11: [2, 4],
                    14: [2, 4],
                    18: [2, 4],
                    21: [2, 4],
                    23: [2, 4],
                    24: [2, 4],
                    26: [2, 4],
                    31: [2, 4],
                    43: [2, 4],
                    44: [2, 4],
                    51: [2, 4],
                    52: [2, 4],
                    57: [2, 4],
                    58: [2, 4],
                    59: [2, 4],
                    64: [2, 4],
                    65: [2, 4],
                    66: [2, 4],
                    69: [2, 4],
                    70: [2, 4],
                    71: [2, 4],
                    72: [2, 4],
                    73: [2, 4],
                    74: [2, 4],
                    78: [2, 4],
                    79: [2, 4],
                    80: [2, 4],
                    81: [2, 4],
                    85: [2, 4],
                    89: [2, 4],
                    93: [2, 4],
                    97: [2, 4],
                    101: [2, 4],
                    105: [2, 4],
                    111: [2, 4],
                    112: [2, 4],
                    113: [2, 4],
                    114: [2, 4],
                    115: [2, 4],
                    116: [2, 4],
                    117: [2, 4],
                    118: [2, 4],
                    119: [2, 4],
                    120: [2, 4],
                    121: [2, 4],
                    122: [2, 4],
                    148: [2, 4]
                }, {
                    2: [2, 5],
                    11: [2, 5],
                    14: [2, 5],
                    18: [2, 5],
                    21: [2, 5],
                    23: [2, 5],
                    24: [2, 5],
                    26: [2, 5],
                    31: [2, 5],
                    43: [2, 5],
                    44: [2, 5],
                    51: [2, 5],
                    52: [2, 5],
                    57: [2, 5],
                    58: [2, 5],
                    59: [2, 5],
                    64: [2, 5],
                    65: [2, 5],
                    66: [2, 5],
                    69: [2, 5],
                    70: [2, 5],
                    71: [2, 5],
                    72: [2, 5],
                    73: [2, 5],
                    74: [2, 5],
                    78: [2, 5],
                    79: [2, 5],
                    80: [2, 5],
                    81: [2, 5],
                    85: [2, 5],
                    89: [2, 5],
                    93: [2, 5],
                    97: [2, 5],
                    101: [2, 5],
                    105: [2, 5],
                    111: [2, 5],
                    112: [2,
                        5
                    ],
                    113: [2, 5],
                    114: [2, 5],
                    115: [2, 5],
                    116: [2, 5],
                    117: [2, 5],
                    118: [2, 5],
                    119: [2, 5],
                    120: [2, 5],
                    121: [2, 5],
                    122: [2, 5],
                    148: [2, 5]
                }, {
                    4: [2, 25],
                    5: [2, 25],
                    6: [2, 25],
                    7: [2, 25],
                    8: [2, 25],
                    10: [2, 25],
                    14: [1, 174],
                    17: [2, 25],
                    19: [2, 25],
                    21: [2, 25],
                    24: [2, 25],
                    25: 171,
                    26: [2, 25],
                    27: 172,
                    28: 173,
                    32: [2, 25],
                    43: [2, 25],
                    44: [2, 25],
                    47: [2, 25],
                    49: [2, 25],
                    50: [2, 25],
                    51: [2, 25],
                    52: [2, 25],
                    53: [2, 25],
                    54: [2, 25],
                    179: [2, 25]
                }, {
                    2: [2, 138],
                    14: [2, 138],
                    78: [1, 175],
                    79: [1, 176],
                    80: [1, 177],
                    81: [1, 178],
                    85: [2, 138],
                    89: [2, 138],
                    93: [2, 138],
                    97: [2, 138],
                    101: [2, 138],
                    105: [2, 138],
                    148: [2,
                        138
                    ]
                }, {
                    2: [2, 129],
                    14: [2, 129],
                    69: [1, 179],
                    70: [1, 180],
                    71: [1, 181],
                    72: [1, 182],
                    73: [1, 183],
                    74: [1, 184],
                    78: [2, 129],
                    79: [2, 129],
                    80: [2, 129],
                    81: [2, 129],
                    85: [2, 129],
                    89: [2, 129],
                    93: [2, 129],
                    97: [2, 129],
                    101: [2, 129],
                    105: [2, 129],
                    148: [2, 129]
                }, {
                    2: [2, 112],
                    14: [2, 112],
                    64: [1, 185],
                    65: [1, 186],
                    66: [1, 187],
                    69: [2, 112],
                    70: [2, 112],
                    71: [2, 112],
                    72: [2, 112],
                    73: [2, 112],
                    74: [2, 112],
                    78: [2, 112],
                    79: [2, 112],
                    80: [2, 112],
                    81: [2, 112],
                    85: [2, 112],
                    89: [2, 112],
                    93: [2, 112],
                    97: [2, 112],
                    101: [2, 112],
                    105: [2, 112],
                    148: [2, 112]
                }, {
                    2: [2, 95],
                    14: [2, 95],
                    51: [1, 188],
                    52: [1,
                        189
                    ],
                    64: [2, 95],
                    65: [2, 95],
                    66: [2, 95],
                    69: [2, 95],
                    70: [2, 95],
                    71: [2, 95],
                    72: [2, 95],
                    73: [2, 95],
                    74: [2, 95],
                    78: [2, 95],
                    79: [2, 95],
                    80: [2, 95],
                    81: [2, 95],
                    85: [2, 95],
                    89: [2, 95],
                    93: [2, 95],
                    97: [2, 95],
                    101: [2, 95],
                    105: [2, 95],
                    148: [2, 95]
                }, {
                    2: [2, 88],
                    14: [2, 88],
                    51: [2, 88],
                    52: [2, 88],
                    57: [1, 190],
                    58: [1, 191],
                    59: [1, 192],
                    64: [2, 88],
                    65: [2, 88],
                    66: [2, 88],
                    69: [2, 88],
                    70: [2, 88],
                    71: [2, 88],
                    72: [2, 88],
                    73: [2, 88],
                    74: [2, 88],
                    78: [2, 88],
                    79: [2, 88],
                    80: [2, 88],
                    81: [2, 88],
                    85: [2, 88],
                    89: [2, 88],
                    93: [2, 88],
                    97: [2, 88],
                    101: [2, 88],
                    105: [2, 88],
                    148: [2, 88]
                }, {
                    2: [2, 81],
                    14: [2,
                        81
                    ],
                    51: [2, 81],
                    52: [2, 81],
                    57: [2, 81],
                    58: [2, 81],
                    59: [2, 81],
                    64: [2, 81],
                    65: [2, 81],
                    66: [2, 81],
                    69: [2, 81],
                    70: [2, 81],
                    71: [2, 81],
                    72: [2, 81],
                    73: [2, 81],
                    74: [2, 81],
                    78: [2, 81],
                    79: [2, 81],
                    80: [2, 81],
                    81: [2, 81],
                    85: [2, 81],
                    89: [2, 81],
                    93: [2, 81],
                    97: [2, 81],
                    101: [2, 81],
                    105: [2, 81],
                    148: [2, 81]
                }, {
                    2: [2, 75],
                    14: [2, 75],
                    51: [2, 75],
                    52: [2, 75],
                    57: [2, 75],
                    58: [2, 75],
                    59: [2, 75],
                    64: [2, 75],
                    65: [2, 75],
                    66: [2, 75],
                    69: [2, 75],
                    70: [2, 75],
                    71: [2, 75],
                    72: [2, 75],
                    73: [2, 75],
                    74: [2, 75],
                    78: [2, 75],
                    79: [2, 75],
                    80: [2, 75],
                    81: [2, 75],
                    85: [2, 75],
                    89: [2, 75],
                    93: [2, 75],
                    97: [2, 75],
                    101: [2,
                        75
                    ],
                    105: [2, 75],
                    148: [2, 75]
                }, {
                    2: [2, 76],
                    14: [2, 76],
                    51: [2, 76],
                    52: [2, 76],
                    57: [2, 76],
                    58: [2, 76],
                    59: [2, 76],
                    64: [2, 76],
                    65: [2, 76],
                    66: [2, 76],
                    69: [2, 76],
                    70: [2, 76],
                    71: [2, 76],
                    72: [2, 76],
                    73: [2, 76],
                    74: [2, 76],
                    78: [2, 76],
                    79: [2, 76],
                    80: [2, 76],
                    81: [2, 76],
                    85: [2, 76],
                    89: [2, 76],
                    93: [2, 76],
                    97: [2, 76],
                    101: [2, 76],
                    105: [2, 76],
                    148: [2, 76]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 193,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 195,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1,
                        64
                    ],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 196,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 197,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1,
                        62
                    ],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 198,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 199,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1,
                        78
                    ],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 200,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 201,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 202,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    1: [2, 295],
                    4: [2, 295],
                    5: [2, 295],
                    6: [2, 295],
                    7: [2, 295],
                    8: [2, 295],
                    10: [2, 295],
                    17: [2,
                        295
                    ],
                    18: [2, 295],
                    19: [2, 295],
                    21: [2, 295],
                    24: [2, 295],
                    32: [2, 295],
                    43: [2, 295],
                    44: [2, 295],
                    47: [2, 295],
                    49: [2, 295],
                    50: [2, 295],
                    51: [2, 295],
                    52: [2, 295],
                    53: [2, 295],
                    54: [2, 295],
                    144: [2, 295],
                    146: [2, 295],
                    148: [2, 295],
                    152: [2, 295],
                    155: [2, 295],
                    157: [2, 295],
                    158: [2, 295],
                    159: [2, 295],
                    162: [2, 295],
                    163: [2, 295],
                    164: [2, 295],
                    165: [2, 295],
                    166: [2, 295],
                    172: [2, 295],
                    173: [2, 295],
                    174: [2, 295],
                    175: [2, 295],
                    178: [2, 295],
                    179: [2, 295]
                }, {
                    1: [2, 213],
                    4: [2, 213],
                    5: [2, 213],
                    6: [2, 213],
                    7: [2, 213],
                    8: [2, 213],
                    10: [2, 213],
                    17: [2, 213],
                    18: [2, 213],
                    19: [2, 213],
                    21: [2, 213],
                    24: [2, 213],
                    32: [2, 213],
                    43: [2, 213],
                    44: [2, 213],
                    47: [2, 213],
                    49: [2, 213],
                    50: [2, 213],
                    51: [2, 213],
                    52: [2, 213],
                    53: [2, 213],
                    54: [2, 213],
                    144: [2, 213],
                    146: [2, 213],
                    148: [2, 213],
                    152: [2, 213],
                    155: [2, 213],
                    156: [2, 213],
                    157: [2, 213],
                    158: [2, 213],
                    159: [2, 213],
                    162: [2, 213],
                    163: [2, 213],
                    164: [2, 213],
                    165: [2, 213],
                    166: [2, 213],
                    172: [2, 213],
                    173: [2, 213],
                    174: [2, 213],
                    175: [2, 213],
                    176: [2, 213],
                    177: [2, 213],
                    178: [2, 213],
                    179: [2, 213]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    18: [1, 203],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1,
                        64
                    ],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 82,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1,
                        39
                    ],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    2: [1, 205],
                    14: [1, 206],
                    148: [1, 204]
                }, {
                    2: [2, 217],
                    14: [2, 217],
                    111: [1, 208],
                    148: [2, 217],
                    149: 207
                }, {
                    2: [1, 210],
                    14: [1, 211],
                    148: [1, 209]
                }, {
                    2: [2, 227],
                    14: [2, 227],
                    148: [2, 227]
                }, {
                    2: [2, 229],
                    14: [2, 229],
                    111: [1, 208],
                    148: [2, 229],
                    149: 212
                }, {
                    21: [1, 213]
                }, {
                    1: [2, 234],
                    4: [2, 234],
                    5: [2, 234],
                    6: [2, 234],
                    7: [2, 234],
                    8: [2, 234],
                    10: [2, 234],
                    17: [2, 234],
                    18: [2, 234],
                    19: [2, 234],
                    21: [2, 234],
                    24: [2, 234],
                    32: [2, 234],
                    43: [2, 234],
                    44: [2, 234],
                    47: [2, 234],
                    49: [2, 234],
                    50: [2, 234],
                    51: [2, 234],
                    52: [2, 234],
                    53: [2, 234],
                    54: [2, 234],
                    144: [2, 234],
                    146: [2, 234],
                    148: [2, 234],
                    152: [2, 234],
                    155: [2, 234],
                    156: [2, 234],
                    157: [2, 234],
                    158: [2, 234],
                    159: [2, 234],
                    162: [2, 234],
                    163: [2, 234],
                    164: [2, 234],
                    165: [2, 234],
                    166: [2, 234],
                    172: [2, 234],
                    173: [2, 234],
                    174: [2, 234],
                    175: [2, 234],
                    178: [2, 234],
                    179: [2, 234]
                }, {
                    1: [2, 235],
                    4: [2, 235],
                    5: [2, 235],
                    6: [2, 235],
                    7: [2, 235],
                    8: [2, 235],
                    10: [2, 235],
                    17: [2, 235],
                    18: [2, 235],
                    19: [2, 235],
                    21: [2, 235],
                    24: [2, 235],
                    32: [2, 235],
                    43: [2, 235],
                    44: [2, 235],
                    47: [2, 235],
                    49: [2, 235],
                    50: [2, 235],
                    51: [2, 235],
                    52: [2, 235],
                    53: [2, 235],
                    54: [2, 235],
                    144: [2, 235],
                    146: [2, 235],
                    148: [2, 235],
                    152: [2, 235],
                    155: [2, 235],
                    156: [2, 235],
                    157: [2, 235],
                    158: [2, 235],
                    159: [2, 235],
                    162: [2, 235],
                    163: [2, 235],
                    164: [2, 235],
                    165: [2, 235],
                    166: [2, 235],
                    172: [2, 235],
                    173: [2, 235],
                    174: [2, 235],
                    175: [2, 235],
                    178: [2, 235],
                    179: [2, 235]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 214,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 215,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    158: [1, 216]
                }, {
                    3: 55,
                    4: [1,
                        59
                    ],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 217,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 220,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 230,
                    82: 229,
                    86: 228,
                    90: 227,
                    94: 226,
                    98: 225,
                    102: 224,
                    106: 223,
                    107: 222,
                    123: 221,
                    146: [1, 219],
                    148: [2, 248],
                    160: 218,
                    179: [1, 122]
                }, {
                    1: [2, 250],
                    4: [2, 250],
                    5: [2, 250],
                    6: [2, 250],
                    7: [2, 250],
                    8: [2, 250],
                    10: [2, 250],
                    17: [2, 250],
                    18: [2, 250],
                    19: [2, 250],
                    21: [2, 250],
                    24: [2, 250],
                    32: [2, 250],
                    43: [2, 250],
                    44: [2, 250],
                    47: [2, 250],
                    49: [2, 250],
                    50: [2, 250],
                    51: [2, 250],
                    52: [2, 250],
                    53: [2, 250],
                    54: [2, 250],
                    144: [2, 250],
                    146: [2, 250],
                    148: [2, 250],
                    152: [2, 250],
                    155: [2, 250],
                    156: [2, 250],
                    157: [2, 250],
                    158: [2, 250],
                    159: [2, 250],
                    162: [2, 250],
                    163: [2, 250],
                    164: [2, 250],
                    165: [2, 250],
                    166: [2, 250],
                    172: [2, 250],
                    173: [2, 250],
                    174: [2, 250],
                    175: [2, 250],
                    178: [2, 250],
                    179: [2, 250]
                }, {
                    1: [2, 251],
                    4: [2, 251],
                    5: [2, 251],
                    6: [2, 251],
                    7: [2, 251],
                    8: [2, 251],
                    10: [2, 251],
                    17: [2, 251],
                    18: [2, 251],
                    19: [2, 251],
                    21: [2, 251],
                    24: [2, 251],
                    32: [2, 251],
                    43: [2, 251],
                    44: [2, 251],
                    47: [2, 251],
                    49: [2, 251],
                    50: [2, 251],
                    51: [2, 251],
                    52: [2, 251],
                    53: [2, 251],
                    54: [2, 251],
                    144: [2,
                        251
                    ],
                    146: [2, 251],
                    148: [2, 251],
                    152: [2, 251],
                    155: [2, 251],
                    156: [2, 251],
                    157: [2, 251],
                    158: [2, 251],
                    159: [2, 251],
                    162: [2, 251],
                    163: [2, 251],
                    164: [2, 251],
                    165: [2, 251],
                    166: [2, 251],
                    172: [2, 251],
                    173: [2, 251],
                    174: [2, 251],
                    175: [2, 251],
                    178: [2, 251],
                    179: [2, 251]
                }, {
                    2: [1, 233],
                    148: [1, 232]
                }, {
                    1: [2, 254],
                    4: [2, 254],
                    5: [2, 254],
                    6: [2, 254],
                    7: [2, 254],
                    8: [2, 254],
                    10: [2, 254],
                    17: [2, 254],
                    18: [2, 254],
                    19: [2, 254],
                    21: [2, 254],
                    24: [2, 254],
                    32: [2, 254],
                    43: [2, 254],
                    44: [2, 254],
                    47: [2, 254],
                    49: [2, 254],
                    50: [2, 254],
                    51: [2, 254],
                    52: [2, 254],
                    53: [2, 254],
                    54: [2, 254],
                    144: [2,
                        254
                    ],
                    146: [2, 254],
                    148: [2, 254],
                    152: [2, 254],
                    155: [2, 254],
                    156: [2, 254],
                    157: [2, 254],
                    158: [2, 254],
                    159: [2, 254],
                    162: [2, 254],
                    163: [2, 254],
                    164: [2, 254],
                    165: [2, 254],
                    166: [2, 254],
                    172: [2, 254],
                    173: [2, 254],
                    174: [2, 254],
                    175: [2, 254],
                    178: [2, 254],
                    179: [2, 254]
                }, {
                    1: [2, 255],
                    4: [2, 255],
                    5: [2, 255],
                    6: [2, 255],
                    7: [2, 255],
                    8: [2, 255],
                    10: [2, 255],
                    17: [2, 255],
                    18: [2, 255],
                    19: [2, 255],
                    21: [2, 255],
                    24: [2, 255],
                    32: [2, 255],
                    43: [2, 255],
                    44: [2, 255],
                    47: [2, 255],
                    49: [2, 255],
                    50: [2, 255],
                    51: [2, 255],
                    52: [2, 255],
                    53: [2, 255],
                    54: [2, 255],
                    144: [2, 255],
                    146: [2, 255],
                    148: [2,
                        255
                    ],
                    152: [2, 255],
                    155: [2, 255],
                    156: [2, 255],
                    157: [2, 255],
                    158: [2, 255],
                    159: [2, 255],
                    162: [2, 255],
                    163: [2, 255],
                    164: [2, 255],
                    165: [2, 255],
                    166: [2, 255],
                    172: [2, 255],
                    173: [2, 255],
                    174: [2, 255],
                    175: [2, 255],
                    178: [2, 255],
                    179: [2, 255]
                }, {
                    2: [1, 235],
                    148: [1, 234]
                }, {
                    1: [2, 258],
                    4: [2, 258],
                    5: [2, 258],
                    6: [2, 258],
                    7: [2, 258],
                    8: [2, 258],
                    10: [2, 258],
                    17: [2, 258],
                    18: [2, 258],
                    19: [2, 258],
                    21: [2, 258],
                    24: [2, 258],
                    32: [2, 258],
                    43: [2, 258],
                    44: [2, 258],
                    47: [2, 258],
                    49: [2, 258],
                    50: [2, 258],
                    51: [2, 258],
                    52: [2, 258],
                    53: [2, 258],
                    54: [2, 258],
                    144: [2, 258],
                    146: [2, 258],
                    148: [2,
                        258
                    ],
                    152: [2, 258],
                    155: [2, 258],
                    156: [2, 258],
                    157: [2, 258],
                    158: [2, 258],
                    159: [2, 258],
                    162: [2, 258],
                    163: [2, 258],
                    164: [2, 258],
                    165: [2, 258],
                    166: [2, 258],
                    172: [2, 258],
                    173: [2, 258],
                    174: [2, 258],
                    175: [2, 258],
                    178: [2, 258],
                    179: [2, 258]
                }, {
                    1: [2, 259],
                    4: [2, 259],
                    5: [2, 259],
                    6: [2, 259],
                    7: [2, 259],
                    8: [2, 259],
                    10: [2, 259],
                    17: [2, 259],
                    18: [2, 259],
                    19: [2, 259],
                    21: [2, 259],
                    24: [2, 259],
                    32: [2, 259],
                    43: [2, 259],
                    44: [2, 259],
                    47: [2, 259],
                    49: [2, 259],
                    50: [2, 259],
                    51: [2, 259],
                    52: [2, 259],
                    53: [2, 259],
                    54: [2, 259],
                    144: [2, 259],
                    146: [2, 259],
                    148: [2, 259],
                    152: [2, 259],
                    155: [2,
                        259
                    ],
                    156: [2, 259],
                    157: [2, 259],
                    158: [2, 259],
                    159: [2, 259],
                    162: [2, 259],
                    163: [2, 259],
                    164: [2, 259],
                    165: [2, 259],
                    166: [2, 259],
                    172: [2, 259],
                    173: [2, 259],
                    174: [2, 259],
                    175: [2, 259],
                    178: [2, 259],
                    179: [2, 259]
                }, {
                    2: [1, 237],
                    14: [1, 238],
                    148: [1, 236]
                }, {
                    2: [2, 188],
                    11: [2, 188],
                    14: [2, 188],
                    23: [2, 188],
                    26: [2, 188],
                    148: [2, 188]
                }, {
                    2: [2, 170],
                    11: [2, 170],
                    14: [2, 170],
                    18: [2, 170],
                    23: [2, 170],
                    26: [2, 170],
                    148: [2, 170]
                }, {
                    2: [2, 58],
                    11: [2, 58],
                    14: [2, 58],
                    18: [2, 58],
                    23: [2, 58],
                    26: [2, 58],
                    43: [1, 240],
                    44: [1, 241],
                    51: [2, 58],
                    52: [2, 58],
                    57: [2, 58],
                    58: [2, 58],
                    59: [2, 58],
                    64: [2,
                        58
                    ],
                    65: [2, 58],
                    66: [2, 58],
                    69: [2, 58],
                    70: [2, 58],
                    71: [2, 58],
                    72: [2, 58],
                    73: [2, 58],
                    74: [2, 58],
                    78: [2, 58],
                    79: [2, 58],
                    80: [2, 58],
                    81: [2, 58],
                    85: [2, 58],
                    89: [2, 58],
                    93: [2, 58],
                    97: [2, 58],
                    101: [2, 58],
                    105: [2, 58],
                    109: 239,
                    111: [1, 143],
                    112: [1, 144],
                    113: [1, 145],
                    114: [1, 146],
                    115: [1, 147],
                    116: [1, 148],
                    117: [1, 149],
                    118: [1, 150],
                    119: [1, 151],
                    120: [1, 152],
                    121: [1, 153],
                    122: [1, 154],
                    148: [2, 58]
                }, {
                    2: [2, 164],
                    11: [2, 164],
                    14: [2, 164],
                    18: [2, 164],
                    23: [2, 164],
                    26: [2, 164],
                    101: [1, 243],
                    105: [1, 242],
                    148: [2, 164]
                }, {
                    2: [2, 54],
                    11: [2, 54],
                    14: [2, 54],
                    18: [2, 54],
                    23: [2, 54],
                    26: [2, 54],
                    43: [2, 54],
                    44: [2, 54],
                    51: [2, 54],
                    52: [2, 54],
                    57: [2, 54],
                    58: [2, 54],
                    59: [2, 54],
                    64: [2, 54],
                    65: [2, 54],
                    66: [2, 54],
                    69: [2, 54],
                    70: [2, 54],
                    71: [2, 54],
                    72: [2, 54],
                    73: [2, 54],
                    74: [2, 54],
                    78: [2, 54],
                    79: [2, 54],
                    80: [2, 54],
                    81: [2, 54],
                    85: [2, 54],
                    89: [2, 54],
                    93: [2, 54],
                    97: [2, 54],
                    101: [2, 54],
                    105: [2, 54],
                    111: [2, 54],
                    112: [2, 54],
                    113: [2, 54],
                    114: [2, 54],
                    115: [2, 54],
                    116: [2, 54],
                    117: [2, 54],
                    118: [2, 54],
                    119: [2, 54],
                    120: [2, 54],
                    121: [2, 54],
                    122: [2, 54],
                    148: [2, 54]
                }, {
                    2: [2, 55],
                    11: [2, 55],
                    14: [2, 55],
                    18: [2, 55],
                    21: [1, 160],
                    23: [2, 55],
                    24: [1, 245],
                    26: [2, 55],
                    31: [1,
                        246
                    ],
                    33: 244,
                    43: [2, 55],
                    44: [2, 55],
                    51: [2, 55],
                    52: [2, 55],
                    57: [2, 55],
                    58: [2, 55],
                    59: [2, 55],
                    64: [2, 55],
                    65: [2, 55],
                    66: [2, 55],
                    69: [2, 55],
                    70: [2, 55],
                    71: [2, 55],
                    72: [2, 55],
                    73: [2, 55],
                    74: [2, 55],
                    78: [2, 55],
                    79: [2, 55],
                    80: [2, 55],
                    81: [2, 55],
                    85: [2, 55],
                    89: [2, 55],
                    93: [2, 55],
                    97: [2, 55],
                    101: [2, 55],
                    105: [2, 55],
                    111: [2, 55],
                    112: [2, 55],
                    113: [2, 55],
                    114: [2, 55],
                    115: [2, 55],
                    116: [2, 55],
                    117: [2, 55],
                    118: [2, 55],
                    119: [2, 55],
                    120: [2, 55],
                    121: [2, 55],
                    122: [2, 55],
                    148: [2, 55]
                }, {
                    2: [2, 158],
                    11: [2, 158],
                    14: [2, 158],
                    18: [2, 158],
                    23: [2, 158],
                    26: [2, 158],
                    97: [1, 247],
                    101: [2,
                        158
                    ],
                    105: [2, 158],
                    148: [2, 158]
                }, {
                    2: [2, 38],
                    11: [2, 38],
                    14: [2, 38],
                    18: [2, 38],
                    21: [1, 160],
                    23: [2, 38],
                    24: [1, 249],
                    26: [2, 38],
                    31: [1, 250],
                    33: 248,
                    43: [2, 38],
                    44: [2, 38],
                    51: [2, 38],
                    52: [2, 38],
                    57: [2, 38],
                    58: [2, 38],
                    59: [2, 38],
                    64: [2, 38],
                    65: [2, 38],
                    66: [2, 38],
                    69: [2, 38],
                    70: [2, 38],
                    71: [2, 38],
                    72: [2, 38],
                    73: [2, 38],
                    74: [2, 38],
                    78: [2, 38],
                    79: [2, 38],
                    80: [2, 38],
                    81: [2, 38],
                    85: [2, 38],
                    89: [2, 38],
                    93: [2, 38],
                    97: [2, 38],
                    101: [2, 38],
                    105: [2, 38],
                    111: [2, 38],
                    112: [2, 38],
                    113: [2, 38],
                    114: [2, 38],
                    115: [2, 38],
                    116: [2, 38],
                    117: [2, 38],
                    118: [2, 38],
                    119: [2, 38],
                    120: [2, 38],
                    121: [2, 38],
                    122: [2, 38],
                    148: [2, 38]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 252,
                    30: 118,
                    32: [1, 115],
                    35: 251,
                    179: [1, 122]
                }, {
                    2: [2, 152],
                    11: [2, 152],
                    14: [2, 152],
                    18: [2, 152],
                    23: [2, 152],
                    26: [2, 152],
                    93: [1, 253],
                    97: [2, 152],
                    101: [2, 152],
                    105: [2, 152],
                    148: [2, 152]
                }, {
                    2: [2, 29],
                    11: [2, 29],
                    14: [2, 29],
                    18: [2, 29],
                    21: [2, 29],
                    23: [2, 29],
                    24: [2, 29],
                    26: [2, 29],
                    31: [2, 29],
                    43: [2, 29],
                    44: [2, 29],
                    51: [2, 29],
                    52: [2, 29],
                    57: [2, 29],
                    58: [2, 29],
                    59: [2, 29],
                    64: [2, 29],
                    65: [2,
                        29
                    ],
                    66: [2, 29],
                    69: [2, 29],
                    70: [2, 29],
                    71: [2, 29],
                    72: [2, 29],
                    73: [2, 29],
                    74: [2, 29],
                    78: [2, 29],
                    79: [2, 29],
                    80: [2, 29],
                    81: [2, 29],
                    85: [2, 29],
                    89: [2, 29],
                    93: [2, 29],
                    97: [2, 29],
                    101: [2, 29],
                    105: [2, 29],
                    111: [2, 29],
                    112: [2, 29],
                    113: [2, 29],
                    114: [2, 29],
                    115: [2, 29],
                    116: [2, 29],
                    117: [2, 29],
                    118: [2, 29],
                    119: [2, 29],
                    120: [2, 29],
                    121: [2, 29],
                    122: [2, 29],
                    148: [2, 29]
                }, {
                    2: [2, 30],
                    11: [2, 30],
                    14: [2, 30],
                    18: [2, 30],
                    21: [2, 30],
                    23: [2, 30],
                    24: [2, 30],
                    26: [2, 30],
                    31: [2, 30],
                    43: [2, 30],
                    44: [2, 30],
                    51: [2, 30],
                    52: [2, 30],
                    57: [2, 30],
                    58: [2, 30],
                    59: [2, 30],
                    64: [2, 30],
                    65: [2, 30],
                    66: [2,
                        30
                    ],
                    69: [2, 30],
                    70: [2, 30],
                    71: [2, 30],
                    72: [2, 30],
                    73: [2, 30],
                    74: [2, 30],
                    78: [2, 30],
                    79: [2, 30],
                    80: [2, 30],
                    81: [2, 30],
                    85: [2, 30],
                    89: [2, 30],
                    93: [2, 30],
                    97: [2, 30],
                    101: [2, 30],
                    105: [2, 30],
                    111: [2, 30],
                    112: [2, 30],
                    113: [2, 30],
                    114: [2, 30],
                    115: [2, 30],
                    116: [2, 30],
                    117: [2, 30],
                    118: [2, 30],
                    119: [2, 30],
                    120: [2, 30],
                    121: [2, 30],
                    122: [2, 30],
                    148: [2, 30]
                }, {
                    2: [2, 146],
                    11: [2, 146],
                    14: [2, 146],
                    18: [2, 146],
                    23: [2, 146],
                    26: [2, 146],
                    89: [1, 254],
                    93: [2, 146],
                    97: [2, 146],
                    101: [2, 146],
                    105: [2, 146],
                    148: [2, 146]
                }, {
                    2: [2, 11],
                    11: [2, 11],
                    14: [2, 11],
                    18: [2, 11],
                    21: [2, 11],
                    23: [2,
                        11
                    ],
                    24: [2, 11],
                    26: [2, 11],
                    31: [2, 11],
                    43: [2, 11],
                    44: [2, 11],
                    51: [2, 11],
                    52: [2, 11],
                    57: [2, 11],
                    58: [2, 11],
                    59: [2, 11],
                    64: [2, 11],
                    65: [2, 11],
                    66: [2, 11],
                    69: [2, 11],
                    70: [2, 11],
                    71: [2, 11],
                    72: [2, 11],
                    73: [2, 11],
                    74: [2, 11],
                    78: [2, 11],
                    79: [2, 11],
                    80: [2, 11],
                    81: [2, 11],
                    85: [2, 11],
                    89: [2, 11],
                    93: [2, 11],
                    97: [2, 11],
                    101: [2, 11],
                    105: [2, 11],
                    111: [2, 11],
                    112: [2, 11],
                    113: [2, 11],
                    114: [2, 11],
                    115: [2, 11],
                    116: [2, 11],
                    117: [2, 11],
                    118: [2, 11],
                    119: [2, 11],
                    120: [2, 11],
                    121: [2, 11],
                    122: [2, 11],
                    148: [2, 11]
                }, {
                    7: [1, 260],
                    8: [1, 259],
                    9: 257,
                    10: [1, 258],
                    13: 256,
                    18: [1, 255]
                }, {
                    10: [1,
                        262
                    ],
                    21: [1, 261]
                }, {
                    2: [2, 140],
                    11: [2, 140],
                    14: [2, 140],
                    18: [2, 140],
                    23: [2, 140],
                    26: [2, 140],
                    85: [1, 263],
                    89: [2, 140],
                    93: [2, 140],
                    97: [2, 140],
                    101: [2, 140],
                    105: [2, 140],
                    148: [2, 140]
                }, {
                    2: [2, 18],
                    11: [2, 18],
                    14: [2, 18],
                    18: [2, 18],
                    21: [2, 18],
                    23: [2, 18],
                    24: [2, 18],
                    26: [2, 18],
                    31: [2, 18],
                    43: [2, 18],
                    44: [2, 18],
                    51: [2, 18],
                    52: [2, 18],
                    57: [2, 18],
                    58: [2, 18],
                    59: [2, 18],
                    64: [2, 18],
                    65: [2, 18],
                    66: [2, 18],
                    69: [2, 18],
                    70: [2, 18],
                    71: [2, 18],
                    72: [2, 18],
                    73: [2, 18],
                    74: [2, 18],
                    78: [2, 18],
                    79: [2, 18],
                    80: [2, 18],
                    81: [2, 18],
                    85: [2, 18],
                    89: [2, 18],
                    93: [2, 18],
                    97: [2, 18],
                    101: [2,
                        18
                    ],
                    105: [2, 18],
                    111: [2, 18],
                    112: [2, 18],
                    113: [2, 18],
                    114: [2, 18],
                    115: [2, 18],
                    116: [2, 18],
                    117: [2, 18],
                    118: [2, 18],
                    119: [2, 18],
                    120: [2, 18],
                    121: [2, 18],
                    122: [2, 18],
                    148: [2, 18]
                }, {
                    2: [2, 134],
                    11: [2, 134],
                    14: [2, 134],
                    18: [2, 134],
                    23: [2, 134],
                    26: [2, 134],
                    78: [1, 264],
                    79: [1, 265],
                    80: [1, 266],
                    81: [1, 267],
                    85: [2, 134],
                    89: [2, 134],
                    93: [2, 134],
                    97: [2, 134],
                    101: [2, 134],
                    105: [2, 134],
                    148: [2, 134]
                }, {
                    2: [2, 119],
                    11: [2, 119],
                    14: [2, 119],
                    18: [2, 119],
                    23: [2, 119],
                    26: [2, 119],
                    69: [1, 268],
                    70: [1, 269],
                    71: [1, 270],
                    72: [1, 271],
                    73: [1, 272],
                    74: [1, 273],
                    78: [2, 119],
                    79: [2, 119],
                    80: [2, 119],
                    81: [2, 119],
                    85: [2, 119],
                    89: [2, 119],
                    93: [2, 119],
                    97: [2, 119],
                    101: [2, 119],
                    105: [2, 119],
                    148: [2, 119]
                }, {
                    2: [2, 99],
                    11: [2, 99],
                    14: [2, 99],
                    18: [2, 99],
                    23: [2, 99],
                    26: [2, 99],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 99],
                    70: [2, 99],
                    71: [2, 99],
                    72: [2, 99],
                    73: [2, 99],
                    74: [2, 99],
                    78: [2, 99],
                    79: [2, 99],
                    80: [2, 99],
                    81: [2, 99],
                    85: [2, 99],
                    89: [2, 99],
                    93: [2, 99],
                    97: [2, 99],
                    101: [2, 99],
                    105: [2, 99],
                    148: [2, 99]
                }, {
                    2: [2, 91],
                    11: [2, 91],
                    14: [2, 91],
                    18: [2, 91],
                    23: [2, 91],
                    26: [2, 91],
                    51: [1, 277],
                    52: [1, 278],
                    64: [2, 91],
                    65: [2, 91],
                    66: [2, 91],
                    69: [2, 91],
                    70: [2, 91],
                    71: [2, 91],
                    72: [2, 91],
                    73: [2, 91],
                    74: [2, 91],
                    78: [2, 91],
                    79: [2, 91],
                    80: [2, 91],
                    81: [2, 91],
                    85: [2, 91],
                    89: [2, 91],
                    93: [2, 91],
                    97: [2, 91],
                    101: [2, 91],
                    105: [2, 91],
                    148: [2, 91]
                }, {
                    2: [2, 85],
                    11: [2, 85],
                    14: [2, 85],
                    18: [2, 85],
                    23: [2, 85],
                    26: [2, 85],
                    51: [2, 85],
                    52: [2, 85],
                    57: [1, 279],
                    58: [1, 280],
                    59: [1, 281],
                    64: [2, 85],
                    65: [2, 85],
                    66: [2, 85],
                    69: [2, 85],
                    70: [2, 85],
                    71: [2, 85],
                    72: [2, 85],
                    73: [2, 85],
                    74: [2, 85],
                    78: [2, 85],
                    79: [2, 85],
                    80: [2, 85],
                    81: [2, 85],
                    85: [2, 85],
                    89: [2, 85],
                    93: [2, 85],
                    97: [2, 85],
                    101: [2, 85],
                    105: [2, 85],
                    148: [2, 85]
                }, {
                    2: [2, 77],
                    11: [2, 77],
                    14: [2, 77],
                    18: [2, 77],
                    23: [2, 77],
                    26: [2, 77],
                    51: [2, 77],
                    52: [2, 77],
                    57: [2, 77],
                    58: [2, 77],
                    59: [2, 77],
                    64: [2, 77],
                    65: [2, 77],
                    66: [2, 77],
                    69: [2, 77],
                    70: [2, 77],
                    71: [2, 77],
                    72: [2, 77],
                    73: [2, 77],
                    74: [2, 77],
                    78: [2, 77],
                    79: [2, 77],
                    80: [2, 77],
                    81: [2, 77],
                    85: [2, 77],
                    89: [2, 77],
                    93: [2, 77],
                    97: [2, 77],
                    101: [2, 77],
                    105: [2, 77],
                    148: [2, 77]
                }, {
                    2: [2, 73],
                    11: [2, 73],
                    14: [2, 73],
                    18: [2, 73],
                    23: [2, 73],
                    26: [2, 73],
                    51: [2, 73],
                    52: [2, 73],
                    57: [2, 73],
                    58: [2, 73],
                    59: [2, 73],
                    64: [2, 73],
                    65: [2, 73],
                    66: [2, 73],
                    69: [2, 73],
                    70: [2, 73],
                    71: [2, 73],
                    72: [2, 73],
                    73: [2, 73],
                    74: [2, 73],
                    78: [2, 73],
                    79: [2, 73],
                    80: [2, 73],
                    81: [2, 73],
                    85: [2, 73],
                    89: [2, 73],
                    93: [2, 73],
                    97: [2, 73],
                    101: [2, 73],
                    105: [2, 73],
                    148: [2, 73]
                }, {
                    2: [2, 74],
                    11: [2, 74],
                    14: [2, 74],
                    18: [2, 74],
                    23: [2, 74],
                    26: [2, 74],
                    51: [2, 74],
                    52: [2, 74],
                    57: [2, 74],
                    58: [2, 74],
                    59: [2, 74],
                    64: [2, 74],
                    65: [2, 74],
                    66: [2, 74],
                    69: [2, 74],
                    70: [2, 74],
                    71: [2, 74],
                    72: [2, 74],
                    73: [2, 74],
                    74: [2, 74],
                    78: [2, 74],
                    79: [2, 74],
                    80: [2, 74],
                    81: [2, 74],
                    85: [2, 74],
                    89: [2, 74],
                    93: [2, 74],
                    97: [2, 74],
                    101: [2, 74],
                    105: [2, 74],
                    148: [2, 74]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 282,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 283,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 284,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    2: [1, 286],
                    14: [1, 238],
                    148: [1, 285]
                }, {
                    176: [1, 287],
                    177: [1, 288]
                }, {
                    1: [2, 280],
                    4: [2, 280],
                    5: [2, 280],
                    6: [2, 280],
                    7: [2, 280],
                    8: [2, 280],
                    10: [2, 280],
                    17: [2, 280],
                    18: [2, 280],
                    19: [2, 280],
                    21: [2, 280],
                    24: [2,
                        280
                    ],
                    32: [2, 280],
                    43: [2, 280],
                    44: [2, 280],
                    47: [2, 280],
                    49: [2, 280],
                    50: [2, 280],
                    51: [2, 280],
                    52: [2, 280],
                    53: [2, 280],
                    54: [2, 280],
                    144: [2, 280],
                    146: [2, 280],
                    148: [2, 280],
                    152: [2, 280],
                    155: [2, 280],
                    156: [2, 280],
                    157: [2, 280],
                    158: [2, 280],
                    159: [2, 280],
                    162: [2, 280],
                    163: [2, 280],
                    164: [2, 280],
                    165: [2, 280],
                    166: [2, 280],
                    172: [2, 280],
                    173: [2, 280],
                    174: [2, 280],
                    175: [2, 280],
                    178: [2, 280],
                    179: [2, 280]
                }, {
                    1: [2, 281],
                    4: [2, 281],
                    5: [2, 281],
                    6: [2, 281],
                    7: [2, 281],
                    8: [2, 281],
                    10: [2, 281],
                    17: [2, 281],
                    18: [2, 281],
                    19: [2, 281],
                    21: [2, 281],
                    24: [2, 281],
                    32: [2, 281],
                    43: [2, 281],
                    44: [2, 281],
                    47: [2, 281],
                    49: [2, 281],
                    50: [2, 281],
                    51: [2, 281],
                    52: [2, 281],
                    53: [2, 281],
                    54: [2, 281],
                    144: [2, 281],
                    146: [2, 281],
                    148: [2, 281],
                    152: [2, 281],
                    155: [2, 281],
                    156: [2, 281],
                    157: [2, 281],
                    158: [2, 281],
                    159: [2, 281],
                    162: [2, 281],
                    163: [2, 281],
                    164: [2, 281],
                    165: [2, 281],
                    166: [2, 281],
                    172: [2, 281],
                    173: [2, 281],
                    174: [2, 281],
                    175: [2, 281],
                    178: [2, 281],
                    179: [2, 281]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 289,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    2: [2, 62],
                    14: [2, 62],
                    51: [2, 62],
                    52: [2, 62],
                    57: [2, 62],
                    58: [2, 62],
                    59: [2, 62],
                    64: [2, 62],
                    65: [2, 62],
                    66: [2, 62],
                    69: [2, 62],
                    70: [2, 62],
                    71: [2, 62],
                    72: [2, 62],
                    73: [2, 62],
                    74: [2, 62],
                    78: [2, 62],
                    79: [2, 62],
                    80: [2, 62],
                    81: [2, 62],
                    85: [2, 62],
                    89: [2, 62],
                    93: [2, 62],
                    97: [2, 62],
                    101: [2, 62],
                    105: [2, 62],
                    148: [2, 62]
                }, {
                    2: [2, 63],
                    14: [2, 63],
                    51: [2,
                        63
                    ],
                    52: [2, 63],
                    57: [2, 63],
                    58: [2, 63],
                    59: [2, 63],
                    64: [2, 63],
                    65: [2, 63],
                    66: [2, 63],
                    69: [2, 63],
                    70: [2, 63],
                    71: [2, 63],
                    72: [2, 63],
                    73: [2, 63],
                    74: [2, 63],
                    78: [2, 63],
                    79: [2, 63],
                    80: [2, 63],
                    81: [2, 63],
                    85: [2, 63],
                    89: [2, 63],
                    93: [2, 63],
                    97: [2, 63],
                    101: [2, 63],
                    105: [2, 63],
                    148: [2, 63]
                }, {
                    4: [2, 176],
                    5: [2, 176],
                    6: [2, 176],
                    7: [2, 176],
                    8: [2, 176],
                    10: [2, 176],
                    17: [2, 176],
                    19: [2, 176],
                    21: [2, 176],
                    24: [2, 176],
                    32: [2, 176],
                    43: [2, 176],
                    44: [2, 176],
                    47: [2, 176],
                    49: [2, 176],
                    50: [2, 176],
                    51: [2, 176],
                    52: [2, 176],
                    53: [2, 176],
                    54: [2, 176],
                    179: [2, 176]
                }, {
                    4: [2, 177],
                    5: [2, 177],
                    6: [2,
                        177
                    ],
                    7: [2, 177],
                    8: [2, 177],
                    10: [2, 177],
                    17: [2, 177],
                    19: [2, 177],
                    21: [2, 177],
                    24: [2, 177],
                    32: [2, 177],
                    43: [2, 177],
                    44: [2, 177],
                    47: [2, 177],
                    49: [2, 177],
                    50: [2, 177],
                    51: [2, 177],
                    52: [2, 177],
                    53: [2, 177],
                    54: [2, 177],
                    179: [2, 177]
                }, {
                    4: [2, 178],
                    5: [2, 178],
                    6: [2, 178],
                    7: [2, 178],
                    8: [2, 178],
                    10: [2, 178],
                    17: [2, 178],
                    19: [2, 178],
                    21: [2, 178],
                    24: [2, 178],
                    32: [2, 178],
                    43: [2, 178],
                    44: [2, 178],
                    47: [2, 178],
                    49: [2, 178],
                    50: [2, 178],
                    51: [2, 178],
                    52: [2, 178],
                    53: [2, 178],
                    54: [2, 178],
                    179: [2, 178]
                }, {
                    4: [2, 179],
                    5: [2, 179],
                    6: [2, 179],
                    7: [2, 179],
                    8: [2, 179],
                    10: [2, 179],
                    17: [2, 179],
                    19: [2, 179],
                    21: [2, 179],
                    24: [2, 179],
                    32: [2, 179],
                    43: [2, 179],
                    44: [2, 179],
                    47: [2, 179],
                    49: [2, 179],
                    50: [2, 179],
                    51: [2, 179],
                    52: [2, 179],
                    53: [2, 179],
                    54: [2, 179],
                    179: [2, 179]
                }, {
                    4: [2, 180],
                    5: [2, 180],
                    6: [2, 180],
                    7: [2, 180],
                    8: [2, 180],
                    10: [2, 180],
                    17: [2, 180],
                    19: [2, 180],
                    21: [2, 180],
                    24: [2, 180],
                    32: [2, 180],
                    43: [2, 180],
                    44: [2, 180],
                    47: [2, 180],
                    49: [2, 180],
                    50: [2, 180],
                    51: [2, 180],
                    52: [2, 180],
                    53: [2, 180],
                    54: [2, 180],
                    179: [2, 180]
                }, {
                    4: [2, 181],
                    5: [2, 181],
                    6: [2, 181],
                    7: [2, 181],
                    8: [2, 181],
                    10: [2, 181],
                    17: [2, 181],
                    19: [2, 181],
                    21: [2, 181],
                    24: [2, 181],
                    32: [2, 181],
                    43: [2, 181],
                    44: [2, 181],
                    47: [2, 181],
                    49: [2, 181],
                    50: [2, 181],
                    51: [2, 181],
                    52: [2, 181],
                    53: [2, 181],
                    54: [2, 181],
                    179: [2, 181]
                }, {
                    4: [2, 182],
                    5: [2, 182],
                    6: [2, 182],
                    7: [2, 182],
                    8: [2, 182],
                    10: [2, 182],
                    17: [2, 182],
                    19: [2, 182],
                    21: [2, 182],
                    24: [2, 182],
                    32: [2, 182],
                    43: [2, 182],
                    44: [2, 182],
                    47: [2, 182],
                    49: [2, 182],
                    50: [2, 182],
                    51: [2, 182],
                    52: [2, 182],
                    53: [2, 182],
                    54: [2, 182],
                    179: [2, 182]
                }, {
                    4: [2, 183],
                    5: [2, 183],
                    6: [2, 183],
                    7: [2, 183],
                    8: [2, 183],
                    10: [2, 183],
                    17: [2, 183],
                    19: [2, 183],
                    21: [2, 183],
                    24: [2, 183],
                    32: [2, 183],
                    43: [2, 183],
                    44: [2, 183],
                    47: [2, 183],
                    49: [2, 183],
                    50: [2, 183],
                    51: [2, 183],
                    52: [2, 183],
                    53: [2, 183],
                    54: [2, 183],
                    179: [2, 183]
                }, {
                    4: [2, 184],
                    5: [2, 184],
                    6: [2, 184],
                    7: [2, 184],
                    8: [2, 184],
                    10: [2, 184],
                    17: [2, 184],
                    19: [2, 184],
                    21: [2, 184],
                    24: [2, 184],
                    32: [2, 184],
                    43: [2, 184],
                    44: [2, 184],
                    47: [2, 184],
                    49: [2, 184],
                    50: [2, 184],
                    51: [2, 184],
                    52: [2, 184],
                    53: [2, 184],
                    54: [2, 184],
                    179: [2, 184]
                }, {
                    4: [2, 185],
                    5: [2, 185],
                    6: [2, 185],
                    7: [2, 185],
                    8: [2, 185],
                    10: [2, 185],
                    17: [2, 185],
                    19: [2, 185],
                    21: [2, 185],
                    24: [2, 185],
                    32: [2, 185],
                    43: [2, 185],
                    44: [2, 185],
                    47: [2, 185],
                    49: [2, 185],
                    50: [2, 185],
                    51: [2, 185],
                    52: [2, 185],
                    53: [2, 185],
                    54: [2, 185],
                    179: [2, 185]
                }, {
                    4: [2, 186],
                    5: [2, 186],
                    6: [2, 186],
                    7: [2, 186],
                    8: [2, 186],
                    10: [2, 186],
                    17: [2, 186],
                    19: [2, 186],
                    21: [2, 186],
                    24: [2, 186],
                    32: [2, 186],
                    43: [2, 186],
                    44: [2, 186],
                    47: [2, 186],
                    49: [2, 186],
                    50: [2, 186],
                    51: [2, 186],
                    52: [2, 186],
                    53: [2, 186],
                    54: [2, 186],
                    179: [2, 186]
                }, {
                    4: [2, 187],
                    5: [2, 187],
                    6: [2, 187],
                    7: [2, 187],
                    8: [2, 187],
                    10: [2, 187],
                    17: [2, 187],
                    19: [2, 187],
                    21: [2, 187],
                    24: [2, 187],
                    32: [2, 187],
                    43: [2, 187],
                    44: [2, 187],
                    47: [2, 187],
                    49: [2, 187],
                    50: [2, 187],
                    51: [2, 187],
                    52: [2, 187],
                    53: [2, 187],
                    54: [2, 187],
                    179: [2, 187]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1,
                        60
                    ],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 290,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1,
                        115
                    ],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 291,
                    179: [1, 122]
                }, {
                    2: [2, 47],
                    14: [2, 47],
                    21: [2, 47],
                    24: [2, 47],
                    31: [2, 47],
                    43: [2, 47],
                    44: [2, 47],
                    51: [2, 47],
                    52: [2, 47],
                    57: [2, 47],
                    58: [2, 47],
                    59: [2, 47],
                    64: [2, 47],
                    65: [2, 47],
                    66: [2, 47],
                    69: [2, 47],
                    70: [2, 47],
                    71: [2, 47],
                    72: [2, 47],
                    73: [2, 47],
                    74: [2, 47],
                    78: [2, 47],
                    79: [2, 47],
                    80: [2, 47],
                    81: [2, 47],
                    85: [2, 47],
                    89: [2, 47],
                    93: [2, 47],
                    97: [2, 47],
                    101: [2, 47],
                    105: [2, 47],
                    111: [2, 47],
                    112: [2, 47],
                    113: [2, 47],
                    114: [2, 47],
                    115: [2, 47],
                    116: [2, 47],
                    117: [2, 47],
                    118: [2, 47],
                    119: [2, 47],
                    120: [2, 47],
                    121: [2, 47],
                    122: [2, 47],
                    148: [2, 47]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 292,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    10: [1, 293]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 296,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    23: [1, 294],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    39: 295,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 297,
                    179: [1, 122]
                }, {
                    2: [2, 46],
                    14: [2, 46],
                    21: [2, 46],
                    24: [2, 46],
                    31: [2, 46],
                    43: [2, 46],
                    44: [2, 46],
                    51: [2, 46],
                    52: [2, 46],
                    57: [2, 46],
                    58: [2, 46],
                    59: [2, 46],
                    64: [2, 46],
                    65: [2, 46],
                    66: [2, 46],
                    69: [2, 46],
                    70: [2, 46],
                    71: [2, 46],
                    72: [2, 46],
                    73: [2,
                        46
                    ],
                    74: [2, 46],
                    78: [2, 46],
                    79: [2, 46],
                    80: [2, 46],
                    81: [2, 46],
                    85: [2, 46],
                    89: [2, 46],
                    93: [2, 46],
                    97: [2, 46],
                    101: [2, 46],
                    105: [2, 46],
                    111: [2, 46],
                    112: [2, 46],
                    113: [2, 46],
                    114: [2, 46],
                    115: [2, 46],
                    116: [2, 46],
                    117: [2, 46],
                    118: [2, 46],
                    119: [2, 46],
                    120: [2, 46],
                    121: [2, 46],
                    122: [2, 46],
                    148: [2, 46]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 298,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    10: [1, 299]
                }, {
                    2: [2, 41],
                    14: [2, 41],
                    43: [2, 41],
                    44: [2, 41],
                    51: [2, 41],
                    52: [2, 41],
                    57: [2, 41],
                    58: [2, 41],
                    59: [2, 41],
                    64: [2, 41],
                    65: [2, 41],
                    66: [2, 41],
                    69: [2, 41],
                    70: [2, 41],
                    71: [2, 41],
                    72: [2, 41],
                    73: [2, 41],
                    74: [2, 41],
                    78: [2, 41],
                    79: [2, 41],
                    80: [2, 41],
                    81: [2, 41],
                    85: [2, 41],
                    89: [2, 41],
                    93: [2, 41],
                    97: [2, 41],
                    101: [2, 41],
                    105: [2, 41],
                    111: [2, 41],
                    112: [2, 41],
                    113: [2, 41],
                    114: [2, 41],
                    115: [2, 41],
                    116: [2, 41],
                    117: [2, 41],
                    118: [2, 41],
                    119: [2, 41],
                    120: [2, 41],
                    121: [2, 41],
                    122: [2, 41],
                    148: [2, 41]
                }, {
                    2: [2, 38],
                    14: [2, 38],
                    21: [1, 160],
                    24: [1, 249],
                    31: [1, 250],
                    33: 300,
                    43: [2, 38],
                    44: [2, 38],
                    51: [2, 38],
                    52: [2, 38],
                    57: [2, 38],
                    58: [2, 38],
                    59: [2, 38],
                    64: [2, 38],
                    65: [2, 38],
                    66: [2, 38],
                    69: [2, 38],
                    70: [2, 38],
                    71: [2, 38],
                    72: [2, 38],
                    73: [2, 38],
                    74: [2, 38],
                    78: [2, 38],
                    79: [2, 38],
                    80: [2, 38],
                    81: [2, 38],
                    85: [2, 38],
                    89: [2, 38],
                    93: [2, 38],
                    97: [2, 38],
                    101: [2, 38],
                    105: [2, 38],
                    111: [2, 38],
                    112: [2, 38],
                    113: [2, 38],
                    114: [2, 38],
                    115: [2, 38],
                    116: [2, 38],
                    117: [2, 38],
                    118: [2, 38],
                    119: [2, 38],
                    120: [2,
                        38
                    ],
                    121: [2, 38],
                    122: [2, 38],
                    148: [2, 38]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 301,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 302,
                    179: [1, 122]
                }, {
                    14: [1, 238],
                    23: [1, 303]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1,
                        80
                    ],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 304,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 306,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    26: [1, 305],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    14: [1, 308],
                    26: [1, 307]
                }, {
                    4: [2, 26],
                    5: [2, 26],
                    6: [2, 26],
                    7: [2, 26],
                    8: [2, 26],
                    10: [2, 26],
                    14: [1, 309],
                    17: [2, 26],
                    19: [2, 26],
                    21: [2, 26],
                    24: [2, 26],
                    26: [2, 26],
                    32: [2, 26],
                    43: [2, 26],
                    44: [2, 26],
                    47: [2, 26],
                    49: [2, 26],
                    50: [2, 26],
                    51: [2, 26],
                    52: [2, 26],
                    53: [2, 26],
                    54: [2, 26],
                    179: [2, 26]
                }, {
                    4: [2, 27],
                    5: [2, 27],
                    6: [2, 27],
                    7: [2, 27],
                    8: [2, 27],
                    10: [2, 27],
                    14: [2, 27],
                    17: [2, 27],
                    19: [2, 27],
                    21: [2, 27],
                    24: [2, 27],
                    26: [2, 27],
                    32: [2, 27],
                    43: [2, 27],
                    44: [2, 27],
                    47: [2, 27],
                    49: [2, 27],
                    50: [2, 27],
                    51: [2, 27],
                    52: [2, 27],
                    53: [2, 27],
                    54: [2, 27],
                    179: [2, 27]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 310,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1,
                        79
                    ],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 311,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 312,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1,
                        64
                    ],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 313,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 314,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 315,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 316,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 317,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 318,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 319,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 320,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 321,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 322,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1,
                        59
                    ],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 323,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 324,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 325,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 326,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 327,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    2: [2, 64],
                    11: [2, 64],
                    14: [2, 64],
                    18: [2, 64],
                    23: [2, 64],
                    26: [2, 64],
                    51: [2, 64],
                    52: [2, 64],
                    57: [2, 64],
                    58: [2, 64],
                    59: [2, 64],
                    64: [2, 64],
                    65: [2, 64],
                    66: [2, 64],
                    69: [2, 64],
                    70: [2, 64],
                    71: [2, 64],
                    72: [2, 64],
                    73: [2, 64],
                    74: [2, 64],
                    78: [2, 64],
                    79: [2, 64],
                    80: [2, 64],
                    81: [2, 64],
                    85: [2, 64],
                    89: [2, 64],
                    93: [2, 64],
                    97: [2, 64],
                    101: [2, 64],
                    105: [2, 64],
                    148: [2, 64]
                }, {
                    2: [2, 58],
                    11: [2, 58],
                    14: [2, 58],
                    18: [2, 58],
                    23: [2, 58],
                    26: [2, 58],
                    43: [1, 240],
                    44: [1, 241],
                    51: [2, 58],
                    52: [2, 58],
                    57: [2, 58],
                    58: [2, 58],
                    59: [2, 58],
                    64: [2, 58],
                    65: [2, 58],
                    66: [2, 58],
                    69: [2, 58],
                    70: [2, 58],
                    71: [2, 58],
                    72: [2, 58],
                    73: [2, 58],
                    74: [2, 58],
                    78: [2,
                        58
                    ],
                    79: [2, 58],
                    80: [2, 58],
                    81: [2, 58],
                    85: [2, 58],
                    89: [2, 58],
                    93: [2, 58],
                    97: [2, 58],
                    101: [2, 58],
                    105: [2, 58],
                    148: [2, 58]
                }, {
                    2: [2, 65],
                    11: [2, 65],
                    14: [2, 65],
                    18: [2, 65],
                    23: [2, 65],
                    26: [2, 65],
                    51: [2, 65],
                    52: [2, 65],
                    57: [2, 65],
                    58: [2, 65],
                    59: [2, 65],
                    64: [2, 65],
                    65: [2, 65],
                    66: [2, 65],
                    69: [2, 65],
                    70: [2, 65],
                    71: [2, 65],
                    72: [2, 65],
                    73: [2, 65],
                    74: [2, 65],
                    78: [2, 65],
                    79: [2, 65],
                    80: [2, 65],
                    81: [2, 65],
                    85: [2, 65],
                    89: [2, 65],
                    93: [2, 65],
                    97: [2, 65],
                    101: [2, 65],
                    105: [2, 65],
                    148: [2, 65]
                }, {
                    2: [2, 66],
                    11: [2, 66],
                    14: [2, 66],
                    18: [2, 66],
                    23: [2, 66],
                    26: [2, 66],
                    51: [2, 66],
                    52: [2, 66],
                    57: [2, 66],
                    58: [2, 66],
                    59: [2, 66],
                    64: [2, 66],
                    65: [2, 66],
                    66: [2, 66],
                    69: [2, 66],
                    70: [2, 66],
                    71: [2, 66],
                    72: [2, 66],
                    73: [2, 66],
                    74: [2, 66],
                    78: [2, 66],
                    79: [2, 66],
                    80: [2, 66],
                    81: [2, 66],
                    85: [2, 66],
                    89: [2, 66],
                    93: [2, 66],
                    97: [2, 66],
                    101: [2, 66],
                    105: [2, 66],
                    148: [2, 66]
                }, {
                    2: [2, 67],
                    11: [2, 67],
                    14: [2, 67],
                    18: [2, 67],
                    23: [2, 67],
                    26: [2, 67],
                    51: [2, 67],
                    52: [2, 67],
                    57: [2, 67],
                    58: [2, 67],
                    59: [2, 67],
                    64: [2, 67],
                    65: [2, 67],
                    66: [2, 67],
                    69: [2, 67],
                    70: [2, 67],
                    71: [2, 67],
                    72: [2, 67],
                    73: [2, 67],
                    74: [2, 67],
                    78: [2, 67],
                    79: [2, 67],
                    80: [2, 67],
                    81: [2, 67],
                    85: [2, 67],
                    89: [2, 67],
                    93: [2, 67],
                    97: [2, 67],
                    101: [2, 67],
                    105: [2, 67],
                    148: [2, 67]
                }, {
                    2: [2, 68],
                    11: [2, 68],
                    14: [2, 68],
                    18: [2, 68],
                    23: [2, 68],
                    26: [2, 68],
                    51: [2, 68],
                    52: [2, 68],
                    57: [2, 68],
                    58: [2, 68],
                    59: [2, 68],
                    64: [2, 68],
                    65: [2, 68],
                    66: [2, 68],
                    69: [2, 68],
                    70: [2, 68],
                    71: [2, 68],
                    72: [2, 68],
                    73: [2, 68],
                    74: [2, 68],
                    78: [2, 68],
                    79: [2, 68],
                    80: [2, 68],
                    81: [2, 68],
                    85: [2, 68],
                    89: [2, 68],
                    93: [2, 68],
                    97: [2, 68],
                    101: [2, 68],
                    105: [2, 68],
                    148: [2, 68]
                }, {
                    2: [2, 69],
                    11: [2, 69],
                    14: [2, 69],
                    18: [2, 69],
                    23: [2, 69],
                    26: [2, 69],
                    51: [2, 69],
                    52: [2, 69],
                    57: [2, 69],
                    58: [2, 69],
                    59: [2, 69],
                    64: [2, 69],
                    65: [2, 69],
                    66: [2, 69],
                    69: [2,
                        69
                    ],
                    70: [2, 69],
                    71: [2, 69],
                    72: [2, 69],
                    73: [2, 69],
                    74: [2, 69],
                    78: [2, 69],
                    79: [2, 69],
                    80: [2, 69],
                    81: [2, 69],
                    85: [2, 69],
                    89: [2, 69],
                    93: [2, 69],
                    97: [2, 69],
                    101: [2, 69],
                    105: [2, 69],
                    148: [2, 69]
                }, {
                    2: [2, 70],
                    11: [2, 70],
                    14: [2, 70],
                    18: [2, 70],
                    23: [2, 70],
                    26: [2, 70],
                    51: [2, 70],
                    52: [2, 70],
                    57: [2, 70],
                    58: [2, 70],
                    59: [2, 70],
                    64: [2, 70],
                    65: [2, 70],
                    66: [2, 70],
                    69: [2, 70],
                    70: [2, 70],
                    71: [2, 70],
                    72: [2, 70],
                    73: [2, 70],
                    74: [2, 70],
                    78: [2, 70],
                    79: [2, 70],
                    80: [2, 70],
                    81: [2, 70],
                    85: [2, 70],
                    89: [2, 70],
                    93: [2, 70],
                    97: [2, 70],
                    101: [2, 70],
                    105: [2, 70],
                    148: [2, 70]
                }, {
                    2: [2, 71],
                    11: [2, 71],
                    14: [2, 71],
                    18: [2, 71],
                    23: [2, 71],
                    26: [2, 71],
                    51: [2, 71],
                    52: [2, 71],
                    57: [2, 71],
                    58: [2, 71],
                    59: [2, 71],
                    64: [2, 71],
                    65: [2, 71],
                    66: [2, 71],
                    69: [2, 71],
                    70: [2, 71],
                    71: [2, 71],
                    72: [2, 71],
                    73: [2, 71],
                    74: [2, 71],
                    78: [2, 71],
                    79: [2, 71],
                    80: [2, 71],
                    81: [2, 71],
                    85: [2, 71],
                    89: [2, 71],
                    93: [2, 71],
                    97: [2, 71],
                    101: [2, 71],
                    105: [2, 71],
                    148: [2, 71]
                }, {
                    2: [2, 72],
                    11: [2, 72],
                    14: [2, 72],
                    18: [2, 72],
                    23: [2, 72],
                    26: [2, 72],
                    51: [2, 72],
                    52: [2, 72],
                    57: [2, 72],
                    58: [2, 72],
                    59: [2, 72],
                    64: [2, 72],
                    65: [2, 72],
                    66: [2, 72],
                    69: [2, 72],
                    70: [2, 72],
                    71: [2, 72],
                    72: [2, 72],
                    73: [2, 72],
                    74: [2, 72],
                    78: [2, 72],
                    79: [2, 72],
                    80: [2, 72],
                    81: [2, 72],
                    85: [2, 72],
                    89: [2, 72],
                    93: [2, 72],
                    97: [2, 72],
                    101: [2, 72],
                    105: [2, 72],
                    148: [2, 72]
                }, {
                    1: [2, 214],
                    4: [2, 214],
                    5: [2, 214],
                    6: [2, 214],
                    7: [2, 214],
                    8: [2, 214],
                    10: [2, 214],
                    17: [2, 214],
                    18: [2, 214],
                    19: [2, 214],
                    21: [2, 214],
                    24: [2, 214],
                    32: [2, 214],
                    43: [2, 214],
                    44: [2, 214],
                    47: [2, 214],
                    49: [2, 214],
                    50: [2, 214],
                    51: [2, 214],
                    52: [2, 214],
                    53: [2, 214],
                    54: [2, 214],
                    144: [2, 214],
                    146: [2, 214],
                    148: [2, 214],
                    152: [2, 214],
                    155: [2, 214],
                    156: [2, 214],
                    157: [2, 214],
                    158: [2, 214],
                    159: [2, 214],
                    162: [2, 214],
                    163: [2, 214],
                    164: [2, 214],
                    165: [2, 214],
                    166: [2,
                        214
                    ],
                    172: [2, 214],
                    173: [2, 214],
                    174: [2, 214],
                    175: [2, 214],
                    176: [2, 214],
                    177: [2, 214],
                    178: [2, 214],
                    179: [2, 214]
                }, {
                    1: [2, 215],
                    4: [2, 215],
                    5: [2, 215],
                    6: [2, 215],
                    7: [2, 215],
                    8: [2, 215],
                    10: [2, 215],
                    17: [2, 215],
                    18: [2, 215],
                    19: [2, 215],
                    21: [2, 215],
                    24: [2, 215],
                    32: [2, 215],
                    43: [2, 215],
                    44: [2, 215],
                    47: [2, 215],
                    49: [2, 215],
                    50: [2, 215],
                    51: [2, 215],
                    52: [2, 215],
                    53: [2, 215],
                    54: [2, 215],
                    144: [2, 215],
                    146: [2, 215],
                    148: [2, 215],
                    152: [2, 215],
                    155: [2, 215],
                    156: [2, 215],
                    157: [2, 215],
                    158: [2, 215],
                    159: [2, 215],
                    162: [2, 215],
                    163: [2, 215],
                    164: [2, 215],
                    165: [2, 215],
                    166: [2,
                        215
                    ],
                    172: [2, 215],
                    173: [2, 215],
                    174: [2, 215],
                    175: [2, 215],
                    178: [2, 215],
                    179: [2, 215]
                }, {
                    1: [2, 216],
                    4: [2, 216],
                    5: [2, 216],
                    6: [2, 216],
                    7: [2, 216],
                    8: [2, 216],
                    10: [2, 216],
                    17: [2, 216],
                    18: [2, 216],
                    19: [2, 216],
                    21: [2, 216],
                    24: [2, 216],
                    32: [2, 216],
                    43: [2, 216],
                    44: [2, 216],
                    47: [2, 216],
                    49: [2, 216],
                    50: [2, 216],
                    51: [2, 216],
                    52: [2, 216],
                    53: [2, 216],
                    54: [2, 216],
                    144: [2, 216],
                    146: [2, 216],
                    148: [2, 216],
                    152: [2, 216],
                    155: [2, 216],
                    156: [2, 216],
                    157: [2, 216],
                    158: [2, 216],
                    159: [2, 216],
                    162: [2, 216],
                    163: [2, 216],
                    164: [2, 216],
                    165: [2, 216],
                    166: [2, 216],
                    172: [2, 216],
                    173: [2,
                        216
                    ],
                    174: [2, 216],
                    175: [2, 216],
                    178: [2, 216],
                    179: [2, 216]
                }, {
                    10: [1, 328]
                }, {
                    2: [2, 218],
                    14: [2, 218],
                    148: [2, 218]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 329,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    1: [2, 225],
                    4: [2, 225],
                    5: [2, 225],
                    6: [2, 225],
                    7: [2, 225],
                    8: [2, 225],
                    10: [2, 225],
                    17: [2, 225],
                    18: [2, 225],
                    19: [2, 225],
                    21: [2, 225],
                    24: [2, 225],
                    32: [2, 225],
                    43: [2, 225],
                    44: [2, 225],
                    47: [2, 225],
                    49: [2, 225],
                    50: [2, 225],
                    51: [2, 225],
                    52: [2, 225],
                    53: [2, 225],
                    54: [2, 225],
                    144: [2, 225],
                    146: [2, 225],
                    148: [2, 225],
                    152: [2, 225],
                    155: [2, 225],
                    156: [2, 225],
                    157: [2, 225],
                    158: [2, 225],
                    159: [2, 225],
                    162: [2, 225],
                    163: [2, 225],
                    164: [2, 225],
                    165: [2, 225],
                    166: [2, 225],
                    172: [2, 225],
                    173: [2, 225],
                    174: [2, 225],
                    175: [2, 225],
                    178: [2, 225],
                    179: [2, 225]
                }, {
                    1: [2, 226],
                    4: [2, 226],
                    5: [2, 226],
                    6: [2, 226],
                    7: [2,
                        226
                    ],
                    8: [2, 226],
                    10: [2, 226],
                    17: [2, 226],
                    18: [2, 226],
                    19: [2, 226],
                    21: [2, 226],
                    24: [2, 226],
                    32: [2, 226],
                    43: [2, 226],
                    44: [2, 226],
                    47: [2, 226],
                    49: [2, 226],
                    50: [2, 226],
                    51: [2, 226],
                    52: [2, 226],
                    53: [2, 226],
                    54: [2, 226],
                    144: [2, 226],
                    146: [2, 226],
                    148: [2, 226],
                    152: [2, 226],
                    155: [2, 226],
                    156: [2, 226],
                    157: [2, 226],
                    158: [2, 226],
                    159: [2, 226],
                    162: [2, 226],
                    163: [2, 226],
                    164: [2, 226],
                    165: [2, 226],
                    166: [2, 226],
                    172: [2, 226],
                    173: [2, 226],
                    174: [2, 226],
                    175: [2, 226],
                    178: [2, 226],
                    179: [2, 226]
                }, {
                    10: [1, 89],
                    154: 330
                }, {
                    2: [2, 230],
                    14: [2, 230],
                    148: [2, 230]
                }, {
                    10: [1, 333],
                    23: [1,
                        331
                    ],
                    181: 332
                }, {
                    2: [2, 193],
                    14: [2, 193],
                    148: [2, 193]
                }, {
                    14: [1, 238],
                    23: [1, 334]
                }, {
                    21: [1, 335]
                }, {
                    14: [1, 238],
                    23: [1, 336]
                }, {
                    148: [1, 337]
                }, {
                    10: [1, 339],
                    150: 338
                }, {
                    14: [2, 58],
                    43: [1, 240],
                    44: [1, 241],
                    51: [2, 58],
                    52: [2, 58],
                    57: [2, 58],
                    58: [2, 58],
                    59: [2, 58],
                    64: [2, 58],
                    65: [2, 58],
                    66: [2, 58],
                    69: [2, 58],
                    70: [2, 58],
                    71: [2, 58],
                    72: [2, 58],
                    73: [2, 58],
                    74: [1, 340],
                    78: [2, 58],
                    79: [2, 58],
                    80: [2, 58],
                    81: [2, 58],
                    85: [2, 58],
                    89: [2, 58],
                    93: [2, 58],
                    97: [2, 58],
                    101: [2, 58],
                    105: [2, 58],
                    109: 341,
                    111: [1, 143],
                    112: [1, 144],
                    113: [1, 145],
                    114: [1, 146],
                    115: [1, 147],
                    116: [1, 148],
                    117: [1, 149],
                    118: [1, 150],
                    119: [1, 151],
                    120: [1, 152],
                    121: [1, 153],
                    122: [1, 154],
                    148: [2, 58]
                }, {
                    14: [1, 342],
                    148: [2, 249]
                }, {
                    14: [2, 190],
                    148: [2, 190]
                }, {
                    11: [2, 172],
                    14: [2, 172],
                    74: [2, 172],
                    148: [2, 172]
                }, {
                    11: [2, 166],
                    14: [2, 166],
                    74: [2, 166],
                    101: [1, 344],
                    105: [1, 343],
                    148: [2, 166]
                }, {
                    11: [2, 160],
                    14: [2, 160],
                    74: [2, 160],
                    97: [1, 345],
                    101: [2, 160],
                    105: [2, 160],
                    148: [2, 160]
                }, {
                    11: [2, 154],
                    14: [2, 154],
                    74: [2, 154],
                    93: [1, 346],
                    97: [2, 154],
                    101: [2, 154],
                    105: [2, 154],
                    148: [2, 154]
                }, {
                    11: [2, 148],
                    14: [2, 148],
                    74: [2, 148],
                    89: [1, 347],
                    93: [2, 148],
                    97: [2, 148],
                    101: [2,
                        148
                    ],
                    105: [2, 148],
                    148: [2, 148]
                }, {
                    11: [2, 142],
                    14: [2, 142],
                    74: [2, 142],
                    85: [1, 348],
                    89: [2, 142],
                    93: [2, 142],
                    97: [2, 142],
                    101: [2, 142],
                    105: [2, 142],
                    148: [2, 142]
                }, {
                    11: [2, 136],
                    14: [2, 136],
                    74: [2, 136],
                    78: [1, 349],
                    79: [1, 350],
                    80: [1, 351],
                    81: [1, 352],
                    85: [2, 136],
                    89: [2, 136],
                    93: [2, 136],
                    97: [2, 136],
                    101: [2, 136],
                    105: [2, 136],
                    148: [2, 136]
                }, {
                    11: [2, 124],
                    14: [2, 124],
                    69: [1, 353],
                    70: [1, 354],
                    71: [1, 355],
                    72: [1, 356],
                    73: [1, 357],
                    74: [2, 124],
                    78: [2, 124],
                    79: [2, 124],
                    80: [2, 124],
                    81: [2, 124],
                    85: [2, 124],
                    89: [2, 124],
                    93: [2, 124],
                    97: [2, 124],
                    101: [2, 124],
                    105: [2, 124],
                    148: [2, 124]
                }, {
                    11: [2, 106],
                    14: [2, 106],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 106],
                    70: [2, 106],
                    71: [2, 106],
                    72: [2, 106],
                    73: [2, 106],
                    74: [2, 106],
                    78: [2, 106],
                    79: [2, 106],
                    80: [2, 106],
                    81: [2, 106],
                    85: [2, 106],
                    89: [2, 106],
                    93: [2, 106],
                    97: [2, 106],
                    101: [2, 106],
                    105: [2, 106],
                    148: [2, 106]
                }, {
                    1: [2, 252],
                    4: [2, 252],
                    5: [2, 252],
                    6: [2, 252],
                    7: [2, 252],
                    8: [2, 252],
                    10: [2, 252],
                    17: [2, 252],
                    18: [2, 252],
                    19: [2, 252],
                    21: [2, 252],
                    24: [2, 252],
                    32: [2, 252],
                    43: [2, 252],
                    44: [2, 252],
                    47: [2, 252],
                    49: [2, 252],
                    50: [2, 252],
                    51: [2, 252],
                    52: [2, 252],
                    53: [2, 252],
                    54: [2, 252],
                    144: [2,
                        252
                    ],
                    146: [2, 252],
                    148: [2, 252],
                    152: [2, 252],
                    155: [2, 252],
                    156: [2, 252],
                    157: [2, 252],
                    158: [2, 252],
                    159: [2, 252],
                    162: [2, 252],
                    163: [2, 252],
                    164: [2, 252],
                    165: [2, 252],
                    166: [2, 252],
                    172: [2, 252],
                    173: [2, 252],
                    174: [2, 252],
                    175: [2, 252],
                    178: [2, 252],
                    179: [2, 252]
                }, {
                    1: [2, 253],
                    4: [2, 253],
                    5: [2, 253],
                    6: [2, 253],
                    7: [2, 253],
                    8: [2, 253],
                    10: [2, 253],
                    17: [2, 253],
                    18: [2, 253],
                    19: [2, 253],
                    21: [2, 253],
                    24: [2, 253],
                    32: [2, 253],
                    43: [2, 253],
                    44: [2, 253],
                    47: [2, 253],
                    49: [2, 253],
                    50: [2, 253],
                    51: [2, 253],
                    52: [2, 253],
                    53: [2, 253],
                    54: [2, 253],
                    144: [2, 253],
                    146: [2, 253],
                    148: [2,
                        253
                    ],
                    152: [2, 253],
                    155: [2, 253],
                    156: [2, 253],
                    157: [2, 253],
                    158: [2, 253],
                    159: [2, 253],
                    162: [2, 253],
                    163: [2, 253],
                    164: [2, 253],
                    165: [2, 253],
                    166: [2, 253],
                    172: [2, 253],
                    173: [2, 253],
                    174: [2, 253],
                    175: [2, 253],
                    178: [2, 253],
                    179: [2, 253]
                }, {
                    1: [2, 256],
                    4: [2, 256],
                    5: [2, 256],
                    6: [2, 256],
                    7: [2, 256],
                    8: [2, 256],
                    10: [2, 256],
                    17: [2, 256],
                    18: [2, 256],
                    19: [2, 256],
                    21: [2, 256],
                    24: [2, 256],
                    32: [2, 256],
                    43: [2, 256],
                    44: [2, 256],
                    47: [2, 256],
                    49: [2, 256],
                    50: [2, 256],
                    51: [2, 256],
                    52: [2, 256],
                    53: [2, 256],
                    54: [2, 256],
                    144: [2, 256],
                    146: [2, 256],
                    148: [2, 256],
                    152: [2, 256],
                    155: [2,
                        256
                    ],
                    156: [2, 256],
                    157: [2, 256],
                    158: [2, 256],
                    159: [2, 256],
                    162: [2, 256],
                    163: [2, 256],
                    164: [2, 256],
                    165: [2, 256],
                    166: [2, 256],
                    172: [2, 256],
                    173: [2, 256],
                    174: [2, 256],
                    175: [2, 256],
                    178: [2, 256],
                    179: [2, 256]
                }, {
                    1: [2, 257],
                    4: [2, 257],
                    5: [2, 257],
                    6: [2, 257],
                    7: [2, 257],
                    8: [2, 257],
                    10: [2, 257],
                    17: [2, 257],
                    18: [2, 257],
                    19: [2, 257],
                    21: [2, 257],
                    24: [2, 257],
                    32: [2, 257],
                    43: [2, 257],
                    44: [2, 257],
                    47: [2, 257],
                    49: [2, 257],
                    50: [2, 257],
                    51: [2, 257],
                    52: [2, 257],
                    53: [2, 257],
                    54: [2, 257],
                    144: [2, 257],
                    146: [2, 257],
                    148: [2, 257],
                    152: [2, 257],
                    155: [2, 257],
                    156: [2, 257],
                    157: [2,
                        257
                    ],
                    158: [2, 257],
                    159: [2, 257],
                    162: [2, 257],
                    163: [2, 257],
                    164: [2, 257],
                    165: [2, 257],
                    166: [2, 257],
                    172: [2, 257],
                    173: [2, 257],
                    174: [2, 257],
                    175: [2, 257],
                    178: [2, 257],
                    179: [2, 257]
                }, {
                    1: [2, 260],
                    4: [2, 260],
                    5: [2, 260],
                    6: [2, 260],
                    7: [2, 260],
                    8: [2, 260],
                    10: [2, 260],
                    17: [2, 260],
                    18: [2, 260],
                    19: [2, 260],
                    21: [2, 260],
                    24: [2, 260],
                    32: [2, 260],
                    43: [2, 260],
                    44: [2, 260],
                    47: [2, 260],
                    49: [2, 260],
                    50: [2, 260],
                    51: [2, 260],
                    52: [2, 260],
                    53: [2, 260],
                    54: [2, 260],
                    144: [2, 260],
                    146: [2, 260],
                    148: [2, 260],
                    152: [2, 260],
                    155: [2, 260],
                    156: [2, 260],
                    157: [2, 260],
                    158: [2, 260],
                    159: [2,
                        260
                    ],
                    162: [2, 260],
                    163: [2, 260],
                    164: [2, 260],
                    165: [2, 260],
                    166: [2, 260],
                    172: [2, 260],
                    173: [2, 260],
                    174: [2, 260],
                    175: [2, 260],
                    178: [2, 260],
                    179: [2, 260]
                }, {
                    1: [2, 261],
                    4: [2, 261],
                    5: [2, 261],
                    6: [2, 261],
                    7: [2, 261],
                    8: [2, 261],
                    10: [2, 261],
                    17: [2, 261],
                    18: [2, 261],
                    19: [2, 261],
                    21: [2, 261],
                    24: [2, 261],
                    32: [2, 261],
                    43: [2, 261],
                    44: [2, 261],
                    47: [2, 261],
                    49: [2, 261],
                    50: [2, 261],
                    51: [2, 261],
                    52: [2, 261],
                    53: [2, 261],
                    54: [2, 261],
                    144: [2, 261],
                    146: [2, 261],
                    148: [2, 261],
                    152: [2, 261],
                    155: [2, 261],
                    156: [2, 261],
                    157: [2, 261],
                    158: [2, 261],
                    159: [2, 261],
                    162: [2, 261],
                    163: [2,
                        261
                    ],
                    164: [2, 261],
                    165: [2, 261],
                    166: [2, 261],
                    172: [2, 261],
                    173: [2, 261],
                    174: [2, 261],
                    175: [2, 261],
                    178: [2, 261],
                    179: [2, 261]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 358,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1,
                        59
                    ],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 359,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    2: [2, 59],
                    11: [2, 59],
                    14: [2, 59],
                    18: [2, 59],
                    23: [2, 59],
                    26: [2, 59],
                    51: [2, 59],
                    52: [2, 59],
                    57: [2, 59],
                    58: [2, 59],
                    59: [2, 59],
                    64: [2, 59],
                    65: [2, 59],
                    66: [2,
                        59
                    ],
                    69: [2, 59],
                    70: [2, 59],
                    71: [2, 59],
                    72: [2, 59],
                    73: [2, 59],
                    74: [2, 59],
                    78: [2, 59],
                    79: [2, 59],
                    80: [2, 59],
                    81: [2, 59],
                    85: [2, 59],
                    89: [2, 59],
                    93: [2, 59],
                    97: [2, 59],
                    101: [2, 59],
                    105: [2, 59],
                    148: [2, 59]
                }, {
                    2: [2, 60],
                    11: [2, 60],
                    14: [2, 60],
                    18: [2, 60],
                    23: [2, 60],
                    26: [2, 60],
                    51: [2, 60],
                    52: [2, 60],
                    57: [2, 60],
                    58: [2, 60],
                    59: [2, 60],
                    64: [2, 60],
                    65: [2, 60],
                    66: [2, 60],
                    69: [2, 60],
                    70: [2, 60],
                    71: [2, 60],
                    72: [2, 60],
                    73: [2, 60],
                    74: [2, 60],
                    78: [2, 60],
                    79: [2, 60],
                    80: [2, 60],
                    81: [2, 60],
                    85: [2, 60],
                    89: [2, 60],
                    93: [2, 60],
                    97: [2, 60],
                    101: [2, 60],
                    105: [2, 60],
                    148: [2, 60]
                }, {
                    3: 55,
                    4: [1,
                        59
                    ],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 360,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 361,
                    179: [1, 122]
                }, {
                    2: [2, 43],
                    11: [2, 43],
                    14: [2, 43],
                    18: [2, 43],
                    21: [2, 43],
                    23: [2, 43],
                    24: [2, 43],
                    26: [2, 43],
                    31: [2, 43],
                    43: [2, 43],
                    44: [2, 43],
                    51: [2, 43],
                    52: [2, 43],
                    57: [2, 43],
                    58: [2, 43],
                    59: [2, 43],
                    64: [2, 43],
                    65: [2, 43],
                    66: [2, 43],
                    69: [2, 43],
                    70: [2, 43],
                    71: [2, 43],
                    72: [2, 43],
                    73: [2, 43],
                    74: [2, 43],
                    78: [2, 43],
                    79: [2, 43],
                    80: [2, 43],
                    81: [2,
                        43
                    ],
                    85: [2, 43],
                    89: [2, 43],
                    93: [2, 43],
                    97: [2, 43],
                    101: [2, 43],
                    105: [2, 43],
                    111: [2, 43],
                    112: [2, 43],
                    113: [2, 43],
                    114: [2, 43],
                    115: [2, 43],
                    116: [2, 43],
                    117: [2, 43],
                    118: [2, 43],
                    119: [2, 43],
                    120: [2, 43],
                    121: [2, 43],
                    122: [2, 43],
                    148: [2, 43]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 362,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    10: [1, 363]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 364,
                    179: [1, 122]
                }, {
                    2: [2, 42],
                    11: [2, 42],
                    14: [2, 42],
                    18: [2, 42],
                    21: [2, 42],
                    23: [2, 42],
                    24: [2, 42],
                    26: [2, 42],
                    31: [2, 42],
                    43: [2, 42],
                    44: [2, 42],
                    51: [2, 42],
                    52: [2, 42],
                    57: [2, 42],
                    58: [2, 42],
                    59: [2, 42],
                    64: [2, 42],
                    65: [2, 42],
                    66: [2, 42],
                    69: [2, 42],
                    70: [2, 42],
                    71: [2, 42],
                    72: [2, 42],
                    73: [2, 42],
                    74: [2, 42],
                    78: [2, 42],
                    79: [2, 42],
                    80: [2, 42],
                    81: [2, 42],
                    85: [2, 42],
                    89: [2, 42],
                    93: [2, 42],
                    97: [2, 42],
                    101: [2, 42],
                    105: [2, 42],
                    111: [2, 42],
                    112: [2, 42],
                    113: [2, 42],
                    114: [2, 42],
                    115: [2, 42],
                    116: [2, 42],
                    117: [2, 42],
                    118: [2, 42],
                    119: [2, 42],
                    120: [2, 42],
                    121: [2, 42],
                    122: [2, 42],
                    148: [2, 42]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1,
                        124
                    ],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 365,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    10: [1, 366]
                }, {
                    2: [2, 39],
                    11: [2, 39],
                    14: [2, 39],
                    18: [2, 39],
                    23: [2, 39],
                    26: [2, 39],
                    43: [2, 39],
                    44: [2, 39],
                    51: [2, 39],
                    52: [2, 39],
                    57: [2, 39],
                    58: [2, 39],
                    59: [2, 39],
                    64: [2, 39],
                    65: [2, 39],
                    66: [2, 39],
                    69: [2, 39],
                    70: [2, 39],
                    71: [2, 39],
                    72: [2, 39],
                    73: [2, 39],
                    74: [2, 39],
                    78: [2, 39],
                    79: [2, 39],
                    80: [2, 39],
                    81: [2, 39],
                    85: [2, 39],
                    89: [2, 39],
                    93: [2, 39],
                    97: [2, 39],
                    101: [2, 39],
                    105: [2, 39],
                    111: [2, 39],
                    112: [2, 39],
                    113: [2, 39],
                    114: [2, 39],
                    115: [2, 39],
                    116: [2, 39],
                    117: [2, 39],
                    118: [2, 39],
                    119: [2, 39],
                    120: [2, 39],
                    121: [2, 39],
                    122: [2, 39],
                    148: [2, 39]
                }, {
                    2: [2, 38],
                    11: [2, 38],
                    14: [2, 38],
                    18: [2, 38],
                    21: [1, 160],
                    23: [2, 38],
                    24: [1, 249],
                    26: [2, 38],
                    31: [1, 250],
                    33: 367,
                    43: [2, 38],
                    44: [2, 38],
                    51: [2, 38],
                    52: [2, 38],
                    57: [2, 38],
                    58: [2, 38],
                    59: [2, 38],
                    64: [2, 38],
                    65: [2, 38],
                    66: [2,
                        38
                    ],
                    69: [2, 38],
                    70: [2, 38],
                    71: [2, 38],
                    72: [2, 38],
                    73: [2, 38],
                    74: [2, 38],
                    78: [2, 38],
                    79: [2, 38],
                    80: [2, 38],
                    81: [2, 38],
                    85: [2, 38],
                    89: [2, 38],
                    93: [2, 38],
                    97: [2, 38],
                    101: [2, 38],
                    105: [2, 38],
                    111: [2, 38],
                    112: [2, 38],
                    113: [2, 38],
                    114: [2, 38],
                    115: [2, 38],
                    116: [2, 38],
                    117: [2, 38],
                    118: [2, 38],
                    119: [2, 38],
                    120: [2, 38],
                    121: [2, 38],
                    122: [2, 38],
                    148: [2, 38]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1,
                        77
                    ],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 368,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 369,
                    179: [1, 122]
                }, {
                    2: [2, 12],
                    11: [2,
                        12
                    ],
                    14: [2, 12],
                    18: [2, 12],
                    21: [2, 12],
                    23: [2, 12],
                    24: [2, 12],
                    26: [2, 12],
                    31: [2, 12],
                    43: [2, 12],
                    44: [2, 12],
                    51: [2, 12],
                    52: [2, 12],
                    57: [2, 12],
                    58: [2, 12],
                    59: [2, 12],
                    64: [2, 12],
                    65: [2, 12],
                    66: [2, 12],
                    69: [2, 12],
                    70: [2, 12],
                    71: [2, 12],
                    72: [2, 12],
                    73: [2, 12],
                    74: [2, 12],
                    78: [2, 12],
                    79: [2, 12],
                    80: [2, 12],
                    81: [2, 12],
                    85: [2, 12],
                    89: [2, 12],
                    93: [2, 12],
                    97: [2, 12],
                    101: [2, 12],
                    105: [2, 12],
                    111: [2, 12],
                    112: [2, 12],
                    113: [2, 12],
                    114: [2, 12],
                    115: [2, 12],
                    116: [2, 12],
                    117: [2, 12],
                    118: [2, 12],
                    119: [2, 12],
                    120: [2, 12],
                    121: [2, 12],
                    122: [2, 12],
                    148: [2, 12]
                }, {
                    14: [1, 371],
                    18: [1, 370]
                },
                {
                    14: [2, 9],
                    18: [2, 9]
                }, {
                    11: [1, 372]
                }, {
                    11: [1, 373]
                }, {
                    11: [1, 374]
                }, {
                    10: [1, 333],
                    23: [1, 375],
                    181: 376
                }, {
                    21: [1, 377]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 378,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 379,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 380,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 381,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1,
                        57
                    ],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 382,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 383,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 384,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 385,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 386,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 387,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 388,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 389,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 390,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 391,
                    179: [1, 122]
                },
                {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 392,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 393,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 394,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 395,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 396,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    179: [1, 122]
                }, {
                    14: [1, 238],
                    23: [1, 397]
                }, {
                    14: [1,
                        238
                    ],
                    23: [1, 398]
                }, {
                    1: [2, 274],
                    4: [2, 274],
                    5: [2, 274],
                    6: [2, 274],
                    7: [2, 274],
                    8: [2, 274],
                    10: [2, 274],
                    17: [2, 274],
                    18: [2, 274],
                    19: [2, 274],
                    21: [2, 274],
                    24: [2, 274],
                    32: [2, 274],
                    43: [2, 274],
                    44: [2, 274],
                    47: [2, 274],
                    49: [2, 274],
                    50: [2, 274],
                    51: [2, 274],
                    52: [2, 274],
                    53: [2, 274],
                    54: [2, 274],
                    144: [2, 274],
                    146: [2, 274],
                    148: [2, 274],
                    152: [2, 274],
                    155: [2, 274],
                    156: [2, 274],
                    157: [2, 274],
                    158: [2, 274],
                    159: [2, 274],
                    162: [2, 274],
                    163: [2, 274],
                    164: [2, 274],
                    165: [2, 274],
                    166: [2, 274],
                    172: [2, 274],
                    173: [2, 274],
                    174: [2, 274],
                    175: [2, 274],
                    178: [2, 274],
                    179: [2, 274]
                }, {
                    1: [2,
                        275
                    ],
                    4: [2, 275],
                    5: [2, 275],
                    6: [2, 275],
                    7: [2, 275],
                    8: [2, 275],
                    10: [2, 275],
                    17: [2, 275],
                    18: [2, 275],
                    19: [2, 275],
                    21: [2, 275],
                    24: [2, 275],
                    32: [2, 275],
                    43: [2, 275],
                    44: [2, 275],
                    47: [2, 275],
                    49: [2, 275],
                    50: [2, 275],
                    51: [2, 275],
                    52: [2, 275],
                    53: [2, 275],
                    54: [2, 275],
                    144: [2, 275],
                    146: [2, 275],
                    148: [2, 275],
                    152: [2, 275],
                    155: [2, 275],
                    156: [2, 275],
                    157: [2, 275],
                    158: [2, 275],
                    159: [2, 275],
                    162: [2, 275],
                    163: [2, 275],
                    164: [2, 275],
                    165: [2, 275],
                    166: [2, 275],
                    172: [2, 275],
                    173: [2, 275],
                    174: [2, 275],
                    175: [2, 275],
                    178: [2, 275],
                    179: [2, 275]
                }, {
                    1: [2, 276],
                    4: [2, 276],
                    5: [2, 276],
                    6: [2, 276],
                    7: [2, 276],
                    8: [2, 276],
                    10: [2, 276],
                    17: [2, 276],
                    18: [2, 276],
                    19: [2, 276],
                    21: [2, 276],
                    24: [2, 276],
                    32: [2, 276],
                    43: [2, 276],
                    44: [2, 276],
                    47: [2, 276],
                    49: [2, 276],
                    50: [2, 276],
                    51: [2, 276],
                    52: [2, 276],
                    53: [2, 276],
                    54: [2, 276],
                    144: [2, 276],
                    146: [2, 276],
                    148: [2, 276],
                    152: [2, 276],
                    155: [2, 276],
                    156: [2, 276],
                    157: [2, 276],
                    158: [2, 276],
                    159: [2, 276],
                    162: [2, 276],
                    163: [2, 276],
                    164: [2, 276],
                    165: [2, 276],
                    166: [2, 276],
                    172: [2, 276],
                    173: [2, 276],
                    174: [2, 276],
                    175: [2, 276],
                    178: [2, 276],
                    179: [2, 276]
                }, {
                    17: [1, 22],
                    126: 399
                }, {
                    21: [1, 400]
                }, {
                    2: [2, 175],
                    14: [2, 175],
                    148: [2, 175]
                }, {
                    11: [1, 401]
                }, {
                    2: [2, 163],
                    14: [2, 163],
                    97: [1, 247],
                    101: [2, 163],
                    105: [2, 163],
                    148: [2, 163]
                }, {
                    14: [1, 238],
                    26: [1, 402]
                }, {
                    2: [2, 49],
                    14: [2, 49],
                    21: [2, 49],
                    24: [2, 49],
                    31: [2, 49],
                    43: [2, 49],
                    44: [2, 49],
                    51: [2, 49],
                    52: [2, 49],
                    57: [2, 49],
                    58: [2, 49],
                    59: [2, 49],
                    64: [2, 49],
                    65: [2, 49],
                    66: [2, 49],
                    69: [2, 49],
                    70: [2, 49],
                    71: [2, 49],
                    72: [2, 49],
                    73: [2, 49],
                    74: [2, 49],
                    78: [2, 49],
                    79: [2, 49],
                    80: [2, 49],
                    81: [2, 49],
                    85: [2, 49],
                    89: [2, 49],
                    93: [2, 49],
                    97: [2, 49],
                    101: [2, 49],
                    105: [2, 49],
                    111: [2, 49],
                    112: [2, 49],
                    113: [2, 49],
                    114: [2, 49],
                    115: [2, 49],
                    116: [2, 49],
                    117: [2,
                        49
                    ],
                    118: [2, 49],
                    119: [2, 49],
                    120: [2, 49],
                    121: [2, 49],
                    122: [2, 49],
                    148: [2, 49]
                }, {
                    2: [2, 50],
                    11: [2, 50],
                    14: [2, 50],
                    18: [2, 50],
                    21: [2, 50],
                    23: [2, 50],
                    24: [2, 50],
                    26: [2, 50],
                    31: [2, 50],
                    43: [2, 50],
                    44: [2, 50],
                    51: [2, 50],
                    52: [2, 50],
                    57: [2, 50],
                    58: [2, 50],
                    59: [2, 50],
                    64: [2, 50],
                    65: [2, 50],
                    66: [2, 50],
                    69: [2, 50],
                    70: [2, 50],
                    71: [2, 50],
                    72: [2, 50],
                    73: [2, 50],
                    74: [2, 50],
                    78: [2, 50],
                    79: [2, 50],
                    80: [2, 50],
                    81: [2, 50],
                    85: [2, 50],
                    89: [2, 50],
                    93: [2, 50],
                    97: [2, 50],
                    101: [2, 50],
                    105: [2, 50],
                    111: [2, 50],
                    112: [2, 50],
                    113: [2, 50],
                    114: [2, 50],
                    115: [2, 50],
                    116: [2, 50],
                    117: [2, 50],
                    118: [2,
                        50
                    ],
                    119: [2, 50],
                    120: [2, 50],
                    121: [2, 50],
                    122: [2, 50],
                    148: [2, 50]
                }, {
                    14: [1, 404],
                    23: [1, 403]
                }, {
                    14: [2, 52],
                    23: [2, 52]
                }, {
                    2: [2, 157],
                    14: [2, 157],
                    93: [1, 253],
                    97: [2, 157],
                    101: [2, 157],
                    105: [2, 157],
                    148: [2, 157]
                }, {
                    14: [1, 238],
                    26: [1, 405]
                }, {
                    2: [2, 36],
                    14: [2, 36],
                    21: [2, 36],
                    24: [2, 36],
                    31: [2, 36],
                    43: [2, 36],
                    44: [2, 36],
                    51: [2, 36],
                    52: [2, 36],
                    57: [2, 36],
                    58: [2, 36],
                    59: [2, 36],
                    64: [2, 36],
                    65: [2, 36],
                    66: [2, 36],
                    69: [2, 36],
                    70: [2, 36],
                    71: [2, 36],
                    72: [2, 36],
                    73: [2, 36],
                    74: [2, 36],
                    78: [2, 36],
                    79: [2, 36],
                    80: [2, 36],
                    81: [2, 36],
                    85: [2, 36],
                    89: [2, 36],
                    93: [2, 36],
                    97: [2, 36],
                    101: [2, 36],
                    105: [2, 36],
                    111: [2, 36],
                    112: [2, 36],
                    113: [2, 36],
                    114: [2, 36],
                    115: [2, 36],
                    116: [2, 36],
                    117: [2, 36],
                    118: [2, 36],
                    119: [2, 36],
                    120: [2, 36],
                    121: [2, 36],
                    122: [2, 36],
                    148: [2, 36]
                }, {
                    2: [2, 37],
                    14: [2, 37],
                    21: [2, 37],
                    24: [2, 37],
                    31: [2, 37],
                    43: [2, 37],
                    44: [2, 37],
                    51: [2, 37],
                    52: [2, 37],
                    57: [2, 37],
                    58: [2, 37],
                    59: [2, 37],
                    64: [2, 37],
                    65: [2, 37],
                    66: [2, 37],
                    69: [2, 37],
                    70: [2, 37],
                    71: [2, 37],
                    72: [2, 37],
                    73: [2, 37],
                    74: [2, 37],
                    78: [2, 37],
                    79: [2, 37],
                    80: [2, 37],
                    81: [2, 37],
                    85: [2, 37],
                    89: [2, 37],
                    93: [2, 37],
                    97: [2, 37],
                    101: [2, 37],
                    105: [2, 37],
                    111: [2, 37],
                    112: [2, 37],
                    113: [2,
                        37
                    ],
                    114: [2, 37],
                    115: [2, 37],
                    116: [2, 37],
                    117: [2, 37],
                    118: [2, 37],
                    119: [2, 37],
                    120: [2, 37],
                    121: [2, 37],
                    122: [2, 37],
                    148: [2, 37]
                }, {
                    2: [2, 151],
                    14: [2, 151],
                    89: [1, 254],
                    93: [2, 151],
                    97: [2, 151],
                    101: [2, 151],
                    105: [2, 151],
                    148: [2, 151]
                }, {
                    2: [2, 145],
                    14: [2, 145],
                    85: [1, 263],
                    89: [2, 145],
                    93: [2, 145],
                    97: [2, 145],
                    101: [2, 145],
                    105: [2, 145],
                    148: [2, 145]
                }, {
                    2: [2, 19],
                    11: [2, 19],
                    14: [2, 19],
                    18: [2, 19],
                    21: [2, 19],
                    23: [2, 19],
                    24: [2, 19],
                    26: [2, 19],
                    31: [2, 19],
                    43: [2, 19],
                    44: [2, 19],
                    51: [2, 19],
                    52: [2, 19],
                    57: [2, 19],
                    58: [2, 19],
                    59: [2, 19],
                    64: [2, 19],
                    65: [2, 19],
                    66: [2, 19],
                    69: [2,
                        19
                    ],
                    70: [2, 19],
                    71: [2, 19],
                    72: [2, 19],
                    73: [2, 19],
                    74: [2, 19],
                    78: [2, 19],
                    79: [2, 19],
                    80: [2, 19],
                    81: [2, 19],
                    85: [2, 19],
                    89: [2, 19],
                    93: [2, 19],
                    97: [2, 19],
                    101: [2, 19],
                    105: [2, 19],
                    111: [2, 19],
                    112: [2, 19],
                    113: [2, 19],
                    114: [2, 19],
                    115: [2, 19],
                    116: [2, 19],
                    117: [2, 19],
                    118: [2, 19],
                    119: [2, 19],
                    120: [2, 19],
                    121: [2, 19],
                    122: [2, 19],
                    148: [2, 19]
                }, {
                    2: [2, 139],
                    14: [2, 139],
                    78: [1, 264],
                    79: [1, 265],
                    80: [1, 266],
                    81: [1, 267],
                    85: [2, 139],
                    89: [2, 139],
                    93: [2, 139],
                    97: [2, 139],
                    101: [2, 139],
                    105: [2, 139],
                    148: [2, 139]
                }, {
                    2: [2, 20],
                    11: [2, 20],
                    14: [2, 20],
                    18: [2, 20],
                    21: [2, 20],
                    23: [2,
                        20
                    ],
                    24: [2, 20],
                    26: [2, 20],
                    31: [2, 20],
                    43: [2, 20],
                    44: [2, 20],
                    51: [2, 20],
                    52: [2, 20],
                    57: [2, 20],
                    58: [2, 20],
                    59: [2, 20],
                    64: [2, 20],
                    65: [2, 20],
                    66: [2, 20],
                    69: [2, 20],
                    70: [2, 20],
                    71: [2, 20],
                    72: [2, 20],
                    73: [2, 20],
                    74: [2, 20],
                    78: [2, 20],
                    79: [2, 20],
                    80: [2, 20],
                    81: [2, 20],
                    85: [2, 20],
                    89: [2, 20],
                    93: [2, 20],
                    97: [2, 20],
                    101: [2, 20],
                    105: [2, 20],
                    111: [2, 20],
                    112: [2, 20],
                    113: [2, 20],
                    114: [2, 20],
                    115: [2, 20],
                    116: [2, 20],
                    117: [2, 20],
                    118: [2, 20],
                    119: [2, 20],
                    120: [2, 20],
                    121: [2, 20],
                    122: [2, 20],
                    148: [2, 20]
                }, {
                    14: [2, 23],
                    26: [2, 23]
                }, {
                    2: [2, 21],
                    11: [2, 21],
                    14: [2, 21],
                    18: [2, 21],
                    21: [2, 21],
                    23: [2, 21],
                    24: [2, 21],
                    26: [2, 21],
                    31: [2, 21],
                    43: [2, 21],
                    44: [2, 21],
                    51: [2, 21],
                    52: [2, 21],
                    57: [2, 21],
                    58: [2, 21],
                    59: [2, 21],
                    64: [2, 21],
                    65: [2, 21],
                    66: [2, 21],
                    69: [2, 21],
                    70: [2, 21],
                    71: [2, 21],
                    72: [2, 21],
                    73: [2, 21],
                    74: [2, 21],
                    78: [2, 21],
                    79: [2, 21],
                    80: [2, 21],
                    81: [2, 21],
                    85: [2, 21],
                    89: [2, 21],
                    93: [2, 21],
                    97: [2, 21],
                    101: [2, 21],
                    105: [2, 21],
                    111: [2, 21],
                    112: [2, 21],
                    113: [2, 21],
                    114: [2, 21],
                    115: [2, 21],
                    116: [2, 21],
                    117: [2, 21],
                    118: [2, 21],
                    119: [2, 21],
                    120: [2, 21],
                    121: [2, 21],
                    122: [2, 21],
                    148: [2, 21]
                }, {
                    4: [2, 25],
                    5: [2, 25],
                    6: [2, 25],
                    7: [2, 25],
                    8: [2, 25],
                    10: [2, 25],
                    14: [1, 174],
                    17: [2, 25],
                    19: [2, 25],
                    21: [2, 25],
                    24: [2, 25],
                    25: 406,
                    26: [2, 25],
                    28: 173,
                    32: [2, 25],
                    43: [2, 25],
                    44: [2, 25],
                    47: [2, 25],
                    49: [2, 25],
                    50: [2, 25],
                    51: [2, 25],
                    52: [2, 25],
                    53: [2, 25],
                    54: [2, 25],
                    179: [2, 25]
                }, {
                    4: [2, 28],
                    5: [2, 28],
                    6: [2, 28],
                    7: [2, 28],
                    8: [2, 28],
                    10: [2, 28],
                    14: [2, 28],
                    17: [2, 28],
                    19: [2, 28],
                    21: [2, 28],
                    24: [2, 28],
                    26: [2, 28],
                    32: [2, 28],
                    43: [2, 28],
                    44: [2, 28],
                    47: [2, 28],
                    49: [2, 28],
                    50: [2, 28],
                    51: [2, 28],
                    52: [2, 28],
                    53: [2, 28],
                    54: [2, 28],
                    179: [2, 28]
                }, {
                    2: [2, 130],
                    14: [2, 130],
                    69: [1, 268],
                    70: [1, 269],
                    71: [1, 270],
                    72: [1, 271],
                    73: [1, 272],
                    74: [1, 273],
                    78: [2, 130],
                    79: [2, 130],
                    80: [2, 130],
                    81: [2, 130],
                    85: [2, 130],
                    89: [2, 130],
                    93: [2, 130],
                    97: [2, 130],
                    101: [2, 130],
                    105: [2, 130],
                    148: [2, 130]
                }, {
                    2: [2, 131],
                    14: [2, 131],
                    69: [1, 268],
                    70: [1, 269],
                    71: [1, 270],
                    72: [1, 271],
                    73: [1, 272],
                    74: [1, 273],
                    78: [2, 131],
                    79: [2, 131],
                    80: [2, 131],
                    81: [2, 131],
                    85: [2, 131],
                    89: [2, 131],
                    93: [2, 131],
                    97: [2, 131],
                    101: [2, 131],
                    105: [2, 131],
                    148: [2, 131]
                }, {
                    2: [2, 132],
                    14: [2, 132],
                    69: [1, 268],
                    70: [1, 269],
                    71: [1, 270],
                    72: [1, 271],
                    73: [1, 272],
                    74: [1, 273],
                    78: [2, 132],
                    79: [2, 132],
                    80: [2, 132],
                    81: [2, 132],
                    85: [2, 132],
                    89: [2, 132],
                    93: [2, 132],
                    97: [2, 132],
                    101: [2, 132],
                    105: [2, 132],
                    148: [2, 132]
                }, {
                    2: [2, 133],
                    14: [2, 133],
                    69: [1, 268],
                    70: [1, 269],
                    71: [1, 270],
                    72: [1, 271],
                    73: [1, 272],
                    74: [1, 273],
                    78: [2, 133],
                    79: [2, 133],
                    80: [2, 133],
                    81: [2, 133],
                    85: [2, 133],
                    89: [2, 133],
                    93: [2, 133],
                    97: [2, 133],
                    101: [2, 133],
                    105: [2, 133],
                    148: [2, 133]
                }, {
                    2: [2, 113],
                    14: [2, 113],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 113],
                    70: [2, 113],
                    71: [2, 113],
                    72: [2, 113],
                    73: [2, 113],
                    74: [2, 113],
                    78: [2, 113],
                    79: [2, 113],
                    80: [2, 113],
                    81: [2, 113],
                    85: [2, 113],
                    89: [2, 113],
                    93: [2, 113],
                    97: [2, 113],
                    101: [2, 113],
                    105: [2, 113],
                    148: [2, 113]
                }, {
                    2: [2, 114],
                    14: [2, 114],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 114],
                    70: [2, 114],
                    71: [2, 114],
                    72: [2, 114],
                    73: [2, 114],
                    74: [2, 114],
                    78: [2, 114],
                    79: [2, 114],
                    80: [2, 114],
                    81: [2, 114],
                    85: [2, 114],
                    89: [2, 114],
                    93: [2, 114],
                    97: [2, 114],
                    101: [2, 114],
                    105: [2, 114],
                    148: [2, 114]
                }, {
                    2: [2, 115],
                    14: [2, 115],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 115],
                    70: [2, 115],
                    71: [2, 115],
                    72: [2, 115],
                    73: [2, 115],
                    74: [2, 115],
                    78: [2, 115],
                    79: [2, 115],
                    80: [2, 115],
                    81: [2, 115],
                    85: [2, 115],
                    89: [2, 115],
                    93: [2, 115],
                    97: [2, 115],
                    101: [2, 115],
                    105: [2, 115],
                    148: [2, 115]
                },
                {
                    2: [2, 116],
                    14: [2, 116],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 116],
                    70: [2, 116],
                    71: [2, 116],
                    72: [2, 116],
                    73: [2, 116],
                    74: [2, 116],
                    78: [2, 116],
                    79: [2, 116],
                    80: [2, 116],
                    81: [2, 116],
                    85: [2, 116],
                    89: [2, 116],
                    93: [2, 116],
                    97: [2, 116],
                    101: [2, 116],
                    105: [2, 116],
                    148: [2, 116]
                }, {
                    2: [2, 117],
                    14: [2, 117],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 117],
                    70: [2, 117],
                    71: [2, 117],
                    72: [2, 117],
                    73: [2, 117],
                    74: [2, 117],
                    78: [2, 117],
                    79: [2, 117],
                    80: [2, 117],
                    81: [2, 117],
                    85: [2, 117],
                    89: [2, 117],
                    93: [2, 117],
                    97: [2, 117],
                    101: [2, 117],
                    105: [2, 117],
                    148: [2, 117]
                }, {
                    2: [2, 118],
                    14: [2, 118],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 118],
                    70: [2, 118],
                    71: [2, 118],
                    72: [2, 118],
                    73: [2, 118],
                    74: [2, 118],
                    78: [2, 118],
                    79: [2, 118],
                    80: [2, 118],
                    81: [2, 118],
                    85: [2, 118],
                    89: [2, 118],
                    93: [2, 118],
                    97: [2, 118],
                    101: [2, 118],
                    105: [2, 118],
                    148: [2, 118]
                }, {
                    2: [2, 96],
                    14: [2, 96],
                    51: [1, 277],
                    52: [1, 278],
                    64: [2, 96],
                    65: [2, 96],
                    66: [2, 96],
                    69: [2, 96],
                    70: [2, 96],
                    71: [2, 96],
                    72: [2, 96],
                    73: [2, 96],
                    74: [2, 96],
                    78: [2, 96],
                    79: [2, 96],
                    80: [2, 96],
                    81: [2, 96],
                    85: [2, 96],
                    89: [2, 96],
                    93: [2, 96],
                    97: [2, 96],
                    101: [2, 96],
                    105: [2, 96],
                    148: [2, 96]
                }, {
                    2: [2, 97],
                    14: [2, 97],
                    51: [1, 277],
                    52: [1, 278],
                    64: [2, 97],
                    65: [2, 97],
                    66: [2, 97],
                    69: [2, 97],
                    70: [2, 97],
                    71: [2, 97],
                    72: [2, 97],
                    73: [2, 97],
                    74: [2, 97],
                    78: [2, 97],
                    79: [2, 97],
                    80: [2, 97],
                    81: [2, 97],
                    85: [2, 97],
                    89: [2, 97],
                    93: [2, 97],
                    97: [2, 97],
                    101: [2, 97],
                    105: [2, 97],
                    148: [2, 97]
                }, {
                    2: [2, 98],
                    14: [2, 98],
                    51: [1, 277],
                    52: [1, 278],
                    64: [2, 98],
                    65: [2, 98],
                    66: [2, 98],
                    69: [2, 98],
                    70: [2, 98],
                    71: [2, 98],
                    72: [2, 98],
                    73: [2, 98],
                    74: [2, 98],
                    78: [2, 98],
                    79: [2, 98],
                    80: [2, 98],
                    81: [2, 98],
                    85: [2, 98],
                    89: [2, 98],
                    93: [2, 98],
                    97: [2, 98],
                    101: [2, 98],
                    105: [2, 98],
                    148: [2, 98]
                }, {
                    2: [2, 89],
                    14: [2, 89],
                    51: [2, 89],
                    52: [2, 89],
                    57: [1, 279],
                    58: [1, 280],
                    59: [1, 281],
                    64: [2, 89],
                    65: [2, 89],
                    66: [2, 89],
                    69: [2, 89],
                    70: [2, 89],
                    71: [2, 89],
                    72: [2, 89],
                    73: [2, 89],
                    74: [2, 89],
                    78: [2, 89],
                    79: [2, 89],
                    80: [2, 89],
                    81: [2, 89],
                    85: [2, 89],
                    89: [2, 89],
                    93: [2, 89],
                    97: [2, 89],
                    101: [2, 89],
                    105: [2, 89],
                    148: [2, 89]
                }, {
                    2: [2, 90],
                    14: [2, 90],
                    51: [2, 90],
                    52: [2, 90],
                    57: [1, 279],
                    58: [1, 280],
                    59: [1, 281],
                    64: [2, 90],
                    65: [2, 90],
                    66: [2, 90],
                    69: [2, 90],
                    70: [2, 90],
                    71: [2, 90],
                    72: [2, 90],
                    73: [2, 90],
                    74: [2, 90],
                    78: [2, 90],
                    79: [2, 90],
                    80: [2, 90],
                    81: [2, 90],
                    85: [2, 90],
                    89: [2, 90],
                    93: [2, 90],
                    97: [2, 90],
                    101: [2, 90],
                    105: [2, 90],
                    148: [2, 90]
                }, {
                    2: [2, 82],
                    14: [2, 82],
                    51: [2, 82],
                    52: [2, 82],
                    57: [2, 82],
                    58: [2, 82],
                    59: [2, 82],
                    64: [2, 82],
                    65: [2, 82],
                    66: [2, 82],
                    69: [2, 82],
                    70: [2, 82],
                    71: [2, 82],
                    72: [2, 82],
                    73: [2, 82],
                    74: [2, 82],
                    78: [2, 82],
                    79: [2, 82],
                    80: [2, 82],
                    81: [2, 82],
                    85: [2, 82],
                    89: [2, 82],
                    93: [2, 82],
                    97: [2, 82],
                    101: [2, 82],
                    105: [2, 82],
                    148: [2, 82]
                }, {
                    2: [2, 83],
                    14: [2, 83],
                    51: [2, 83],
                    52: [2, 83],
                    57: [2, 83],
                    58: [2, 83],
                    59: [2, 83],
                    64: [2, 83],
                    65: [2, 83],
                    66: [2, 83],
                    69: [2, 83],
                    70: [2, 83],
                    71: [2, 83],
                    72: [2, 83],
                    73: [2, 83],
                    74: [2, 83],
                    78: [2, 83],
                    79: [2, 83],
                    80: [2, 83],
                    81: [2, 83],
                    85: [2,
                        83
                    ],
                    89: [2, 83],
                    93: [2, 83],
                    97: [2, 83],
                    101: [2, 83],
                    105: [2, 83],
                    148: [2, 83]
                }, {
                    2: [2, 84],
                    14: [2, 84],
                    51: [2, 84],
                    52: [2, 84],
                    57: [2, 84],
                    58: [2, 84],
                    59: [2, 84],
                    64: [2, 84],
                    65: [2, 84],
                    66: [2, 84],
                    69: [2, 84],
                    70: [2, 84],
                    71: [2, 84],
                    72: [2, 84],
                    73: [2, 84],
                    74: [2, 84],
                    78: [2, 84],
                    79: [2, 84],
                    80: [2, 84],
                    81: [2, 84],
                    85: [2, 84],
                    89: [2, 84],
                    93: [2, 84],
                    97: [2, 84],
                    101: [2, 84],
                    105: [2, 84],
                    148: [2, 84]
                }, {
                    2: [2, 219],
                    14: [2, 219],
                    111: [1, 208],
                    148: [2, 219],
                    149: 407
                }, {
                    2: [2, 231],
                    14: [2, 231],
                    148: [2, 231]
                }, {
                    2: [2, 228],
                    14: [2, 228],
                    148: [2, 228]
                }, {
                    17: [1, 408]
                }, {
                    14: [1, 410],
                    23: [1, 409]
                },
                {
                    14: [2, 288],
                    23: [2, 288]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 411,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1,
                        24
                    ],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 412,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 413,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 415,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    148: [2, 246],
                    161: 414,
                    179: [1, 122]
                }, {
                    14: [1, 417],
                    148: [1, 416]
                }, {
                    14: [2, 221],
                    74: [1, 418],
                    111: [1, 420],
                    148: [2, 221],
                    151: 419
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 421,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 423,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 230,
                    82: 229,
                    86: 228,
                    90: 227,
                    94: 226,
                    98: 225,
                    102: 224,
                    106: 223,
                    107: 422,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 423,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 230,
                    82: 229,
                    86: 228,
                    90: 227,
                    94: 226,
                    98: 225,
                    102: 224,
                    106: 223,
                    107: 424,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 423,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 230,
                    82: 229,
                    86: 228,
                    90: 227,
                    94: 226,
                    98: 225,
                    102: 224,
                    106: 223,
                    107: 425,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 230,
                    82: 229,
                    86: 228,
                    90: 227,
                    94: 226,
                    98: 426,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 230,
                    82: 229,
                    86: 228,
                    90: 227,
                    94: 427,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 230,
                    82: 229,
                    86: 228,
                    90: 428,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1,
                        79
                    ],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 230,
                    82: 229,
                    86: 429,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 230,
                    82: 430,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 431,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 432,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 433,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1,
                        115
                    ],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 434,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 435,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1,
                        59
                    ],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 436,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 437,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 438,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 194,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 439,
                    179: [1, 122]
                }, {
                    2: [2, 189],
                    11: [2, 189],
                    14: [2, 189],
                    23: [2, 189],
                    26: [2, 189],
                    148: [2, 189]
                }, {
                    2: [2, 171],
                    11: [2, 171],
                    14: [2, 171],
                    18: [2, 171],
                    23: [2, 171],
                    26: [2, 171],
                    148: [2, 171]
                }, {
                    11: [1, 440]
                }, {
                    2: [2, 159],
                    11: [2, 159],
                    14: [2, 159],
                    18: [2, 159],
                    23: [2, 159],
                    26: [2, 159],
                    97: [1, 247],
                    101: [2, 159],
                    105: [2, 159],
                    148: [2,
                        159
                    ]
                }, {
                    14: [1, 238],
                    26: [1, 441]
                }, {
                    2: [2, 45],
                    11: [2, 45],
                    14: [2, 45],
                    18: [2, 45],
                    21: [2, 45],
                    23: [2, 45],
                    24: [2, 45],
                    26: [2, 45],
                    31: [2, 45],
                    43: [2, 45],
                    44: [2, 45],
                    51: [2, 45],
                    52: [2, 45],
                    57: [2, 45],
                    58: [2, 45],
                    59: [2, 45],
                    64: [2, 45],
                    65: [2, 45],
                    66: [2, 45],
                    69: [2, 45],
                    70: [2, 45],
                    71: [2, 45],
                    72: [2, 45],
                    73: [2, 45],
                    74: [2, 45],
                    78: [2, 45],
                    79: [2, 45],
                    80: [2, 45],
                    81: [2, 45],
                    85: [2, 45],
                    89: [2, 45],
                    93: [2, 45],
                    97: [2, 45],
                    101: [2, 45],
                    105: [2, 45],
                    111: [2, 45],
                    112: [2, 45],
                    113: [2, 45],
                    114: [2, 45],
                    115: [2, 45],
                    116: [2, 45],
                    117: [2, 45],
                    118: [2, 45],
                    119: [2, 45],
                    120: [2, 45],
                    121: [2, 45],
                    122: [2, 45],
                    148: [2, 45]
                }, {
                    2: [2, 153],
                    11: [2, 153],
                    14: [2, 153],
                    18: [2, 153],
                    23: [2, 153],
                    26: [2, 153],
                    93: [1, 253],
                    97: [2, 153],
                    101: [2, 153],
                    105: [2, 153],
                    148: [2, 153]
                }, {
                    14: [1, 238],
                    26: [1, 442]
                }, {
                    2: [2, 32],
                    11: [2, 32],
                    14: [2, 32],
                    18: [2, 32],
                    21: [2, 32],
                    23: [2, 32],
                    24: [2, 32],
                    26: [2, 32],
                    31: [2, 32],
                    43: [2, 32],
                    44: [2, 32],
                    51: [2, 32],
                    52: [2, 32],
                    57: [2, 32],
                    58: [2, 32],
                    59: [2, 32],
                    64: [2, 32],
                    65: [2, 32],
                    66: [2, 32],
                    69: [2, 32],
                    70: [2, 32],
                    71: [2, 32],
                    72: [2, 32],
                    73: [2, 32],
                    74: [2, 32],
                    78: [2, 32],
                    79: [2, 32],
                    80: [2, 32],
                    81: [2, 32],
                    85: [2, 32],
                    89: [2, 32],
                    93: [2, 32],
                    97: [2, 32],
                    101: [2, 32],
                    105: [2, 32],
                    111: [2, 32],
                    112: [2, 32],
                    113: [2, 32],
                    114: [2, 32],
                    115: [2, 32],
                    116: [2, 32],
                    117: [2, 32],
                    118: [2, 32],
                    119: [2, 32],
                    120: [2, 32],
                    121: [2, 32],
                    122: [2, 32],
                    148: [2, 32]
                }, {
                    2: [2, 33],
                    11: [2, 33],
                    14: [2, 33],
                    18: [2, 33],
                    21: [2, 33],
                    23: [2, 33],
                    24: [2, 33],
                    26: [2, 33],
                    31: [2, 33],
                    43: [2, 33],
                    44: [2, 33],
                    51: [2, 33],
                    52: [2, 33],
                    57: [2, 33],
                    58: [2, 33],
                    59: [2, 33],
                    64: [2, 33],
                    65: [2, 33],
                    66: [2, 33],
                    69: [2, 33],
                    70: [2, 33],
                    71: [2, 33],
                    72: [2, 33],
                    73: [2, 33],
                    74: [2, 33],
                    78: [2, 33],
                    79: [2, 33],
                    80: [2, 33],
                    81: [2, 33],
                    85: [2, 33],
                    89: [2, 33],
                    93: [2, 33],
                    97: [2, 33],
                    101: [2,
                        33
                    ],
                    105: [2, 33],
                    111: [2, 33],
                    112: [2, 33],
                    113: [2, 33],
                    114: [2, 33],
                    115: [2, 33],
                    116: [2, 33],
                    117: [2, 33],
                    118: [2, 33],
                    119: [2, 33],
                    120: [2, 33],
                    121: [2, 33],
                    122: [2, 33],
                    148: [2, 33]
                }, {
                    2: [2, 147],
                    11: [2, 147],
                    14: [2, 147],
                    18: [2, 147],
                    23: [2, 147],
                    26: [2, 147],
                    89: [1, 254],
                    93: [2, 147],
                    97: [2, 147],
                    101: [2, 147],
                    105: [2, 147],
                    148: [2, 147]
                }, {
                    2: [2, 141],
                    11: [2, 141],
                    14: [2, 141],
                    18: [2, 141],
                    23: [2, 141],
                    26: [2, 141],
                    85: [1, 263],
                    89: [2, 141],
                    93: [2, 141],
                    97: [2, 141],
                    101: [2, 141],
                    105: [2, 141],
                    148: [2, 141]
                }, {
                    2: [2, 13],
                    11: [2, 13],
                    14: [2, 13],
                    18: [2, 13],
                    21: [2, 13],
                    23: [2, 13],
                    24: [2, 13],
                    26: [2, 13],
                    31: [2, 13],
                    43: [2, 13],
                    44: [2, 13],
                    51: [2, 13],
                    52: [2, 13],
                    57: [2, 13],
                    58: [2, 13],
                    59: [2, 13],
                    64: [2, 13],
                    65: [2, 13],
                    66: [2, 13],
                    69: [2, 13],
                    70: [2, 13],
                    71: [2, 13],
                    72: [2, 13],
                    73: [2, 13],
                    74: [2, 13],
                    78: [2, 13],
                    79: [2, 13],
                    80: [2, 13],
                    81: [2, 13],
                    85: [2, 13],
                    89: [2, 13],
                    93: [2, 13],
                    97: [2, 13],
                    101: [2, 13],
                    105: [2, 13],
                    111: [2, 13],
                    112: [2, 13],
                    113: [2, 13],
                    114: [2, 13],
                    115: [2, 13],
                    116: [2, 13],
                    117: [2, 13],
                    118: [2, 13],
                    119: [2, 13],
                    120: [2, 13],
                    121: [2, 13],
                    122: [2, 13],
                    148: [2, 13]
                }, {
                    7: [1, 260],
                    8: [1, 259],
                    9: 444,
                    10: [1, 258],
                    18: [1, 443]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 445,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 446,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 447,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1,
                        79
                    ],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    17: [1, 448]
                }, {
                    14: [1, 410],
                    23: [1, 449]
                }, {
                    10: [1, 333],
                    23: [1, 450],
                    181: 451
                }, {
                    2: [2, 135],
                    11: [2, 135],
                    14: [2, 135],
                    18: [2, 135],
                    23: [2, 135],
                    26: [2, 135],
                    78: [1, 264],
                    79: [1, 265],
                    80: [1, 266],
                    81: [1, 267],
                    85: [2, 135],
                    89: [2, 135],
                    93: [2, 135],
                    97: [2, 135],
                    101: [2, 135],
                    105: [2, 135],
                    148: [2, 135]
                }, {
                    2: [2, 120],
                    11: [2, 120],
                    14: [2, 120],
                    18: [2, 120],
                    23: [2, 120],
                    26: [2, 120],
                    69: [1, 268],
                    70: [1, 269],
                    71: [1, 270],
                    72: [1, 271],
                    73: [1, 272],
                    74: [1,
                        273
                    ],
                    78: [2, 120],
                    79: [2, 120],
                    80: [2, 120],
                    81: [2, 120],
                    85: [2, 120],
                    89: [2, 120],
                    93: [2, 120],
                    97: [2, 120],
                    101: [2, 120],
                    105: [2, 120],
                    148: [2, 120]
                }, {
                    2: [2, 121],
                    11: [2, 121],
                    14: [2, 121],
                    18: [2, 121],
                    23: [2, 121],
                    26: [2, 121],
                    69: [1, 268],
                    70: [1, 269],
                    71: [1, 270],
                    72: [1, 271],
                    73: [1, 272],
                    74: [1, 273],
                    78: [2, 121],
                    79: [2, 121],
                    80: [2, 121],
                    81: [2, 121],
                    85: [2, 121],
                    89: [2, 121],
                    93: [2, 121],
                    97: [2, 121],
                    101: [2, 121],
                    105: [2, 121],
                    148: [2, 121]
                }, {
                    2: [2, 122],
                    11: [2, 122],
                    14: [2, 122],
                    18: [2, 122],
                    23: [2, 122],
                    26: [2, 122],
                    69: [1, 268],
                    70: [1, 269],
                    71: [1, 270],
                    72: [1, 271],
                    73: [1,
                        272
                    ],
                    74: [1, 273],
                    78: [2, 122],
                    79: [2, 122],
                    80: [2, 122],
                    81: [2, 122],
                    85: [2, 122],
                    89: [2, 122],
                    93: [2, 122],
                    97: [2, 122],
                    101: [2, 122],
                    105: [2, 122],
                    148: [2, 122]
                }, {
                    2: [2, 123],
                    11: [2, 123],
                    14: [2, 123],
                    18: [2, 123],
                    23: [2, 123],
                    26: [2, 123],
                    69: [1, 268],
                    70: [1, 269],
                    71: [1, 270],
                    72: [1, 271],
                    73: [1, 272],
                    74: [1, 273],
                    78: [2, 123],
                    79: [2, 123],
                    80: [2, 123],
                    81: [2, 123],
                    85: [2, 123],
                    89: [2, 123],
                    93: [2, 123],
                    97: [2, 123],
                    101: [2, 123],
                    105: [2, 123],
                    148: [2, 123]
                }, {
                    2: [2, 100],
                    11: [2, 100],
                    14: [2, 100],
                    18: [2, 100],
                    23: [2, 100],
                    26: [2, 100],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2,
                        100
                    ],
                    70: [2, 100],
                    71: [2, 100],
                    72: [2, 100],
                    73: [2, 100],
                    74: [2, 100],
                    78: [2, 100],
                    79: [2, 100],
                    80: [2, 100],
                    81: [2, 100],
                    85: [2, 100],
                    89: [2, 100],
                    93: [2, 100],
                    97: [2, 100],
                    101: [2, 100],
                    105: [2, 100],
                    148: [2, 100]
                }, {
                    2: [2, 101],
                    11: [2, 101],
                    14: [2, 101],
                    18: [2, 101],
                    23: [2, 101],
                    26: [2, 101],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 101],
                    70: [2, 101],
                    71: [2, 101],
                    72: [2, 101],
                    73: [2, 101],
                    74: [2, 101],
                    78: [2, 101],
                    79: [2, 101],
                    80: [2, 101],
                    81: [2, 101],
                    85: [2, 101],
                    89: [2, 101],
                    93: [2, 101],
                    97: [2, 101],
                    101: [2, 101],
                    105: [2, 101],
                    148: [2, 101]
                }, {
                    2: [2, 102],
                    11: [2, 102],
                    14: [2,
                        102
                    ],
                    18: [2, 102],
                    23: [2, 102],
                    26: [2, 102],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 102],
                    70: [2, 102],
                    71: [2, 102],
                    72: [2, 102],
                    73: [2, 102],
                    74: [2, 102],
                    78: [2, 102],
                    79: [2, 102],
                    80: [2, 102],
                    81: [2, 102],
                    85: [2, 102],
                    89: [2, 102],
                    93: [2, 102],
                    97: [2, 102],
                    101: [2, 102],
                    105: [2, 102],
                    148: [2, 102]
                }, {
                    2: [2, 103],
                    11: [2, 103],
                    14: [2, 103],
                    18: [2, 103],
                    23: [2, 103],
                    26: [2, 103],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 103],
                    70: [2, 103],
                    71: [2, 103],
                    72: [2, 103],
                    73: [2, 103],
                    74: [2, 103],
                    78: [2, 103],
                    79: [2, 103],
                    80: [2, 103],
                    81: [2, 103],
                    85: [2, 103],
                    89: [2, 103],
                    93: [2, 103],
                    97: [2, 103],
                    101: [2, 103],
                    105: [2, 103],
                    148: [2, 103]
                }, {
                    2: [2, 104],
                    11: [2, 104],
                    14: [2, 104],
                    18: [2, 104],
                    23: [2, 104],
                    26: [2, 104],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 104],
                    70: [2, 104],
                    71: [2, 104],
                    72: [2, 104],
                    73: [2, 104],
                    74: [2, 104],
                    78: [2, 104],
                    79: [2, 104],
                    80: [2, 104],
                    81: [2, 104],
                    85: [2, 104],
                    89: [2, 104],
                    93: [2, 104],
                    97: [2, 104],
                    101: [2, 104],
                    105: [2, 104],
                    148: [2, 104]
                }, {
                    2: [2, 105],
                    11: [2, 105],
                    14: [2, 105],
                    18: [2, 105],
                    23: [2, 105],
                    26: [2, 105],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 105],
                    70: [2, 105],
                    71: [2, 105],
                    72: [2, 105],
                    73: [2, 105],
                    74: [2, 105],
                    78: [2, 105],
                    79: [2, 105],
                    80: [2, 105],
                    81: [2, 105],
                    85: [2, 105],
                    89: [2, 105],
                    93: [2, 105],
                    97: [2, 105],
                    101: [2, 105],
                    105: [2, 105],
                    148: [2, 105]
                }, {
                    2: [2, 92],
                    11: [2, 92],
                    14: [2, 92],
                    18: [2, 92],
                    23: [2, 92],
                    26: [2, 92],
                    51: [1, 277],
                    52: [1, 278],
                    64: [2, 92],
                    65: [2, 92],
                    66: [2, 92],
                    69: [2, 92],
                    70: [2, 92],
                    71: [2, 92],
                    72: [2, 92],
                    73: [2, 92],
                    74: [2, 92],
                    78: [2, 92],
                    79: [2, 92],
                    80: [2, 92],
                    81: [2, 92],
                    85: [2, 92],
                    89: [2, 92],
                    93: [2, 92],
                    97: [2, 92],
                    101: [2, 92],
                    105: [2, 92],
                    148: [2, 92]
                }, {
                    2: [2, 93],
                    11: [2, 93],
                    14: [2, 93],
                    18: [2, 93],
                    23: [2, 93],
                    26: [2, 93],
                    51: [1, 277],
                    52: [1, 278],
                    64: [2, 93],
                    65: [2, 93],
                    66: [2, 93],
                    69: [2, 93],
                    70: [2, 93],
                    71: [2, 93],
                    72: [2, 93],
                    73: [2, 93],
                    74: [2, 93],
                    78: [2, 93],
                    79: [2, 93],
                    80: [2, 93],
                    81: [2, 93],
                    85: [2, 93],
                    89: [2, 93],
                    93: [2, 93],
                    97: [2, 93],
                    101: [2, 93],
                    105: [2, 93],
                    148: [2, 93]
                }, {
                    2: [2, 94],
                    11: [2, 94],
                    14: [2, 94],
                    18: [2, 94],
                    23: [2, 94],
                    26: [2, 94],
                    51: [1, 277],
                    52: [1, 278],
                    64: [2, 94],
                    65: [2, 94],
                    66: [2, 94],
                    69: [2, 94],
                    70: [2, 94],
                    71: [2, 94],
                    72: [2, 94],
                    73: [2, 94],
                    74: [2, 94],
                    78: [2, 94],
                    79: [2, 94],
                    80: [2, 94],
                    81: [2, 94],
                    85: [2, 94],
                    89: [2, 94],
                    93: [2, 94],
                    97: [2, 94],
                    101: [2, 94],
                    105: [2, 94],
                    148: [2, 94]
                }, {
                    2: [2, 86],
                    11: [2, 86],
                    14: [2,
                        86
                    ],
                    18: [2, 86],
                    23: [2, 86],
                    26: [2, 86],
                    51: [2, 86],
                    52: [2, 86],
                    57: [1, 279],
                    58: [1, 280],
                    59: [1, 281],
                    64: [2, 86],
                    65: [2, 86],
                    66: [2, 86],
                    69: [2, 86],
                    70: [2, 86],
                    71: [2, 86],
                    72: [2, 86],
                    73: [2, 86],
                    74: [2, 86],
                    78: [2, 86],
                    79: [2, 86],
                    80: [2, 86],
                    81: [2, 86],
                    85: [2, 86],
                    89: [2, 86],
                    93: [2, 86],
                    97: [2, 86],
                    101: [2, 86],
                    105: [2, 86],
                    148: [2, 86]
                }, {
                    2: [2, 87],
                    11: [2, 87],
                    14: [2, 87],
                    18: [2, 87],
                    23: [2, 87],
                    26: [2, 87],
                    51: [2, 87],
                    52: [2, 87],
                    57: [1, 279],
                    58: [1, 280],
                    59: [1, 281],
                    64: [2, 87],
                    65: [2, 87],
                    66: [2, 87],
                    69: [2, 87],
                    70: [2, 87],
                    71: [2, 87],
                    72: [2, 87],
                    73: [2, 87],
                    74: [2, 87],
                    78: [2, 87],
                    79: [2, 87],
                    80: [2, 87],
                    81: [2, 87],
                    85: [2, 87],
                    89: [2, 87],
                    93: [2, 87],
                    97: [2, 87],
                    101: [2, 87],
                    105: [2, 87],
                    148: [2, 87]
                }, {
                    2: [2, 78],
                    11: [2, 78],
                    14: [2, 78],
                    18: [2, 78],
                    23: [2, 78],
                    26: [2, 78],
                    51: [2, 78],
                    52: [2, 78],
                    57: [2, 78],
                    58: [2, 78],
                    59: [2, 78],
                    64: [2, 78],
                    65: [2, 78],
                    66: [2, 78],
                    69: [2, 78],
                    70: [2, 78],
                    71: [2, 78],
                    72: [2, 78],
                    73: [2, 78],
                    74: [2, 78],
                    78: [2, 78],
                    79: [2, 78],
                    80: [2, 78],
                    81: [2, 78],
                    85: [2, 78],
                    89: [2, 78],
                    93: [2, 78],
                    97: [2, 78],
                    101: [2, 78],
                    105: [2, 78],
                    148: [2, 78]
                }, {
                    2: [2, 79],
                    11: [2, 79],
                    14: [2, 79],
                    18: [2, 79],
                    23: [2, 79],
                    26: [2, 79],
                    51: [2, 79],
                    52: [2, 79],
                    57: [2,
                        79
                    ],
                    58: [2, 79],
                    59: [2, 79],
                    64: [2, 79],
                    65: [2, 79],
                    66: [2, 79],
                    69: [2, 79],
                    70: [2, 79],
                    71: [2, 79],
                    72: [2, 79],
                    73: [2, 79],
                    74: [2, 79],
                    78: [2, 79],
                    79: [2, 79],
                    80: [2, 79],
                    81: [2, 79],
                    85: [2, 79],
                    89: [2, 79],
                    93: [2, 79],
                    97: [2, 79],
                    101: [2, 79],
                    105: [2, 79],
                    148: [2, 79]
                }, {
                    2: [2, 80],
                    11: [2, 80],
                    14: [2, 80],
                    18: [2, 80],
                    23: [2, 80],
                    26: [2, 80],
                    51: [2, 80],
                    52: [2, 80],
                    57: [2, 80],
                    58: [2, 80],
                    59: [2, 80],
                    64: [2, 80],
                    65: [2, 80],
                    66: [2, 80],
                    69: [2, 80],
                    70: [2, 80],
                    71: [2, 80],
                    72: [2, 80],
                    73: [2, 80],
                    74: [2, 80],
                    78: [2, 80],
                    79: [2, 80],
                    80: [2, 80],
                    81: [2, 80],
                    85: [2, 80],
                    89: [2, 80],
                    93: [2, 80],
                    97: [2,
                        80
                    ],
                    101: [2, 80],
                    105: [2, 80],
                    148: [2, 80]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 452,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    17: [1, 454],
                    167: 453
                }, {
                    1: [2, 277],
                    4: [2, 277],
                    5: [2, 277],
                    6: [2, 277],
                    7: [2, 277],
                    8: [2, 277],
                    10: [2, 277],
                    17: [2, 277],
                    18: [2, 277],
                    19: [2, 277],
                    21: [2, 277],
                    24: [2, 277],
                    32: [2, 277],
                    43: [2, 277],
                    44: [2, 277],
                    47: [2, 277],
                    49: [2, 277],
                    50: [2, 277],
                    51: [2, 277],
                    52: [2, 277],
                    53: [2, 277],
                    54: [2, 277],
                    144: [2, 277],
                    146: [2, 277],
                    148: [2, 277],
                    152: [2, 277],
                    155: [2,
                        277
                    ],
                    156: [2, 277],
                    157: [2, 277],
                    158: [2, 277],
                    159: [2, 277],
                    162: [2, 277],
                    163: [2, 277],
                    164: [2, 277],
                    165: [2, 277],
                    166: [2, 277],
                    172: [2, 277],
                    173: [2, 277],
                    174: [2, 277],
                    175: [2, 277],
                    178: [2, 277],
                    179: [2, 277]
                }, {
                    10: [1, 455]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 456,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    2: [2, 48],
                    14: [2, 48],
                    21: [2, 48],
                    24: [2, 48],
                    31: [2, 48],
                    43: [2, 48],
                    44: [2, 48],
                    51: [2, 48],
                    52: [2, 48],
                    57: [2, 48],
                    58: [2, 48],
                    59: [2, 48],
                    64: [2, 48],
                    65: [2, 48],
                    66: [2, 48],
                    69: [2, 48],
                    70: [2, 48],
                    71: [2, 48],
                    72: [2, 48],
                    73: [2, 48],
                    74: [2, 48],
                    78: [2, 48],
                    79: [2, 48],
                    80: [2, 48],
                    81: [2, 48],
                    85: [2, 48],
                    89: [2, 48],
                    93: [2, 48],
                    97: [2, 48],
                    101: [2, 48],
                    105: [2, 48],
                    111: [2, 48],
                    112: [2, 48],
                    113: [2, 48],
                    114: [2, 48],
                    115: [2, 48],
                    116: [2, 48],
                    117: [2, 48],
                    118: [2, 48],
                    119: [2, 48],
                    120: [2, 48],
                    121: [2, 48],
                    122: [2, 48],
                    148: [2, 48]
                }, {
                    2: [2, 51],
                    11: [2, 51],
                    14: [2, 51],
                    18: [2, 51],
                    21: [2, 51],
                    23: [2, 51],
                    24: [2, 51],
                    26: [2, 51],
                    31: [2, 51],
                    43: [2, 51],
                    44: [2, 51],
                    51: [2, 51],
                    52: [2, 51],
                    57: [2, 51],
                    58: [2, 51],
                    59: [2, 51],
                    64: [2, 51],
                    65: [2, 51],
                    66: [2, 51],
                    69: [2, 51],
                    70: [2, 51],
                    71: [2, 51],
                    72: [2, 51],
                    73: [2, 51],
                    74: [2, 51],
                    78: [2, 51],
                    79: [2, 51],
                    80: [2, 51],
                    81: [2, 51],
                    85: [2, 51],
                    89: [2, 51],
                    93: [2, 51],
                    97: [2, 51],
                    101: [2, 51],
                    105: [2, 51],
                    111: [2, 51],
                    112: [2, 51],
                    113: [2, 51],
                    114: [2, 51],
                    115: [2, 51],
                    116: [2, 51],
                    117: [2, 51],
                    118: [2, 51],
                    119: [2, 51],
                    120: [2, 51],
                    121: [2, 51],
                    122: [2,
                        51
                    ],
                    148: [2, 51]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 457,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    2: [2, 35],
                    14: [2, 35],
                    21: [2, 35],
                    24: [2, 35],
                    31: [2, 35],
                    43: [2, 35],
                    44: [2, 35],
                    51: [2, 35],
                    52: [2, 35],
                    57: [2, 35],
                    58: [2,
                        35
                    ],
                    59: [2, 35],
                    64: [2, 35],
                    65: [2, 35],
                    66: [2, 35],
                    69: [2, 35],
                    70: [2, 35],
                    71: [2, 35],
                    72: [2, 35],
                    73: [2, 35],
                    74: [2, 35],
                    78: [2, 35],
                    79: [2, 35],
                    80: [2, 35],
                    81: [2, 35],
                    85: [2, 35],
                    89: [2, 35],
                    93: [2, 35],
                    97: [2, 35],
                    101: [2, 35],
                    105: [2, 35],
                    111: [2, 35],
                    112: [2, 35],
                    113: [2, 35],
                    114: [2, 35],
                    115: [2, 35],
                    116: [2, 35],
                    117: [2, 35],
                    118: [2, 35],
                    119: [2, 35],
                    120: [2, 35],
                    121: [2, 35],
                    122: [2, 35],
                    148: [2, 35]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 459,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    26: [1, 458],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    2: [2, 220],
                    14: [2, 220],
                    148: [2, 220]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    18: [2, 290],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1,
                        79
                    ],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 3,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    145: 461,
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26],
                    180: 460
                }, {
                    17: [1, 462]
                }, {
                    10: [1, 463]
                }, {
                    1: [2, 236],
                    4: [2, 236],
                    5: [2, 236],
                    6: [2,
                        236
                    ],
                    7: [2, 236],
                    8: [2, 236],
                    10: [2, 236],
                    17: [2, 236],
                    18: [2, 236],
                    19: [2, 236],
                    21: [2, 236],
                    24: [2, 236],
                    32: [2, 236],
                    43: [2, 236],
                    44: [2, 236],
                    47: [2, 236],
                    49: [2, 236],
                    50: [2, 236],
                    51: [2, 236],
                    52: [2, 236],
                    53: [2, 236],
                    54: [2, 236],
                    144: [2, 236],
                    146: [2, 236],
                    148: [2, 236],
                    152: [2, 236],
                    155: [2, 236],
                    156: [1, 464],
                    157: [2, 236],
                    158: [2, 236],
                    159: [2, 236],
                    162: [2, 236],
                    163: [2, 236],
                    164: [2, 236],
                    165: [2, 236],
                    166: [2, 236],
                    172: [2, 236],
                    173: [2, 236],
                    174: [2, 236],
                    175: [2, 236],
                    178: [2, 236],
                    179: [2, 236]
                }, {
                    14: [1, 238],
                    23: [1, 465]
                }, {
                    1: [2, 240],
                    4: [2, 240],
                    5: [2, 240],
                    6: [2,
                        240
                    ],
                    7: [2, 240],
                    8: [2, 240],
                    10: [2, 240],
                    17: [2, 240],
                    18: [2, 240],
                    19: [2, 240],
                    21: [2, 240],
                    24: [2, 240],
                    32: [2, 240],
                    43: [2, 240],
                    44: [2, 240],
                    47: [2, 240],
                    49: [2, 240],
                    50: [2, 240],
                    51: [2, 240],
                    52: [2, 240],
                    53: [2, 240],
                    54: [2, 240],
                    144: [2, 240],
                    146: [2, 240],
                    148: [2, 240],
                    152: [2, 240],
                    155: [2, 240],
                    156: [2, 240],
                    157: [2, 240],
                    158: [2, 240],
                    159: [2, 240],
                    162: [2, 240],
                    163: [2, 240],
                    164: [2, 240],
                    165: [2, 240],
                    166: [2, 240],
                    172: [2, 240],
                    173: [2, 240],
                    174: [2, 240],
                    175: [2, 240],
                    178: [2, 240],
                    179: [2, 240]
                }, {
                    148: [1, 466]
                }, {
                    14: [1, 238],
                    23: [2, 247],
                    148: [2, 247]
                }, {
                    3: 55,
                    4: [1,
                        59
                    ],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 415,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    148: [2, 246],
                    161: 467,
                    179: [1, 122]
                }, {
                    10: [1, 468]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 469,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    14: [2, 222],
                    74: [1, 470],
                    148: [2, 222]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 423,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 230,
                    82: 229,
                    86: 228,
                    90: 227,
                    94: 226,
                    98: 225,
                    102: 224,
                    106: 223,
                    107: 471,
                    179: [1, 122]
                }, {
                    14: [1, 238],
                    23: [1, 472]
                }, {
                    11: [2, 173],
                    14: [2, 173],
                    74: [2, 173],
                    148: [2, 173]
                }, {
                    11: [2, 58],
                    14: [2, 58],
                    43: [1, 240],
                    44: [1, 241],
                    51: [2, 58],
                    52: [2, 58],
                    57: [2, 58],
                    58: [2, 58],
                    59: [2, 58],
                    64: [2, 58],
                    65: [2, 58],
                    66: [2, 58],
                    69: [2, 58],
                    70: [2, 58],
                    71: [2, 58],
                    72: [2, 58],
                    73: [2, 58],
                    74: [2, 58],
                    78: [2, 58],
                    79: [2, 58],
                    80: [2, 58],
                    81: [2, 58],
                    85: [2,
                        58
                    ],
                    89: [2, 58],
                    93: [2, 58],
                    97: [2, 58],
                    101: [2, 58],
                    105: [2, 58],
                    109: 341,
                    111: [1, 143],
                    112: [1, 144],
                    113: [1, 145],
                    114: [1, 146],
                    115: [1, 147],
                    116: [1, 148],
                    117: [1, 149],
                    118: [1, 150],
                    119: [1, 151],
                    120: [1, 152],
                    121: [1, 153],
                    122: [1, 154],
                    148: [2, 58]
                }, {
                    14: [2, 191],
                    148: [2, 191]
                }, {
                    11: [1, 473]
                }, {
                    11: [2, 161],
                    14: [2, 161],
                    74: [2, 161],
                    97: [1, 345],
                    101: [2, 161],
                    105: [2, 161],
                    148: [2, 161]
                }, {
                    11: [2, 155],
                    14: [2, 155],
                    74: [2, 155],
                    93: [1, 346],
                    97: [2, 155],
                    101: [2, 155],
                    105: [2, 155],
                    148: [2, 155]
                }, {
                    11: [2, 149],
                    14: [2, 149],
                    74: [2, 149],
                    89: [1, 347],
                    93: [2, 149],
                    97: [2, 149],
                    101: [2,
                        149
                    ],
                    105: [2, 149],
                    148: [2, 149]
                }, {
                    11: [2, 143],
                    14: [2, 143],
                    74: [2, 143],
                    85: [1, 348],
                    89: [2, 143],
                    93: [2, 143],
                    97: [2, 143],
                    101: [2, 143],
                    105: [2, 143],
                    148: [2, 143]
                }, {
                    11: [2, 137],
                    14: [2, 137],
                    74: [2, 137],
                    78: [1, 349],
                    79: [1, 350],
                    80: [1, 351],
                    81: [1, 352],
                    85: [2, 137],
                    89: [2, 137],
                    93: [2, 137],
                    97: [2, 137],
                    101: [2, 137],
                    105: [2, 137],
                    148: [2, 137]
                }, {
                    11: [2, 125],
                    14: [2, 125],
                    69: [1, 353],
                    70: [1, 354],
                    71: [1, 355],
                    72: [1, 356],
                    73: [1, 357],
                    74: [2, 125],
                    78: [2, 125],
                    79: [2, 125],
                    80: [2, 125],
                    81: [2, 125],
                    85: [2, 125],
                    89: [2, 125],
                    93: [2, 125],
                    97: [2, 125],
                    101: [2, 125],
                    105: [2, 125],
                    148: [2, 125]
                }, {
                    11: [2, 126],
                    14: [2, 126],
                    69: [1, 353],
                    70: [1, 354],
                    71: [1, 355],
                    72: [1, 356],
                    73: [1, 357],
                    74: [2, 126],
                    78: [2, 126],
                    79: [2, 126],
                    80: [2, 126],
                    81: [2, 126],
                    85: [2, 126],
                    89: [2, 126],
                    93: [2, 126],
                    97: [2, 126],
                    101: [2, 126],
                    105: [2, 126],
                    148: [2, 126]
                }, {
                    11: [2, 127],
                    14: [2, 127],
                    69: [1, 353],
                    70: [1, 354],
                    71: [1, 355],
                    72: [1, 356],
                    73: [1, 357],
                    74: [2, 127],
                    78: [2, 127],
                    79: [2, 127],
                    80: [2, 127],
                    81: [2, 127],
                    85: [2, 127],
                    89: [2, 127],
                    93: [2, 127],
                    97: [2, 127],
                    101: [2, 127],
                    105: [2, 127],
                    148: [2, 127]
                }, {
                    11: [2, 128],
                    14: [2, 128],
                    69: [1, 353],
                    70: [1, 354],
                    71: [1, 355],
                    72: [1,
                        356
                    ],
                    73: [1, 357],
                    74: [2, 128],
                    78: [2, 128],
                    79: [2, 128],
                    80: [2, 128],
                    81: [2, 128],
                    85: [2, 128],
                    89: [2, 128],
                    93: [2, 128],
                    97: [2, 128],
                    101: [2, 128],
                    105: [2, 128],
                    148: [2, 128]
                }, {
                    11: [2, 107],
                    14: [2, 107],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 107],
                    70: [2, 107],
                    71: [2, 107],
                    72: [2, 107],
                    73: [2, 107],
                    74: [2, 107],
                    78: [2, 107],
                    79: [2, 107],
                    80: [2, 107],
                    81: [2, 107],
                    85: [2, 107],
                    89: [2, 107],
                    93: [2, 107],
                    97: [2, 107],
                    101: [2, 107],
                    105: [2, 107],
                    148: [2, 107]
                }, {
                    11: [2, 108],
                    14: [2, 108],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 108],
                    70: [2, 108],
                    71: [2, 108],
                    72: [2, 108],
                    73: [2,
                        108
                    ],
                    74: [2, 108],
                    78: [2, 108],
                    79: [2, 108],
                    80: [2, 108],
                    81: [2, 108],
                    85: [2, 108],
                    89: [2, 108],
                    93: [2, 108],
                    97: [2, 108],
                    101: [2, 108],
                    105: [2, 108],
                    148: [2, 108]
                }, {
                    11: [2, 109],
                    14: [2, 109],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 109],
                    70: [2, 109],
                    71: [2, 109],
                    72: [2, 109],
                    73: [2, 109],
                    74: [2, 109],
                    78: [2, 109],
                    79: [2, 109],
                    80: [2, 109],
                    81: [2, 109],
                    85: [2, 109],
                    89: [2, 109],
                    93: [2, 109],
                    97: [2, 109],
                    101: [2, 109],
                    105: [2, 109],
                    148: [2, 109]
                }, {
                    11: [2, 110],
                    14: [2, 110],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 110],
                    70: [2, 110],
                    71: [2, 110],
                    72: [2, 110],
                    73: [2, 110],
                    74: [2,
                        110
                    ],
                    78: [2, 110],
                    79: [2, 110],
                    80: [2, 110],
                    81: [2, 110],
                    85: [2, 110],
                    89: [2, 110],
                    93: [2, 110],
                    97: [2, 110],
                    101: [2, 110],
                    105: [2, 110],
                    148: [2, 110]
                }, {
                    11: [2, 111],
                    14: [2, 111],
                    64: [1, 274],
                    65: [1, 275],
                    66: [1, 276],
                    69: [2, 111],
                    70: [2, 111],
                    71: [2, 111],
                    72: [2, 111],
                    73: [2, 111],
                    74: [2, 111],
                    78: [2, 111],
                    79: [2, 111],
                    80: [2, 111],
                    81: [2, 111],
                    85: [2, 111],
                    89: [2, 111],
                    93: [2, 111],
                    97: [2, 111],
                    101: [2, 111],
                    105: [2, 111],
                    148: [2, 111]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 474,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1,
                        64
                    ],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    2: [2, 44],
                    11: [2, 44],
                    14: [2, 44],
                    18: [2, 44],
                    21: [2, 44],
                    23: [2, 44],
                    24: [2, 44],
                    26: [2, 44],
                    31: [2, 44],
                    43: [2, 44],
                    44: [2, 44],
                    51: [2, 44],
                    52: [2, 44],
                    57: [2, 44],
                    58: [2, 44],
                    59: [2, 44],
                    64: [2, 44],
                    65: [2, 44],
                    66: [2, 44],
                    69: [2, 44],
                    70: [2, 44],
                    71: [2, 44],
                    72: [2, 44],
                    73: [2, 44],
                    74: [2, 44],
                    78: [2, 44],
                    79: [2, 44],
                    80: [2, 44],
                    81: [2, 44],
                    85: [2, 44],
                    89: [2, 44],
                    93: [2, 44],
                    97: [2, 44],
                    101: [2, 44],
                    105: [2, 44],
                    111: [2, 44],
                    112: [2, 44],
                    113: [2, 44],
                    114: [2, 44],
                    115: [2, 44],
                    116: [2, 44],
                    117: [2, 44],
                    118: [2, 44],
                    119: [2, 44],
                    120: [2, 44],
                    121: [2, 44],
                    122: [2, 44],
                    148: [2, 44]
                }, {
                    2: [2, 31],
                    11: [2, 31],
                    14: [2, 31],
                    18: [2, 31],
                    21: [2, 31],
                    23: [2, 31],
                    24: [2, 31],
                    26: [2, 31],
                    31: [2, 31],
                    43: [2, 31],
                    44: [2, 31],
                    51: [2, 31],
                    52: [2, 31],
                    57: [2, 31],
                    58: [2, 31],
                    59: [2, 31],
                    64: [2, 31],
                    65: [2, 31],
                    66: [2, 31],
                    69: [2, 31],
                    70: [2, 31],
                    71: [2, 31],
                    72: [2, 31],
                    73: [2, 31],
                    74: [2, 31],
                    78: [2,
                        31
                    ],
                    79: [2, 31],
                    80: [2, 31],
                    81: [2, 31],
                    85: [2, 31],
                    89: [2, 31],
                    93: [2, 31],
                    97: [2, 31],
                    101: [2, 31],
                    105: [2, 31],
                    111: [2, 31],
                    112: [2, 31],
                    113: [2, 31],
                    114: [2, 31],
                    115: [2, 31],
                    116: [2, 31],
                    117: [2, 31],
                    118: [2, 31],
                    119: [2, 31],
                    120: [2, 31],
                    121: [2, 31],
                    122: [2, 31],
                    148: [2, 31]
                }, {
                    2: [2, 14],
                    11: [2, 14],
                    14: [2, 14],
                    18: [2, 14],
                    21: [2, 14],
                    23: [2, 14],
                    24: [2, 14],
                    26: [2, 14],
                    31: [2, 14],
                    43: [2, 14],
                    44: [2, 14],
                    51: [2, 14],
                    52: [2, 14],
                    57: [2, 14],
                    58: [2, 14],
                    59: [2, 14],
                    64: [2, 14],
                    65: [2, 14],
                    66: [2, 14],
                    69: [2, 14],
                    70: [2, 14],
                    71: [2, 14],
                    72: [2, 14],
                    73: [2, 14],
                    74: [2, 14],
                    78: [2, 14],
                    79: [2,
                        14
                    ],
                    80: [2, 14],
                    81: [2, 14],
                    85: [2, 14],
                    89: [2, 14],
                    93: [2, 14],
                    97: [2, 14],
                    101: [2, 14],
                    105: [2, 14],
                    111: [2, 14],
                    112: [2, 14],
                    113: [2, 14],
                    114: [2, 14],
                    115: [2, 14],
                    116: [2, 14],
                    117: [2, 14],
                    118: [2, 14],
                    119: [2, 14],
                    120: [2, 14],
                    121: [2, 14],
                    122: [2, 14],
                    148: [2, 14]
                }, {
                    14: [2, 10],
                    18: [2, 10]
                }, {
                    14: [2, 6],
                    18: [2, 6]
                }, {
                    14: [2, 7],
                    18: [2, 7]
                }, {
                    14: [2, 8],
                    18: [2, 8]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    18: [2, 290],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 3,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    145: 461,
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26],
                    180: 475
                }, {
                    17: [1, 476]
                },
                {
                    17: [1, 477]
                }, {
                    14: [1, 410],
                    23: [1, 478]
                }, {
                    1: [2, 262],
                    4: [2, 262],
                    5: [2, 262],
                    6: [2, 262],
                    7: [2, 262],
                    8: [2, 262],
                    10: [2, 262],
                    17: [2, 262],
                    18: [2, 262],
                    19: [2, 262],
                    21: [2, 262],
                    24: [2, 262],
                    32: [2, 262],
                    43: [2, 262],
                    44: [2, 262],
                    47: [2, 262],
                    49: [2, 262],
                    50: [2, 262],
                    51: [2, 262],
                    52: [2, 262],
                    53: [2, 262],
                    54: [2, 262],
                    144: [2, 262],
                    146: [2, 262],
                    148: [2, 262],
                    152: [2, 262],
                    155: [2, 262],
                    156: [2, 262],
                    157: [2, 262],
                    158: [2, 262],
                    159: [2, 262],
                    162: [2, 262],
                    163: [2, 262],
                    164: [2, 262],
                    165: [2, 262],
                    166: [2, 262],
                    172: [2, 262],
                    173: [2, 262],
                    174: [2, 262],
                    175: [2, 262],
                    178: [2, 262],
                    179: [2, 262]
                }, {
                    1: [2, 263],
                    4: [2, 263],
                    5: [2, 263],
                    6: [2, 263],
                    7: [2, 263],
                    8: [2, 263],
                    10: [2, 263],
                    17: [2, 263],
                    18: [2, 263],
                    19: [2, 263],
                    21: [2, 263],
                    24: [2, 263],
                    32: [2, 263],
                    43: [2, 263],
                    44: [2, 263],
                    47: [2, 263],
                    49: [2, 263],
                    50: [2, 263],
                    51: [2, 263],
                    52: [2, 263],
                    53: [2, 263],
                    54: [2, 263],
                    144: [2, 263],
                    146: [2, 263],
                    148: [2, 263],
                    152: [2, 263],
                    155: [2, 263],
                    156: [2, 263],
                    157: [2, 263],
                    158: [2, 263],
                    159: [2, 263],
                    162: [2, 263],
                    163: [2, 263],
                    164: [2, 263],
                    165: [2, 263],
                    166: [2, 263],
                    172: [2, 263],
                    173: [2, 263],
                    174: [2, 263],
                    175: [2, 263],
                    178: [2, 263],
                    179: [2, 263]
                }, {
                    18: [2, 266],
                    168: 479,
                    170: 480,
                    171: 481,
                    172: [1, 482],
                    173: [2, 266]
                }, {
                    23: [1, 483]
                }, {
                    2: [2, 169],
                    14: [2, 169],
                    148: [2, 169]
                }, {
                    14: [2, 53],
                    23: [2, 53]
                }, {
                    2: [2, 22],
                    11: [2, 22],
                    14: [2, 22],
                    18: [2, 22],
                    21: [2, 22],
                    23: [2, 22],
                    24: [2, 22],
                    26: [2, 22],
                    31: [2, 22],
                    43: [2, 22],
                    44: [2, 22],
                    51: [2, 22],
                    52: [2, 22],
                    57: [2, 22],
                    58: [2, 22],
                    59: [2, 22],
                    64: [2, 22],
                    65: [2, 22],
                    66: [2, 22],
                    69: [2, 22],
                    70: [2, 22],
                    71: [2, 22],
                    72: [2, 22],
                    73: [2, 22],
                    74: [2, 22],
                    78: [2, 22],
                    79: [2, 22],
                    80: [2, 22],
                    81: [2, 22],
                    85: [2, 22],
                    89: [2, 22],
                    93: [2, 22],
                    97: [2, 22],
                    101: [2, 22],
                    105: [2, 22],
                    111: [2, 22],
                    112: [2, 22],
                    113: [2, 22],
                    114: [2, 22],
                    115: [2, 22],
                    116: [2, 22],
                    117: [2, 22],
                    118: [2, 22],
                    119: [2, 22],
                    120: [2, 22],
                    121: [2, 22],
                    122: [2, 22],
                    148: [2, 22]
                }, {
                    14: [2, 24],
                    26: [2, 24]
                }, {
                    18: [1, 484]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    18: [2, 291],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 82,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    18: [2, 290],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1,
                        73
                    ],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 3,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    145: 461,
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26],
                    180: 485
                }, {
                    14: [2, 289],
                    23: [2, 289]
                },
                {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 486,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1,
                        25
                    ],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    2: [1, 488],
                    148: [1, 487]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 415,
                    23: [2, 246],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    161: 489,
                    179: [1, 122]
                }, {
                    148: [1, 490]
                }, {
                    14: [2, 223],
                    111: [1, 420],
                    148: [2, 223],
                    151: 491
                }, {
                    14: [1, 238],
                    23: [1, 492]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 493,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    14: [2, 232],
                    74: [2, 232],
                    148: [2, 232]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 494,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 423,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 231,
                    75: 230,
                    82: 229,
                    86: 228,
                    90: 227,
                    94: 226,
                    98: 225,
                    102: 224,
                    106: 223,
                    107: 495,
                    179: [1, 122]
                }, {
                    2: [2, 165],
                    11: [2, 165],
                    14: [2, 165],
                    18: [2, 165],
                    23: [2, 165],
                    26: [2, 165],
                    148: [2, 165]
                }, {
                    18: [1, 496]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    18: [2, 290],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 3,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    145: 461,
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26],
                    180: 497
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    18: [2, 290],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 3,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    145: 461,
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1,
                        40
                    ],
                    178: [1, 41],
                    179: [1, 26],
                    180: 498
                }, {
                    17: [1, 499]
                }, {
                    18: [1, 500],
                    169: 501,
                    173: [1, 502]
                }, {
                    18: [2, 267],
                    171: 503,
                    172: [1, 482],
                    173: [2, 267]
                }, {
                    18: [2, 268],
                    172: [2, 268],
                    173: [2, 268]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 504,
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    179: [1, 122]
                }, {
                    17: [1, 22],
                    126: 505
                }, {
                    1: [2, 282],
                    4: [2, 282],
                    5: [2, 282],
                    6: [2, 282],
                    7: [2, 282],
                    8: [2, 282],
                    10: [2, 282],
                    17: [2, 282],
                    18: [2, 282],
                    19: [2, 282],
                    21: [2, 282],
                    24: [2, 282],
                    32: [2, 282],
                    43: [2, 282],
                    44: [2, 282],
                    47: [2, 282],
                    49: [2, 282],
                    50: [2, 282],
                    51: [2, 282],
                    52: [2, 282],
                    53: [2, 282],
                    54: [2, 282],
                    144: [2, 282],
                    146: [2, 282],
                    148: [2, 282],
                    152: [2, 282],
                    155: [2, 282],
                    156: [2, 282],
                    157: [2, 282],
                    158: [2, 282],
                    159: [2, 282],
                    162: [2, 282],
                    163: [2, 282],
                    164: [2, 282],
                    165: [2, 282],
                    166: [2, 282],
                    172: [2, 282],
                    173: [2, 282],
                    174: [2, 282],
                    175: [2, 282],
                    178: [2, 282],
                    179: [2, 282]
                }, {
                    18: [1, 506]
                }, {
                    1: [2, 237],
                    4: [2, 237],
                    5: [2, 237],
                    6: [2, 237],
                    7: [2, 237],
                    8: [2, 237],
                    10: [2, 237],
                    17: [2, 237],
                    18: [2, 237],
                    19: [2, 237],
                    21: [2, 237],
                    24: [2, 237],
                    32: [2, 237],
                    43: [2, 237],
                    44: [2, 237],
                    47: [2, 237],
                    49: [2, 237],
                    50: [2, 237],
                    51: [2, 237],
                    52: [2, 237],
                    53: [2, 237],
                    54: [2, 237],
                    144: [2, 237],
                    146: [2, 237],
                    148: [2, 237],
                    152: [2, 237],
                    155: [2, 237],
                    156: [2, 237],
                    157: [2, 237],
                    158: [2, 237],
                    159: [2, 237],
                    162: [2, 237],
                    163: [2, 237],
                    164: [2, 237],
                    165: [2, 237],
                    166: [2, 237],
                    172: [2, 237],
                    173: [2, 237],
                    174: [2, 237],
                    175: [2, 237],
                    178: [2, 237],
                    179: [2, 237]
                }, {
                    1: [2, 238],
                    4: [2, 238],
                    5: [2, 238],
                    6: [2, 238],
                    7: [2, 238],
                    8: [2, 238],
                    10: [2, 238],
                    17: [2, 238],
                    18: [2, 238],
                    19: [2, 238],
                    21: [2, 238],
                    24: [2, 238],
                    32: [2, 238],
                    43: [2, 238],
                    44: [2, 238],
                    47: [2, 238],
                    49: [2, 238],
                    50: [2, 238],
                    51: [2, 238],
                    52: [2, 238],
                    53: [2, 238],
                    54: [2, 238],
                    144: [2, 238],
                    146: [2, 238],
                    148: [2, 238],
                    152: [2, 238],
                    155: [2, 238],
                    156: [2, 238],
                    157: [2, 238],
                    158: [2, 238],
                    159: [2, 238],
                    162: [2, 238],
                    163: [2, 238],
                    164: [2, 238],
                    165: [2, 238],
                    166: [2, 238],
                    172: [2, 238],
                    173: [2, 238],
                    174: [2, 238],
                    175: [2, 238],
                    178: [2, 238],
                    179: [2, 238]
                },
                {
                    1: [2, 239],
                    4: [2, 239],
                    5: [2, 239],
                    6: [2, 239],
                    7: [2, 239],
                    8: [2, 239],
                    10: [2, 239],
                    17: [2, 239],
                    18: [2, 239],
                    19: [2, 239],
                    21: [2, 239],
                    24: [2, 239],
                    32: [2, 239],
                    43: [2, 239],
                    44: [2, 239],
                    47: [2, 239],
                    49: [2, 239],
                    50: [2, 239],
                    51: [2, 239],
                    52: [2, 239],
                    53: [2, 239],
                    54: [2, 239],
                    144: [2, 239],
                    146: [2, 239],
                    148: [2, 239],
                    152: [2, 239],
                    155: [2, 239],
                    156: [2, 239],
                    157: [2, 239],
                    158: [2, 239],
                    159: [2, 239],
                    162: [2, 239],
                    163: [2, 239],
                    164: [2, 239],
                    165: [2, 239],
                    166: [2, 239],
                    172: [2, 239],
                    173: [2, 239],
                    174: [2, 239],
                    175: [2, 239],
                    178: [2, 239],
                    179: [2, 239]
                }, {
                    23: [1, 507]
                }, {
                    3: 55,
                    4: [1,
                        59
                    ],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 124],
                    12: 107,
                    15: 117,
                    16: 120,
                    17: [1, 121],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    22: 415,
                    23: [2, 246],
                    24: [1, 64],
                    29: 114,
                    30: 118,
                    32: [1, 115],
                    35: 111,
                    37: 112,
                    40: 109,
                    42: 131,
                    43: [1, 76],
                    44: [1, 77],
                    46: 132,
                    47: [1, 73],
                    48: 130,
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    56: 129,
                    61: 128,
                    63: 127,
                    68: 126,
                    77: 125,
                    84: 123,
                    88: 119,
                    92: 116,
                    96: 113,
                    100: 110,
                    104: 108,
                    161: 508,
                    179: [1, 122]
                }, {
                    14: [2, 224],
                    148: [2, 224]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    19: [1,
                        54
                    ],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 509,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    14: [1, 238],
                    23: [1, 510]
                }, {
                    1: [2, 243],
                    4: [2, 243],
                    5: [2, 243],
                    6: [2, 243],
                    7: [2, 243],
                    8: [2, 243],
                    10: [2, 243],
                    17: [2, 243],
                    18: [2, 243],
                    19: [2, 243],
                    21: [2, 243],
                    24: [2, 243],
                    32: [2, 243],
                    43: [2, 243],
                    44: [2, 243],
                    47: [2, 243],
                    49: [2, 243],
                    50: [2, 243],
                    51: [2, 243],
                    52: [2, 243],
                    53: [2, 243],
                    54: [2, 243],
                    144: [2, 243],
                    146: [2, 243],
                    148: [2, 243],
                    152: [2, 243],
                    155: [2, 243],
                    156: [2, 243],
                    157: [2, 243],
                    158: [2, 243],
                    159: [2, 243],
                    162: [2, 243],
                    163: [2, 243],
                    164: [2, 243],
                    165: [2, 243],
                    166: [2, 243],
                    172: [2,
                        243
                    ],
                    173: [2, 243],
                    174: [2, 243],
                    175: [2, 243],
                    178: [2, 243],
                    179: [2, 243]
                }, {
                    11: [2, 167],
                    14: [2, 167],
                    74: [2, 167],
                    148: [2, 167]
                }, {
                    2: [2, 284],
                    11: [2, 284],
                    14: [2, 284],
                    18: [2, 284],
                    21: [2, 284],
                    23: [2, 284],
                    24: [2, 284],
                    26: [2, 284],
                    31: [2, 284],
                    43: [2, 284],
                    44: [2, 284],
                    51: [2, 284],
                    52: [2, 284],
                    57: [2, 284],
                    58: [2, 284],
                    59: [2, 284],
                    64: [2, 284],
                    65: [2, 284],
                    66: [2, 284],
                    69: [2, 284],
                    70: [2, 284],
                    71: [2, 284],
                    72: [2, 284],
                    73: [2, 284],
                    74: [2, 284],
                    78: [2, 284],
                    79: [2, 284],
                    80: [2, 284],
                    81: [2, 284],
                    85: [2, 284],
                    89: [2, 284],
                    93: [2, 284],
                    97: [2, 284],
                    101: [2, 284],
                    105: [2, 284],
                    111: [2,
                        284
                    ],
                    112: [2, 284],
                    113: [2, 284],
                    114: [2, 284],
                    115: [2, 284],
                    116: [2, 284],
                    117: [2, 284],
                    118: [2, 284],
                    119: [2, 284],
                    120: [2, 284],
                    121: [2, 284],
                    122: [2, 284],
                    148: [2, 284]
                }, {
                    18: [1, 511]
                }, {
                    18: [1, 512]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    18: [2, 290],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 3,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    145: 461,
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26],
                    180: 513
                }, {
                    1: [2, 264],
                    4: [2, 264],
                    5: [2, 264],
                    6: [2, 264],
                    7: [2, 264],
                    8: [2, 264],
                    10: [2, 264],
                    17: [2, 264],
                    18: [2, 264],
                    19: [2, 264],
                    21: [2, 264],
                    24: [2, 264],
                    32: [2, 264],
                    43: [2, 264],
                    44: [2,
                        264
                    ],
                    47: [2, 264],
                    49: [2, 264],
                    50: [2, 264],
                    51: [2, 264],
                    52: [2, 264],
                    53: [2, 264],
                    54: [2, 264],
                    144: [2, 264],
                    146: [2, 264],
                    148: [2, 264],
                    152: [2, 264],
                    155: [2, 264],
                    156: [2, 264],
                    157: [2, 264],
                    158: [2, 264],
                    159: [2, 264],
                    162: [2, 264],
                    163: [2, 264],
                    164: [2, 264],
                    165: [2, 264],
                    166: [2, 264],
                    172: [2, 264],
                    173: [2, 264],
                    174: [2, 264],
                    175: [2, 264],
                    178: [2, 264],
                    179: [2, 264]
                }, {
                    18: [2, 266],
                    168: 514,
                    170: 480,
                    171: 481,
                    172: [1, 482]
                }, {
                    11: [1, 515]
                }, {
                    18: [2, 269],
                    172: [2, 269],
                    173: [2, 269]
                }, {
                    11: [1, 516],
                    14: [1, 238]
                }, {
                    1: [2, 278],
                    4: [2, 278],
                    5: [2, 278],
                    6: [2, 278],
                    7: [2, 278],
                    8: [2,
                        278
                    ],
                    10: [2, 278],
                    17: [2, 278],
                    18: [2, 278],
                    19: [2, 278],
                    21: [2, 278],
                    24: [2, 278],
                    32: [2, 278],
                    43: [2, 278],
                    44: [2, 278],
                    47: [2, 278],
                    49: [2, 278],
                    50: [2, 278],
                    51: [2, 278],
                    52: [2, 278],
                    53: [2, 278],
                    54: [2, 278],
                    144: [2, 278],
                    146: [2, 278],
                    148: [2, 278],
                    152: [2, 278],
                    155: [2, 278],
                    156: [2, 278],
                    157: [2, 278],
                    158: [2, 278],
                    159: [2, 278],
                    162: [2, 278],
                    163: [2, 278],
                    164: [2, 278],
                    165: [2, 278],
                    166: [2, 278],
                    172: [2, 278],
                    173: [2, 278],
                    174: [2, 278],
                    175: [2, 278],
                    176: [1, 517],
                    178: [2, 278],
                    179: [2, 278]
                }, {
                    1: [2, 283],
                    4: [2, 283],
                    5: [2, 283],
                    6: [2, 283],
                    7: [2, 283],
                    8: [2, 283],
                    10: [2,
                        283
                    ],
                    17: [2, 283],
                    18: [2, 283],
                    19: [2, 283],
                    21: [2, 283],
                    24: [2, 283],
                    32: [2, 283],
                    43: [2, 283],
                    44: [2, 283],
                    47: [2, 283],
                    49: [2, 283],
                    50: [2, 283],
                    51: [2, 283],
                    52: [2, 283],
                    53: [2, 283],
                    54: [2, 283],
                    144: [2, 283],
                    146: [2, 283],
                    148: [2, 283],
                    152: [2, 283],
                    155: [2, 283],
                    156: [2, 283],
                    157: [2, 283],
                    158: [2, 283],
                    159: [2, 283],
                    162: [2, 283],
                    163: [2, 283],
                    164: [2, 283],
                    165: [2, 283],
                    166: [2, 283],
                    172: [2, 283],
                    173: [2, 283],
                    174: [2, 283],
                    175: [2, 283],
                    178: [2, 283],
                    179: [2, 283]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 518,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    23: [1, 519]
                }, {
                    1: [2, 244],
                    4: [2, 244],
                    5: [2, 244],
                    6: [2, 244],
                    7: [2, 244],
                    8: [2, 244],
                    10: [2, 244],
                    17: [2, 244],
                    18: [2, 244],
                    19: [2, 244],
                    21: [2, 244],
                    24: [2, 244],
                    32: [2, 244],
                    43: [2, 244],
                    44: [2, 244],
                    47: [2, 244],
                    49: [2, 244],
                    50: [2, 244],
                    51: [2, 244],
                    52: [2, 244],
                    53: [2, 244],
                    54: [2, 244],
                    144: [2, 244],
                    146: [2, 244],
                    148: [2, 244],
                    152: [2, 244],
                    155: [2, 244],
                    156: [2, 244],
                    157: [2, 244],
                    158: [2, 244],
                    159: [2, 244],
                    162: [2, 244],
                    163: [2, 244],
                    164: [2, 244],
                    165: [2, 244],
                    166: [2, 244],
                    172: [2, 244],
                    173: [2, 244],
                    174: [2,
                        244
                    ],
                    175: [2, 244],
                    178: [2, 244],
                    179: [2, 244]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 520,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    2: [2, 285],
                    11: [2, 285],
                    14: [2, 285],
                    18: [2, 285],
                    21: [2, 285],
                    23: [2, 285],
                    24: [2, 285],
                    26: [2, 285],
                    31: [2, 285],
                    43: [2, 285],
                    44: [2, 285],
                    51: [2, 285],
                    52: [2, 285],
                    57: [2, 285],
                    58: [2, 285],
                    59: [2, 285],
                    64: [2, 285],
                    65: [2, 285],
                    66: [2, 285],
                    69: [2, 285],
                    70: [2, 285],
                    71: [2, 285],
                    72: [2, 285],
                    73: [2, 285],
                    74: [2, 285],
                    78: [2, 285],
                    79: [2, 285],
                    80: [2, 285],
                    81: [2,
                        285
                    ],
                    85: [2, 285],
                    89: [2, 285],
                    93: [2, 285],
                    97: [2, 285],
                    101: [2, 285],
                    105: [2, 285],
                    111: [2, 285],
                    112: [2, 285],
                    113: [2, 285],
                    114: [2, 285],
                    115: [2, 285],
                    116: [2, 285],
                    117: [2, 285],
                    118: [2, 285],
                    119: [2, 285],
                    120: [2, 285],
                    121: [2, 285],
                    122: [2, 285],
                    148: [2, 285]
                }, {
                    2: [2, 286],
                    11: [2, 286],
                    14: [2, 286],
                    18: [2, 286],
                    21: [2, 286],
                    23: [2, 286],
                    24: [2, 286],
                    26: [2, 286],
                    31: [2, 286],
                    43: [2, 286],
                    44: [2, 286],
                    51: [2, 286],
                    52: [2, 286],
                    57: [2, 286],
                    58: [2, 286],
                    59: [2, 286],
                    64: [2, 286],
                    65: [2, 286],
                    66: [2, 286],
                    69: [2, 286],
                    70: [2, 286],
                    71: [2, 286],
                    72: [2, 286],
                    73: [2, 286],
                    74: [2, 286],
                    78: [2, 286],
                    79: [2, 286],
                    80: [2, 286],
                    81: [2, 286],
                    85: [2, 286],
                    89: [2, 286],
                    93: [2, 286],
                    97: [2, 286],
                    101: [2, 286],
                    105: [2, 286],
                    111: [2, 286],
                    112: [2, 286],
                    113: [2, 286],
                    114: [2, 286],
                    115: [2, 286],
                    116: [2, 286],
                    117: [2, 286],
                    118: [2, 286],
                    119: [2, 286],
                    120: [2, 286],
                    121: [2, 286],
                    122: [2, 286],
                    148: [2, 286]
                }, {
                    18: [1, 521]
                }, {
                    18: [1, 522]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    18: [2, 272],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1,
                        74
                    ],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 3,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    145: 523,
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    172: [2, 272],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1,
                        61
                    ],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    18: [2, 270],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 3,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    145: 524,
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1,
                        29
                    ],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    172: [2, 270],
                    173: [2, 270],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    17: [1, 22],
                    126: 525
                }, {
                    1: [2, 241],
                    4: [2, 241],
                    5: [2, 241],
                    6: [2, 241],
                    7: [2, 241],
                    8: [2, 241],
                    10: [2, 241],
                    17: [2, 241],
                    18: [2, 241],
                    19: [2, 241],
                    21: [2, 241],
                    24: [2, 241],
                    32: [2, 241],
                    43: [2, 241],
                    44: [2, 241],
                    47: [2, 241],
                    49: [2, 241],
                    50: [2, 241],
                    51: [2, 241],
                    52: [2, 241],
                    53: [2, 241],
                    54: [2, 241],
                    144: [2, 241],
                    146: [2, 241],
                    148: [2, 241],
                    152: [2, 241],
                    155: [2, 241],
                    156: [2, 241],
                    157: [2, 241],
                    158: [2, 241],
                    159: [2, 241],
                    162: [2, 241],
                    163: [2, 241],
                    164: [2, 241],
                    165: [2, 241],
                    166: [2, 241],
                    172: [2, 241],
                    173: [2, 241],
                    174: [2, 241],
                    175: [2, 241],
                    178: [2, 241],
                    179: [2, 241]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 526,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    1: [2, 245],
                    4: [2, 245],
                    5: [2, 245],
                    6: [2, 245],
                    7: [2, 245],
                    8: [2, 245],
                    10: [2, 245],
                    17: [2, 245],
                    18: [2, 245],
                    19: [2, 245],
                    21: [2, 245],
                    24: [2, 245],
                    32: [2, 245],
                    43: [2, 245],
                    44: [2, 245],
                    47: [2, 245],
                    49: [2, 245],
                    50: [2, 245],
                    51: [2, 245],
                    52: [2, 245],
                    53: [2, 245],
                    54: [2, 245],
                    144: [2, 245],
                    146: [2, 245],
                    148: [2, 245],
                    152: [2, 245],
                    155: [2, 245],
                    156: [2, 245],
                    157: [2, 245],
                    158: [2, 245],
                    159: [2, 245],
                    162: [2, 245],
                    163: [2, 245],
                    164: [2, 245],
                    165: [2, 245],
                    166: [2, 245],
                    172: [2, 245],
                    173: [2, 245],
                    174: [2, 245],
                    175: [2, 245],
                    178: [2, 245],
                    179: [2, 245]
                }, {
                    2: [2, 287],
                    11: [2, 287],
                    14: [2, 287],
                    18: [2, 287],
                    21: [2, 287],
                    23: [2, 287],
                    24: [2, 287],
                    26: [2, 287],
                    31: [2, 287],
                    43: [2, 287],
                    44: [2, 287],
                    51: [2, 287],
                    52: [2, 287],
                    57: [2, 287],
                    58: [2, 287],
                    59: [2, 287],
                    64: [2, 287],
                    65: [2, 287],
                    66: [2, 287],
                    69: [2, 287],
                    70: [2, 287],
                    71: [2, 287],
                    72: [2, 287],
                    73: [2, 287],
                    74: [2, 287],
                    78: [2, 287],
                    79: [2, 287],
                    80: [2, 287],
                    81: [2, 287],
                    85: [2, 287],
                    89: [2, 287],
                    93: [2, 287],
                    97: [2, 287],
                    101: [2, 287],
                    105: [2, 287],
                    111: [2, 287],
                    112: [2, 287],
                    113: [2, 287],
                    114: [2, 287],
                    115: [2, 287],
                    116: [2, 287],
                    117: [2, 287],
                    118: [2, 287],
                    119: [2, 287],
                    120: [2, 287],
                    121: [2, 287],
                    122: [2, 287],
                    148: [2, 287]
                }, {
                    1: [2, 265],
                    4: [2, 265],
                    5: [2, 265],
                    6: [2, 265],
                    7: [2, 265],
                    8: [2, 265],
                    10: [2, 265],
                    17: [2, 265],
                    18: [2, 265],
                    19: [2, 265],
                    21: [2, 265],
                    24: [2, 265],
                    32: [2, 265],
                    43: [2, 265],
                    44: [2, 265],
                    47: [2, 265],
                    49: [2,
                        265
                    ],
                    50: [2, 265],
                    51: [2, 265],
                    52: [2, 265],
                    53: [2, 265],
                    54: [2, 265],
                    144: [2, 265],
                    146: [2, 265],
                    148: [2, 265],
                    152: [2, 265],
                    155: [2, 265],
                    156: [2, 265],
                    157: [2, 265],
                    158: [2, 265],
                    159: [2, 265],
                    162: [2, 265],
                    163: [2, 265],
                    164: [2, 265],
                    165: [2, 265],
                    166: [2, 265],
                    172: [2, 265],
                    173: [2, 265],
                    174: [2, 265],
                    175: [2, 265],
                    178: [2, 265],
                    179: [2, 265]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1, 61],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    18: [2, 273],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 82,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    172: [2, 273],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    3: 55,
                    4: [1, 59],
                    5: [1, 60],
                    6: [1,
                        61
                    ],
                    7: [1, 62],
                    8: [1, 63],
                    10: [1, 38],
                    16: 52,
                    17: [1, 22],
                    18: [2, 271],
                    19: [1, 54],
                    20: 56,
                    21: [1, 57],
                    24: [1, 64],
                    32: [1, 50],
                    34: 49,
                    36: 46,
                    38: 47,
                    41: 44,
                    43: [1, 76],
                    44: [1, 77],
                    45: 71,
                    46: 72,
                    47: [1, 73],
                    49: [1, 74],
                    50: [1, 75],
                    51: [1, 78],
                    52: [1, 79],
                    53: [1, 80],
                    54: [1, 81],
                    55: 70,
                    60: 69,
                    62: 68,
                    67: 67,
                    76: 66,
                    83: 65,
                    87: 58,
                    91: 53,
                    95: 51,
                    99: 48,
                    103: 45,
                    108: 43,
                    110: 42,
                    124: 28,
                    125: 82,
                    126: 4,
                    127: 5,
                    128: 6,
                    129: 7,
                    130: 8,
                    131: 9,
                    132: 10,
                    133: 11,
                    134: 12,
                    135: 13,
                    136: 14,
                    137: 15,
                    138: 16,
                    139: 17,
                    140: 18,
                    141: 19,
                    142: 20,
                    143: 21,
                    144: [1, 23],
                    146: [1, 24],
                    148: [1, 27],
                    152: [1, 25],
                    155: [1, 29],
                    157: [1, 30],
                    158: [1, 31],
                    159: [1, 32],
                    162: [1, 33],
                    163: [1, 34],
                    164: [1, 35],
                    165: [1, 36],
                    166: [1, 37],
                    172: [2, 271],
                    173: [2, 271],
                    174: [1, 39],
                    175: [1, 40],
                    178: [1, 41],
                    179: [1, 26]
                }, {
                    1: [2, 279],
                    4: [2, 279],
                    5: [2, 279],
                    6: [2, 279],
                    7: [2, 279],
                    8: [2, 279],
                    10: [2, 279],
                    17: [2, 279],
                    18: [2, 279],
                    19: [2, 279],
                    21: [2, 279],
                    24: [2, 279],
                    32: [2, 279],
                    43: [2, 279],
                    44: [2, 279],
                    47: [2, 279],
                    49: [2, 279],
                    50: [2, 279],
                    51: [2, 279],
                    52: [2, 279],
                    53: [2, 279],
                    54: [2, 279],
                    144: [2, 279],
                    146: [2, 279],
                    148: [2, 279],
                    152: [2, 279],
                    155: [2, 279],
                    156: [2, 279],
                    157: [2, 279],
                    158: [2, 279],
                    159: [2, 279],
                    162: [2, 279],
                    163: [2, 279],
                    164: [2, 279],
                    165: [2, 279],
                    166: [2, 279],
                    172: [2, 279],
                    173: [2, 279],
                    174: [2, 279],
                    175: [2, 279],
                    178: [2, 279],
                    179: [2, 279]
                }, {
                    1: [2, 242],
                    4: [2, 242],
                    5: [2, 242],
                    6: [2, 242],
                    7: [2, 242],
                    8: [2, 242],
                    10: [2, 242],
                    17: [2, 242],
                    18: [2, 242],
                    19: [2, 242],
                    21: [2, 242],
                    24: [2, 242],
                    32: [2, 242],
                    43: [2, 242],
                    44: [2, 242],
                    47: [2, 242],
                    49: [2, 242],
                    50: [2, 242],
                    51: [2, 242],
                    52: [2, 242],
                    53: [2, 242],
                    54: [2, 242],
                    144: [2, 242],
                    146: [2, 242],
                    148: [2, 242],
                    152: [2, 242],
                    155: [2, 242],
                    156: [2, 242],
                    157: [2, 242],
                    158: [2, 242],
                    159: [2, 242],
                    162: [2, 242],
                    163: [2, 242],
                    164: [2, 242],
                    165: [2, 242],
                    166: [2, 242],
                    172: [2, 242],
                    173: [2, 242],
                    174: [2, 242],
                    175: [2, 242],
                    178: [2, 242],
                    179: [2, 242]
                }
            ],
            defaultActions: {},
            parseError: function (b) {
                throw Error(b);
            },
            parse: function (b) {
                function c() {
                    var b;
                    b = d.lexer.lex() || 1;
                    typeof b !== "number" && (b = d.symbols_[b] || b);
                    return b
                }
                var d = this,
                    h = [0],
                    j = [null],
                    k = [],
                    l = this.table,
                    m = "",
                    n = 0,
                    q = 0,
                    p = 0;
                this.lexer.setInput(b);
                this.lexer.yy = this.yy;
                this.yy.lexer = this.lexer;
                this.yy.parser = this;
                if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
                b = this.lexer.yylloc;
                k.push(b);
                var s = this.lexer.options && this.lexer.options.ranges;
                if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
                for (var r, o, t, u, w = {}, z, A; ;) {
                    t = h[h.length - 1];
                    if (this.defaultActions[t]) u = this.defaultActions[t];
                    else {
                        if (r === null || typeof r == "undefined") r = c();
                        u = l[t] && l[t][r]
                    }
                    if (typeof u === "undefined" || !u.length || !u[0]) {
                        u = "";
                        if (!p) {
                            o = [];
                            for (z in l[t]) this.terminals_[z] && z > 2 && o.push("'" + this.terminals_[z] + "'");
                            u = this.lexer.showPosition ? "Parse error on line " + (n + 1) + ":\n" + this.lexer.showPosition() +
                                "\nExpecting " + o.join(", ") + ", got '" + (this.terminals_[r] || r) + "'" : "Parse error on line " + (n + 1) + ": Unexpected " + (r == 1 ? "end of input" : "'" + (this.terminals_[r] || r) + "'");
                            this.parseError(u, {
                                text: this.lexer.match,
                                token: this.terminals_[r] || r,
                                line: this.lexer.yylineno,
                                loc: b,
                                expected: o
                            })
                        }
                        if (p == 3) {
                            if (r == 1) throw Error(u || "Parsing halted.");
                            q = this.lexer.yyleng;
                            m = this.lexer.yytext;
                            n = this.lexer.yylineno;
                            b = this.lexer.yylloc;
                            r = c()
                        }
                        for (; ;) {
                            if ((2).toString() in l[t]) break;
                            if (t === 0) throw Error(u || "Parsing halted.");
                            h.length =
                                h.length - 2;
                            j.length = j.length - 1;
                            k.length = k.length - 1;
                            t = h[h.length - 1]
                        }
                        o = r == 2 ? null : r;
                        r = 2;
                        t = h[h.length - 1];
                        u = l[t] && l[t][2];
                        p = 3
                    }
                    if (u[0] instanceof Array && u.length > 1) throw Error("Parse Error: multiple actions possible at state: " + t + ", token: " + r);
                    switch (u[0]) {
                        case 1:
                            h.push(r);
                            j.push(this.lexer.yytext);
                            k.push(this.lexer.yylloc);
                            h.push(u[1]);
                            r = null;
                            if (o) {
                                r = o;
                                o = null
                            } else {
                                q = this.lexer.yyleng;
                                m = this.lexer.yytext;
                                n = this.lexer.yylineno;
                                b = this.lexer.yylloc;
                                p > 0 && p--
                            }
                            break;
                        case 2:
                            A = this.productions_[u[1]][1];
                            w.$ = j[j.length -
                                A];
                            w._$ = {
                                first_line: k[k.length - (A || 1)].first_line,
                                last_line: k[k.length - 1].last_line,
                                first_column: k[k.length - (A || 1)].first_column,
                                last_column: k[k.length - 1].last_column
                            };
                            if (s) w._$.range = [k[k.length - (A || 1)].range[0], k[k.length - 1].range[1]];
                            t = this.performAction.call(w, m, q, n, this.yy, u[1], j, k);
                            if (typeof t !== "undefined") return t;
                            if (A) {
                                h = h.slice(0, A * -2);
                                j = j.slice(0, -1 * A);
                                k = k.slice(0, -1 * A)
                            }
                            h.push(this.productions_[u[1]][0]);
                            j.push(w.$);
                            k.push(w._$);
                            t = l[h[h.length - 2]][h[h.length - 1]];
                            h.push(t);
                            break;
                        case 3:
                            return true
                    }
                }
                return true
            }
        },
            d = function () {
                return {
                    EOF: 1,
                    parseError: function (b, c) {
                        if (this.yy.parser) this.yy.parser.parseError(b, c);
                        else throw Error(b);
                    },
                    setInput: function (b) {
                        this._input = b;
                        this._more = this._less = this.done = false;
                        this.yylineno = this.yyleng = 0;
                        this.yytext = this.matched = this.match = "";
                        this.conditionStack = ["INITIAL"];
                        this.yylloc = {
                            first_line: 1,
                            first_column: 0,
                            last_line: 1,
                            last_column: 0
                        };
                        if (this.options.ranges) this.yylloc.range = [0, 0];
                        this.offset = 0;
                        return this
                    },
                    input: function () {
                        var b = this._input[0];
                        this.yytext = this.yytext + b;
                        this.yyleng++;
                        this.offset++;
                        this.match = this.match + b;
                        this.matched = this.matched + b;
                        if (b.match(/(?:\r\n?|\n).*/g)) {
                            this.yylineno++;
                            this.yylloc.last_line++
                        } else this.yylloc.last_column++;
                        this.options.ranges && this.yylloc.range[1]++;
                        this._input = this._input.slice(1);
                        return b
                    },
                    unput: function (b) {
                        var c = b.length,
                            d = b.split(/(?:\r\n?|\n)/g);
                        this._input = b + this._input;
                        this.yytext = this.yytext.substr(0, this.yytext.length - c - 1);
                        this.offset = this.offset - c;
                        b = this.match.split(/(?:\r\n?|\n)/g);
                        this.match = this.match.substr(0, this.match.length -
                            1);
                        this.matched = this.matched.substr(0, this.matched.length - 1);
                        if (d.length - 1) this.yylineno = this.yylineno - (d.length - 1);
                        var h = this.yylloc.range;
                        this.yylloc = {
                            first_line: this.yylloc.first_line,
                            last_line: this.yylineno + 1,
                            first_column: this.yylloc.first_column,
                            last_column: d ? (d.length === b.length ? this.yylloc.first_column : 0) + b[b.length - d.length].length - d[0].length : this.yylloc.first_column - c
                        };
                        if (this.options.ranges) this.yylloc.range = [h[0], h[0] + this.yyleng - c];
                        return this
                    },
                    more: function () {
                        this._more = true;
                        return this
                    },
                    less: function (b) {
                        this.unput(this.match.slice(b))
                    },
                    pastInput: function () {
                        var b = this.matched.substr(0, this.matched.length - this.match.length);
                        return (b.length > 20 ? "..." : "") + b.substr(-20).replace(/\n/g, "")
                    },
                    upcomingInput: function () {
                        var b = this.match;
                        b.length < 20 && (b = b + this._input.substr(0, 20 - b.length));
                        return (b.substr(0, 20) + (b.length > 20 ? "..." : "")).replace(/\n/g, "")
                    },
                    showPosition: function () {
                        var b = this.pastInput(),
                            c = Array(b.length + 1).join("-");
                        return b + this.upcomingInput() + "\n" + c + "^"
                    },
                    next: function () {
                        if (this.done) return this.EOF;
                        if (!this._input) this.done = true;
                        var b, c, d;
                        if (!this._more) this.match = this.yytext = "";
                        for (var h = this._currentRules(), j = 0; j < h.length; j++)
                            if ((c = this._input.match(this.rules[h[j]])) && (!b || c[0].length > b[0].length)) {
                                b = c;
                                d = j;
                                if (!this.options.flex) break
                            }
                        if (b) {
                            if (c = b[0].match(/(?:\r\n?|\n).*/g)) this.yylineno = this.yylineno + c.length;
                            this.yylloc = {
                                first_line: this.yylloc.last_line,
                                last_line: this.yylineno + 1,
                                first_column: this.yylloc.last_column,
                                last_column: c ? c[c.length - 1].length - c[c.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + b[0].length
                            };
                            this.yytext = this.yytext + b[0];
                            this.match = this.match + b[0];
                            this.matches = b;
                            this.yyleng = this.yytext.length;
                            if (this.options.ranges) this.yylloc.range = [this.offset, this.offset = this.offset + this.yyleng];
                            this._more = false;
                            this._input = this._input.slice(b[0].length);
                            this.matched = this.matched + b[0];
                            b = this.performAction.call(this, this.yy, this, h[d], this.conditionStack[this.conditionStack.length - 1]);
                            if (this.done && this._input) this.done = false;
                            if (b) return b
                        } else return this._input ===
                            "" ? this.EOF : this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
                                text: "",
                                token: null,
                                line: this.yylineno
                            })
                    },
                    lex: function () {
                        var b = this.next();
                        return typeof b !== "undefined" ? b : this.lex()
                    },
                    begin: function (b) {
                        this.conditionStack.push(b)
                    },
                    popState: function () {
                        return this.conditionStack.pop()
                    },
                    _currentRules: function () {
                        return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules
                    },
                    topState: function () {
                        return this.conditionStack[this.conditionStack.length -
                            2]
                    },
                    pushState: function (b) {
                        this.begin(b)
                    },
                    options: {},
                    performAction: function (b, c, d) {
                        switch (d) {
                            case 2:
                                this.begin("ANNOTATION");
                                break;
                            case 3:
                                this.begin("COMMENT");
                                break;
                            case 4:
                                this.begin("SEQ");
                                return "PARAM";
                            case 5:
                                return "PARAM";
                            case 6:
                                return 7;
                            case 7:
                                return 10;
                            case 8:
                                return 8;
                            case 9:
                                return 8;
                            case 10:
                                this.begin("INITIAL");
                                break;
                            case 11:
                                this.begin("ANNOTATION");
                                break;
                            case 12:
                                this.begin("INITIAL");
                                break;
                            case 14:
                                this.begin("INITIAL");
                                break;
                            case 16:
                                return 4;
                            case 17:
                                return 5;
                            case 18:
                                return 6;
                            case 19:
                                return 163;
                            case 20:
                                return 172;
                            case 21:
                                return 177;
                            case 22:
                                return 152;
                            case 23:
                                return 173;
                            case 24:
                                return 176;
                            case 25:
                                return 159;
                            case 26:
                                return 73;
                            case 27:
                                return 32;
                            case 28:
                                return 146;
                            case 29:
                                return 162;
                            case 30:
                                return 179;
                            case 31:
                                return 164;
                            case 32:
                                return 49;
                            case 33:
                                return 47;
                            case 34:
                                return 155;
                            case 35:
                                return 19;
                            case 36:
                                return 157;
                            case 37:
                                return 158;
                            case 38:
                                return 156;
                            case 39:
                                return 74;
                            case 40:
                                return 166;
                            case 41:
                                return 174;
                            case 42:
                                return 175;
                            case 43:
                                return 50;
                            case 44:
                                return 165;
                            case 45:
                                return 178;
                            case 46:
                                return 7;
                            case 47:
                                return 10;
                            case 48:
                                return 8;
                            case 49:
                                return 8;
                            case 50:
                                return 118;
                            case 51:
                                return 116;
                            case 52:
                                return 117;
                            case 53:
                                return 80;
                            case 54:
                                return 81;
                            case 55:
                                return 97;
                            case 56:
                                return 101;
                            case 57:
                                return 43;
                            case 58:
                                return 44;
                            case 59:
                                return 114;
                            case 60:
                                return 115;
                            case 61:
                                return 122;
                            case 62:
                                return 112;
                            case 63:
                                return 113;
                            case 64:
                                return 120;
                            case 65:
                                return 119;
                            case 66:
                                return 121;
                            case 67:
                                return 71;
                            case 68:
                                return 72;
                            case 69:
                                return 78;
                            case 70:
                                return 79;
                            case 71:
                                return 66;
                            case 72:
                                return 64;
                            case 73:
                                return 65;
                            case 74:
                                return 111;
                            case 75:
                                return 57;
                            case 76:
                                return 58;
                            case 77:
                                return 59;
                            case 78:
                                return 52;
                            case 79:
                                return 51;
                            case 80:
                                return 89;
                            case 81:
                                return 21;
                            case 82:
                                return 23;
                            case 83:
                                return 24;
                            case 84:
                                return 26;
                            case 85:
                                return 17;
                            case 86:
                                return 18;
                            case 87:
                                return 69;
                            case 88:
                                return 70;
                            case 89:
                                return 53;
                            case 90:
                                return 54;
                            case 91:
                                return 89;
                            case 92:
                                return 85;
                            case 93:
                                return 93;
                            case 94:
                                return 14;
                            case 95:
                                return 148;
                            case 96:
                                return 31;
                            case 97:
                                return 105;
                            case 98:
                                return 11;
                            case 99:
                                return "INVALID"
                        }
                    },
                    rules: [/^(?:\s+)/, /^(?:\/\/.*)/, /^(?:\/\*\*)/,
                        /^(?:\/\*)/, /^(?:@param\b)/, /^(?:@param\b)/, /^(?:[0-9]+(\.[0-9]+)?\b)/, /^(?:[a-zA-Z_][a-zA-Z0-9_]*)/, /^(?:"(\\.|[^\"])*")/, /^(?:'(\\.|[^\'])*')/, /^(?:\*\/)/, /^(?:.)/, /^(?:\*\/)/, /^(?:.)/, /^(?:\*\/)/, /^(?:.)/, /^(?:null\b)/, /^(?:true\b)/, /^(?:false\b)/, /^(?:break\b)/, /^(?:case\b)/, /^(?:catch\b)/, /^(?:const\b)/, /^(?:default\b)/, /^(?:finally\b)/, /^(?:for\b)/, /^(?:instanceof\b)/, /^(?:new\b)/, /^(?:var\b)/, /^(?:continue\b)/, /^(?:function\b)/, /^(?:return\b)/, /^(?:void\b)/, /^(?:delete\b)/, /^(?:if\b)/, /^(?:this\b)/,
                        /^(?:do\b)/, /^(?:while\b)/, /^(?:else\b)/, /^(?:in\b)/, /^(?:switch\b)/, /^(?:throw\b)/, /^(?:try\b)/, /^(?:typeof\b)/, /^(?:with\b)/, /^(?:debugger\b)/, /^(?:((((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))?((?:[eE][-+]?[0-9]+))?)|(((?:\.[0-9]+))((?:[eE][-+]?[0-9]+))?))\b)/, /^(?:[a-zA-Z_][a-zA-Z0-9_]*)/, /^(?:"(\\.|[^\"])*")/, /^(?:'(\\.|[^\'])*')/, /^(?:>>>=)/, /^(?:<<=)/, /^(?:>>=)/, /^(?:===)/, /^(?:!==)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:\+\+)/, /^(?:--)/, /^(?:\*=)/, /^(?:\/=)/, /^(?:%=)/, /^(?:\+=)/, /^(?:-=)/, /^(?:\^=)/, /^(?:&=)/,
                        /^(?:\|=)/, /^(?:<=)/, /^(?:>=)/, /^(?:==)/, /^(?:!=)/, /^(?:>>>)/, /^(?:<<)/, /^(?:>>)/, /^(?:=)/, /^(?:\*)/, /^(?:\/)/, /^(?:%)/, /^(?:-)/, /^(?:\+)/, /^(?:\^)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:\{)/, /^(?:\})/, /^(?:<)/, /^(?:>)/, /^(?:~)/, /^(?:!)/, /^(?:\^)/, /^(?:&)/, /^(?:\|)/, /^(?:,)/, /^(?:;)/, /^(?:\.)/, /^(?:\?)/, /^(?::)/, /^(?:.)/
                    ],
                    conditions: {
                        SEQ: {
                            rules: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
                                57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99
                            ],
                            inclusive: true
                        },
                        ANNOTATION: {
                            rules: [0, 1, 2, 3, 4, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
                            inclusive: true
                        },
                        COMMENT: {
                            rules: [0, 1, 2, 3, 14, 15, 16, 17, 18, 19, 20, 21, 22,
                                23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99
                            ],
                            inclusive: true
                        },
                        INITIAL: {
                            rules: [0, 1, 2, 3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
                                93, 94, 95, 96, 97, 98, 99
                            ],
                            inclusive: true
                        }
                    }
                }
            }();
        c.lexer = d;
        b.prototype = c;
        c.Parser = b;
        return new b
    }();
"undefined" !== typeof require && "undefined" !== typeof exports && (exports.parser = g_parser, exports.Parser = g_parser.Parser, exports.parse = function () {
    return g_parser.parse.apply(g_parser, arguments)
}, exports.main = function (b) {
    if (!b[1]) throw Error("Usage: " + b[0] + " FILE");
    b = typeof process !== "undefined" ? require("fs").readFileSync(require("path").resolve(b[1]), "utf8") : require("file").path(require("file").cwd()).join(b[1]).read({
        charset: "utf-8"
    });
    return exports.parser.parse(b)
}, "undefined" !== typeof module && require.main ===
    module && exports.main("undefined" !== typeof process ? process.argv.slice(1) : require("system").args));

function Exception(b) {
    console.log(b)
}
var BlockGen = {
    _fnStack: [{
        locals: [],
        params: []
    }],
    pushFunction: function (b) {
        this._fnStack.push(b)
    },
    peekFunction: function () {
        return this._fnStack.length > 0 ? this._fnStack[this._fnStack.length - 1] : null
    },
    popFunction: function () {
        return this._fnStack.pop()
    },
    stackSize: function () {
        return this._fnStack.length
    },
    generate: function (b) {
        this.reset();
        b.generate()
    },
    reset: function () {
        this._fnStack.length = 0;
        this._fnStack.push({
            locals: [],
            params: []
        });
        this._sprites.length = 0;
        this._background = {
            variables: {}
        };
        this._inSprite = false
    },
    _inSprite: !1,
    _background: {
        variables: {}
    },
    _sprites: [],
    startSprite: function () {
        this._sprites.push({
            variables: {}
        });
        this._inSprite = true
    },
    endSprite: function () {
        this._inSprite = false
    },
    getSprite: function () {
        return this._inSprite ? this._sprites[this._sprites.length - 1] : this._background
    },
    getBackground: function () {
        return this._background
    },
    getAllSprites: function () {
        return this._sprites
    }
};